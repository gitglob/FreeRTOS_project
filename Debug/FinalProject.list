
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008114  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000037c  080082b4  080082b4  000182b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008630  08008630  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008630  08008630  00018630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008638  08008638  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008638  08008638  00018638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800863c  0800863c  0001863c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000413c  20000074  080086b4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200041b0  080086b4  000241b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015179  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f1c  00000000  00000000  0003521d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  00038140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  000393a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179e1  00000000  00000000  0003a4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014324  00000000  00000000  00051ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096809  00000000  00000000  000661ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fc9f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000518c  00000000  00000000  000fca48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800829c 	.word	0x0800829c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800829c 	.word	0x0800829c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	; 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2iz>:
 800087c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000880:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000884:	d215      	bcs.n	80008b2 <__aeabi_d2iz+0x36>
 8000886:	d511      	bpl.n	80008ac <__aeabi_d2iz+0x30>
 8000888:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800088c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000890:	d912      	bls.n	80008b8 <__aeabi_d2iz+0x3c>
 8000892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000896:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800089a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800089e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008a2:	fa23 f002 	lsr.w	r0, r3, r2
 80008a6:	bf18      	it	ne
 80008a8:	4240      	negne	r0, r0
 80008aa:	4770      	bx	lr
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	4770      	bx	lr
 80008b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008b6:	d105      	bne.n	80008c4 <__aeabi_d2iz+0x48>
 80008b8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008bc:	bf08      	it	eq
 80008be:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008c2:	4770      	bx	lr
 80008c4:	f04f 0000 	mov.w	r0, #0
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop

080008cc <__aeabi_uldivmod>:
 80008cc:	b953      	cbnz	r3, 80008e4 <__aeabi_uldivmod+0x18>
 80008ce:	b94a      	cbnz	r2, 80008e4 <__aeabi_uldivmod+0x18>
 80008d0:	2900      	cmp	r1, #0
 80008d2:	bf08      	it	eq
 80008d4:	2800      	cmpeq	r0, #0
 80008d6:	bf1c      	itt	ne
 80008d8:	f04f 31ff 	movne.w	r1, #4294967295
 80008dc:	f04f 30ff 	movne.w	r0, #4294967295
 80008e0:	f000 b974 	b.w	8000bcc <__aeabi_idiv0>
 80008e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ec:	f000 f806 	bl	80008fc <__udivmoddi4>
 80008f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f8:	b004      	add	sp, #16
 80008fa:	4770      	bx	lr

080008fc <__udivmoddi4>:
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	9d08      	ldr	r5, [sp, #32]
 8000902:	4604      	mov	r4, r0
 8000904:	468e      	mov	lr, r1
 8000906:	2b00      	cmp	r3, #0
 8000908:	d14d      	bne.n	80009a6 <__udivmoddi4+0xaa>
 800090a:	428a      	cmp	r2, r1
 800090c:	4694      	mov	ip, r2
 800090e:	d969      	bls.n	80009e4 <__udivmoddi4+0xe8>
 8000910:	fab2 f282 	clz	r2, r2
 8000914:	b152      	cbz	r2, 800092c <__udivmoddi4+0x30>
 8000916:	fa01 f302 	lsl.w	r3, r1, r2
 800091a:	f1c2 0120 	rsb	r1, r2, #32
 800091e:	fa20 f101 	lsr.w	r1, r0, r1
 8000922:	fa0c fc02 	lsl.w	ip, ip, r2
 8000926:	ea41 0e03 	orr.w	lr, r1, r3
 800092a:	4094      	lsls	r4, r2
 800092c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000930:	0c21      	lsrs	r1, r4, #16
 8000932:	fbbe f6f8 	udiv	r6, lr, r8
 8000936:	fa1f f78c 	uxth.w	r7, ip
 800093a:	fb08 e316 	mls	r3, r8, r6, lr
 800093e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000942:	fb06 f107 	mul.w	r1, r6, r7
 8000946:	4299      	cmp	r1, r3
 8000948:	d90a      	bls.n	8000960 <__udivmoddi4+0x64>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000952:	f080 811f 	bcs.w	8000b94 <__udivmoddi4+0x298>
 8000956:	4299      	cmp	r1, r3
 8000958:	f240 811c 	bls.w	8000b94 <__udivmoddi4+0x298>
 800095c:	3e02      	subs	r6, #2
 800095e:	4463      	add	r3, ip
 8000960:	1a5b      	subs	r3, r3, r1
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb3 f0f8 	udiv	r0, r3, r8
 8000968:	fb08 3310 	mls	r3, r8, r0, r3
 800096c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000970:	fb00 f707 	mul.w	r7, r0, r7
 8000974:	42a7      	cmp	r7, r4
 8000976:	d90a      	bls.n	800098e <__udivmoddi4+0x92>
 8000978:	eb1c 0404 	adds.w	r4, ip, r4
 800097c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000980:	f080 810a 	bcs.w	8000b98 <__udivmoddi4+0x29c>
 8000984:	42a7      	cmp	r7, r4
 8000986:	f240 8107 	bls.w	8000b98 <__udivmoddi4+0x29c>
 800098a:	4464      	add	r4, ip
 800098c:	3802      	subs	r0, #2
 800098e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000992:	1be4      	subs	r4, r4, r7
 8000994:	2600      	movs	r6, #0
 8000996:	b11d      	cbz	r5, 80009a0 <__udivmoddi4+0xa4>
 8000998:	40d4      	lsrs	r4, r2
 800099a:	2300      	movs	r3, #0
 800099c:	e9c5 4300 	strd	r4, r3, [r5]
 80009a0:	4631      	mov	r1, r6
 80009a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d909      	bls.n	80009be <__udivmoddi4+0xc2>
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	f000 80ef 	beq.w	8000b8e <__udivmoddi4+0x292>
 80009b0:	2600      	movs	r6, #0
 80009b2:	e9c5 0100 	strd	r0, r1, [r5]
 80009b6:	4630      	mov	r0, r6
 80009b8:	4631      	mov	r1, r6
 80009ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009be:	fab3 f683 	clz	r6, r3
 80009c2:	2e00      	cmp	r6, #0
 80009c4:	d14a      	bne.n	8000a5c <__udivmoddi4+0x160>
 80009c6:	428b      	cmp	r3, r1
 80009c8:	d302      	bcc.n	80009d0 <__udivmoddi4+0xd4>
 80009ca:	4282      	cmp	r2, r0
 80009cc:	f200 80f9 	bhi.w	8000bc2 <__udivmoddi4+0x2c6>
 80009d0:	1a84      	subs	r4, r0, r2
 80009d2:	eb61 0303 	sbc.w	r3, r1, r3
 80009d6:	2001      	movs	r0, #1
 80009d8:	469e      	mov	lr, r3
 80009da:	2d00      	cmp	r5, #0
 80009dc:	d0e0      	beq.n	80009a0 <__udivmoddi4+0xa4>
 80009de:	e9c5 4e00 	strd	r4, lr, [r5]
 80009e2:	e7dd      	b.n	80009a0 <__udivmoddi4+0xa4>
 80009e4:	b902      	cbnz	r2, 80009e8 <__udivmoddi4+0xec>
 80009e6:	deff      	udf	#255	; 0xff
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	2a00      	cmp	r2, #0
 80009ee:	f040 8092 	bne.w	8000b16 <__udivmoddi4+0x21a>
 80009f2:	eba1 010c 	sub.w	r1, r1, ip
 80009f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009fa:	fa1f fe8c 	uxth.w	lr, ip
 80009fe:	2601      	movs	r6, #1
 8000a00:	0c20      	lsrs	r0, r4, #16
 8000a02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a06:	fb07 1113 	mls	r1, r7, r3, r1
 8000a0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a0e:	fb0e f003 	mul.w	r0, lr, r3
 8000a12:	4288      	cmp	r0, r1
 8000a14:	d908      	bls.n	8000a28 <__udivmoddi4+0x12c>
 8000a16:	eb1c 0101 	adds.w	r1, ip, r1
 8000a1a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a1e:	d202      	bcs.n	8000a26 <__udivmoddi4+0x12a>
 8000a20:	4288      	cmp	r0, r1
 8000a22:	f200 80cb 	bhi.w	8000bbc <__udivmoddi4+0x2c0>
 8000a26:	4643      	mov	r3, r8
 8000a28:	1a09      	subs	r1, r1, r0
 8000a2a:	b2a4      	uxth	r4, r4
 8000a2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a30:	fb07 1110 	mls	r1, r7, r0, r1
 8000a34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a38:	fb0e fe00 	mul.w	lr, lr, r0
 8000a3c:	45a6      	cmp	lr, r4
 8000a3e:	d908      	bls.n	8000a52 <__udivmoddi4+0x156>
 8000a40:	eb1c 0404 	adds.w	r4, ip, r4
 8000a44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a48:	d202      	bcs.n	8000a50 <__udivmoddi4+0x154>
 8000a4a:	45a6      	cmp	lr, r4
 8000a4c:	f200 80bb 	bhi.w	8000bc6 <__udivmoddi4+0x2ca>
 8000a50:	4608      	mov	r0, r1
 8000a52:	eba4 040e 	sub.w	r4, r4, lr
 8000a56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a5a:	e79c      	b.n	8000996 <__udivmoddi4+0x9a>
 8000a5c:	f1c6 0720 	rsb	r7, r6, #32
 8000a60:	40b3      	lsls	r3, r6
 8000a62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a72:	431c      	orrs	r4, r3
 8000a74:	40f9      	lsrs	r1, r7
 8000a76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a82:	0c20      	lsrs	r0, r4, #16
 8000a84:	fa1f fe8c 	uxth.w	lr, ip
 8000a88:	fb09 1118 	mls	r1, r9, r8, r1
 8000a8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a90:	fb08 f00e 	mul.w	r0, r8, lr
 8000a94:	4288      	cmp	r0, r1
 8000a96:	fa02 f206 	lsl.w	r2, r2, r6
 8000a9a:	d90b      	bls.n	8000ab4 <__udivmoddi4+0x1b8>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000aa4:	f080 8088 	bcs.w	8000bb8 <__udivmoddi4+0x2bc>
 8000aa8:	4288      	cmp	r0, r1
 8000aaa:	f240 8085 	bls.w	8000bb8 <__udivmoddi4+0x2bc>
 8000aae:	f1a8 0802 	sub.w	r8, r8, #2
 8000ab2:	4461      	add	r1, ip
 8000ab4:	1a09      	subs	r1, r1, r0
 8000ab6:	b2a4      	uxth	r4, r4
 8000ab8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000abc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ac0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ac4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ac8:	458e      	cmp	lr, r1
 8000aca:	d908      	bls.n	8000ade <__udivmoddi4+0x1e2>
 8000acc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ad0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ad4:	d26c      	bcs.n	8000bb0 <__udivmoddi4+0x2b4>
 8000ad6:	458e      	cmp	lr, r1
 8000ad8:	d96a      	bls.n	8000bb0 <__udivmoddi4+0x2b4>
 8000ada:	3802      	subs	r0, #2
 8000adc:	4461      	add	r1, ip
 8000ade:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ae2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ae6:	eba1 010e 	sub.w	r1, r1, lr
 8000aea:	42a1      	cmp	r1, r4
 8000aec:	46c8      	mov	r8, r9
 8000aee:	46a6      	mov	lr, r4
 8000af0:	d356      	bcc.n	8000ba0 <__udivmoddi4+0x2a4>
 8000af2:	d053      	beq.n	8000b9c <__udivmoddi4+0x2a0>
 8000af4:	b15d      	cbz	r5, 8000b0e <__udivmoddi4+0x212>
 8000af6:	ebb3 0208 	subs.w	r2, r3, r8
 8000afa:	eb61 010e 	sbc.w	r1, r1, lr
 8000afe:	fa01 f707 	lsl.w	r7, r1, r7
 8000b02:	fa22 f306 	lsr.w	r3, r2, r6
 8000b06:	40f1      	lsrs	r1, r6
 8000b08:	431f      	orrs	r7, r3
 8000b0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b0e:	2600      	movs	r6, #0
 8000b10:	4631      	mov	r1, r6
 8000b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b16:	f1c2 0320 	rsb	r3, r2, #32
 8000b1a:	40d8      	lsrs	r0, r3
 8000b1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b20:	fa21 f303 	lsr.w	r3, r1, r3
 8000b24:	4091      	lsls	r1, r2
 8000b26:	4301      	orrs	r1, r0
 8000b28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2c:	fa1f fe8c 	uxth.w	lr, ip
 8000b30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b34:	fb07 3610 	mls	r6, r7, r0, r3
 8000b38:	0c0b      	lsrs	r3, r1, #16
 8000b3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b42:	429e      	cmp	r6, r3
 8000b44:	fa04 f402 	lsl.w	r4, r4, r2
 8000b48:	d908      	bls.n	8000b5c <__udivmoddi4+0x260>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b52:	d22f      	bcs.n	8000bb4 <__udivmoddi4+0x2b8>
 8000b54:	429e      	cmp	r6, r3
 8000b56:	d92d      	bls.n	8000bb4 <__udivmoddi4+0x2b8>
 8000b58:	3802      	subs	r0, #2
 8000b5a:	4463      	add	r3, ip
 8000b5c:	1b9b      	subs	r3, r3, r6
 8000b5e:	b289      	uxth	r1, r1
 8000b60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b64:	fb07 3316 	mls	r3, r7, r6, r3
 8000b68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b70:	428b      	cmp	r3, r1
 8000b72:	d908      	bls.n	8000b86 <__udivmoddi4+0x28a>
 8000b74:	eb1c 0101 	adds.w	r1, ip, r1
 8000b78:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b7c:	d216      	bcs.n	8000bac <__udivmoddi4+0x2b0>
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d914      	bls.n	8000bac <__udivmoddi4+0x2b0>
 8000b82:	3e02      	subs	r6, #2
 8000b84:	4461      	add	r1, ip
 8000b86:	1ac9      	subs	r1, r1, r3
 8000b88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b8c:	e738      	b.n	8000a00 <__udivmoddi4+0x104>
 8000b8e:	462e      	mov	r6, r5
 8000b90:	4628      	mov	r0, r5
 8000b92:	e705      	b.n	80009a0 <__udivmoddi4+0xa4>
 8000b94:	4606      	mov	r6, r0
 8000b96:	e6e3      	b.n	8000960 <__udivmoddi4+0x64>
 8000b98:	4618      	mov	r0, r3
 8000b9a:	e6f8      	b.n	800098e <__udivmoddi4+0x92>
 8000b9c:	454b      	cmp	r3, r9
 8000b9e:	d2a9      	bcs.n	8000af4 <__udivmoddi4+0x1f8>
 8000ba0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ba4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ba8:	3801      	subs	r0, #1
 8000baa:	e7a3      	b.n	8000af4 <__udivmoddi4+0x1f8>
 8000bac:	4646      	mov	r6, r8
 8000bae:	e7ea      	b.n	8000b86 <__udivmoddi4+0x28a>
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	e794      	b.n	8000ade <__udivmoddi4+0x1e2>
 8000bb4:	4640      	mov	r0, r8
 8000bb6:	e7d1      	b.n	8000b5c <__udivmoddi4+0x260>
 8000bb8:	46d0      	mov	r8, sl
 8000bba:	e77b      	b.n	8000ab4 <__udivmoddi4+0x1b8>
 8000bbc:	3b02      	subs	r3, #2
 8000bbe:	4461      	add	r1, ip
 8000bc0:	e732      	b.n	8000a28 <__udivmoddi4+0x12c>
 8000bc2:	4630      	mov	r0, r6
 8000bc4:	e709      	b.n	80009da <__udivmoddi4+0xde>
 8000bc6:	4464      	add	r4, ip
 8000bc8:	3802      	subs	r0, #2
 8000bca:	e742      	b.n	8000a52 <__udivmoddi4+0x156>

08000bcc <__aeabi_idiv0>:
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4a07      	ldr	r2, [pc, #28]	; (8000bfc <vApplicationGetIdleTaskMemory+0x2c>)
 8000be0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	4a06      	ldr	r2, [pc, #24]	; (8000c00 <vApplicationGetIdleTaskMemory+0x30>)
 8000be6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2280      	movs	r2, #128	; 0x80
 8000bec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000bee:	bf00      	nop
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000090 	.word	0x20000090
 8000c00:	200000e4 	.word	0x200000e4

08000c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c04:	b5b0      	push	{r4, r5, r7, lr}
 8000c06:	b0da      	sub	sp, #360	; 0x168
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0a:	f001 f92d 	bl	8001e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c0e:	f000 f965 	bl	8000edc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c12:	f000 fa03 	bl	800101c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c16:	f000 f9d7 	bl	8000fc8 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000c1a:	f000 f9c9 	bl	8000fb0 <MX_NVIC_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of PrintMtx */
  osMutexDef(PrintMtx);
 8000c1e:	2300      	movs	r3, #0
 8000c20:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8000c24:	2300      	movs	r3, #0
 8000c26:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  PrintMtxHandle = osMutexCreate(osMutex(PrintMtx));
 8000c2a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f003 fda4 	bl	800477c <osMutexCreate>
 8000c34:	4603      	mov	r3, r0
 8000c36:	4a8c      	ldr	r2, [pc, #560]	; (8000e68 <main+0x264>)
 8000c38:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of VelSemaphore */
  osSemaphoreDef(VelSemaphore);
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000c40:	2300      	movs	r3, #0
 8000c42:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  VelSemaphoreHandle = osSemaphoreCreate(osSemaphore(VelSemaphore), 1);
 8000c46:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f003 fe31 	bl	80048b4 <osSemaphoreCreate>
 8000c52:	4603      	mov	r3, r0
 8000c54:	4a85      	ldr	r2, [pc, #532]	; (8000e6c <main+0x268>)
 8000c56:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of UartQueue */
  osMessageQDef(UartQueue, 1, int8_t);
 8000c58:	4b85      	ldr	r3, [pc, #532]	; (8000e70 <main+0x26c>)
 8000c5a:	f507 74a4 	add.w	r4, r7, #328	; 0x148
 8000c5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UartQueueHandle = osMessageCreate(osMessageQ(UartQueue), NULL);
 8000c64:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f003 fed8 	bl	8004a20 <osMessageCreate>
 8000c70:	4603      	mov	r3, r0
 8000c72:	4a80      	ldr	r2, [pc, #512]	; (8000e74 <main+0x270>)
 8000c74:	6013      	str	r3, [r2, #0]

  /* definition and creation of ImuQueue */
  osMessageQDef(ImuQueue, 1, ImuData);
 8000c76:	4b80      	ldr	r3, [pc, #512]	; (8000e78 <main+0x274>)
 8000c78:	f507 749c 	add.w	r4, r7, #312	; 0x138
 8000c7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ImuQueueHandle = osMessageCreate(osMessageQ(ImuQueue), NULL);
 8000c82:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f003 fec9 	bl	8004a20 <osMessageCreate>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	4a7a      	ldr	r2, [pc, #488]	; (8000e7c <main+0x278>)
 8000c92:	6013      	str	r3, [r2, #0]

  /* definition and creation of GpsQueue */
  osMessageQDef(GpsQueue, 1, GpsData);
 8000c94:	4b7a      	ldr	r3, [pc, #488]	; (8000e80 <main+0x27c>)
 8000c96:	f507 7494 	add.w	r4, r7, #296	; 0x128
 8000c9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  GpsQueueHandle = osMessageCreate(osMessageQ(GpsQueue), NULL);
 8000ca0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f003 feba 	bl	8004a20 <osMessageCreate>
 8000cac:	4603      	mov	r3, r0
 8000cae:	4a75      	ldr	r2, [pc, #468]	; (8000e84 <main+0x280>)
 8000cb0:	6013      	str	r3, [r2, #0]

  /* definition and creation of ButtonQueue */
  osMessageQDef(ButtonQueue, 1, uint8_t);
 8000cb2:	4b6f      	ldr	r3, [pc, #444]	; (8000e70 <main+0x26c>)
 8000cb4:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8000cb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ButtonQueueHandle = osMessageCreate(osMessageQ(ButtonQueue), NULL);
 8000cbe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f003 feab 	bl	8004a20 <osMessageCreate>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	4a6e      	ldr	r2, [pc, #440]	; (8000e88 <main+0x284>)
 8000cce:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ImuTask */
  osThreadDef(ImuTask, StartImuTask, osPriorityLow, 0, 128);
 8000cd0:	4b6e      	ldr	r3, [pc, #440]	; (8000e8c <main+0x288>)
 8000cd2:	f107 04fc 	add.w	r4, r7, #252	; 0xfc
 8000cd6:	461d      	mov	r5, r3
 8000cd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cdc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ce0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ImuTaskHandle = osThreadCreate(osThread(ImuTask), NULL);
 8000ce4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f003 fc59 	bl	80045a2 <osThreadCreate>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	4a67      	ldr	r2, [pc, #412]	; (8000e90 <main+0x28c>)
 8000cf4:	6013      	str	r3, [r2, #0]

  /* definition and creation of GpsTask */
  osThreadDef(GpsTask, StartGpsTask, osPriorityLow, 0, 128);
 8000cf6:	4b67      	ldr	r3, [pc, #412]	; (8000e94 <main+0x290>)
 8000cf8:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 8000cfc:	461d      	mov	r5, r3
 8000cfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GpsTaskHandle = osThreadCreate(osThread(GpsTask), NULL);
 8000d0a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4618      	mov	r0, r3
 8000d12:	f003 fc46 	bl	80045a2 <osThreadCreate>
 8000d16:	4603      	mov	r3, r0
 8000d18:	4a5f      	ldr	r2, [pc, #380]	; (8000e98 <main+0x294>)
 8000d1a:	6013      	str	r3, [r2, #0]

  /* definition and creation of KFTask */
  osThreadDef(KFTask, StartKFTask, osPriorityLow, 0, 128);
 8000d1c:	4b5f      	ldr	r3, [pc, #380]	; (8000e9c <main+0x298>)
 8000d1e:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8000d22:	461d      	mov	r5, r3
 8000d24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  KFTaskHandle = osThreadCreate(osThread(KFTask), NULL);
 8000d30:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f003 fc33 	bl	80045a2 <osThreadCreate>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	4a58      	ldr	r2, [pc, #352]	; (8000ea0 <main+0x29c>)
 8000d40:	6013      	str	r3, [r2, #0]

  /* definition and creation of RadarTask */
  osThreadDef(RadarTask, StartRadarTask, osPriorityLow, 0, 128);
 8000d42:	4b58      	ldr	r3, [pc, #352]	; (8000ea4 <main+0x2a0>)
 8000d44:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000d48:	461d      	mov	r5, r3
 8000d4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RadarTaskHandle = osThreadCreate(osThread(RadarTask), NULL);
 8000d56:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f003 fc20 	bl	80045a2 <osThreadCreate>
 8000d62:	4603      	mov	r3, r0
 8000d64:	4a50      	ldr	r2, [pc, #320]	; (8000ea8 <main+0x2a4>)
 8000d66:	6013      	str	r3, [r2, #0]

  /* definition and creation of ExButtonIntTask */
  osThreadDef(ExButtonIntTask, StartExButtonIntTask, osPriorityHigh, 0, 128);
 8000d68:	4b50      	ldr	r3, [pc, #320]	; (8000eac <main+0x2a8>)
 8000d6a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000d6e:	461d      	mov	r5, r3
 8000d70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ExButtonIntTaskHandle = osThreadCreate(osThread(ExButtonIntTask), NULL);
 8000d7c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f003 fc0d 	bl	80045a2 <osThreadCreate>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	4a49      	ldr	r2, [pc, #292]	; (8000eb0 <main+0x2ac>)
 8000d8c:	6013      	str	r3, [r2, #0]

  /* definition and creation of LcdTask */
  osThreadDef(LcdTask, StartLcdTask, osPriorityLow, 0, 128);
 8000d8e:	4b49      	ldr	r3, [pc, #292]	; (8000eb4 <main+0x2b0>)
 8000d90:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000d94:	461d      	mov	r5, r3
 8000d96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LcdTaskHandle = osThreadCreate(osThread(LcdTask), NULL);
 8000da2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f003 fbfa 	bl	80045a2 <osThreadCreate>
 8000dae:	4603      	mov	r3, r0
 8000db0:	4a41      	ldr	r2, [pc, #260]	; (8000eb8 <main+0x2b4>)
 8000db2:	6013      	str	r3, [r2, #0]

  /* definition and creation of MotorTask */
  osThreadDef(MotorTask, StartMotorTask, osPriorityAboveNormal, 0, 128);
 8000db4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000db8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000dbc:	4a3f      	ldr	r2, [pc, #252]	; (8000ebc <main+0x2b8>)
 8000dbe:	461c      	mov	r4, r3
 8000dc0:	4615      	mov	r5, r2
 8000dc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotorTaskHandle = osThreadCreate(osThread(MotorTask), NULL);
 8000dce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f003 fbe4 	bl	80045a2 <osThreadCreate>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	4a38      	ldr	r2, [pc, #224]	; (8000ec0 <main+0x2bc>)
 8000dde:	6013      	str	r3, [r2, #0]

  /* definition and creation of MainTask */
  osThreadDef(MainTask, StartMainTask, osPriorityNormal, 0, 128);
 8000de0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000de4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000de8:	4a36      	ldr	r2, [pc, #216]	; (8000ec4 <main+0x2c0>)
 8000dea:	461c      	mov	r4, r3
 8000dec:	4615      	mov	r5, r2
 8000dee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000df0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000df2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000df6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 8000dfa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f003 fbce 	bl	80045a2 <osThreadCreate>
 8000e06:	4603      	mov	r3, r0
 8000e08:	4a2f      	ldr	r2, [pc, #188]	; (8000ec8 <main+0x2c4>)
 8000e0a:	6013      	str	r3, [r2, #0]

  /* definition and creation of ObjectDetectTas */
  osThreadDef(ObjectDetectTas, StartObjectDetectTask, osPriorityHigh, 0, 128);
 8000e0c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000e10:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8000e14:	4a2d      	ldr	r2, [pc, #180]	; (8000ecc <main+0x2c8>)
 8000e16:	461c      	mov	r4, r3
 8000e18:	4615      	mov	r5, r2
 8000e1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ObjectDetectTasHandle = osThreadCreate(osThread(ObjectDetectTas), NULL);
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f003 fbb8 	bl	80045a2 <osThreadCreate>
 8000e32:	4603      	mov	r3, r0
 8000e34:	4a26      	ldr	r2, [pc, #152]	; (8000ed0 <main+0x2cc>)
 8000e36:	6013      	str	r3, [r2, #0]

  /* definition and creation of UartTask */
  osThreadDef(UartTask, StartUartTask, osPriorityAboveNormal, 0, 128);
 8000e38:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000e3c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8000e40:	4a24      	ldr	r2, [pc, #144]	; (8000ed4 <main+0x2d0>)
 8000e42:	461c      	mov	r4, r3
 8000e44:	4615      	mov	r5, r2
 8000e46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UartTaskHandle = osThreadCreate(osThread(UartTask), NULL);
 8000e52:	463b      	mov	r3, r7
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f003 fba3 	bl	80045a2 <osThreadCreate>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	4a1e      	ldr	r2, [pc, #120]	; (8000ed8 <main+0x2d4>)
 8000e60:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000e62:	f003 fb87 	bl	8004574 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <main+0x262>
 8000e68:	20000360 	.word	0x20000360
 8000e6c:	20000364 	.word	0x20000364
 8000e70:	08008324 	.word	0x08008324
 8000e74:	20000350 	.word	0x20000350
 8000e78:	08008334 	.word	0x08008334
 8000e7c:	20000354 	.word	0x20000354
 8000e80:	08008344 	.word	0x08008344
 8000e84:	20000358 	.word	0x20000358
 8000e88:	2000035c 	.word	0x2000035c
 8000e8c:	08008354 	.word	0x08008354
 8000e90:	20000328 	.word	0x20000328
 8000e94:	08008370 	.word	0x08008370
 8000e98:	2000032c 	.word	0x2000032c
 8000e9c:	0800838c 	.word	0x0800838c
 8000ea0:	20000330 	.word	0x20000330
 8000ea4:	080083a8 	.word	0x080083a8
 8000ea8:	20000334 	.word	0x20000334
 8000eac:	080083c4 	.word	0x080083c4
 8000eb0:	20000338 	.word	0x20000338
 8000eb4:	080083e0 	.word	0x080083e0
 8000eb8:	2000033c 	.word	0x2000033c
 8000ebc:	080083fc 	.word	0x080083fc
 8000ec0:	20000340 	.word	0x20000340
 8000ec4:	08008418 	.word	0x08008418
 8000ec8:	20000344 	.word	0x20000344
 8000ecc:	08008434 	.word	0x08008434
 8000ed0:	20000348 	.word	0x20000348
 8000ed4:	08008450 	.word	0x08008450
 8000ed8:	2000034c 	.word	0x2000034c

08000edc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b094      	sub	sp, #80	; 0x50
 8000ee0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee2:	f107 0320 	add.w	r3, r7, #32
 8000ee6:	2230      	movs	r2, #48	; 0x30
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f006 fd6e 	bl	80079cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f00:	2300      	movs	r3, #0
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	4b28      	ldr	r3, [pc, #160]	; (8000fa8 <SystemClock_Config+0xcc>)
 8000f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f08:	4a27      	ldr	r2, [pc, #156]	; (8000fa8 <SystemClock_Config+0xcc>)
 8000f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f10:	4b25      	ldr	r3, [pc, #148]	; (8000fa8 <SystemClock_Config+0xcc>)
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	4b22      	ldr	r3, [pc, #136]	; (8000fac <SystemClock_Config+0xd0>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a21      	ldr	r2, [pc, #132]	; (8000fac <SystemClock_Config+0xd0>)
 8000f26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f2a:	6013      	str	r3, [r2, #0]
 8000f2c:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <SystemClock_Config+0xd0>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f34:	607b      	str	r3, [r7, #4]
 8000f36:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f40:	2310      	movs	r3, #16
 8000f42:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f44:	2302      	movs	r3, #2
 8000f46:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f4c:	2310      	movs	r3, #16
 8000f4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f50:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f54:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f56:	2304      	movs	r3, #4
 8000f58:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f5e:	f107 0320 	add.w	r3, r7, #32
 8000f62:	4618      	mov	r0, r3
 8000f64:	f001 fb1e 	bl	80025a4 <HAL_RCC_OscConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f6e:	f000 fdf9 	bl	8001b64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f72:	230f      	movs	r3, #15
 8000f74:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f76:	2302      	movs	r3, #2
 8000f78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f82:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f88:	f107 030c 	add.w	r3, r7, #12
 8000f8c:	2102      	movs	r1, #2
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f001 fd80 	bl	8002a94 <HAL_RCC_ClockConfig>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f9a:	f000 fde3 	bl	8001b64 <Error_Handler>
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	3750      	adds	r7, #80	; 0x50
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40007000 	.word	0x40007000

08000fb0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2105      	movs	r1, #5
 8000fb8:	2028      	movs	r0, #40	; 0x28
 8000fba:	f001 f84f 	bl	800205c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fbe:	2028      	movs	r0, #40	; 0x28
 8000fc0:	f001 f868 	bl	8002094 <HAL_NVIC_EnableIRQ>
}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <MX_USART2_UART_Init+0x4c>)
 8000fce:	4a12      	ldr	r2, [pc, #72]	; (8001018 <MX_USART2_UART_Init+0x50>)
 8000fd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <MX_USART2_UART_Init+0x4c>)
 8000fd4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <MX_USART2_UART_Init+0x4c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <MX_USART2_UART_Init+0x4c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <MX_USART2_UART_Init+0x4c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <MX_USART2_UART_Init+0x4c>)
 8000fee:	220c      	movs	r2, #12
 8000ff0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <MX_USART2_UART_Init+0x4c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <MX_USART2_UART_Init+0x4c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <MX_USART2_UART_Init+0x4c>)
 8001000:	f002 fa1a 	bl	8003438 <HAL_UART_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800100a:	f000 fdab 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200002e4 	.word	0x200002e4
 8001018:	40004400 	.word	0x40004400

0800101c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	4b3f      	ldr	r3, [pc, #252]	; (8001134 <MX_GPIO_Init+0x118>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a3e      	ldr	r2, [pc, #248]	; (8001134 <MX_GPIO_Init+0x118>)
 800103c:	f043 0304 	orr.w	r3, r3, #4
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b3c      	ldr	r3, [pc, #240]	; (8001134 <MX_GPIO_Init+0x118>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	4b38      	ldr	r3, [pc, #224]	; (8001134 <MX_GPIO_Init+0x118>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a37      	ldr	r2, [pc, #220]	; (8001134 <MX_GPIO_Init+0x118>)
 8001058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b35      	ldr	r3, [pc, #212]	; (8001134 <MX_GPIO_Init+0x118>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	4b31      	ldr	r3, [pc, #196]	; (8001134 <MX_GPIO_Init+0x118>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a30      	ldr	r2, [pc, #192]	; (8001134 <MX_GPIO_Init+0x118>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b2e      	ldr	r3, [pc, #184]	; (8001134 <MX_GPIO_Init+0x118>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	4b2a      	ldr	r3, [pc, #168]	; (8001134 <MX_GPIO_Init+0x118>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a29      	ldr	r2, [pc, #164]	; (8001134 <MX_GPIO_Init+0x118>)
 8001090:	f043 0302 	orr.w	r3, r3, #2
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b27      	ldr	r3, [pc, #156]	; (8001134 <MX_GPIO_Init+0x118>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2120      	movs	r1, #32
 80010a6:	4824      	ldr	r0, [pc, #144]	; (8001138 <MX_GPIO_Init+0x11c>)
 80010a8:	f001 fa30 	bl	800250c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, YellowLed_Pin|RedLed_Pin|GreenLed_Pin|BlueLed_Pin, GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	f24e 0102 	movw	r1, #57346	; 0xe002
 80010b2:	4822      	ldr	r0, [pc, #136]	; (800113c <MX_GPIO_Init+0x120>)
 80010b4:	f001 fa2a 	bl	800250c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010be:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	481c      	ldr	r0, [pc, #112]	; (8001140 <MX_GPIO_Init+0x124>)
 80010d0:	f001 f880 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010d4:	2320      	movs	r3, #32
 80010d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d8:	2301      	movs	r3, #1
 80010da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	4619      	mov	r1, r3
 80010ea:	4813      	ldr	r0, [pc, #76]	; (8001138 <MX_GPIO_Init+0x11c>)
 80010ec:	f001 f872 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : YellowLed_Pin RedLed_Pin GreenLed_Pin BlueLed_Pin */
  GPIO_InitStruct.Pin = YellowLed_Pin|RedLed_Pin|GreenLed_Pin|BlueLed_Pin;
 80010f0:	f24e 0302 	movw	r3, #57346	; 0xe002
 80010f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	480c      	ldr	r0, [pc, #48]	; (800113c <MX_GPIO_Init+0x120>)
 800110a:	f001 f863 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ExButton_Pin */
  GPIO_InitStruct.Pin = ExButton_Pin;
 800110e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001112:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001114:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001118:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ExButton_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	4805      	ldr	r0, [pc, #20]	; (800113c <MX_GPIO_Init+0x120>)
 8001126:	f001 f855 	bl	80021d4 <HAL_GPIO_Init>

}
 800112a:	bf00      	nop
 800112c:	3728      	adds	r7, #40	; 0x28
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800
 8001138:	40020000 	.word	0x40020000
 800113c:	40020400 	.word	0x40020400
 8001140:	40020800 	.word	0x40020800

08001144 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// overwrite the HAL_GPIO_EXTI_Callback function
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == ExButton_Pin) {
 800114e:	88fb      	ldrh	r3, [r7, #6]
 8001150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001154:	d105      	bne.n	8001162 <HAL_GPIO_EXTI_Callback+0x1e>
  	osSignalSet(ExButtonIntTaskHandle, SIGNAL_BUTTON_PRESS);
 8001156:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2101      	movs	r1, #1
 800115c:	4618      	mov	r0, r3
 800115e:	f003 fa81 	bl	8004664 <osSignalSet>
  }
  if(GPIO_Pin == B1_Pin) {
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001168:	d105      	bne.n	8001176 <HAL_GPIO_EXTI_Callback+0x32>
  	osSignalSet(ExButtonIntTaskHandle, SIGNAL_BUTTON_PRESS);
 800116a:	4b05      	ldr	r3, [pc, #20]	; (8001180 <HAL_GPIO_EXTI_Callback+0x3c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2101      	movs	r1, #1
 8001170:	4618      	mov	r0, r3
 8001172:	f003 fa77 	bl	8004664 <osSignalSet>
  }
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000338 	.word	0x20000338

08001184 <HAL_UART_RxCpltCallback>:

// interrupt callback method - when the data reception is complete, this is called
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	uint8_t flag; // accelerate -> 1, decelerate -> 0, else -> don't do anything

	 // current UART
	if (huart->Instance == USART2) {
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a3b      	ldr	r2, [pc, #236]	; (8001280 <HAL_UART_RxCpltCallback+0xfc>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d16f      	bne.n	8001276 <HAL_UART_RxCpltCallback+0xf2>
  	// Clear Rx_Buffer prior to use
  	if (Rx_indx == 0) {
 8001196:	4b3b      	ldr	r3, [pc, #236]	; (8001284 <HAL_UART_RxCpltCallback+0x100>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d107      	bne.n	80011ae <HAL_UART_RxCpltCallback+0x2a>
    	// turn on the yellow led
    	HAL_GPIO_WritePin(YellowLed_GPIO_Port, YellowLed_Pin, GPIO_PIN_SET);
 800119e:	2201      	movs	r2, #1
 80011a0:	2102      	movs	r1, #2
 80011a2:	4839      	ldr	r0, [pc, #228]	; (8001288 <HAL_UART_RxCpltCallback+0x104>)
 80011a4:	f001 f9b2 	bl	800250c <HAL_GPIO_WritePin>
    	EmptyBuffer(Rx_Buffer);
 80011a8:	4838      	ldr	r0, [pc, #224]	; (800128c <HAL_UART_RxCpltCallback+0x108>)
 80011aa:	f000 fcab 	bl	8001b04 <EmptyBuffer>
  	}

  	// check for carriage return (ASCII: 13 == \r)
  	if (Rx_byte != 13) {
 80011ae:	4b38      	ldr	r3, [pc, #224]	; (8001290 <HAL_UART_RxCpltCallback+0x10c>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b0d      	cmp	r3, #13
 80011b4:	d00b      	beq.n	80011ce <HAL_UART_RxCpltCallback+0x4a>
  		Rx_Buffer[Rx_indx++] = Rx_byte; // add data to Rx_Buffer
 80011b6:	4b33      	ldr	r3, [pc, #204]	; (8001284 <HAL_UART_RxCpltCallback+0x100>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	1c5a      	adds	r2, r3, #1
 80011bc:	b2d1      	uxtb	r1, r2
 80011be:	4a31      	ldr	r2, [pc, #196]	; (8001284 <HAL_UART_RxCpltCallback+0x100>)
 80011c0:	7011      	strb	r1, [r2, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	4b32      	ldr	r3, [pc, #200]	; (8001290 <HAL_UART_RxCpltCallback+0x10c>)
 80011c6:	7819      	ldrb	r1, [r3, #0]
 80011c8:	4b30      	ldr	r3, [pc, #192]	; (800128c <HAL_UART_RxCpltCallback+0x108>)
 80011ca:	5499      	strb	r1, [r3, r2]
 80011cc:	e048      	b.n	8001260 <HAL_UART_RxCpltCallback+0xdc>
  	} else {
  		Rx_indx = 0;
 80011ce:	4b2d      	ldr	r3, [pc, #180]	; (8001284 <HAL_UART_RxCpltCallback+0x100>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
  		Transfer_cplt = 1; // transfer complete, data is ready
 80011d4:	4b2f      	ldr	r3, [pc, #188]	; (8001294 <HAL_UART_RxCpltCallback+0x110>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	701a      	strb	r2, [r3, #0]

  		// LED trigger phrase
  		if (strcmp(Rx_Buffer, "faster") == 0) {
 80011da:	492f      	ldr	r1, [pc, #188]	; (8001298 <HAL_UART_RxCpltCallback+0x114>)
 80011dc:	482b      	ldr	r0, [pc, #172]	; (800128c <HAL_UART_RxCpltCallback+0x108>)
 80011de:	f7fe ffff 	bl	80001e0 <strcmp>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d106      	bne.n	80011f6 <HAL_UART_RxCpltCallback+0x72>
  			sprintf(msg, "Accelerating!");
 80011e8:	492c      	ldr	r1, [pc, #176]	; (800129c <HAL_UART_RxCpltCallback+0x118>)
 80011ea:	482d      	ldr	r0, [pc, #180]	; (80012a0 <HAL_UART_RxCpltCallback+0x11c>)
 80011ec:	f006 fbf6 	bl	80079dc <siprintf>
  			flag = 1;
 80011f0:	2301      	movs	r3, #1
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	e013      	b.n	800121e <HAL_UART_RxCpltCallback+0x9a>
  		} else if (strcmp(Rx_Buffer, "slower")  == 0) {
 80011f6:	492b      	ldr	r1, [pc, #172]	; (80012a4 <HAL_UART_RxCpltCallback+0x120>)
 80011f8:	4824      	ldr	r0, [pc, #144]	; (800128c <HAL_UART_RxCpltCallback+0x108>)
 80011fa:	f7fe fff1 	bl	80001e0 <strcmp>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d106      	bne.n	8001212 <HAL_UART_RxCpltCallback+0x8e>
  			sprintf(msg, "Decelerating!");
 8001204:	4928      	ldr	r1, [pc, #160]	; (80012a8 <HAL_UART_RxCpltCallback+0x124>)
 8001206:	4826      	ldr	r0, [pc, #152]	; (80012a0 <HAL_UART_RxCpltCallback+0x11c>)
 8001208:	f006 fbe8 	bl	80079dc <siprintf>
  			flag = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	73fb      	strb	r3, [r7, #15]
 8001210:	e005      	b.n	800121e <HAL_UART_RxCpltCallback+0x9a>
  		} else {
  			sprintf(msg, "Unknown command.");
 8001212:	4926      	ldr	r1, [pc, #152]	; (80012ac <HAL_UART_RxCpltCallback+0x128>)
 8001214:	4822      	ldr	r0, [pc, #136]	; (80012a0 <HAL_UART_RxCpltCallback+0x11c>)
 8001216:	f006 fbe1 	bl	80079dc <siprintf>
  			flag = 2;
 800121a:	2302      	movs	r3, #2
 800121c:	73fb      	strb	r3, [r7, #15]
  		}

  		// send to UART
  		HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 800121e:	2364      	movs	r3, #100	; 0x64
 8001220:	2202      	movs	r2, #2
 8001222:	4923      	ldr	r1, [pc, #140]	; (80012b0 <HAL_UART_RxCpltCallback+0x12c>)
 8001224:	4823      	ldr	r0, [pc, #140]	; (80012b4 <HAL_UART_RxCpltCallback+0x130>)
 8001226:	f002 f954 	bl	80034d2 <HAL_UART_Transmit>
  		HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 800122a:	2364      	movs	r3, #100	; 0x64
 800122c:	2228      	movs	r2, #40	; 0x28
 800122e:	491c      	ldr	r1, [pc, #112]	; (80012a0 <HAL_UART_RxCpltCallback+0x11c>)
 8001230:	4820      	ldr	r0, [pc, #128]	; (80012b4 <HAL_UART_RxCpltCallback+0x130>)
 8001232:	f002 f94e 	bl	80034d2 <HAL_UART_Transmit>
  		HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 8001236:	2364      	movs	r3, #100	; 0x64
 8001238:	2202      	movs	r2, #2
 800123a:	491d      	ldr	r1, [pc, #116]	; (80012b0 <HAL_UART_RxCpltCallback+0x12c>)
 800123c:	481d      	ldr	r0, [pc, #116]	; (80012b4 <HAL_UART_RxCpltCallback+0x130>)
 800123e:	f002 f948 	bl	80034d2 <HAL_UART_Transmit>
    	EmptyBuffer(msg);
 8001242:	4817      	ldr	r0, [pc, #92]	; (80012a0 <HAL_UART_RxCpltCallback+0x11c>)
 8001244:	f000 fc5e 	bl	8001b04 <EmptyBuffer>

    	// send flag to the UartThread via a queue
	  	osMessagePut(UartQueueHandle, flag, 100);
 8001248:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <HAL_UART_RxCpltCallback+0x134>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	7bf9      	ldrb	r1, [r7, #15]
 800124e:	2264      	movs	r2, #100	; 0x64
 8001250:	4618      	mov	r0, r3
 8001252:	f003 fc0d 	bl	8004a70 <osMessagePut>

    	// turn off the yellow led
    	HAL_GPIO_WritePin(YellowLed_GPIO_Port, YellowLed_Pin, GPIO_PIN_RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	2102      	movs	r1, #2
 800125a:	480b      	ldr	r0, [pc, #44]	; (8001288 <HAL_UART_RxCpltCallback+0x104>)
 800125c:	f001 f956 	bl	800250c <HAL_GPIO_WritePin>
  	}

  	// activate UART
  	HAL_UART_Receive_IT(&huart2, &Rx_byte, 1);
 8001260:	2201      	movs	r2, #1
 8001262:	490b      	ldr	r1, [pc, #44]	; (8001290 <HAL_UART_RxCpltCallback+0x10c>)
 8001264:	4813      	ldr	r0, [pc, #76]	; (80012b4 <HAL_UART_RxCpltCallback+0x130>)
 8001266:	f002 f9c6 	bl	80035f6 <HAL_UART_Receive_IT>
  	// send to UART
  	HAL_UART_Transmit(&huart2, &Rx_byte, 1, 100);
 800126a:	2364      	movs	r3, #100	; 0x64
 800126c:	2201      	movs	r2, #1
 800126e:	4908      	ldr	r1, [pc, #32]	; (8001290 <HAL_UART_RxCpltCallback+0x10c>)
 8001270:	4810      	ldr	r0, [pc, #64]	; (80012b4 <HAL_UART_RxCpltCallback+0x130>)
 8001272:	f002 f92e 	bl	80034d2 <HAL_UART_Transmit>
	}
}
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40004400 	.word	0x40004400
 8001284:	20000369 	.word	0x20000369
 8001288:	40020400 	.word	0x40020400
 800128c:	2000036c 	.word	0x2000036c
 8001290:	20000368 	.word	0x20000368
 8001294:	2000036a 	.word	0x2000036a
 8001298:	0800846c 	.word	0x0800846c
 800129c:	08008474 	.word	0x08008474
 80012a0:	200003d0 	.word	0x200003d0
 80012a4:	08008484 	.word	0x08008484
 80012a8:	0800848c 	.word	0x0800848c
 80012ac:	0800849c 	.word	0x0800849c
 80012b0:	080084b0 	.word	0x080084b0
 80012b4:	200002e4 	.word	0x200002e4
 80012b8:	20000350 	.word	0x20000350

080012bc <StartImuTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartImuTask */
void StartImuTask(void const * argument)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b090      	sub	sp, #64	; 0x40
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	osMutexWait(PrintMtxHandle, osWaitForever);
 80012c4:	4b23      	ldr	r3, [pc, #140]	; (8001354 <StartImuTask+0x98>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f04f 31ff 	mov.w	r1, #4294967295
 80012cc:	4618      	mov	r0, r3
 80012ce:	f003 fa6d 	bl	80047ac <osMutexWait>
	sprintf(msg, "IMU GO\r\n");
 80012d2:	4921      	ldr	r1, [pc, #132]	; (8001358 <StartImuTask+0x9c>)
 80012d4:	4821      	ldr	r0, [pc, #132]	; (800135c <StartImuTask+0xa0>)
 80012d6:	f006 fb81 	bl	80079dc <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 80012da:	2364      	movs	r3, #100	; 0x64
 80012dc:	2228      	movs	r2, #40	; 0x28
 80012de:	491f      	ldr	r1, [pc, #124]	; (800135c <StartImuTask+0xa0>)
 80012e0:	481f      	ldr	r0, [pc, #124]	; (8001360 <StartImuTask+0xa4>)
 80012e2:	f002 f8f6 	bl	80034d2 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 80012e6:	481d      	ldr	r0, [pc, #116]	; (800135c <StartImuTask+0xa0>)
 80012e8:	f000 fc0c 	bl	8001b04 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <StartImuTask+0x98>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f003 faa9 	bl	8004848 <osMutexRelease>

  /* Infinite loop */
  for(;;)
  {
  	// Get the RTOS kernel tick count
  	uint32_t  t =  osKernelSysTick();
 80012f6:	f003 f944 	bl	8004582 <osKernelSysTick>
 80012fa:	63f8      	str	r0, [r7, #60]	; 0x3c

  	// pseudo-measurements -  we assume that the the IMU gives perfect measurements that indicate that the vehicle moves in a circle with constant speeds
  	LinAcc imu_lin_acc = {0.1, 0.0, 0.0};
 80012fc:	4b19      	ldr	r3, [pc, #100]	; (8001364 <StartImuTask+0xa8>)
 80012fe:	633b      	str	r3, [r7, #48]	; 0x30
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	637b      	str	r3, [r7, #52]	; 0x34
 8001306:	f04f 0300 	mov.w	r3, #0
 800130a:	63bb      	str	r3, [r7, #56]	; 0x38
  	AngVel imu_ang_vel = {0.0, 0.0, 0.2};
 800130c:	f04f 0300 	mov.w	r3, #0
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
 8001312:	f04f 0300 	mov.w	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <StartImuTask+0xac>)
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
  	ImuData imu_readings = {t, imu_lin_acc, imu_ang_vel};
 800131c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001328:	ca07      	ldmia	r2, {r0, r1, r2}
 800132a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800132e:	f107 0318 	add.w	r3, r7, #24
 8001332:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001336:	ca07      	ldmia	r2, {r0, r1, r2}
 8001338:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  	// send the data to the queue
  	osMessagePut(ImuQueueHandle, (uint32_t) &imu_readings, 100);
 800133c:	4b0b      	ldr	r3, [pc, #44]	; (800136c <StartImuTask+0xb0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f107 0108 	add.w	r1, r7, #8
 8001344:	2264      	movs	r2, #100	; 0x64
 8001346:	4618      	mov	r0, r3
 8001348:	f003 fb92 	bl	8004a70 <osMessagePut>

  	osDelay(10); // IMU signal every 0.01 sec
 800134c:	200a      	movs	r0, #10
 800134e:	f003 f974 	bl	800463a <osDelay>
  {
 8001352:	e7d0      	b.n	80012f6 <StartImuTask+0x3a>
 8001354:	20000360 	.word	0x20000360
 8001358:	080084b4 	.word	0x080084b4
 800135c:	200003d0 	.word	0x200003d0
 8001360:	200002e4 	.word	0x200002e4
 8001364:	3dcccccd 	.word	0x3dcccccd
 8001368:	3e4ccccd 	.word	0x3e4ccccd
 800136c:	20000354 	.word	0x20000354

08001370 <StartGpsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGpsTask */
void StartGpsTask(void const * argument)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	; 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGpsTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8001378:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <StartGpsTask+0x74>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f04f 31ff 	mov.w	r1, #4294967295
 8001380:	4618      	mov	r0, r3
 8001382:	f003 fa13 	bl	80047ac <osMutexWait>
	sprintf(msg, "GPS GO\r\n");
 8001386:	4918      	ldr	r1, [pc, #96]	; (80013e8 <StartGpsTask+0x78>)
 8001388:	4818      	ldr	r0, [pc, #96]	; (80013ec <StartGpsTask+0x7c>)
 800138a:	f006 fb27 	bl	80079dc <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 800138e:	2364      	movs	r3, #100	; 0x64
 8001390:	2228      	movs	r2, #40	; 0x28
 8001392:	4916      	ldr	r1, [pc, #88]	; (80013ec <StartGpsTask+0x7c>)
 8001394:	4816      	ldr	r0, [pc, #88]	; (80013f0 <StartGpsTask+0x80>)
 8001396:	f002 f89c 	bl	80034d2 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 800139a:	4814      	ldr	r0, [pc, #80]	; (80013ec <StartGpsTask+0x7c>)
 800139c:	f000 fbb2 	bl	8001b04 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 80013a0:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <StartGpsTask+0x74>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f003 fa4f 	bl	8004848 <osMutexRelease>

	/* Infinite loop */
  for(;;)
  {
  	// Get the RTOS kernel tick count
  	uint32_t  t =  osKernelSysTick();
 80013aa:	f003 f8ea 	bl	8004582 <osKernelSysTick>
 80013ae:	6278      	str	r0, [r7, #36]	; 0x24

  	// GPS pseudo-measurements
  	float gps_x = 1.1;
 80013b0:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <StartGpsTask+0x84>)
 80013b2:	623b      	str	r3, [r7, #32]
  	float gps_y = 2.2;
 80013b4:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <StartGpsTask+0x88>)
 80013b6:	61fb      	str	r3, [r7, #28]
  	float gps_z = 3.3;
 80013b8:	4b10      	ldr	r3, [pc, #64]	; (80013fc <StartGpsTask+0x8c>)
 80013ba:	61bb      	str	r3, [r7, #24]
  	GpsData gps_readings = {t, gps_x, gps_y, gps_z};
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	6a3b      	ldr	r3, [r7, #32]
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	617b      	str	r3, [r7, #20]

  	// send the data to the queue
  	osMessagePut(GpsQueueHandle, (uint32_t) &gps_readings, 100);
 80013cc:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <StartGpsTask+0x90>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f107 0108 	add.w	r1, r7, #8
 80013d4:	2264      	movs	r2, #100	; 0x64
 80013d6:	4618      	mov	r0, r3
 80013d8:	f003 fb4a 	bl	8004a70 <osMessagePut>

  	osDelay(100); // GPS signal every 0.1 sec
 80013dc:	2064      	movs	r0, #100	; 0x64
 80013de:	f003 f92c 	bl	800463a <osDelay>
  {
 80013e2:	e7e2      	b.n	80013aa <StartGpsTask+0x3a>
 80013e4:	20000360 	.word	0x20000360
 80013e8:	080084c0 	.word	0x080084c0
 80013ec:	200003d0 	.word	0x200003d0
 80013f0:	200002e4 	.word	0x200002e4
 80013f4:	3f8ccccd 	.word	0x3f8ccccd
 80013f8:	400ccccd 	.word	0x400ccccd
 80013fc:	40533333 	.word	0x40533333
 8001400:	20000358 	.word	0x20000358

08001404 <StartKFTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartKFTask */
void StartKFTask(void const * argument)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	; 0x28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartKFTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 800140c:	4b16      	ldr	r3, [pc, #88]	; (8001468 <StartKFTask+0x64>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f04f 31ff 	mov.w	r1, #4294967295
 8001414:	4618      	mov	r0, r3
 8001416:	f003 f9c9 	bl	80047ac <osMutexWait>
	sprintf(msg, "KF GO\r\n");
 800141a:	4914      	ldr	r1, [pc, #80]	; (800146c <StartKFTask+0x68>)
 800141c:	4814      	ldr	r0, [pc, #80]	; (8001470 <StartKFTask+0x6c>)
 800141e:	f006 fadd 	bl	80079dc <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001422:	2364      	movs	r3, #100	; 0x64
 8001424:	2228      	movs	r2, #40	; 0x28
 8001426:	4912      	ldr	r1, [pc, #72]	; (8001470 <StartKFTask+0x6c>)
 8001428:	4812      	ldr	r0, [pc, #72]	; (8001474 <StartKFTask+0x70>)
 800142a:	f002 f852 	bl	80034d2 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 800142e:	4810      	ldr	r0, [pc, #64]	; (8001470 <StartKFTask+0x6c>)
 8001430:	f000 fb68 	bl	8001b04 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <StartKFTask+0x64>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f003 fa05 	bl	8004848 <osMutexRelease>

	/* Infinite loop */
  for(;;)
  {
  	// Get the RTOS kernel tick count
  	uint32_t  t =  osKernelSysTick();
 800143e:	f003 f8a0 	bl	8004582 <osKernelSysTick>
 8001442:	6278      	str	r0, [r7, #36]	; 0x24

  	// receive GPS and IMU data from queues
  	osEvent retval_imu = osMessageGet(ImuQueueHandle, 0);
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <StartKFTask+0x74>)
 8001446:	6819      	ldr	r1, [r3, #0]
 8001448:	f107 0318 	add.w	r3, r7, #24
 800144c:	2200      	movs	r2, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f003 fb4e 	bl	8004af0 <osMessageGet>
//  	((ImuData*)retval_imu.value.p)->timestamp;
//  	((ImuData*)retval_imu.value.p)->lin_acc;
//  	((ImuData*)retval_imu.value.p)->ang_vel;
  	osEvent retval_gps = osMessageGet(GpsQueueHandle, 0);
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <StartKFTask+0x78>)
 8001456:	6819      	ldr	r1, [r3, #0]
 8001458:	f107 030c 	add.w	r3, r7, #12
 800145c:	2200      	movs	r2, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f003 fb46 	bl	8004af0 <osMessageGet>
  {
 8001464:	e7eb      	b.n	800143e <StartKFTask+0x3a>
 8001466:	bf00      	nop
 8001468:	20000360 	.word	0x20000360
 800146c:	080084cc 	.word	0x080084cc
 8001470:	200003d0 	.word	0x200003d0
 8001474:	200002e4 	.word	0x200002e4
 8001478:	20000354 	.word	0x20000354
 800147c:	20000358 	.word	0x20000358

08001480 <StartRadarTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRadarTask */
void StartRadarTask(void const * argument)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRadarTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8001488:	4b34      	ldr	r3, [pc, #208]	; (800155c <StartRadarTask+0xdc>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f04f 31ff 	mov.w	r1, #4294967295
 8001490:	4618      	mov	r0, r3
 8001492:	f003 f98b 	bl	80047ac <osMutexWait>
	sprintf(msg, "Radar GO\r\n");
 8001496:	4932      	ldr	r1, [pc, #200]	; (8001560 <StartRadarTask+0xe0>)
 8001498:	4832      	ldr	r0, [pc, #200]	; (8001564 <StartRadarTask+0xe4>)
 800149a:	f006 fa9f 	bl	80079dc <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 800149e:	2364      	movs	r3, #100	; 0x64
 80014a0:	2228      	movs	r2, #40	; 0x28
 80014a2:	4930      	ldr	r1, [pc, #192]	; (8001564 <StartRadarTask+0xe4>)
 80014a4:	4830      	ldr	r0, [pc, #192]	; (8001568 <StartRadarTask+0xe8>)
 80014a6:	f002 f814 	bl	80034d2 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 80014aa:	482e      	ldr	r0, [pc, #184]	; (8001564 <StartRadarTask+0xe4>)
 80014ac:	f000 fb2a 	bl	8001b04 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 80014b0:	4b2a      	ldr	r3, [pc, #168]	; (800155c <StartRadarTask+0xdc>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f003 f9c7 	bl	8004848 <osMutexRelease>

	// counter to periodically pseudo-detect an object
	uint8_t i = 0; // 8 bits means that after 256 it goes back to 0
 80014ba:	2300      	movs	r3, #0
 80014bc:	73fb      	strb	r3, [r7, #15]
  for(;;)
  {
  	// Get the RTOS kernel tick count
  	uint32_t  t =  osKernelSysTick();
 80014be:	f003 f860 	bl	8004582 <osKernelSysTick>
 80014c2:	60b8      	str	r0, [r7, #8]

  	// at iteration #200 and every 256 (2^8) iterations, "detect an object"
  	if (i == 200){
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	2bc8      	cmp	r3, #200	; 0xc8
 80014c8:	d11e      	bne.n	8001508 <StartRadarTask+0x88>
    	osMutexWait(PrintMtxHandle, osWaitForever);
 80014ca:	4b24      	ldr	r3, [pc, #144]	; (800155c <StartRadarTask+0xdc>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f04f 31ff 	mov.w	r1, #4294967295
 80014d2:	4618      	mov	r0, r3
 80014d4:	f003 f96a 	bl	80047ac <osMutexWait>
    	sprintf(msg, "An object!\r\n");
 80014d8:	4924      	ldr	r1, [pc, #144]	; (800156c <StartRadarTask+0xec>)
 80014da:	4822      	ldr	r0, [pc, #136]	; (8001564 <StartRadarTask+0xe4>)
 80014dc:	f006 fa7e 	bl	80079dc <siprintf>
    	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 80014e0:	2364      	movs	r3, #100	; 0x64
 80014e2:	2228      	movs	r2, #40	; 0x28
 80014e4:	491f      	ldr	r1, [pc, #124]	; (8001564 <StartRadarTask+0xe4>)
 80014e6:	4820      	ldr	r0, [pc, #128]	; (8001568 <StartRadarTask+0xe8>)
 80014e8:	f001 fff3 	bl	80034d2 <HAL_UART_Transmit>
    	EmptyBuffer(msg);
 80014ec:	481d      	ldr	r0, [pc, #116]	; (8001564 <StartRadarTask+0xe4>)
 80014ee:	f000 fb09 	bl	8001b04 <EmptyBuffer>
    	osMutexRelease(PrintMtxHandle);
 80014f2:	4b1a      	ldr	r3, [pc, #104]	; (800155c <StartRadarTask+0xdc>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f003 f9a6 	bl	8004848 <osMutexRelease>

    	// when detecting an object, send a signal to the object-detection-handle thread
			osSignalSet(ObjectDetectTasHandle, SIGNAL_OBJECT_DETECT);
 80014fc:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <StartRadarTask+0xf0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2101      	movs	r1, #1
 8001502:	4618      	mov	r0, r3
 8001504:	f003 f8ae 	bl	8004664 <osSignalSet>
  	}

  	// stop detecting the object 50 iterations after you detected it
  	if (i == 250){
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	2bfa      	cmp	r3, #250	; 0xfa
 800150c:	d11e      	bne.n	800154c <StartRadarTask+0xcc>
    	osMutexWait(PrintMtxHandle, osWaitForever);
 800150e:	4b13      	ldr	r3, [pc, #76]	; (800155c <StartRadarTask+0xdc>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f04f 31ff 	mov.w	r1, #4294967295
 8001516:	4618      	mov	r0, r3
 8001518:	f003 f948 	bl	80047ac <osMutexWait>
    	sprintf(msg, "No objects.\r\n");
 800151c:	4915      	ldr	r1, [pc, #84]	; (8001574 <StartRadarTask+0xf4>)
 800151e:	4811      	ldr	r0, [pc, #68]	; (8001564 <StartRadarTask+0xe4>)
 8001520:	f006 fa5c 	bl	80079dc <siprintf>
    	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001524:	2364      	movs	r3, #100	; 0x64
 8001526:	2228      	movs	r2, #40	; 0x28
 8001528:	490e      	ldr	r1, [pc, #56]	; (8001564 <StartRadarTask+0xe4>)
 800152a:	480f      	ldr	r0, [pc, #60]	; (8001568 <StartRadarTask+0xe8>)
 800152c:	f001 ffd1 	bl	80034d2 <HAL_UART_Transmit>
    	EmptyBuffer(msg);
 8001530:	480c      	ldr	r0, [pc, #48]	; (8001564 <StartRadarTask+0xe4>)
 8001532:	f000 fae7 	bl	8001b04 <EmptyBuffer>
    	osMutexRelease(PrintMtxHandle);
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <StartRadarTask+0xdc>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f003 f984 	bl	8004848 <osMutexRelease>

    	// signal to the object-detection thread that we no longer detect an object
			osSignalSet(ObjectDetectTasHandle, SIGNAL_OBJECT_DETECT);
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <StartRadarTask+0xf0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2101      	movs	r1, #1
 8001546:	4618      	mov	r0, r3
 8001548:	f003 f88c 	bl	8004664 <osSignalSet>
  	}

  	// Radar signal every 0.05 sec
    osDelay(50);
 800154c:	2032      	movs	r0, #50	; 0x32
 800154e:	f003 f874 	bl	800463a <osDelay>

    // increment counter
    ++i;
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	3301      	adds	r3, #1
 8001556:	73fb      	strb	r3, [r7, #15]
  {
 8001558:	e7b1      	b.n	80014be <StartRadarTask+0x3e>
 800155a:	bf00      	nop
 800155c:	20000360 	.word	0x20000360
 8001560:	080084d4 	.word	0x080084d4
 8001564:	200003d0 	.word	0x200003d0
 8001568:	200002e4 	.word	0x200002e4
 800156c:	080084e0 	.word	0x080084e0
 8001570:	20000348 	.word	0x20000348
 8001574:	080084f0 	.word	0x080084f0

08001578 <StartExButtonIntTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartExButtonIntTask */
void StartExButtonIntTask(void const * argument)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0
 800157e:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartExButtonIntTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8001580:	4b4a      	ldr	r3, [pc, #296]	; (80016ac <StartExButtonIntTask+0x134>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f04f 31ff 	mov.w	r1, #4294967295
 8001588:	4618      	mov	r0, r3
 800158a:	f003 f90f 	bl	80047ac <osMutexWait>
	sprintf(msg, "ExButton GO\r\n");
 800158e:	4948      	ldr	r1, [pc, #288]	; (80016b0 <StartExButtonIntTask+0x138>)
 8001590:	4848      	ldr	r0, [pc, #288]	; (80016b4 <StartExButtonIntTask+0x13c>)
 8001592:	f006 fa23 	bl	80079dc <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001596:	2364      	movs	r3, #100	; 0x64
 8001598:	2228      	movs	r2, #40	; 0x28
 800159a:	4946      	ldr	r1, [pc, #280]	; (80016b4 <StartExButtonIntTask+0x13c>)
 800159c:	4846      	ldr	r0, [pc, #280]	; (80016b8 <StartExButtonIntTask+0x140>)
 800159e:	f001 ff98 	bl	80034d2 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 80015a2:	4844      	ldr	r0, [pc, #272]	; (80016b4 <StartExButtonIntTask+0x13c>)
 80015a4:	f000 faae 	bl	8001b04 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 80015a8:	4b40      	ldr	r3, [pc, #256]	; (80016ac <StartExButtonIntTask+0x134>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f003 f94b 	bl	8004848 <osMutexRelease>
  /* Infinite loop */
  for(;;)
  {
  	//wait for signal
  	osSignalWait(SIGNAL_BUTTON_PRESS, osWaitForever);
 80015b2:	463b      	mov	r3, r7
 80015b4:	f04f 32ff 	mov.w	r2, #4294967295
 80015b8:	2101      	movs	r1, #1
 80015ba:	4618      	mov	r0, r3
 80015bc:	f003 f892 	bl	80046e4 <osSignalWait>

  	// print to uart
  	sprintf(msg, "Button pressed...\r\n");
 80015c0:	493e      	ldr	r1, [pc, #248]	; (80016bc <StartExButtonIntTask+0x144>)
 80015c2:	483c      	ldr	r0, [pc, #240]	; (80016b4 <StartExButtonIntTask+0x13c>)
 80015c4:	f006 fa0a 	bl	80079dc <siprintf>
  	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 80015c8:	2364      	movs	r3, #100	; 0x64
 80015ca:	2228      	movs	r2, #40	; 0x28
 80015cc:	4939      	ldr	r1, [pc, #228]	; (80016b4 <StartExButtonIntTask+0x13c>)
 80015ce:	483a      	ldr	r0, [pc, #232]	; (80016b8 <StartExButtonIntTask+0x140>)
 80015d0:	f001 ff7f 	bl	80034d2 <HAL_UART_Transmit>
  	EmptyBuffer(msg);
 80015d4:	4837      	ldr	r0, [pc, #220]	; (80016b4 <StartExButtonIntTask+0x13c>)
 80015d6:	f000 fa95 	bl	8001b04 <EmptyBuffer>

  	// toggle led
  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80015da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015de:	4838      	ldr	r0, [pc, #224]	; (80016c0 <StartExButtonIntTask+0x148>)
 80015e0:	f000 ffad 	bl	800253e <HAL_GPIO_TogglePin>
	  GPIO_PinState red_trig = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 80015e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015e8:	4835      	ldr	r0, [pc, #212]	; (80016c0 <StartExButtonIntTask+0x148>)
 80015ea:	f000 ff77 	bl	80024dc <HAL_GPIO_ReadPin>
 80015ee:	4603      	mov	r3, r0
 80015f0:	77fb      	strb	r3, [r7, #31]
	  if (red_trig == GPIO_PIN_SET){
 80015f2:	7ffb      	ldrb	r3, [r7, #31]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d12c      	bne.n	8001652 <StartExButtonIntTask+0xda>
	  	// stop the vehicle!!
	  	osSemaphoreWait(VelSemaphoreHandle, osWaitForever);
 80015f8:	4b32      	ldr	r3, [pc, #200]	; (80016c4 <StartExButtonIntTask+0x14c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001600:	4618      	mov	r0, r3
 8001602:	f003 f989 	bl	8004918 <osSemaphoreWait>
	  	v = 0; // update the velocity references
 8001606:	4b30      	ldr	r3, [pc, #192]	; (80016c8 <StartExButtonIntTask+0x150>)
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]
	  	w = 0;
 800160c:	4b2f      	ldr	r3, [pc, #188]	; (80016cc <StartExButtonIntTask+0x154>)
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
	  	sprintf(msg, "Lin. vel: %d Ang vel: %d\r\n", v, w);
 8001612:	4b2d      	ldr	r3, [pc, #180]	; (80016c8 <StartExButtonIntTask+0x150>)
 8001614:	f993 3000 	ldrsb.w	r3, [r3]
 8001618:	461a      	mov	r2, r3
 800161a:	4b2c      	ldr	r3, [pc, #176]	; (80016cc <StartExButtonIntTask+0x154>)
 800161c:	f993 3000 	ldrsb.w	r3, [r3]
 8001620:	492b      	ldr	r1, [pc, #172]	; (80016d0 <StartExButtonIntTask+0x158>)
 8001622:	4824      	ldr	r0, [pc, #144]	; (80016b4 <StartExButtonIntTask+0x13c>)
 8001624:	f006 f9da 	bl	80079dc <siprintf>
	  	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001628:	2364      	movs	r3, #100	; 0x64
 800162a:	2228      	movs	r2, #40	; 0x28
 800162c:	4921      	ldr	r1, [pc, #132]	; (80016b4 <StartExButtonIntTask+0x13c>)
 800162e:	4822      	ldr	r0, [pc, #136]	; (80016b8 <StartExButtonIntTask+0x140>)
 8001630:	f001 ff4f 	bl	80034d2 <HAL_UART_Transmit>
	  	EmptyBuffer(msg);
 8001634:	481f      	ldr	r0, [pc, #124]	; (80016b4 <StartExButtonIntTask+0x13c>)
 8001636:	f000 fa65 	bl	8001b04 <EmptyBuffer>
	  	osSemaphoreRelease(VelSemaphoreHandle);
 800163a:	4b22      	ldr	r3, [pc, #136]	; (80016c4 <StartExButtonIntTask+0x14c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f003 f9b8 	bl	80049b4 <osSemaphoreRelease>
	  	// turn on red light
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001644:	2200      	movs	r2, #0
 8001646:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800164a:	481d      	ldr	r0, [pc, #116]	; (80016c0 <StartExButtonIntTask+0x148>)
 800164c:	f000 ff5e 	bl	800250c <HAL_GPIO_WritePin>
 8001650:	e7af      	b.n	80015b2 <StartExButtonIntTask+0x3a>
	  } else {
	  	// start the vehicle
	  	osSemaphoreWait(VelSemaphoreHandle, osWaitForever);
 8001652:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <StartExButtonIntTask+0x14c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f04f 31ff 	mov.w	r1, #4294967295
 800165a:	4618      	mov	r0, r3
 800165c:	f003 f95c 	bl	8004918 <osSemaphoreWait>
	  	v = 10; // update the velocity references
 8001660:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <StartExButtonIntTask+0x150>)
 8001662:	220a      	movs	r2, #10
 8001664:	701a      	strb	r2, [r3, #0]
	  	w = 0;
 8001666:	4b19      	ldr	r3, [pc, #100]	; (80016cc <StartExButtonIntTask+0x154>)
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
	  	sprintf(msg, "Lin. vel: %d Ang vel: %d\r\n", v, w);
 800166c:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <StartExButtonIntTask+0x150>)
 800166e:	f993 3000 	ldrsb.w	r3, [r3]
 8001672:	461a      	mov	r2, r3
 8001674:	4b15      	ldr	r3, [pc, #84]	; (80016cc <StartExButtonIntTask+0x154>)
 8001676:	f993 3000 	ldrsb.w	r3, [r3]
 800167a:	4915      	ldr	r1, [pc, #84]	; (80016d0 <StartExButtonIntTask+0x158>)
 800167c:	480d      	ldr	r0, [pc, #52]	; (80016b4 <StartExButtonIntTask+0x13c>)
 800167e:	f006 f9ad 	bl	80079dc <siprintf>
	  	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001682:	2364      	movs	r3, #100	; 0x64
 8001684:	2228      	movs	r2, #40	; 0x28
 8001686:	490b      	ldr	r1, [pc, #44]	; (80016b4 <StartExButtonIntTask+0x13c>)
 8001688:	480b      	ldr	r0, [pc, #44]	; (80016b8 <StartExButtonIntTask+0x140>)
 800168a:	f001 ff22 	bl	80034d2 <HAL_UART_Transmit>
	  	EmptyBuffer(msg);
 800168e:	4809      	ldr	r0, [pc, #36]	; (80016b4 <StartExButtonIntTask+0x13c>)
 8001690:	f000 fa38 	bl	8001b04 <EmptyBuffer>
	  	osSemaphoreRelease(VelSemaphoreHandle);
 8001694:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <StartExButtonIntTask+0x14c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f003 f98b 	bl	80049b4 <osSemaphoreRelease>
	  	// turn on the green light
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800169e:	2201      	movs	r2, #1
 80016a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016a4:	4806      	ldr	r0, [pc, #24]	; (80016c0 <StartExButtonIntTask+0x148>)
 80016a6:	f000 ff31 	bl	800250c <HAL_GPIO_WritePin>
  {
 80016aa:	e782      	b.n	80015b2 <StartExButtonIntTask+0x3a>
 80016ac:	20000360 	.word	0x20000360
 80016b0:	08008500 	.word	0x08008500
 80016b4:	200003d0 	.word	0x200003d0
 80016b8:	200002e4 	.word	0x200002e4
 80016bc:	08008510 	.word	0x08008510
 80016c0:	40020400 	.word	0x40020400
 80016c4:	20000364 	.word	0x20000364
 80016c8:	200003f8 	.word	0x200003f8
 80016cc:	200003f9 	.word	0x200003f9
 80016d0:	08008524 	.word	0x08008524

080016d4 <StartLcdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLcdTask */
void StartLcdTask(void const * argument)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLcdTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 80016dc:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <StartLcdTask+0x44>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f04f 31ff 	mov.w	r1, #4294967295
 80016e4:	4618      	mov	r0, r3
 80016e6:	f003 f861 	bl	80047ac <osMutexWait>
	sprintf(msg, "LCD GO\r\n");
 80016ea:	490c      	ldr	r1, [pc, #48]	; (800171c <StartLcdTask+0x48>)
 80016ec:	480c      	ldr	r0, [pc, #48]	; (8001720 <StartLcdTask+0x4c>)
 80016ee:	f006 f975 	bl	80079dc <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 80016f2:	2364      	movs	r3, #100	; 0x64
 80016f4:	2228      	movs	r2, #40	; 0x28
 80016f6:	490a      	ldr	r1, [pc, #40]	; (8001720 <StartLcdTask+0x4c>)
 80016f8:	480a      	ldr	r0, [pc, #40]	; (8001724 <StartLcdTask+0x50>)
 80016fa:	f001 feea 	bl	80034d2 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 80016fe:	4808      	ldr	r0, [pc, #32]	; (8001720 <StartLcdTask+0x4c>)
 8001700:	f000 fa00 	bl	8001b04 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8001704:	4b04      	ldr	r3, [pc, #16]	; (8001718 <StartLcdTask+0x44>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f003 f89d 	bl	8004848 <osMutexRelease>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800170e:	2001      	movs	r0, #1
 8001710:	f002 ff93 	bl	800463a <osDelay>
 8001714:	e7fb      	b.n	800170e <StartLcdTask+0x3a>
 8001716:	bf00      	nop
 8001718:	20000360 	.word	0x20000360
 800171c:	08008540 	.word	0x08008540
 8001720:	200003d0 	.word	0x200003d0
 8001724:	200002e4 	.word	0x200002e4

08001728 <StartMotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void const * argument)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTask */
  /* Infinite loop */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <StartMotorTask+0x50>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f04f 31ff 	mov.w	r1, #4294967295
 8001738:	4618      	mov	r0, r3
 800173a:	f003 f837 	bl	80047ac <osMutexWait>
	sprintf(msg, "Motor GO\r\n");
 800173e:	490f      	ldr	r1, [pc, #60]	; (800177c <StartMotorTask+0x54>)
 8001740:	480f      	ldr	r0, [pc, #60]	; (8001780 <StartMotorTask+0x58>)
 8001742:	f006 f94b 	bl	80079dc <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001746:	2364      	movs	r3, #100	; 0x64
 8001748:	2228      	movs	r2, #40	; 0x28
 800174a:	490d      	ldr	r1, [pc, #52]	; (8001780 <StartMotorTask+0x58>)
 800174c:	480d      	ldr	r0, [pc, #52]	; (8001784 <StartMotorTask+0x5c>)
 800174e:	f001 fec0 	bl	80034d2 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8001752:	480b      	ldr	r0, [pc, #44]	; (8001780 <StartMotorTask+0x58>)
 8001754:	f000 f9d6 	bl	8001b04 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8001758:	4b07      	ldr	r3, [pc, #28]	; (8001778 <StartMotorTask+0x50>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f003 f873 	bl	8004848 <osMutexRelease>
	v = 14; // 14 m/sec linear velocity
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <StartMotorTask+0x60>)
 8001764:	220e      	movs	r2, #14
 8001766:	701a      	strb	r2, [r3, #0]
	w = 0.2; // 0.2 rad/sec angular velocity
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <StartMotorTask+0x64>)
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]
  for(;;)
  {
  	// block until resumed
  	osThreadSuspend(NULL);
 800176e:	2000      	movs	r0, #0
 8001770:	f003 fa32 	bl	8004bd8 <osThreadSuspend>
 8001774:	e7fb      	b.n	800176e <StartMotorTask+0x46>
 8001776:	bf00      	nop
 8001778:	20000360 	.word	0x20000360
 800177c:	0800854c 	.word	0x0800854c
 8001780:	200003d0 	.word	0x200003d0
 8001784:	200002e4 	.word	0x200002e4
 8001788:	200003f8 	.word	0x200003f8
 800178c:	200003f9 	.word	0x200003f9

08001790 <StartMainTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMainTask */
void StartMainTask(void const * argument)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMainTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8001798:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <StartMainTask+0x80>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f04f 31ff 	mov.w	r1, #4294967295
 80017a0:	4618      	mov	r0, r3
 80017a2:	f003 f803 	bl	80047ac <osMutexWait>
	sprintf(msg, "Main GO\r\n");
 80017a6:	491b      	ldr	r1, [pc, #108]	; (8001814 <StartMainTask+0x84>)
 80017a8:	481b      	ldr	r0, [pc, #108]	; (8001818 <StartMainTask+0x88>)
 80017aa:	f006 f917 	bl	80079dc <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 200);
 80017ae:	23c8      	movs	r3, #200	; 0xc8
 80017b0:	2228      	movs	r2, #40	; 0x28
 80017b2:	4919      	ldr	r1, [pc, #100]	; (8001818 <StartMainTask+0x88>)
 80017b4:	4819      	ldr	r0, [pc, #100]	; (800181c <StartMainTask+0x8c>)
 80017b6:	f001 fe8c 	bl	80034d2 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 80017ba:	4817      	ldr	r0, [pc, #92]	; (8001818 <StartMainTask+0x88>)
 80017bc:	f000 f9a2 	bl	8001b04 <EmptyBuffer>
	sprintf(msg, "Enabling UART...\r\n");
 80017c0:	4917      	ldr	r1, [pc, #92]	; (8001820 <StartMainTask+0x90>)
 80017c2:	4815      	ldr	r0, [pc, #84]	; (8001818 <StartMainTask+0x88>)
 80017c4:	f006 f90a 	bl	80079dc <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 80017c8:	2364      	movs	r3, #100	; 0x64
 80017ca:	2228      	movs	r2, #40	; 0x28
 80017cc:	4912      	ldr	r1, [pc, #72]	; (8001818 <StartMainTask+0x88>)
 80017ce:	4813      	ldr	r0, [pc, #76]	; (800181c <StartMainTask+0x8c>)
 80017d0:	f001 fe7f 	bl	80034d2 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 80017d4:	4810      	ldr	r0, [pc, #64]	; (8001818 <StartMainTask+0x88>)
 80017d6:	f000 f995 	bl	8001b04 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 80017da:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <StartMainTask+0x80>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f003 f832 	bl	8004848 <osMutexRelease>

	// enable UART receive
	HAL_UART_Receive_IT(&huart2, &Rx_byte, 1);
 80017e4:	2201      	movs	r2, #1
 80017e6:	490f      	ldr	r1, [pc, #60]	; (8001824 <StartMainTask+0x94>)
 80017e8:	480c      	ldr	r0, [pc, #48]	; (800181c <StartMainTask+0x8c>)
 80017ea:	f001 ff04 	bl	80035f6 <HAL_UART_Receive_IT>

  /* Infinite loop */
  for(;;)
  {
  	sprintf(msg, "-Main\r\n");
 80017ee:	490e      	ldr	r1, [pc, #56]	; (8001828 <StartMainTask+0x98>)
 80017f0:	4809      	ldr	r0, [pc, #36]	; (8001818 <StartMainTask+0x88>)
 80017f2:	f006 f8f3 	bl	80079dc <siprintf>
  	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 80017f6:	2364      	movs	r3, #100	; 0x64
 80017f8:	2228      	movs	r2, #40	; 0x28
 80017fa:	4907      	ldr	r1, [pc, #28]	; (8001818 <StartMainTask+0x88>)
 80017fc:	4807      	ldr	r0, [pc, #28]	; (800181c <StartMainTask+0x8c>)
 80017fe:	f001 fe68 	bl	80034d2 <HAL_UART_Transmit>
  	EmptyBuffer(msg);
 8001802:	4805      	ldr	r0, [pc, #20]	; (8001818 <StartMainTask+0x88>)
 8001804:	f000 f97e 	bl	8001b04 <EmptyBuffer>

  	// suspend main until it is resumed
  	osThreadSuspend(NULL);
 8001808:	2000      	movs	r0, #0
 800180a:	f003 f9e5 	bl	8004bd8 <osThreadSuspend>
  	sprintf(msg, "-Main\r\n");
 800180e:	e7ee      	b.n	80017ee <StartMainTask+0x5e>
 8001810:	20000360 	.word	0x20000360
 8001814:	08008558 	.word	0x08008558
 8001818:	200003d0 	.word	0x200003d0
 800181c:	200002e4 	.word	0x200002e4
 8001820:	08008564 	.word	0x08008564
 8001824:	20000368 	.word	0x20000368
 8001828:	08008578 	.word	0x08008578

0800182c <StartObjectDetectTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartObjectDetectTask */
void StartObjectDetectTask(void const * argument)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartObjectDetectTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8001834:	4b2e      	ldr	r3, [pc, #184]	; (80018f0 <StartObjectDetectTask+0xc4>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f04f 31ff 	mov.w	r1, #4294967295
 800183c:	4618      	mov	r0, r3
 800183e:	f002 ffb5 	bl	80047ac <osMutexWait>
	sprintf(msg, "ObjDetect GO\r\n");
 8001842:	492c      	ldr	r1, [pc, #176]	; (80018f4 <StartObjectDetectTask+0xc8>)
 8001844:	482c      	ldr	r0, [pc, #176]	; (80018f8 <StartObjectDetectTask+0xcc>)
 8001846:	f006 f8c9 	bl	80079dc <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 800184a:	2364      	movs	r3, #100	; 0x64
 800184c:	2228      	movs	r2, #40	; 0x28
 800184e:	492a      	ldr	r1, [pc, #168]	; (80018f8 <StartObjectDetectTask+0xcc>)
 8001850:	482a      	ldr	r0, [pc, #168]	; (80018fc <StartObjectDetectTask+0xd0>)
 8001852:	f001 fe3e 	bl	80034d2 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8001856:	4828      	ldr	r0, [pc, #160]	; (80018f8 <StartObjectDetectTask+0xcc>)
 8001858:	f000 f954 	bl	8001b04 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 800185c:	4b24      	ldr	r3, [pc, #144]	; (80018f0 <StartObjectDetectTask+0xc4>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f002 fff1 	bl	8004848 <osMutexRelease>
  /* Infinite loop */
  for(;;)
  {
  	//wait for signal
  	osSignalWait(SIGNAL_OBJECT_DETECT, osWaitForever);
 8001866:	463b      	mov	r3, r7
 8001868:	f04f 32ff 	mov.w	r2, #4294967295
 800186c:	2101      	movs	r1, #1
 800186e:	4618      	mov	r0, r3
 8001870:	f002 ff38 	bl	80046e4 <osSignalWait>

  	// print to uart
  	sprintf(msg, "~~ Object (un)detected ~~\r\n");
 8001874:	4922      	ldr	r1, [pc, #136]	; (8001900 <StartObjectDetectTask+0xd4>)
 8001876:	4820      	ldr	r0, [pc, #128]	; (80018f8 <StartObjectDetectTask+0xcc>)
 8001878:	f006 f8b0 	bl	80079dc <siprintf>
  	HAL_UART_Transmit(&huart2, msg, strlen(msg), 100);
 800187c:	481e      	ldr	r0, [pc, #120]	; (80018f8 <StartObjectDetectTask+0xcc>)
 800187e:	f7fe fcb9 	bl	80001f4 <strlen>
 8001882:	4603      	mov	r3, r0
 8001884:	b29a      	uxth	r2, r3
 8001886:	2364      	movs	r3, #100	; 0x64
 8001888:	491b      	ldr	r1, [pc, #108]	; (80018f8 <StartObjectDetectTask+0xcc>)
 800188a:	481c      	ldr	r0, [pc, #112]	; (80018fc <StartObjectDetectTask+0xd0>)
 800188c:	f001 fe21 	bl	80034d2 <HAL_UART_Transmit>
  	EmptyBuffer(msg);
 8001890:	4819      	ldr	r0, [pc, #100]	; (80018f8 <StartObjectDetectTask+0xcc>)
 8001892:	f000 f937 	bl	8001b04 <EmptyBuffer>

  	// stop the vehicle!!
  	osSemaphoreWait(VelSemaphoreHandle, osWaitForever);
 8001896:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <StartObjectDetectTask+0xd8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f04f 31ff 	mov.w	r1, #4294967295
 800189e:	4618      	mov	r0, r3
 80018a0:	f003 f83a 	bl	8004918 <osSemaphoreWait>
  	v = 0; // update the velocity references
 80018a4:	4b18      	ldr	r3, [pc, #96]	; (8001908 <StartObjectDetectTask+0xdc>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
  	w = 0;
 80018aa:	4b18      	ldr	r3, [pc, #96]	; (800190c <StartObjectDetectTask+0xe0>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]
  	sprintf(msg, "Lin. vel: %d Ang vel: %d\r\n", v, w);
 80018b0:	4b15      	ldr	r3, [pc, #84]	; (8001908 <StartObjectDetectTask+0xdc>)
 80018b2:	f993 3000 	ldrsb.w	r3, [r3]
 80018b6:	461a      	mov	r2, r3
 80018b8:	4b14      	ldr	r3, [pc, #80]	; (800190c <StartObjectDetectTask+0xe0>)
 80018ba:	f993 3000 	ldrsb.w	r3, [r3]
 80018be:	4914      	ldr	r1, [pc, #80]	; (8001910 <StartObjectDetectTask+0xe4>)
 80018c0:	480d      	ldr	r0, [pc, #52]	; (80018f8 <StartObjectDetectTask+0xcc>)
 80018c2:	f006 f88b 	bl	80079dc <siprintf>
  	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 200);
 80018c6:	23c8      	movs	r3, #200	; 0xc8
 80018c8:	2228      	movs	r2, #40	; 0x28
 80018ca:	490b      	ldr	r1, [pc, #44]	; (80018f8 <StartObjectDetectTask+0xcc>)
 80018cc:	480b      	ldr	r0, [pc, #44]	; (80018fc <StartObjectDetectTask+0xd0>)
 80018ce:	f001 fe00 	bl	80034d2 <HAL_UART_Transmit>
  	EmptyBuffer(msg);
 80018d2:	4809      	ldr	r0, [pc, #36]	; (80018f8 <StartObjectDetectTask+0xcc>)
 80018d4:	f000 f916 	bl	8001b04 <EmptyBuffer>
  	osSemaphoreRelease(VelSemaphoreHandle);
 80018d8:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <StartObjectDetectTask+0xd8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f003 f869 	bl	80049b4 <osSemaphoreRelease>

  	// toggle led
  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 80018e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018e6:	480b      	ldr	r0, [pc, #44]	; (8001914 <StartObjectDetectTask+0xe8>)
 80018e8:	f000 fe29 	bl	800253e <HAL_GPIO_TogglePin>
  {
 80018ec:	e7bb      	b.n	8001866 <StartObjectDetectTask+0x3a>
 80018ee:	bf00      	nop
 80018f0:	20000360 	.word	0x20000360
 80018f4:	08008580 	.word	0x08008580
 80018f8:	200003d0 	.word	0x200003d0
 80018fc:	200002e4 	.word	0x200002e4
 8001900:	08008590 	.word	0x08008590
 8001904:	20000364 	.word	0x20000364
 8001908:	200003f8 	.word	0x200003f8
 800190c:	200003f9 	.word	0x200003f9
 8001910:	08008524 	.word	0x08008524
 8001914:	40020400 	.word	0x40020400

08001918 <StartUartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUartTask */
void StartUartTask(void const * argument)
{
 8001918:	b5b0      	push	{r4, r5, r7, lr}
 800191a:	b088      	sub	sp, #32
 800191c:	af02      	add	r7, sp, #8
 800191e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUartTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8001920:	4b6d      	ldr	r3, [pc, #436]	; (8001ad8 <StartUartTask+0x1c0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f04f 31ff 	mov.w	r1, #4294967295
 8001928:	4618      	mov	r0, r3
 800192a:	f002 ff3f 	bl	80047ac <osMutexWait>
	sprintf(msg, "ObjDetect GO\r\n");
 800192e:	496b      	ldr	r1, [pc, #428]	; (8001adc <StartUartTask+0x1c4>)
 8001930:	486b      	ldr	r0, [pc, #428]	; (8001ae0 <StartUartTask+0x1c8>)
 8001932:	f006 f853 	bl	80079dc <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001936:	2364      	movs	r3, #100	; 0x64
 8001938:	2228      	movs	r2, #40	; 0x28
 800193a:	4969      	ldr	r1, [pc, #420]	; (8001ae0 <StartUartTask+0x1c8>)
 800193c:	4869      	ldr	r0, [pc, #420]	; (8001ae4 <StartUartTask+0x1cc>)
 800193e:	f001 fdc8 	bl	80034d2 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8001942:	4867      	ldr	r0, [pc, #412]	; (8001ae0 <StartUartTask+0x1c8>)
 8001944:	f000 f8de 	bl	8001b04 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8001948:	4b63      	ldr	r3, [pc, #396]	; (8001ad8 <StartUartTask+0x1c0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f002 ff7b 	bl	8004848 <osMutexRelease>
  /* Infinite loop */
  for(;;)
  {
  	//wait for signal
  	osEvent retval_uart = osMessageGet(UartQueueHandle, osWaitForever);
 8001952:	4b65      	ldr	r3, [pc, #404]	; (8001ae8 <StartUartTask+0x1d0>)
 8001954:	6819      	ldr	r1, [r3, #0]
 8001956:	f107 0308 	add.w	r3, r7, #8
 800195a:	f04f 32ff 	mov.w	r2, #4294967295
 800195e:	4618      	mov	r0, r3
 8001960:	f003 f8c6 	bl	8004af0 <osMessageGet>
  	uint8_t accel_flag = retval_uart.value.p;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	75fb      	strb	r3, [r7, #23]

  	osMutexWait(PrintMtxHandle, osWaitForever);
 8001968:	4b5b      	ldr	r3, [pc, #364]	; (8001ad8 <StartUartTask+0x1c0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f04f 31ff 	mov.w	r1, #4294967295
 8001970:	4618      	mov	r0, r3
 8001972:	f002 ff1b 	bl	80047ac <osMutexWait>
  	sprintf(msg, "Flag: %lu\r\n", accel_flag);
 8001976:	7dfb      	ldrb	r3, [r7, #23]
 8001978:	461a      	mov	r2, r3
 800197a:	495c      	ldr	r1, [pc, #368]	; (8001aec <StartUartTask+0x1d4>)
 800197c:	4858      	ldr	r0, [pc, #352]	; (8001ae0 <StartUartTask+0x1c8>)
 800197e:	f006 f82d 	bl	80079dc <siprintf>
  	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001982:	2364      	movs	r3, #100	; 0x64
 8001984:	2228      	movs	r2, #40	; 0x28
 8001986:	4956      	ldr	r1, [pc, #344]	; (8001ae0 <StartUartTask+0x1c8>)
 8001988:	4856      	ldr	r0, [pc, #344]	; (8001ae4 <StartUartTask+0x1cc>)
 800198a:	f001 fda2 	bl	80034d2 <HAL_UART_Transmit>
  	EmptyBuffer(msg);
 800198e:	4854      	ldr	r0, [pc, #336]	; (8001ae0 <StartUartTask+0x1c8>)
 8001990:	f000 f8b8 	bl	8001b04 <EmptyBuffer>
  	osMutexRelease(PrintMtxHandle);
 8001994:	4b50      	ldr	r3, [pc, #320]	; (8001ad8 <StartUartTask+0x1c0>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f002 ff55 	bl	8004848 <osMutexRelease>

  	// if the passed flag is 1, we accelerate by 10%, otherwise, we decelerate by 10%
  	osSemaphoreWait(VelSemaphoreHandle, osWaitForever);
 800199e:	4b54      	ldr	r3, [pc, #336]	; (8001af0 <StartUartTask+0x1d8>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f04f 31ff 	mov.w	r1, #4294967295
 80019a6:	4618      	mov	r0, r3
 80019a8:	f002 ffb6 	bl	8004918 <osSemaphoreWait>
  	if (accel_flag == 1) {
 80019ac:	7dfb      	ldrb	r3, [r7, #23]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d11e      	bne.n	80019f0 <StartUartTask+0xd8>
  		if ( v == 0 ) {
 80019b2:	4b50      	ldr	r3, [pc, #320]	; (8001af4 <StartUartTask+0x1dc>)
 80019b4:	f993 3000 	ldrsb.w	r3, [r3]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d103      	bne.n	80019c4 <StartUartTask+0xac>
  			v = 10;
 80019bc:	4b4d      	ldr	r3, [pc, #308]	; (8001af4 <StartUartTask+0x1dc>)
 80019be:	220a      	movs	r2, #10
 80019c0:	701a      	strb	r2, [r3, #0]
 80019c2:	e032      	b.n	8001a2a <StartUartTask+0x112>
  		} else {
    		v = v*1.1;
 80019c4:	4b4b      	ldr	r3, [pc, #300]	; (8001af4 <StartUartTask+0x1dc>)
 80019c6:	f993 3000 	ldrsb.w	r3, [r3]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7fe feec 	bl	80007a8 <__aeabi_i2d>
 80019d0:	a33d      	add	r3, pc, #244	; (adr r3, 8001ac8 <StartUartTask+0x1b0>)
 80019d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d6:	f7fe fc6b 	bl	80002b0 <__aeabi_dmul>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4610      	mov	r0, r2
 80019e0:	4619      	mov	r1, r3
 80019e2:	f7fe ff4b 	bl	800087c <__aeabi_d2iz>
 80019e6:	4603      	mov	r3, r0
 80019e8:	b25a      	sxtb	r2, r3
 80019ea:	4b42      	ldr	r3, [pc, #264]	; (8001af4 <StartUartTask+0x1dc>)
 80019ec:	701a      	strb	r2, [r3, #0]
 80019ee:	e01c      	b.n	8001a2a <StartUartTask+0x112>
  		}
  	} else if (accel_flag == 0){
 80019f0:	7dfb      	ldrb	r3, [r7, #23]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d119      	bne.n	8001a2a <StartUartTask+0x112>
			if ( v != 0 ) {
 80019f6:	4b3f      	ldr	r3, [pc, #252]	; (8001af4 <StartUartTask+0x1dc>)
 80019f8:	f993 3000 	ldrsb.w	r3, [r3]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d014      	beq.n	8001a2a <StartUartTask+0x112>
				v = v*0.9;
 8001a00:	4b3c      	ldr	r3, [pc, #240]	; (8001af4 <StartUartTask+0x1dc>)
 8001a02:	f993 3000 	ldrsb.w	r3, [r3]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fece 	bl	80007a8 <__aeabi_i2d>
 8001a0c:	a330      	add	r3, pc, #192	; (adr r3, 8001ad0 <StartUartTask+0x1b8>)
 8001a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a12:	f7fe fc4d 	bl	80002b0 <__aeabi_dmul>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f7fe ff2d 	bl	800087c <__aeabi_d2iz>
 8001a22:	4603      	mov	r3, r0
 8001a24:	b25a      	sxtb	r2, r3
 8001a26:	4b33      	ldr	r3, [pc, #204]	; (8001af4 <StartUartTask+0x1dc>)
 8001a28:	701a      	strb	r2, [r3, #0]
			}
  	}
  	sprintf(msg, "Lin. vel: %d.%d Ang vel: %d.%d\r\n", v/10, v%10, w/10, w%10);
 8001a2a:	4b32      	ldr	r3, [pc, #200]	; (8001af4 <StartUartTask+0x1dc>)
 8001a2c:	f993 3000 	ldrsb.w	r3, [r3]
 8001a30:	4a31      	ldr	r2, [pc, #196]	; (8001af8 <StartUartTask+0x1e0>)
 8001a32:	fb82 1203 	smull	r1, r2, r2, r3
 8001a36:	1092      	asrs	r2, r2, #2
 8001a38:	17db      	asrs	r3, r3, #31
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	b25b      	sxtb	r3, r3
 8001a3e:	461c      	mov	r4, r3
 8001a40:	4b2c      	ldr	r3, [pc, #176]	; (8001af4 <StartUartTask+0x1dc>)
 8001a42:	f993 2000 	ldrsb.w	r2, [r3]
 8001a46:	4b2c      	ldr	r3, [pc, #176]	; (8001af8 <StartUartTask+0x1e0>)
 8001a48:	fb83 1302 	smull	r1, r3, r3, r2
 8001a4c:	1099      	asrs	r1, r3, #2
 8001a4e:	17d3      	asrs	r3, r2, #31
 8001a50:	1ac9      	subs	r1, r1, r3
 8001a52:	460b      	mov	r3, r1
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	440b      	add	r3, r1
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	b25b      	sxtb	r3, r3
 8001a5e:	461d      	mov	r5, r3
 8001a60:	4b26      	ldr	r3, [pc, #152]	; (8001afc <StartUartTask+0x1e4>)
 8001a62:	f993 3000 	ldrsb.w	r3, [r3]
 8001a66:	4a24      	ldr	r2, [pc, #144]	; (8001af8 <StartUartTask+0x1e0>)
 8001a68:	fb82 1203 	smull	r1, r2, r2, r3
 8001a6c:	1092      	asrs	r2, r2, #2
 8001a6e:	17db      	asrs	r3, r3, #31
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	b25b      	sxtb	r3, r3
 8001a74:	4618      	mov	r0, r3
 8001a76:	4b21      	ldr	r3, [pc, #132]	; (8001afc <StartUartTask+0x1e4>)
 8001a78:	f993 2000 	ldrsb.w	r2, [r3]
 8001a7c:	4b1e      	ldr	r3, [pc, #120]	; (8001af8 <StartUartTask+0x1e0>)
 8001a7e:	fb83 1302 	smull	r1, r3, r3, r2
 8001a82:	1099      	asrs	r1, r3, #2
 8001a84:	17d3      	asrs	r3, r2, #31
 8001a86:	1ac9      	subs	r1, r1, r3
 8001a88:	460b      	mov	r3, r1
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	b25b      	sxtb	r3, r3
 8001a94:	9301      	str	r3, [sp, #4]
 8001a96:	9000      	str	r0, [sp, #0]
 8001a98:	462b      	mov	r3, r5
 8001a9a:	4622      	mov	r2, r4
 8001a9c:	4918      	ldr	r1, [pc, #96]	; (8001b00 <StartUartTask+0x1e8>)
 8001a9e:	4810      	ldr	r0, [pc, #64]	; (8001ae0 <StartUartTask+0x1c8>)
 8001aa0:	f005 ff9c 	bl	80079dc <siprintf>
  	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001aa4:	2364      	movs	r3, #100	; 0x64
 8001aa6:	2228      	movs	r2, #40	; 0x28
 8001aa8:	490d      	ldr	r1, [pc, #52]	; (8001ae0 <StartUartTask+0x1c8>)
 8001aaa:	480e      	ldr	r0, [pc, #56]	; (8001ae4 <StartUartTask+0x1cc>)
 8001aac:	f001 fd11 	bl	80034d2 <HAL_UART_Transmit>
  	EmptyBuffer(msg);
 8001ab0:	480b      	ldr	r0, [pc, #44]	; (8001ae0 <StartUartTask+0x1c8>)
 8001ab2:	f000 f827 	bl	8001b04 <EmptyBuffer>
  	osSemaphoreRelease(VelSemaphoreHandle);
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <StartUartTask+0x1d8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f002 ff7a 	bl	80049b4 <osSemaphoreRelease>
  {
 8001ac0:	e747      	b.n	8001952 <StartUartTask+0x3a>
 8001ac2:	bf00      	nop
 8001ac4:	f3af 8000 	nop.w
 8001ac8:	9999999a 	.word	0x9999999a
 8001acc:	3ff19999 	.word	0x3ff19999
 8001ad0:	cccccccd 	.word	0xcccccccd
 8001ad4:	3feccccc 	.word	0x3feccccc
 8001ad8:	20000360 	.word	0x20000360
 8001adc:	08008580 	.word	0x08008580
 8001ae0:	200003d0 	.word	0x200003d0
 8001ae4:	200002e4 	.word	0x200002e4
 8001ae8:	20000350 	.word	0x20000350
 8001aec:	080085ac 	.word	0x080085ac
 8001af0:	20000364 	.word	0x20000364
 8001af4:	200003f8 	.word	0x200003f8
 8001af8:	66666667 	.word	0x66666667
 8001afc:	200003f9 	.word	0x200003f9
 8001b00:	080085b8 	.word	0x080085b8

08001b04 <EmptyBuffer>:
  }
  /* USER CODE END StartUartTask */
}

void EmptyBuffer(char* buf){
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	int s = strlen(buf);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7fe fb71 	bl	80001f4 <strlen>
 8001b12:	4603      	mov	r3, r0
 8001b14:	60bb      	str	r3, [r7, #8]

	for (i=0; i<s; i++) {
 8001b16:	2300      	movs	r3, #0
 8001b18:	73fb      	strb	r3, [r7, #15]
 8001b1a:	e007      	b.n	8001b2c <EmptyBuffer+0x28>
		buf[i] = 0;
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	4413      	add	r3, r2
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
	for (i=0; i<s; i++) {
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	73fb      	strb	r3, [r7, #15]
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	dcf3      	bgt.n	8001b1c <EmptyBuffer+0x18>
	}
}
 8001b34:	bf00      	nop
 8001b36:	bf00      	nop
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d101      	bne.n	8001b56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b52:	f000 f9ab 	bl	8001eac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40014400 	.word	0x40014400

08001b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b68:	b672      	cpsid	i
}
 8001b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <Error_Handler+0x8>
	...

08001b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	607b      	str	r3, [r7, #4]
 8001b7a:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_MspInit+0x54>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	4a11      	ldr	r2, [pc, #68]	; (8001bc4 <HAL_MspInit+0x54>)
 8001b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b84:	6453      	str	r3, [r2, #68]	; 0x44
 8001b86:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <HAL_MspInit+0x54>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	603b      	str	r3, [r7, #0]
 8001b96:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_MspInit+0x54>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <HAL_MspInit+0x54>)
 8001b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba2:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <HAL_MspInit+0x54>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001baa:	603b      	str	r3, [r7, #0]
 8001bac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	210f      	movs	r1, #15
 8001bb2:	f06f 0001 	mvn.w	r0, #1
 8001bb6:	f000 fa51 	bl	800205c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800

08001bc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08a      	sub	sp, #40	; 0x28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a1d      	ldr	r2, [pc, #116]	; (8001c5c <HAL_UART_MspInit+0x94>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d133      	bne.n	8001c52 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	4b1c      	ldr	r3, [pc, #112]	; (8001c60 <HAL_UART_MspInit+0x98>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	4a1b      	ldr	r2, [pc, #108]	; (8001c60 <HAL_UART_MspInit+0x98>)
 8001bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfa:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <HAL_UART_MspInit+0x98>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <HAL_UART_MspInit+0x98>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	4a14      	ldr	r2, [pc, #80]	; (8001c60 <HAL_UART_MspInit+0x98>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	6313      	str	r3, [r2, #48]	; 0x30
 8001c16:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <HAL_UART_MspInit+0x98>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c22:	230c      	movs	r3, #12
 8001c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c32:	2307      	movs	r3, #7
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4809      	ldr	r0, [pc, #36]	; (8001c64 <HAL_UART_MspInit+0x9c>)
 8001c3e:	f000 fac9 	bl	80021d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2105      	movs	r1, #5
 8001c46:	2026      	movs	r0, #38	; 0x26
 8001c48:	f000 fa08 	bl	800205c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c4c:	2026      	movs	r0, #38	; 0x26
 8001c4e:	f000 fa21 	bl	8002094 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c52:	bf00      	nop
 8001c54:	3728      	adds	r7, #40	; 0x28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40004400 	.word	0x40004400
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40020000 	.word	0x40020000

08001c68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08c      	sub	sp, #48	; 0x30
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	2019      	movs	r0, #25
 8001c7e:	f000 f9ed 	bl	800205c <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c82:	2019      	movs	r0, #25
 8001c84:	f000 fa06 	bl	8002094 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <HAL_InitTick+0xa0>)
 8001c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c90:	4a1d      	ldr	r2, [pc, #116]	; (8001d08 <HAL_InitTick+0xa0>)
 8001c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c96:	6453      	str	r3, [r2, #68]	; 0x44
 8001c98:	4b1b      	ldr	r3, [pc, #108]	; (8001d08 <HAL_InitTick+0xa0>)
 8001c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ca4:	f107 0210 	add.w	r2, r7, #16
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	4611      	mov	r1, r2
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f001 f910 	bl	8002ed4 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001cb4:	f001 f8fa 	bl	8002eac <HAL_RCC_GetPCLK2Freq>
 8001cb8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cbc:	4a13      	ldr	r2, [pc, #76]	; (8001d0c <HAL_InitTick+0xa4>)
 8001cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc2:	0c9b      	lsrs	r3, r3, #18
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <HAL_InitTick+0xa8>)
 8001cca:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <HAL_InitTick+0xac>)
 8001ccc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8001cce:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <HAL_InitTick+0xa8>)
 8001cd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cd4:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001cd6:	4a0e      	ldr	r2, [pc, #56]	; (8001d10 <HAL_InitTick+0xa8>)
 8001cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cda:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <HAL_InitTick+0xa8>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <HAL_InitTick+0xa8>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8001ce8:	4809      	ldr	r0, [pc, #36]	; (8001d10 <HAL_InitTick+0xa8>)
 8001cea:	f001 f925 	bl	8002f38 <HAL_TIM_Base_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d104      	bne.n	8001cfe <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8001cf4:	4806      	ldr	r0, [pc, #24]	; (8001d10 <HAL_InitTick+0xa8>)
 8001cf6:	f001 f979 	bl	8002fec <HAL_TIM_Base_Start_IT>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	e000      	b.n	8001d00 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3730      	adds	r7, #48	; 0x30
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	431bde83 	.word	0x431bde83
 8001d10:	200003fc 	.word	0x200003fc
 8001d14:	40014400 	.word	0x40014400

08001d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d1c:	e7fe      	b.n	8001d1c <NMI_Handler+0x4>

08001d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d22:	e7fe      	b.n	8001d22 <HardFault_Handler+0x4>

08001d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d28:	e7fe      	b.n	8001d28 <MemManage_Handler+0x4>

08001d2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d2e:	e7fe      	b.n	8001d2e <BusFault_Handler+0x4>

08001d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d34:	e7fe      	b.n	8001d34 <UsageFault_Handler+0x4>

08001d36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001d48:	4802      	ldr	r0, [pc, #8]	; (8001d54 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001d4a:	f001 f9b1 	bl	80030b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	200003fc 	.word	0x200003fc

08001d58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d5c:	4802      	ldr	r0, [pc, #8]	; (8001d68 <USART2_IRQHandler+0x10>)
 8001d5e:	f001 fc7b 	bl	8003658 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	200002e4 	.word	0x200002e4

08001d6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ExButton_Pin);
 8001d70:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001d74:	f000 fbfe 	bl	8002574 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001d78:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d7c:	f000 fbfa 	bl	8002574 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d8c:	4a14      	ldr	r2, [pc, #80]	; (8001de0 <_sbrk+0x5c>)
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <_sbrk+0x60>)
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d98:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <_sbrk+0x64>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <_sbrk+0x64>)
 8001da2:	4a12      	ldr	r2, [pc, #72]	; (8001dec <_sbrk+0x68>)
 8001da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001da6:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <_sbrk+0x64>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d207      	bcs.n	8001dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001db4:	f005 fdd2 	bl	800795c <__errno>
 8001db8:	4603      	mov	r3, r0
 8001dba:	220c      	movs	r2, #12
 8001dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc2:	e009      	b.n	8001dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dc4:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <_sbrk+0x64>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dca:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <_sbrk+0x64>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <_sbrk+0x64>)
 8001dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20020000 	.word	0x20020000
 8001de4:	00000400 	.word	0x00000400
 8001de8:	20000444 	.word	0x20000444
 8001dec:	200041b0 	.word	0x200041b0

08001df0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <SystemInit+0x20>)
 8001df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfa:	4a05      	ldr	r2, [pc, #20]	; (8001e10 <SystemInit+0x20>)
 8001dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e18:	480d      	ldr	r0, [pc, #52]	; (8001e50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e1a:	490e      	ldr	r1, [pc, #56]	; (8001e54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e1c:	4a0e      	ldr	r2, [pc, #56]	; (8001e58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e20:	e002      	b.n	8001e28 <LoopCopyDataInit>

08001e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e26:	3304      	adds	r3, #4

08001e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e2c:	d3f9      	bcc.n	8001e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e2e:	4a0b      	ldr	r2, [pc, #44]	; (8001e5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e30:	4c0b      	ldr	r4, [pc, #44]	; (8001e60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e34:	e001      	b.n	8001e3a <LoopFillZerobss>

08001e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e38:	3204      	adds	r2, #4

08001e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e3c:	d3fb      	bcc.n	8001e36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e3e:	f7ff ffd7 	bl	8001df0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e42:	f005 fd91 	bl	8007968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e46:	f7fe fedd 	bl	8000c04 <main>
  bx  lr    
 8001e4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e54:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001e58:	08008640 	.word	0x08008640
  ldr r2, =_sbss
 8001e5c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001e60:	200041b0 	.word	0x200041b0

08001e64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e64:	e7fe      	b.n	8001e64 <ADC_IRQHandler>
	...

08001e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <HAL_Init+0x40>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0d      	ldr	r2, [pc, #52]	; (8001ea8 <HAL_Init+0x40>)
 8001e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <HAL_Init+0x40>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <HAL_Init+0x40>)
 8001e7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e84:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <HAL_Init+0x40>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a07      	ldr	r2, [pc, #28]	; (8001ea8 <HAL_Init+0x40>)
 8001e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e90:	2003      	movs	r0, #3
 8001e92:	f000 f8d8 	bl	8002046 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e96:	200f      	movs	r0, #15
 8001e98:	f7ff fee6 	bl	8001c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e9c:	f7ff fe68 	bl	8001b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023c00 	.word	0x40023c00

08001eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_IncTick+0x20>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_IncTick+0x24>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	4a04      	ldr	r2, [pc, #16]	; (8001ed0 <HAL_IncTick+0x24>)
 8001ebe:	6013      	str	r3, [r2, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20000008 	.word	0x20000008
 8001ed0:	20000448 	.word	0x20000448

08001ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed8:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <HAL_GetTick+0x14>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20000448 	.word	0x20000448

08001eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f1e:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	60d3      	str	r3, [r2, #12]
}
 8001f24:	bf00      	nop
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <__NVIC_GetPriorityGrouping+0x18>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	0a1b      	lsrs	r3, r3, #8
 8001f3e:	f003 0307 	and.w	r3, r3, #7
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	db0b      	blt.n	8001f7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	f003 021f 	and.w	r2, r3, #31
 8001f68:	4907      	ldr	r1, [pc, #28]	; (8001f88 <__NVIC_EnableIRQ+0x38>)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	095b      	lsrs	r3, r3, #5
 8001f70:	2001      	movs	r0, #1
 8001f72:	fa00 f202 	lsl.w	r2, r0, r2
 8001f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	e000e100 	.word	0xe000e100

08001f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	6039      	str	r1, [r7, #0]
 8001f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	db0a      	blt.n	8001fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	490c      	ldr	r1, [pc, #48]	; (8001fd8 <__NVIC_SetPriority+0x4c>)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	0112      	lsls	r2, r2, #4
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	440b      	add	r3, r1
 8001fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fb4:	e00a      	b.n	8001fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	4908      	ldr	r1, [pc, #32]	; (8001fdc <__NVIC_SetPriority+0x50>)
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	3b04      	subs	r3, #4
 8001fc4:	0112      	lsls	r2, r2, #4
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	440b      	add	r3, r1
 8001fca:	761a      	strb	r2, [r3, #24]
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000e100 	.word	0xe000e100
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b089      	sub	sp, #36	; 0x24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f1c3 0307 	rsb	r3, r3, #7
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	bf28      	it	cs
 8001ffe:	2304      	movcs	r3, #4
 8002000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3304      	adds	r3, #4
 8002006:	2b06      	cmp	r3, #6
 8002008:	d902      	bls.n	8002010 <NVIC_EncodePriority+0x30>
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3b03      	subs	r3, #3
 800200e:	e000      	b.n	8002012 <NVIC_EncodePriority+0x32>
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	f04f 32ff 	mov.w	r2, #4294967295
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43da      	mvns	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	401a      	ands	r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002028:	f04f 31ff 	mov.w	r1, #4294967295
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	fa01 f303 	lsl.w	r3, r1, r3
 8002032:	43d9      	mvns	r1, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002038:	4313      	orrs	r3, r2
         );
}
 800203a:	4618      	mov	r0, r3
 800203c:	3724      	adds	r7, #36	; 0x24
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff ff4c 	bl	8001eec <__NVIC_SetPriorityGrouping>
}
 8002054:	bf00      	nop
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
 8002068:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800206e:	f7ff ff61 	bl	8001f34 <__NVIC_GetPriorityGrouping>
 8002072:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	68b9      	ldr	r1, [r7, #8]
 8002078:	6978      	ldr	r0, [r7, #20]
 800207a:	f7ff ffb1 	bl	8001fe0 <NVIC_EncodePriority>
 800207e:	4602      	mov	r2, r0
 8002080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002084:	4611      	mov	r1, r2
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff ff80 	bl	8001f8c <__NVIC_SetPriority>
}
 800208c:	bf00      	nop
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff ff54 	bl	8001f50 <__NVIC_EnableIRQ>
}
 80020a8:	bf00      	nop
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020be:	f7ff ff09 	bl	8001ed4 <HAL_GetTick>
 80020c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d008      	beq.n	80020e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2280      	movs	r2, #128	; 0x80
 80020d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e052      	b.n	8002188 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0216 	bic.w	r2, r2, #22
 80020f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	695a      	ldr	r2, [r3, #20]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002100:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	2b00      	cmp	r3, #0
 8002108:	d103      	bne.n	8002112 <HAL_DMA_Abort+0x62>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800210e:	2b00      	cmp	r3, #0
 8002110:	d007      	beq.n	8002122 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0208 	bic.w	r2, r2, #8
 8002120:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0201 	bic.w	r2, r2, #1
 8002130:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002132:	e013      	b.n	800215c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002134:	f7ff fece 	bl	8001ed4 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b05      	cmp	r3, #5
 8002140:	d90c      	bls.n	800215c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2220      	movs	r2, #32
 8002146:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2203      	movs	r2, #3
 800214c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e015      	b.n	8002188 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1e4      	bne.n	8002134 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216e:	223f      	movs	r2, #63	; 0x3f
 8002170:	409a      	lsls	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d004      	beq.n	80021ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2280      	movs	r2, #128	; 0x80
 80021a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e00c      	b.n	80021c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2205      	movs	r2, #5
 80021b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0201 	bic.w	r2, r2, #1
 80021c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b089      	sub	sp, #36	; 0x24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
 80021ee:	e159      	b.n	80024a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021f0:	2201      	movs	r2, #1
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	4013      	ands	r3, r2
 8002202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	429a      	cmp	r2, r3
 800220a:	f040 8148 	bne.w	800249e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	2b01      	cmp	r3, #1
 8002218:	d005      	beq.n	8002226 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002222:	2b02      	cmp	r3, #2
 8002224:	d130      	bne.n	8002288 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	2203      	movs	r2, #3
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800225c:	2201      	movs	r2, #1
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	f003 0201 	and.w	r2, r3, #1
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	2b03      	cmp	r3, #3
 8002292:	d017      	beq.n	80022c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	2203      	movs	r2, #3
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d123      	bne.n	8002318 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	08da      	lsrs	r2, r3, #3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3208      	adds	r2, #8
 80022d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	220f      	movs	r2, #15
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	08da      	lsrs	r2, r3, #3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3208      	adds	r2, #8
 8002312:	69b9      	ldr	r1, [r7, #24]
 8002314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	2203      	movs	r2, #3
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0203 	and.w	r2, r3, #3
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80a2 	beq.w	800249e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	4b57      	ldr	r3, [pc, #348]	; (80024bc <HAL_GPIO_Init+0x2e8>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	4a56      	ldr	r2, [pc, #344]	; (80024bc <HAL_GPIO_Init+0x2e8>)
 8002364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002368:	6453      	str	r3, [r2, #68]	; 0x44
 800236a:	4b54      	ldr	r3, [pc, #336]	; (80024bc <HAL_GPIO_Init+0x2e8>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002376:	4a52      	ldr	r2, [pc, #328]	; (80024c0 <HAL_GPIO_Init+0x2ec>)
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	089b      	lsrs	r3, r3, #2
 800237c:	3302      	adds	r3, #2
 800237e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	220f      	movs	r2, #15
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a49      	ldr	r2, [pc, #292]	; (80024c4 <HAL_GPIO_Init+0x2f0>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d019      	beq.n	80023d6 <HAL_GPIO_Init+0x202>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a48      	ldr	r2, [pc, #288]	; (80024c8 <HAL_GPIO_Init+0x2f4>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d013      	beq.n	80023d2 <HAL_GPIO_Init+0x1fe>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a47      	ldr	r2, [pc, #284]	; (80024cc <HAL_GPIO_Init+0x2f8>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d00d      	beq.n	80023ce <HAL_GPIO_Init+0x1fa>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a46      	ldr	r2, [pc, #280]	; (80024d0 <HAL_GPIO_Init+0x2fc>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d007      	beq.n	80023ca <HAL_GPIO_Init+0x1f6>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a45      	ldr	r2, [pc, #276]	; (80024d4 <HAL_GPIO_Init+0x300>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d101      	bne.n	80023c6 <HAL_GPIO_Init+0x1f2>
 80023c2:	2304      	movs	r3, #4
 80023c4:	e008      	b.n	80023d8 <HAL_GPIO_Init+0x204>
 80023c6:	2307      	movs	r3, #7
 80023c8:	e006      	b.n	80023d8 <HAL_GPIO_Init+0x204>
 80023ca:	2303      	movs	r3, #3
 80023cc:	e004      	b.n	80023d8 <HAL_GPIO_Init+0x204>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e002      	b.n	80023d8 <HAL_GPIO_Init+0x204>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <HAL_GPIO_Init+0x204>
 80023d6:	2300      	movs	r3, #0
 80023d8:	69fa      	ldr	r2, [r7, #28]
 80023da:	f002 0203 	and.w	r2, r2, #3
 80023de:	0092      	lsls	r2, r2, #2
 80023e0:	4093      	lsls	r3, r2
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023e8:	4935      	ldr	r1, [pc, #212]	; (80024c0 <HAL_GPIO_Init+0x2ec>)
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	089b      	lsrs	r3, r3, #2
 80023ee:	3302      	adds	r3, #2
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023f6:	4b38      	ldr	r3, [pc, #224]	; (80024d8 <HAL_GPIO_Init+0x304>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	43db      	mvns	r3, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4013      	ands	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800241a:	4a2f      	ldr	r2, [pc, #188]	; (80024d8 <HAL_GPIO_Init+0x304>)
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002420:	4b2d      	ldr	r3, [pc, #180]	; (80024d8 <HAL_GPIO_Init+0x304>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002444:	4a24      	ldr	r2, [pc, #144]	; (80024d8 <HAL_GPIO_Init+0x304>)
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800244a:	4b23      	ldr	r3, [pc, #140]	; (80024d8 <HAL_GPIO_Init+0x304>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	43db      	mvns	r3, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800246e:	4a1a      	ldr	r2, [pc, #104]	; (80024d8 <HAL_GPIO_Init+0x304>)
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002474:	4b18      	ldr	r3, [pc, #96]	; (80024d8 <HAL_GPIO_Init+0x304>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002498:	4a0f      	ldr	r2, [pc, #60]	; (80024d8 <HAL_GPIO_Init+0x304>)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3301      	adds	r3, #1
 80024a2:	61fb      	str	r3, [r7, #28]
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	2b0f      	cmp	r3, #15
 80024a8:	f67f aea2 	bls.w	80021f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024ac:	bf00      	nop
 80024ae:	bf00      	nop
 80024b0:	3724      	adds	r7, #36	; 0x24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40013800 	.word	0x40013800
 80024c4:	40020000 	.word	0x40020000
 80024c8:	40020400 	.word	0x40020400
 80024cc:	40020800 	.word	0x40020800
 80024d0:	40020c00 	.word	0x40020c00
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40013c00 	.word	0x40013c00

080024dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691a      	ldr	r2, [r3, #16]
 80024ec:	887b      	ldrh	r3, [r7, #2]
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d002      	beq.n	80024fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024f4:	2301      	movs	r3, #1
 80024f6:	73fb      	strb	r3, [r7, #15]
 80024f8:	e001      	b.n	80024fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024fa:	2300      	movs	r3, #0
 80024fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	807b      	strh	r3, [r7, #2]
 8002518:	4613      	mov	r3, r2
 800251a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800251c:	787b      	ldrb	r3, [r7, #1]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002522:	887a      	ldrh	r2, [r7, #2]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002528:	e003      	b.n	8002532 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800252a:	887b      	ldrh	r3, [r7, #2]
 800252c:	041a      	lsls	r2, r3, #16
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	619a      	str	r2, [r3, #24]
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800253e:	b480      	push	{r7}
 8002540:	b085      	sub	sp, #20
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
 8002546:	460b      	mov	r3, r1
 8002548:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002550:	887a      	ldrh	r2, [r7, #2]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4013      	ands	r3, r2
 8002556:	041a      	lsls	r2, r3, #16
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	43d9      	mvns	r1, r3
 800255c:	887b      	ldrh	r3, [r7, #2]
 800255e:	400b      	ands	r3, r1
 8002560:	431a      	orrs	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	619a      	str	r2, [r3, #24]
}
 8002566:	bf00      	nop
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
	...

08002574 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800257e:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002580:	695a      	ldr	r2, [r3, #20]
 8002582:	88fb      	ldrh	r3, [r7, #6]
 8002584:	4013      	ands	r3, r2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d006      	beq.n	8002598 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800258a:	4a05      	ldr	r2, [pc, #20]	; (80025a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800258c:	88fb      	ldrh	r3, [r7, #6]
 800258e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002590:	88fb      	ldrh	r3, [r7, #6]
 8002592:	4618      	mov	r0, r3
 8002594:	f7fe fdd6 	bl	8001144 <HAL_GPIO_EXTI_Callback>
  }
}
 8002598:	bf00      	nop
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40013c00 	.word	0x40013c00

080025a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e267      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d075      	beq.n	80026ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025c2:	4b88      	ldr	r3, [pc, #544]	; (80027e4 <HAL_RCC_OscConfig+0x240>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 030c 	and.w	r3, r3, #12
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d00c      	beq.n	80025e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ce:	4b85      	ldr	r3, [pc, #532]	; (80027e4 <HAL_RCC_OscConfig+0x240>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d112      	bne.n	8002600 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025da:	4b82      	ldr	r3, [pc, #520]	; (80027e4 <HAL_RCC_OscConfig+0x240>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025e6:	d10b      	bne.n	8002600 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e8:	4b7e      	ldr	r3, [pc, #504]	; (80027e4 <HAL_RCC_OscConfig+0x240>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d05b      	beq.n	80026ac <HAL_RCC_OscConfig+0x108>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d157      	bne.n	80026ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e242      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002608:	d106      	bne.n	8002618 <HAL_RCC_OscConfig+0x74>
 800260a:	4b76      	ldr	r3, [pc, #472]	; (80027e4 <HAL_RCC_OscConfig+0x240>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a75      	ldr	r2, [pc, #468]	; (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	e01d      	b.n	8002654 <HAL_RCC_OscConfig+0xb0>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002620:	d10c      	bne.n	800263c <HAL_RCC_OscConfig+0x98>
 8002622:	4b70      	ldr	r3, [pc, #448]	; (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a6f      	ldr	r2, [pc, #444]	; (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	4b6d      	ldr	r3, [pc, #436]	; (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a6c      	ldr	r2, [pc, #432]	; (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	e00b      	b.n	8002654 <HAL_RCC_OscConfig+0xb0>
 800263c:	4b69      	ldr	r3, [pc, #420]	; (80027e4 <HAL_RCC_OscConfig+0x240>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a68      	ldr	r2, [pc, #416]	; (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	4b66      	ldr	r3, [pc, #408]	; (80027e4 <HAL_RCC_OscConfig+0x240>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a65      	ldr	r2, [pc, #404]	; (80027e4 <HAL_RCC_OscConfig+0x240>)
 800264e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002652:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d013      	beq.n	8002684 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265c:	f7ff fc3a 	bl	8001ed4 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002664:	f7ff fc36 	bl	8001ed4 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b64      	cmp	r3, #100	; 0x64
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e207      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002676:	4b5b      	ldr	r3, [pc, #364]	; (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0xc0>
 8002682:	e014      	b.n	80026ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7ff fc26 	bl	8001ed4 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800268c:	f7ff fc22 	bl	8001ed4 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	; 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e1f3      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800269e:	4b51      	ldr	r3, [pc, #324]	; (80027e4 <HAL_RCC_OscConfig+0x240>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0xe8>
 80026aa:	e000      	b.n	80026ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d063      	beq.n	8002782 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ba:	4b4a      	ldr	r3, [pc, #296]	; (80027e4 <HAL_RCC_OscConfig+0x240>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 030c 	and.w	r3, r3, #12
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00b      	beq.n	80026de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026c6:	4b47      	ldr	r3, [pc, #284]	; (80027e4 <HAL_RCC_OscConfig+0x240>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d11c      	bne.n	800270c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026d2:	4b44      	ldr	r3, [pc, #272]	; (80027e4 <HAL_RCC_OscConfig+0x240>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d116      	bne.n	800270c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026de:	4b41      	ldr	r3, [pc, #260]	; (80027e4 <HAL_RCC_OscConfig+0x240>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d005      	beq.n	80026f6 <HAL_RCC_OscConfig+0x152>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d001      	beq.n	80026f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e1c7      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f6:	4b3b      	ldr	r3, [pc, #236]	; (80027e4 <HAL_RCC_OscConfig+0x240>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	4937      	ldr	r1, [pc, #220]	; (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002706:	4313      	orrs	r3, r2
 8002708:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800270a:	e03a      	b.n	8002782 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d020      	beq.n	8002756 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002714:	4b34      	ldr	r3, [pc, #208]	; (80027e8 <HAL_RCC_OscConfig+0x244>)
 8002716:	2201      	movs	r2, #1
 8002718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271a:	f7ff fbdb 	bl	8001ed4 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002722:	f7ff fbd7 	bl	8001ed4 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e1a8      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002734:	4b2b      	ldr	r3, [pc, #172]	; (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0f0      	beq.n	8002722 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002740:	4b28      	ldr	r3, [pc, #160]	; (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	4925      	ldr	r1, [pc, #148]	; (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002750:	4313      	orrs	r3, r2
 8002752:	600b      	str	r3, [r1, #0]
 8002754:	e015      	b.n	8002782 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002756:	4b24      	ldr	r3, [pc, #144]	; (80027e8 <HAL_RCC_OscConfig+0x244>)
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275c:	f7ff fbba 	bl	8001ed4 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002764:	f7ff fbb6 	bl	8001ed4 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e187      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002776:	4b1b      	ldr	r3, [pc, #108]	; (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b00      	cmp	r3, #0
 800278c:	d036      	beq.n	80027fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d016      	beq.n	80027c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002796:	4b15      	ldr	r3, [pc, #84]	; (80027ec <HAL_RCC_OscConfig+0x248>)
 8002798:	2201      	movs	r2, #1
 800279a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279c:	f7ff fb9a 	bl	8001ed4 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027a4:	f7ff fb96 	bl	8001ed4 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e167      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b6:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <HAL_RCC_OscConfig+0x240>)
 80027b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f0      	beq.n	80027a4 <HAL_RCC_OscConfig+0x200>
 80027c2:	e01b      	b.n	80027fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027c4:	4b09      	ldr	r3, [pc, #36]	; (80027ec <HAL_RCC_OscConfig+0x248>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ca:	f7ff fb83 	bl	8001ed4 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d0:	e00e      	b.n	80027f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027d2:	f7ff fb7f 	bl	8001ed4 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d907      	bls.n	80027f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e150      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
 80027e4:	40023800 	.word	0x40023800
 80027e8:	42470000 	.word	0x42470000
 80027ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f0:	4b88      	ldr	r3, [pc, #544]	; (8002a14 <HAL_RCC_OscConfig+0x470>)
 80027f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1ea      	bne.n	80027d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 8097 	beq.w	8002938 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800280a:	2300      	movs	r3, #0
 800280c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800280e:	4b81      	ldr	r3, [pc, #516]	; (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10f      	bne.n	800283a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	4b7d      	ldr	r3, [pc, #500]	; (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	4a7c      	ldr	r2, [pc, #496]	; (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002828:	6413      	str	r3, [r2, #64]	; 0x40
 800282a:	4b7a      	ldr	r3, [pc, #488]	; (8002a14 <HAL_RCC_OscConfig+0x470>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002832:	60bb      	str	r3, [r7, #8]
 8002834:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002836:	2301      	movs	r3, #1
 8002838:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283a:	4b77      	ldr	r3, [pc, #476]	; (8002a18 <HAL_RCC_OscConfig+0x474>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002842:	2b00      	cmp	r3, #0
 8002844:	d118      	bne.n	8002878 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002846:	4b74      	ldr	r3, [pc, #464]	; (8002a18 <HAL_RCC_OscConfig+0x474>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a73      	ldr	r2, [pc, #460]	; (8002a18 <HAL_RCC_OscConfig+0x474>)
 800284c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002850:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002852:	f7ff fb3f 	bl	8001ed4 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800285a:	f7ff fb3b 	bl	8001ed4 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e10c      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286c:	4b6a      	ldr	r3, [pc, #424]	; (8002a18 <HAL_RCC_OscConfig+0x474>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0f0      	beq.n	800285a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d106      	bne.n	800288e <HAL_RCC_OscConfig+0x2ea>
 8002880:	4b64      	ldr	r3, [pc, #400]	; (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002884:	4a63      	ldr	r2, [pc, #396]	; (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	6713      	str	r3, [r2, #112]	; 0x70
 800288c:	e01c      	b.n	80028c8 <HAL_RCC_OscConfig+0x324>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	2b05      	cmp	r3, #5
 8002894:	d10c      	bne.n	80028b0 <HAL_RCC_OscConfig+0x30c>
 8002896:	4b5f      	ldr	r3, [pc, #380]	; (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289a:	4a5e      	ldr	r2, [pc, #376]	; (8002a14 <HAL_RCC_OscConfig+0x470>)
 800289c:	f043 0304 	orr.w	r3, r3, #4
 80028a0:	6713      	str	r3, [r2, #112]	; 0x70
 80028a2:	4b5c      	ldr	r3, [pc, #368]	; (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a6:	4a5b      	ldr	r2, [pc, #364]	; (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	6713      	str	r3, [r2, #112]	; 0x70
 80028ae:	e00b      	b.n	80028c8 <HAL_RCC_OscConfig+0x324>
 80028b0:	4b58      	ldr	r3, [pc, #352]	; (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b4:	4a57      	ldr	r2, [pc, #348]	; (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028b6:	f023 0301 	bic.w	r3, r3, #1
 80028ba:	6713      	str	r3, [r2, #112]	; 0x70
 80028bc:	4b55      	ldr	r3, [pc, #340]	; (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c0:	4a54      	ldr	r2, [pc, #336]	; (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028c2:	f023 0304 	bic.w	r3, r3, #4
 80028c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d015      	beq.n	80028fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d0:	f7ff fb00 	bl	8001ed4 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d6:	e00a      	b.n	80028ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028d8:	f7ff fafc 	bl	8001ed4 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e0cb      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ee:	4b49      	ldr	r3, [pc, #292]	; (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0ee      	beq.n	80028d8 <HAL_RCC_OscConfig+0x334>
 80028fa:	e014      	b.n	8002926 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fc:	f7ff faea 	bl	8001ed4 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002902:	e00a      	b.n	800291a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002904:	f7ff fae6 	bl	8001ed4 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002912:	4293      	cmp	r3, r2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e0b5      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800291a:	4b3e      	ldr	r3, [pc, #248]	; (8002a14 <HAL_RCC_OscConfig+0x470>)
 800291c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1ee      	bne.n	8002904 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002926:	7dfb      	ldrb	r3, [r7, #23]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d105      	bne.n	8002938 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800292c:	4b39      	ldr	r3, [pc, #228]	; (8002a14 <HAL_RCC_OscConfig+0x470>)
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	4a38      	ldr	r2, [pc, #224]	; (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002932:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002936:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 80a1 	beq.w	8002a84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002942:	4b34      	ldr	r3, [pc, #208]	; (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 030c 	and.w	r3, r3, #12
 800294a:	2b08      	cmp	r3, #8
 800294c:	d05c      	beq.n	8002a08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d141      	bne.n	80029da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002956:	4b31      	ldr	r3, [pc, #196]	; (8002a1c <HAL_RCC_OscConfig+0x478>)
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295c:	f7ff faba 	bl	8001ed4 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002964:	f7ff fab6 	bl	8001ed4 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e087      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002976:	4b27      	ldr	r3, [pc, #156]	; (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69da      	ldr	r2, [r3, #28]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	019b      	lsls	r3, r3, #6
 8002992:	431a      	orrs	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002998:	085b      	lsrs	r3, r3, #1
 800299a:	3b01      	subs	r3, #1
 800299c:	041b      	lsls	r3, r3, #16
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a4:	061b      	lsls	r3, r3, #24
 80029a6:	491b      	ldr	r1, [pc, #108]	; (8002a14 <HAL_RCC_OscConfig+0x470>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029ac:	4b1b      	ldr	r3, [pc, #108]	; (8002a1c <HAL_RCC_OscConfig+0x478>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b2:	f7ff fa8f 	bl	8001ed4 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ba:	f7ff fa8b 	bl	8001ed4 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e05c      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029cc:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <HAL_RCC_OscConfig+0x470>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0f0      	beq.n	80029ba <HAL_RCC_OscConfig+0x416>
 80029d8:	e054      	b.n	8002a84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029da:	4b10      	ldr	r3, [pc, #64]	; (8002a1c <HAL_RCC_OscConfig+0x478>)
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e0:	f7ff fa78 	bl	8001ed4 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e8:	f7ff fa74 	bl	8001ed4 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e045      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fa:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <HAL_RCC_OscConfig+0x470>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f0      	bne.n	80029e8 <HAL_RCC_OscConfig+0x444>
 8002a06:	e03d      	b.n	8002a84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d107      	bne.n	8002a20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e038      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
 8002a14:	40023800 	.word	0x40023800
 8002a18:	40007000 	.word	0x40007000
 8002a1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a20:	4b1b      	ldr	r3, [pc, #108]	; (8002a90 <HAL_RCC_OscConfig+0x4ec>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d028      	beq.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d121      	bne.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d11a      	bne.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a50:	4013      	ands	r3, r2
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d111      	bne.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a66:	085b      	lsrs	r3, r3, #1
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d107      	bne.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d001      	beq.n	8002a84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e000      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40023800 	.word	0x40023800

08002a94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0cc      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa8:	4b68      	ldr	r3, [pc, #416]	; (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d90c      	bls.n	8002ad0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab6:	4b65      	ldr	r3, [pc, #404]	; (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002abe:	4b63      	ldr	r3, [pc, #396]	; (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e0b8      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d020      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d005      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ae8:	4b59      	ldr	r3, [pc, #356]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	4a58      	ldr	r2, [pc, #352]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002af2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0308 	and.w	r3, r3, #8
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b00:	4b53      	ldr	r3, [pc, #332]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	4a52      	ldr	r2, [pc, #328]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b0c:	4b50      	ldr	r3, [pc, #320]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	494d      	ldr	r1, [pc, #308]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d044      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d107      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b32:	4b47      	ldr	r3, [pc, #284]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d119      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e07f      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d003      	beq.n	8002b52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	d107      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b52:	4b3f      	ldr	r3, [pc, #252]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d109      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e06f      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b62:	4b3b      	ldr	r3, [pc, #236]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e067      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b72:	4b37      	ldr	r3, [pc, #220]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f023 0203 	bic.w	r2, r3, #3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	4934      	ldr	r1, [pc, #208]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b84:	f7ff f9a6 	bl	8001ed4 <HAL_GetTick>
 8002b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8a:	e00a      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8c:	f7ff f9a2 	bl	8001ed4 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e04f      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba2:	4b2b      	ldr	r3, [pc, #172]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 020c 	and.w	r2, r3, #12
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d1eb      	bne.n	8002b8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb4:	4b25      	ldr	r3, [pc, #148]	; (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d20c      	bcs.n	8002bdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc2:	4b22      	ldr	r3, [pc, #136]	; (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bca:	4b20      	ldr	r3, [pc, #128]	; (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d001      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e032      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d008      	beq.n	8002bfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be8:	4b19      	ldr	r3, [pc, #100]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	4916      	ldr	r1, [pc, #88]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d009      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c06:	4b12      	ldr	r3, [pc, #72]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	490e      	ldr	r1, [pc, #56]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c1a:	f000 f821 	bl	8002c60 <HAL_RCC_GetSysClockFreq>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	091b      	lsrs	r3, r3, #4
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	490a      	ldr	r1, [pc, #40]	; (8002c54 <HAL_RCC_ClockConfig+0x1c0>)
 8002c2c:	5ccb      	ldrb	r3, [r1, r3]
 8002c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c32:	4a09      	ldr	r2, [pc, #36]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c36:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <HAL_RCC_ClockConfig+0x1c8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff f814 	bl	8001c68 <HAL_InitTick>

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40023c00 	.word	0x40023c00
 8002c50:	40023800 	.word	0x40023800
 8002c54:	080085e4 	.word	0x080085e4
 8002c58:	20000000 	.word	0x20000000
 8002c5c:	20000004 	.word	0x20000004

08002c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c64:	b094      	sub	sp, #80	; 0x50
 8002c66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	647b      	str	r3, [r7, #68]	; 0x44
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c70:	2300      	movs	r3, #0
 8002c72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c78:	4b79      	ldr	r3, [pc, #484]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 030c 	and.w	r3, r3, #12
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d00d      	beq.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x40>
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	f200 80e1 	bhi.w	8002e4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d002      	beq.n	8002c94 <HAL_RCC_GetSysClockFreq+0x34>
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d003      	beq.n	8002c9a <HAL_RCC_GetSysClockFreq+0x3a>
 8002c92:	e0db      	b.n	8002e4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c94:	4b73      	ldr	r3, [pc, #460]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c96:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c98:	e0db      	b.n	8002e52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c9a:	4b73      	ldr	r3, [pc, #460]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c9e:	e0d8      	b.n	8002e52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ca0:	4b6f      	ldr	r3, [pc, #444]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ca8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002caa:	4b6d      	ldr	r3, [pc, #436]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d063      	beq.n	8002d7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cb6:	4b6a      	ldr	r3, [pc, #424]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	099b      	lsrs	r3, r3, #6
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cc0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cc8:	633b      	str	r3, [r7, #48]	; 0x30
 8002cca:	2300      	movs	r3, #0
 8002ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8002cce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002cd2:	4622      	mov	r2, r4
 8002cd4:	462b      	mov	r3, r5
 8002cd6:	f04f 0000 	mov.w	r0, #0
 8002cda:	f04f 0100 	mov.w	r1, #0
 8002cde:	0159      	lsls	r1, r3, #5
 8002ce0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ce4:	0150      	lsls	r0, r2, #5
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	4621      	mov	r1, r4
 8002cec:	1a51      	subs	r1, r2, r1
 8002cee:	6139      	str	r1, [r7, #16]
 8002cf0:	4629      	mov	r1, r5
 8002cf2:	eb63 0301 	sbc.w	r3, r3, r1
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d04:	4659      	mov	r1, fp
 8002d06:	018b      	lsls	r3, r1, #6
 8002d08:	4651      	mov	r1, sl
 8002d0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d0e:	4651      	mov	r1, sl
 8002d10:	018a      	lsls	r2, r1, #6
 8002d12:	4651      	mov	r1, sl
 8002d14:	ebb2 0801 	subs.w	r8, r2, r1
 8002d18:	4659      	mov	r1, fp
 8002d1a:	eb63 0901 	sbc.w	r9, r3, r1
 8002d1e:	f04f 0200 	mov.w	r2, #0
 8002d22:	f04f 0300 	mov.w	r3, #0
 8002d26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d32:	4690      	mov	r8, r2
 8002d34:	4699      	mov	r9, r3
 8002d36:	4623      	mov	r3, r4
 8002d38:	eb18 0303 	adds.w	r3, r8, r3
 8002d3c:	60bb      	str	r3, [r7, #8]
 8002d3e:	462b      	mov	r3, r5
 8002d40:	eb49 0303 	adc.w	r3, r9, r3
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	f04f 0300 	mov.w	r3, #0
 8002d4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d52:	4629      	mov	r1, r5
 8002d54:	024b      	lsls	r3, r1, #9
 8002d56:	4621      	mov	r1, r4
 8002d58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d5c:	4621      	mov	r1, r4
 8002d5e:	024a      	lsls	r2, r1, #9
 8002d60:	4610      	mov	r0, r2
 8002d62:	4619      	mov	r1, r3
 8002d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d66:	2200      	movs	r2, #0
 8002d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d70:	f7fd fdac 	bl	80008cc <__aeabi_uldivmod>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4613      	mov	r3, r2
 8002d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d7c:	e058      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d7e:	4b38      	ldr	r3, [pc, #224]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	099b      	lsrs	r3, r3, #6
 8002d84:	2200      	movs	r2, #0
 8002d86:	4618      	mov	r0, r3
 8002d88:	4611      	mov	r1, r2
 8002d8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d8e:	623b      	str	r3, [r7, #32]
 8002d90:	2300      	movs	r3, #0
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24
 8002d94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d98:	4642      	mov	r2, r8
 8002d9a:	464b      	mov	r3, r9
 8002d9c:	f04f 0000 	mov.w	r0, #0
 8002da0:	f04f 0100 	mov.w	r1, #0
 8002da4:	0159      	lsls	r1, r3, #5
 8002da6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002daa:	0150      	lsls	r0, r2, #5
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	4641      	mov	r1, r8
 8002db2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002db6:	4649      	mov	r1, r9
 8002db8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	f04f 0300 	mov.w	r3, #0
 8002dc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002dc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002dcc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002dd0:	ebb2 040a 	subs.w	r4, r2, sl
 8002dd4:	eb63 050b 	sbc.w	r5, r3, fp
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	00eb      	lsls	r3, r5, #3
 8002de2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002de6:	00e2      	lsls	r2, r4, #3
 8002de8:	4614      	mov	r4, r2
 8002dea:	461d      	mov	r5, r3
 8002dec:	4643      	mov	r3, r8
 8002dee:	18e3      	adds	r3, r4, r3
 8002df0:	603b      	str	r3, [r7, #0]
 8002df2:	464b      	mov	r3, r9
 8002df4:	eb45 0303 	adc.w	r3, r5, r3
 8002df8:	607b      	str	r3, [r7, #4]
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e06:	4629      	mov	r1, r5
 8002e08:	028b      	lsls	r3, r1, #10
 8002e0a:	4621      	mov	r1, r4
 8002e0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e10:	4621      	mov	r1, r4
 8002e12:	028a      	lsls	r2, r1, #10
 8002e14:	4610      	mov	r0, r2
 8002e16:	4619      	mov	r1, r3
 8002e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	61bb      	str	r3, [r7, #24]
 8002e1e:	61fa      	str	r2, [r7, #28]
 8002e20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e24:	f7fd fd52 	bl	80008cc <__aeabi_uldivmod>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e30:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	0c1b      	lsrs	r3, r3, #16
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002e40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e4a:	e002      	b.n	8002e52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e4c:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3750      	adds	r7, #80	; 0x50
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e5e:	bf00      	nop
 8002e60:	40023800 	.word	0x40023800
 8002e64:	00f42400 	.word	0x00f42400
 8002e68:	007a1200 	.word	0x007a1200

08002e6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e70:	4b03      	ldr	r3, [pc, #12]	; (8002e80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e72:	681b      	ldr	r3, [r3, #0]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	20000000 	.word	0x20000000

08002e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e88:	f7ff fff0 	bl	8002e6c <HAL_RCC_GetHCLKFreq>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	0a9b      	lsrs	r3, r3, #10
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	4903      	ldr	r1, [pc, #12]	; (8002ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e9a:	5ccb      	ldrb	r3, [r1, r3]
 8002e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	080085f4 	.word	0x080085f4

08002eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002eb0:	f7ff ffdc 	bl	8002e6c <HAL_RCC_GetHCLKFreq>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	0b5b      	lsrs	r3, r3, #13
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	4903      	ldr	r1, [pc, #12]	; (8002ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ec2:	5ccb      	ldrb	r3, [r1, r3]
 8002ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	080085f4 	.word	0x080085f4

08002ed4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	220f      	movs	r2, #15
 8002ee2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ee4:	4b12      	ldr	r3, [pc, #72]	; (8002f30 <HAL_RCC_GetClockConfig+0x5c>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 0203 	and.w	r2, r3, #3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ef0:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <HAL_RCC_GetClockConfig+0x5c>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002efc:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <HAL_RCC_GetClockConfig+0x5c>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f08:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <HAL_RCC_GetClockConfig+0x5c>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	08db      	lsrs	r3, r3, #3
 8002f0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f16:	4b07      	ldr	r3, [pc, #28]	; (8002f34 <HAL_RCC_GetClockConfig+0x60>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0207 	and.w	r2, r3, #7
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	601a      	str	r2, [r3, #0]
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40023c00 	.word	0x40023c00

08002f38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e041      	b.n	8002fce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d106      	bne.n	8002f64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f839 	bl	8002fd6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2202      	movs	r2, #2
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3304      	adds	r3, #4
 8002f74:	4619      	mov	r1, r3
 8002f76:	4610      	mov	r0, r2
 8002f78:	f000 f9ca 	bl	8003310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
	...

08002fec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d001      	beq.n	8003004 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e044      	b.n	800308e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0201 	orr.w	r2, r2, #1
 800301a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a1e      	ldr	r2, [pc, #120]	; (800309c <HAL_TIM_Base_Start_IT+0xb0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d018      	beq.n	8003058 <HAL_TIM_Base_Start_IT+0x6c>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800302e:	d013      	beq.n	8003058 <HAL_TIM_Base_Start_IT+0x6c>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a1a      	ldr	r2, [pc, #104]	; (80030a0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d00e      	beq.n	8003058 <HAL_TIM_Base_Start_IT+0x6c>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a19      	ldr	r2, [pc, #100]	; (80030a4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d009      	beq.n	8003058 <HAL_TIM_Base_Start_IT+0x6c>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a17      	ldr	r2, [pc, #92]	; (80030a8 <HAL_TIM_Base_Start_IT+0xbc>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d004      	beq.n	8003058 <HAL_TIM_Base_Start_IT+0x6c>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a16      	ldr	r2, [pc, #88]	; (80030ac <HAL_TIM_Base_Start_IT+0xc0>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d111      	bne.n	800307c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2b06      	cmp	r3, #6
 8003068:	d010      	beq.n	800308c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f042 0201 	orr.w	r2, r2, #1
 8003078:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800307a:	e007      	b.n	800308c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0201 	orr.w	r2, r2, #1
 800308a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40010000 	.word	0x40010000
 80030a0:	40000400 	.word	0x40000400
 80030a4:	40000800 	.word	0x40000800
 80030a8:	40000c00 	.word	0x40000c00
 80030ac:	40014000 	.word	0x40014000

080030b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d122      	bne.n	800310c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d11b      	bne.n	800310c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f06f 0202 	mvn.w	r2, #2
 80030dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f8ee 	bl	80032d4 <HAL_TIM_IC_CaptureCallback>
 80030f8:	e005      	b.n	8003106 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f8e0 	bl	80032c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f8f1 	bl	80032e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f003 0304 	and.w	r3, r3, #4
 8003116:	2b04      	cmp	r3, #4
 8003118:	d122      	bne.n	8003160 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b04      	cmp	r3, #4
 8003126:	d11b      	bne.n	8003160 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f06f 0204 	mvn.w	r2, #4
 8003130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2202      	movs	r2, #2
 8003136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f8c4 	bl	80032d4 <HAL_TIM_IC_CaptureCallback>
 800314c:	e005      	b.n	800315a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f8b6 	bl	80032c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f8c7 	bl	80032e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	2b08      	cmp	r3, #8
 800316c:	d122      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f003 0308 	and.w	r3, r3, #8
 8003178:	2b08      	cmp	r3, #8
 800317a:	d11b      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f06f 0208 	mvn.w	r2, #8
 8003184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2204      	movs	r2, #4
 800318a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f89a 	bl	80032d4 <HAL_TIM_IC_CaptureCallback>
 80031a0:	e005      	b.n	80031ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f88c 	bl	80032c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f89d 	bl	80032e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f003 0310 	and.w	r3, r3, #16
 80031be:	2b10      	cmp	r3, #16
 80031c0:	d122      	bne.n	8003208 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f003 0310 	and.w	r3, r3, #16
 80031cc:	2b10      	cmp	r3, #16
 80031ce:	d11b      	bne.n	8003208 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0210 	mvn.w	r2, #16
 80031d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2208      	movs	r2, #8
 80031de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f870 	bl	80032d4 <HAL_TIM_IC_CaptureCallback>
 80031f4:	e005      	b.n	8003202 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f862 	bl	80032c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f873 	bl	80032e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b01      	cmp	r3, #1
 8003214:	d10e      	bne.n	8003234 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b01      	cmp	r3, #1
 8003222:	d107      	bne.n	8003234 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f06f 0201 	mvn.w	r2, #1
 800322c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7fe fc86 	bl	8001b40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800323e:	2b80      	cmp	r3, #128	; 0x80
 8003240:	d10e      	bne.n	8003260 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324c:	2b80      	cmp	r3, #128	; 0x80
 800324e:	d107      	bne.n	8003260 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f8e2 	bl	8003424 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326a:	2b40      	cmp	r3, #64	; 0x40
 800326c:	d10e      	bne.n	800328c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003278:	2b40      	cmp	r3, #64	; 0x40
 800327a:	d107      	bne.n	800328c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f838 	bl	80032fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	f003 0320 	and.w	r3, r3, #32
 8003296:	2b20      	cmp	r3, #32
 8003298:	d10e      	bne.n	80032b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f003 0320 	and.w	r3, r3, #32
 80032a4:	2b20      	cmp	r3, #32
 80032a6:	d107      	bne.n	80032b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f06f 0220 	mvn.w	r2, #32
 80032b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f8ac 	bl	8003410 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032b8:	bf00      	nop
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a34      	ldr	r2, [pc, #208]	; (80033f4 <TIM_Base_SetConfig+0xe4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00f      	beq.n	8003348 <TIM_Base_SetConfig+0x38>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800332e:	d00b      	beq.n	8003348 <TIM_Base_SetConfig+0x38>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a31      	ldr	r2, [pc, #196]	; (80033f8 <TIM_Base_SetConfig+0xe8>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d007      	beq.n	8003348 <TIM_Base_SetConfig+0x38>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a30      	ldr	r2, [pc, #192]	; (80033fc <TIM_Base_SetConfig+0xec>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d003      	beq.n	8003348 <TIM_Base_SetConfig+0x38>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a2f      	ldr	r2, [pc, #188]	; (8003400 <TIM_Base_SetConfig+0xf0>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d108      	bne.n	800335a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800334e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	4313      	orrs	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a25      	ldr	r2, [pc, #148]	; (80033f4 <TIM_Base_SetConfig+0xe4>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d01b      	beq.n	800339a <TIM_Base_SetConfig+0x8a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003368:	d017      	beq.n	800339a <TIM_Base_SetConfig+0x8a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a22      	ldr	r2, [pc, #136]	; (80033f8 <TIM_Base_SetConfig+0xe8>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d013      	beq.n	800339a <TIM_Base_SetConfig+0x8a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a21      	ldr	r2, [pc, #132]	; (80033fc <TIM_Base_SetConfig+0xec>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d00f      	beq.n	800339a <TIM_Base_SetConfig+0x8a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a20      	ldr	r2, [pc, #128]	; (8003400 <TIM_Base_SetConfig+0xf0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00b      	beq.n	800339a <TIM_Base_SetConfig+0x8a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a1f      	ldr	r2, [pc, #124]	; (8003404 <TIM_Base_SetConfig+0xf4>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d007      	beq.n	800339a <TIM_Base_SetConfig+0x8a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a1e      	ldr	r2, [pc, #120]	; (8003408 <TIM_Base_SetConfig+0xf8>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d003      	beq.n	800339a <TIM_Base_SetConfig+0x8a>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a1d      	ldr	r2, [pc, #116]	; (800340c <TIM_Base_SetConfig+0xfc>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d108      	bne.n	80033ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a08      	ldr	r2, [pc, #32]	; (80033f4 <TIM_Base_SetConfig+0xe4>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d103      	bne.n	80033e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	615a      	str	r2, [r3, #20]
}
 80033e6:	bf00      	nop
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40010000 	.word	0x40010000
 80033f8:	40000400 	.word	0x40000400
 80033fc:	40000800 	.word	0x40000800
 8003400:	40000c00 	.word	0x40000c00
 8003404:	40014000 	.word	0x40014000
 8003408:	40014400 	.word	0x40014400
 800340c:	40014800 	.word	0x40014800

08003410 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e03f      	b.n	80034ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d106      	bne.n	8003464 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7fe fbb2 	bl	8001bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2224      	movs	r2, #36	; 0x24
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68da      	ldr	r2, [r3, #12]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800347a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 fddb 	bl	8004038 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003490:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695a      	ldr	r2, [r3, #20]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b08a      	sub	sp, #40	; 0x28
 80034d6:	af02      	add	r7, sp, #8
 80034d8:	60f8      	str	r0, [r7, #12]
 80034da:	60b9      	str	r1, [r7, #8]
 80034dc:	603b      	str	r3, [r7, #0]
 80034de:	4613      	mov	r3, r2
 80034e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b20      	cmp	r3, #32
 80034f0:	d17c      	bne.n	80035ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <HAL_UART_Transmit+0x2c>
 80034f8:	88fb      	ldrh	r3, [r7, #6]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e075      	b.n	80035ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_UART_Transmit+0x3e>
 800350c:	2302      	movs	r3, #2
 800350e:	e06e      	b.n	80035ee <HAL_UART_Transmit+0x11c>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2221      	movs	r2, #33	; 0x21
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003526:	f7fe fcd5 	bl	8001ed4 <HAL_GetTick>
 800352a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	88fa      	ldrh	r2, [r7, #6]
 8003530:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	88fa      	ldrh	r2, [r7, #6]
 8003536:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003540:	d108      	bne.n	8003554 <HAL_UART_Transmit+0x82>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d104      	bne.n	8003554 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800354a:	2300      	movs	r3, #0
 800354c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	61bb      	str	r3, [r7, #24]
 8003552:	e003      	b.n	800355c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003558:	2300      	movs	r3, #0
 800355a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003564:	e02a      	b.n	80035bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2200      	movs	r2, #0
 800356e:	2180      	movs	r1, #128	; 0x80
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f000 fb1f 	bl	8003bb4 <UART_WaitOnFlagUntilTimeout>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e036      	b.n	80035ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10b      	bne.n	800359e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	461a      	mov	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003594:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	3302      	adds	r3, #2
 800359a:	61bb      	str	r3, [r7, #24]
 800359c:	e007      	b.n	80035ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	781a      	ldrb	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	3301      	adds	r3, #1
 80035ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1cf      	bne.n	8003566 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2200      	movs	r2, #0
 80035ce:	2140      	movs	r1, #64	; 0x40
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 faef 	bl	8003bb4 <UART_WaitOnFlagUntilTimeout>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e006      	b.n	80035ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2220      	movs	r2, #32
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035e8:	2300      	movs	r3, #0
 80035ea:	e000      	b.n	80035ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035ec:	2302      	movs	r3, #2
  }
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3720      	adds	r7, #32
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b084      	sub	sp, #16
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	60f8      	str	r0, [r7, #12]
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	4613      	mov	r3, r2
 8003602:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b20      	cmp	r3, #32
 800360e:	d11d      	bne.n	800364c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <HAL_UART_Receive_IT+0x26>
 8003616:	88fb      	ldrh	r3, [r7, #6]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e016      	b.n	800364e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <HAL_UART_Receive_IT+0x38>
 800362a:	2302      	movs	r3, #2
 800362c:	e00f      	b.n	800364e <HAL_UART_Receive_IT+0x58>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800363c:	88fb      	ldrh	r3, [r7, #6]
 800363e:	461a      	mov	r2, r3
 8003640:	68b9      	ldr	r1, [r7, #8]
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 fb24 	bl	8003c90 <UART_Start_Receive_IT>
 8003648:	4603      	mov	r3, r0
 800364a:	e000      	b.n	800364e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800364c:	2302      	movs	r3, #2
  }
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
	...

08003658 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b0ba      	sub	sp, #232	; 0xe8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800367e:	2300      	movs	r3, #0
 8003680:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003684:	2300      	movs	r3, #0
 8003686:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800368a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003696:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10f      	bne.n	80036be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800369e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d009      	beq.n	80036be <HAL_UART_IRQHandler+0x66>
 80036aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036ae:	f003 0320 	and.w	r3, r3, #32
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 fc03 	bl	8003ec2 <UART_Receive_IT>
      return;
 80036bc:	e256      	b.n	8003b6c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80036be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 80de 	beq.w	8003884 <HAL_UART_IRQHandler+0x22c>
 80036c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d106      	bne.n	80036e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 80d1 	beq.w	8003884 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00b      	beq.n	8003706 <HAL_UART_IRQHandler+0xae>
 80036ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d005      	beq.n	8003706 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	f043 0201 	orr.w	r2, r3, #1
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00b      	beq.n	800372a <HAL_UART_IRQHandler+0xd2>
 8003712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d005      	beq.n	800372a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	f043 0202 	orr.w	r2, r3, #2
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800372a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00b      	beq.n	800374e <HAL_UART_IRQHandler+0xf6>
 8003736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d005      	beq.n	800374e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	f043 0204 	orr.w	r2, r3, #4
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800374e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	2b00      	cmp	r3, #0
 8003758:	d011      	beq.n	800377e <HAL_UART_IRQHandler+0x126>
 800375a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800375e:	f003 0320 	and.w	r3, r3, #32
 8003762:	2b00      	cmp	r3, #0
 8003764:	d105      	bne.n	8003772 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d005      	beq.n	800377e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	f043 0208 	orr.w	r2, r3, #8
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 81ed 	beq.w	8003b62 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800378c:	f003 0320 	and.w	r3, r3, #32
 8003790:	2b00      	cmp	r3, #0
 8003792:	d008      	beq.n	80037a6 <HAL_UART_IRQHandler+0x14e>
 8003794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003798:	f003 0320 	and.w	r3, r3, #32
 800379c:	2b00      	cmp	r3, #0
 800379e:	d002      	beq.n	80037a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 fb8e 	bl	8003ec2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b0:	2b40      	cmp	r3, #64	; 0x40
 80037b2:	bf0c      	ite	eq
 80037b4:	2301      	moveq	r3, #1
 80037b6:	2300      	movne	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d103      	bne.n	80037d2 <HAL_UART_IRQHandler+0x17a>
 80037ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d04f      	beq.n	8003872 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 fa96 	bl	8003d04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e2:	2b40      	cmp	r3, #64	; 0x40
 80037e4:	d141      	bne.n	800386a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	3314      	adds	r3, #20
 80037ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037f4:	e853 3f00 	ldrex	r3, [r3]
 80037f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80037fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003804:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	3314      	adds	r3, #20
 800380e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003812:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003816:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800381e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003822:	e841 2300 	strex	r3, r2, [r1]
 8003826:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800382a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1d9      	bne.n	80037e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003836:	2b00      	cmp	r3, #0
 8003838:	d013      	beq.n	8003862 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383e:	4a7d      	ldr	r2, [pc, #500]	; (8003a34 <HAL_UART_IRQHandler+0x3dc>)
 8003840:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003846:	4618      	mov	r0, r3
 8003848:	f7fe fca2 	bl	8002190 <HAL_DMA_Abort_IT>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d016      	beq.n	8003880 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800385c:	4610      	mov	r0, r2
 800385e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003860:	e00e      	b.n	8003880 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f990 	bl	8003b88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003868:	e00a      	b.n	8003880 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f98c 	bl	8003b88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003870:	e006      	b.n	8003880 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f988 	bl	8003b88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800387e:	e170      	b.n	8003b62 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003880:	bf00      	nop
    return;
 8003882:	e16e      	b.n	8003b62 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003888:	2b01      	cmp	r3, #1
 800388a:	f040 814a 	bne.w	8003b22 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800388e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003892:	f003 0310 	and.w	r3, r3, #16
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 8143 	beq.w	8003b22 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800389c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038a0:	f003 0310 	and.w	r3, r3, #16
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 813c 	beq.w	8003b22 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038aa:	2300      	movs	r3, #0
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	60bb      	str	r3, [r7, #8]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	60bb      	str	r3, [r7, #8]
 80038be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ca:	2b40      	cmp	r3, #64	; 0x40
 80038cc:	f040 80b4 	bne.w	8003a38 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 8140 	beq.w	8003b66 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038ee:	429a      	cmp	r2, r3
 80038f0:	f080 8139 	bcs.w	8003b66 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003906:	f000 8088 	beq.w	8003a1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	330c      	adds	r3, #12
 8003910:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003914:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003918:	e853 3f00 	ldrex	r3, [r3]
 800391c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003920:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003928:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	330c      	adds	r3, #12
 8003932:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003936:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800393a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003942:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003946:	e841 2300 	strex	r3, r2, [r1]
 800394a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800394e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1d9      	bne.n	800390a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	3314      	adds	r3, #20
 800395c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003960:	e853 3f00 	ldrex	r3, [r3]
 8003964:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003966:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003968:	f023 0301 	bic.w	r3, r3, #1
 800396c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	3314      	adds	r3, #20
 8003976:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800397a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800397e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003980:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003982:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003986:	e841 2300 	strex	r3, r2, [r1]
 800398a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800398c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1e1      	bne.n	8003956 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3314      	adds	r3, #20
 8003998:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800399c:	e853 3f00 	ldrex	r3, [r3]
 80039a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80039a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3314      	adds	r3, #20
 80039b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80039b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80039b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80039bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80039be:	e841 2300 	strex	r3, r2, [r1]
 80039c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80039c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1e3      	bne.n	8003992 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	330c      	adds	r3, #12
 80039de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039e2:	e853 3f00 	ldrex	r3, [r3]
 80039e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80039e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039ea:	f023 0310 	bic.w	r3, r3, #16
 80039ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	330c      	adds	r3, #12
 80039f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80039fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80039fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a04:	e841 2300 	strex	r3, r2, [r1]
 8003a08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1e3      	bne.n	80039d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fe fb4b 	bl	80020b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	4619      	mov	r1, r3
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f8b6 	bl	8003b9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a30:	e099      	b.n	8003b66 <HAL_UART_IRQHandler+0x50e>
 8003a32:	bf00      	nop
 8003a34:	08003dcb 	.word	0x08003dcb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 808b 	beq.w	8003b6a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003a54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 8086 	beq.w	8003b6a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	330c      	adds	r3, #12
 8003a64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a68:	e853 3f00 	ldrex	r3, [r3]
 8003a6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	330c      	adds	r3, #12
 8003a7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003a82:	647a      	str	r2, [r7, #68]	; 0x44
 8003a84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a8a:	e841 2300 	strex	r3, r2, [r1]
 8003a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1e3      	bne.n	8003a5e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	3314      	adds	r3, #20
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	e853 3f00 	ldrex	r3, [r3]
 8003aa4:	623b      	str	r3, [r7, #32]
   return(result);
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
 8003aa8:	f023 0301 	bic.w	r3, r3, #1
 8003aac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	3314      	adds	r3, #20
 8003ab6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003aba:	633a      	str	r2, [r7, #48]	; 0x30
 8003abc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ac2:	e841 2300 	strex	r3, r2, [r1]
 8003ac6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1e3      	bne.n	8003a96 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	330c      	adds	r3, #12
 8003ae2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	e853 3f00 	ldrex	r3, [r3]
 8003aea:	60fb      	str	r3, [r7, #12]
   return(result);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 0310 	bic.w	r3, r3, #16
 8003af2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	330c      	adds	r3, #12
 8003afc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003b00:	61fa      	str	r2, [r7, #28]
 8003b02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b04:	69b9      	ldr	r1, [r7, #24]
 8003b06:	69fa      	ldr	r2, [r7, #28]
 8003b08:	e841 2300 	strex	r3, r2, [r1]
 8003b0c:	617b      	str	r3, [r7, #20]
   return(result);
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1e3      	bne.n	8003adc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b18:	4619      	mov	r1, r3
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f83e 	bl	8003b9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b20:	e023      	b.n	8003b6a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d009      	beq.n	8003b42 <HAL_UART_IRQHandler+0x4ea>
 8003b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f959 	bl	8003df2 <UART_Transmit_IT>
    return;
 8003b40:	e014      	b.n	8003b6c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00e      	beq.n	8003b6c <HAL_UART_IRQHandler+0x514>
 8003b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d008      	beq.n	8003b6c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f999 	bl	8003e92 <UART_EndTransmit_IT>
    return;
 8003b60:	e004      	b.n	8003b6c <HAL_UART_IRQHandler+0x514>
    return;
 8003b62:	bf00      	nop
 8003b64:	e002      	b.n	8003b6c <HAL_UART_IRQHandler+0x514>
      return;
 8003b66:	bf00      	nop
 8003b68:	e000      	b.n	8003b6c <HAL_UART_IRQHandler+0x514>
      return;
 8003b6a:	bf00      	nop
  }
}
 8003b6c:	37e8      	adds	r7, #232	; 0xe8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop

08003b74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b090      	sub	sp, #64	; 0x40
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	603b      	str	r3, [r7, #0]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bc4:	e050      	b.n	8003c68 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bcc:	d04c      	beq.n	8003c68 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d007      	beq.n	8003be4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bd4:	f7fe f97e 	bl	8001ed4 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d241      	bcs.n	8003c68 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	330c      	adds	r3, #12
 8003bea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bee:	e853 3f00 	ldrex	r3, [r3]
 8003bf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	330c      	adds	r3, #12
 8003c02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c04:	637a      	str	r2, [r7, #52]	; 0x34
 8003c06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c0c:	e841 2300 	strex	r3, r2, [r1]
 8003c10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1e5      	bne.n	8003be4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	3314      	adds	r3, #20
 8003c1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	e853 3f00 	ldrex	r3, [r3]
 8003c26:	613b      	str	r3, [r7, #16]
   return(result);
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	f023 0301 	bic.w	r3, r3, #1
 8003c2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	3314      	adds	r3, #20
 8003c36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c38:	623a      	str	r2, [r7, #32]
 8003c3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3c:	69f9      	ldr	r1, [r7, #28]
 8003c3e:	6a3a      	ldr	r2, [r7, #32]
 8003c40:	e841 2300 	strex	r3, r2, [r1]
 8003c44:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1e5      	bne.n	8003c18 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e00f      	b.n	8003c88 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	4013      	ands	r3, r2
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	bf0c      	ite	eq
 8003c78:	2301      	moveq	r3, #1
 8003c7a:	2300      	movne	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	461a      	mov	r2, r3
 8003c80:	79fb      	ldrb	r3, [r7, #7]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d09f      	beq.n	8003bc6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3740      	adds	r7, #64	; 0x40
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	88fa      	ldrh	r2, [r7, #6]
 8003ca8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	88fa      	ldrh	r2, [r7, #6]
 8003cae:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2222      	movs	r2, #34	; 0x22
 8003cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cd4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695a      	ldr	r2, [r3, #20]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f042 0201 	orr.w	r2, r2, #1
 8003ce4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68da      	ldr	r2, [r3, #12]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f042 0220 	orr.w	r2, r2, #32
 8003cf4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b095      	sub	sp, #84	; 0x54
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	330c      	adds	r3, #12
 8003d12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d16:	e853 3f00 	ldrex	r3, [r3]
 8003d1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	330c      	adds	r3, #12
 8003d2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d2c:	643a      	str	r2, [r7, #64]	; 0x40
 8003d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d34:	e841 2300 	strex	r3, r2, [r1]
 8003d38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1e5      	bne.n	8003d0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3314      	adds	r3, #20
 8003d46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	e853 3f00 	ldrex	r3, [r3]
 8003d4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	f023 0301 	bic.w	r3, r3, #1
 8003d56:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3314      	adds	r3, #20
 8003d5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d68:	e841 2300 	strex	r3, r2, [r1]
 8003d6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1e5      	bne.n	8003d40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d119      	bne.n	8003db0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	330c      	adds	r3, #12
 8003d82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	e853 3f00 	ldrex	r3, [r3]
 8003d8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	f023 0310 	bic.w	r3, r3, #16
 8003d92:	647b      	str	r3, [r7, #68]	; 0x44
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	330c      	adds	r3, #12
 8003d9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d9c:	61ba      	str	r2, [r7, #24]
 8003d9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da0:	6979      	ldr	r1, [r7, #20]
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	e841 2300 	strex	r3, r2, [r1]
 8003da8:	613b      	str	r3, [r7, #16]
   return(result);
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1e5      	bne.n	8003d7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003dbe:	bf00      	nop
 8003dc0:	3754      	adds	r7, #84	; 0x54
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b084      	sub	sp, #16
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f7ff fecf 	bl	8003b88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dea:	bf00      	nop
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b085      	sub	sp, #20
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b21      	cmp	r3, #33	; 0x21
 8003e04:	d13e      	bne.n	8003e84 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e0e:	d114      	bne.n	8003e3a <UART_Transmit_IT+0x48>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d110      	bne.n	8003e3a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	461a      	mov	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e2c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	1c9a      	adds	r2, r3, #2
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	621a      	str	r2, [r3, #32]
 8003e38:	e008      	b.n	8003e4c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	1c59      	adds	r1, r3, #1
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6211      	str	r1, [r2, #32]
 8003e44:	781a      	ldrb	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	4619      	mov	r1, r3
 8003e5a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10f      	bne.n	8003e80 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e80:	2300      	movs	r3, #0
 8003e82:	e000      	b.n	8003e86 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e84:	2302      	movs	r3, #2
  }
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b082      	sub	sp, #8
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68da      	ldr	r2, [r3, #12]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ea8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7ff fe5e 	bl	8003b74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b08c      	sub	sp, #48	; 0x30
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b22      	cmp	r3, #34	; 0x22
 8003ed4:	f040 80ab 	bne.w	800402e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee0:	d117      	bne.n	8003f12 <UART_Receive_IT+0x50>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d113      	bne.n	8003f12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003eea:	2300      	movs	r3, #0
 8003eec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0a:	1c9a      	adds	r2, r3, #2
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	629a      	str	r2, [r3, #40]	; 0x28
 8003f10:	e026      	b.n	8003f60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f24:	d007      	beq.n	8003f36 <UART_Receive_IT+0x74>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10a      	bne.n	8003f44 <UART_Receive_IT+0x82>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d106      	bne.n	8003f44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f40:	701a      	strb	r2, [r3, #0]
 8003f42:	e008      	b.n	8003f56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5a:	1c5a      	adds	r2, r3, #1
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d15a      	bne.n	800402a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 0220 	bic.w	r2, r2, #32
 8003f82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695a      	ldr	r2, [r3, #20]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0201 	bic.w	r2, r2, #1
 8003fa2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d135      	bne.n	8004020 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	330c      	adds	r3, #12
 8003fc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	e853 3f00 	ldrex	r3, [r3]
 8003fc8:	613b      	str	r3, [r7, #16]
   return(result);
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	f023 0310 	bic.w	r3, r3, #16
 8003fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	330c      	adds	r3, #12
 8003fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fda:	623a      	str	r2, [r7, #32]
 8003fdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fde:	69f9      	ldr	r1, [r7, #28]
 8003fe0:	6a3a      	ldr	r2, [r7, #32]
 8003fe2:	e841 2300 	strex	r3, r2, [r1]
 8003fe6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1e5      	bne.n	8003fba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0310 	and.w	r3, r3, #16
 8003ff8:	2b10      	cmp	r3, #16
 8003ffa:	d10a      	bne.n	8004012 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004016:	4619      	mov	r1, r3
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7ff fdbf 	bl	8003b9c <HAL_UARTEx_RxEventCallback>
 800401e:	e002      	b.n	8004026 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7fd f8af 	bl	8001184 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	e002      	b.n	8004030 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	e000      	b.n	8004030 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800402e:	2302      	movs	r3, #2
  }
}
 8004030:	4618      	mov	r0, r3
 8004032:	3730      	adds	r7, #48	; 0x30
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800403c:	b0c0      	sub	sp, #256	; 0x100
 800403e:	af00      	add	r7, sp, #0
 8004040:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004054:	68d9      	ldr	r1, [r3, #12]
 8004056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	ea40 0301 	orr.w	r3, r0, r1
 8004060:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	431a      	orrs	r2, r3
 8004070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	431a      	orrs	r2, r3
 8004078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004090:	f021 010c 	bic.w	r1, r1, #12
 8004094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800409e:	430b      	orrs	r3, r1
 80040a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80040ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b2:	6999      	ldr	r1, [r3, #24]
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	ea40 0301 	orr.w	r3, r0, r1
 80040be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	4b8f      	ldr	r3, [pc, #572]	; (8004304 <UART_SetConfig+0x2cc>)
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d005      	beq.n	80040d8 <UART_SetConfig+0xa0>
 80040cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	4b8d      	ldr	r3, [pc, #564]	; (8004308 <UART_SetConfig+0x2d0>)
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d104      	bne.n	80040e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040d8:	f7fe fee8 	bl	8002eac <HAL_RCC_GetPCLK2Freq>
 80040dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80040e0:	e003      	b.n	80040ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040e2:	f7fe fecf 	bl	8002e84 <HAL_RCC_GetPCLK1Freq>
 80040e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040f4:	f040 810c 	bne.w	8004310 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040fc:	2200      	movs	r2, #0
 80040fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004102:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004106:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800410a:	4622      	mov	r2, r4
 800410c:	462b      	mov	r3, r5
 800410e:	1891      	adds	r1, r2, r2
 8004110:	65b9      	str	r1, [r7, #88]	; 0x58
 8004112:	415b      	adcs	r3, r3
 8004114:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004116:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800411a:	4621      	mov	r1, r4
 800411c:	eb12 0801 	adds.w	r8, r2, r1
 8004120:	4629      	mov	r1, r5
 8004122:	eb43 0901 	adc.w	r9, r3, r1
 8004126:	f04f 0200 	mov.w	r2, #0
 800412a:	f04f 0300 	mov.w	r3, #0
 800412e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004132:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004136:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800413a:	4690      	mov	r8, r2
 800413c:	4699      	mov	r9, r3
 800413e:	4623      	mov	r3, r4
 8004140:	eb18 0303 	adds.w	r3, r8, r3
 8004144:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004148:	462b      	mov	r3, r5
 800414a:	eb49 0303 	adc.w	r3, r9, r3
 800414e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800415e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004162:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004166:	460b      	mov	r3, r1
 8004168:	18db      	adds	r3, r3, r3
 800416a:	653b      	str	r3, [r7, #80]	; 0x50
 800416c:	4613      	mov	r3, r2
 800416e:	eb42 0303 	adc.w	r3, r2, r3
 8004172:	657b      	str	r3, [r7, #84]	; 0x54
 8004174:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004178:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800417c:	f7fc fba6 	bl	80008cc <__aeabi_uldivmod>
 8004180:	4602      	mov	r2, r0
 8004182:	460b      	mov	r3, r1
 8004184:	4b61      	ldr	r3, [pc, #388]	; (800430c <UART_SetConfig+0x2d4>)
 8004186:	fba3 2302 	umull	r2, r3, r3, r2
 800418a:	095b      	lsrs	r3, r3, #5
 800418c:	011c      	lsls	r4, r3, #4
 800418e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004192:	2200      	movs	r2, #0
 8004194:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004198:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800419c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80041a0:	4642      	mov	r2, r8
 80041a2:	464b      	mov	r3, r9
 80041a4:	1891      	adds	r1, r2, r2
 80041a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80041a8:	415b      	adcs	r3, r3
 80041aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80041b0:	4641      	mov	r1, r8
 80041b2:	eb12 0a01 	adds.w	sl, r2, r1
 80041b6:	4649      	mov	r1, r9
 80041b8:	eb43 0b01 	adc.w	fp, r3, r1
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041d0:	4692      	mov	sl, r2
 80041d2:	469b      	mov	fp, r3
 80041d4:	4643      	mov	r3, r8
 80041d6:	eb1a 0303 	adds.w	r3, sl, r3
 80041da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041de:	464b      	mov	r3, r9
 80041e0:	eb4b 0303 	adc.w	r3, fp, r3
 80041e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80041e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80041f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80041fc:	460b      	mov	r3, r1
 80041fe:	18db      	adds	r3, r3, r3
 8004200:	643b      	str	r3, [r7, #64]	; 0x40
 8004202:	4613      	mov	r3, r2
 8004204:	eb42 0303 	adc.w	r3, r2, r3
 8004208:	647b      	str	r3, [r7, #68]	; 0x44
 800420a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800420e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004212:	f7fc fb5b 	bl	80008cc <__aeabi_uldivmod>
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	4611      	mov	r1, r2
 800421c:	4b3b      	ldr	r3, [pc, #236]	; (800430c <UART_SetConfig+0x2d4>)
 800421e:	fba3 2301 	umull	r2, r3, r3, r1
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	2264      	movs	r2, #100	; 0x64
 8004226:	fb02 f303 	mul.w	r3, r2, r3
 800422a:	1acb      	subs	r3, r1, r3
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004232:	4b36      	ldr	r3, [pc, #216]	; (800430c <UART_SetConfig+0x2d4>)
 8004234:	fba3 2302 	umull	r2, r3, r3, r2
 8004238:	095b      	lsrs	r3, r3, #5
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004240:	441c      	add	r4, r3
 8004242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004246:	2200      	movs	r2, #0
 8004248:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800424c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004250:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004254:	4642      	mov	r2, r8
 8004256:	464b      	mov	r3, r9
 8004258:	1891      	adds	r1, r2, r2
 800425a:	63b9      	str	r1, [r7, #56]	; 0x38
 800425c:	415b      	adcs	r3, r3
 800425e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004260:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004264:	4641      	mov	r1, r8
 8004266:	1851      	adds	r1, r2, r1
 8004268:	6339      	str	r1, [r7, #48]	; 0x30
 800426a:	4649      	mov	r1, r9
 800426c:	414b      	adcs	r3, r1
 800426e:	637b      	str	r3, [r7, #52]	; 0x34
 8004270:	f04f 0200 	mov.w	r2, #0
 8004274:	f04f 0300 	mov.w	r3, #0
 8004278:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800427c:	4659      	mov	r1, fp
 800427e:	00cb      	lsls	r3, r1, #3
 8004280:	4651      	mov	r1, sl
 8004282:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004286:	4651      	mov	r1, sl
 8004288:	00ca      	lsls	r2, r1, #3
 800428a:	4610      	mov	r0, r2
 800428c:	4619      	mov	r1, r3
 800428e:	4603      	mov	r3, r0
 8004290:	4642      	mov	r2, r8
 8004292:	189b      	adds	r3, r3, r2
 8004294:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004298:	464b      	mov	r3, r9
 800429a:	460a      	mov	r2, r1
 800429c:	eb42 0303 	adc.w	r3, r2, r3
 80042a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80042b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80042b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80042b8:	460b      	mov	r3, r1
 80042ba:	18db      	adds	r3, r3, r3
 80042bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80042be:	4613      	mov	r3, r2
 80042c0:	eb42 0303 	adc.w	r3, r2, r3
 80042c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80042ce:	f7fc fafd 	bl	80008cc <__aeabi_uldivmod>
 80042d2:	4602      	mov	r2, r0
 80042d4:	460b      	mov	r3, r1
 80042d6:	4b0d      	ldr	r3, [pc, #52]	; (800430c <UART_SetConfig+0x2d4>)
 80042d8:	fba3 1302 	umull	r1, r3, r3, r2
 80042dc:	095b      	lsrs	r3, r3, #5
 80042de:	2164      	movs	r1, #100	; 0x64
 80042e0:	fb01 f303 	mul.w	r3, r1, r3
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	3332      	adds	r3, #50	; 0x32
 80042ea:	4a08      	ldr	r2, [pc, #32]	; (800430c <UART_SetConfig+0x2d4>)
 80042ec:	fba2 2303 	umull	r2, r3, r2, r3
 80042f0:	095b      	lsrs	r3, r3, #5
 80042f2:	f003 0207 	and.w	r2, r3, #7
 80042f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4422      	add	r2, r4
 80042fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004300:	e105      	b.n	800450e <UART_SetConfig+0x4d6>
 8004302:	bf00      	nop
 8004304:	40011000 	.word	0x40011000
 8004308:	40011400 	.word	0x40011400
 800430c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004310:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004314:	2200      	movs	r2, #0
 8004316:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800431a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800431e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004322:	4642      	mov	r2, r8
 8004324:	464b      	mov	r3, r9
 8004326:	1891      	adds	r1, r2, r2
 8004328:	6239      	str	r1, [r7, #32]
 800432a:	415b      	adcs	r3, r3
 800432c:	627b      	str	r3, [r7, #36]	; 0x24
 800432e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004332:	4641      	mov	r1, r8
 8004334:	1854      	adds	r4, r2, r1
 8004336:	4649      	mov	r1, r9
 8004338:	eb43 0501 	adc.w	r5, r3, r1
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	f04f 0300 	mov.w	r3, #0
 8004344:	00eb      	lsls	r3, r5, #3
 8004346:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800434a:	00e2      	lsls	r2, r4, #3
 800434c:	4614      	mov	r4, r2
 800434e:	461d      	mov	r5, r3
 8004350:	4643      	mov	r3, r8
 8004352:	18e3      	adds	r3, r4, r3
 8004354:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004358:	464b      	mov	r3, r9
 800435a:	eb45 0303 	adc.w	r3, r5, r3
 800435e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800436e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	f04f 0300 	mov.w	r3, #0
 800437a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800437e:	4629      	mov	r1, r5
 8004380:	008b      	lsls	r3, r1, #2
 8004382:	4621      	mov	r1, r4
 8004384:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004388:	4621      	mov	r1, r4
 800438a:	008a      	lsls	r2, r1, #2
 800438c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004390:	f7fc fa9c 	bl	80008cc <__aeabi_uldivmod>
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	4b60      	ldr	r3, [pc, #384]	; (800451c <UART_SetConfig+0x4e4>)
 800439a:	fba3 2302 	umull	r2, r3, r3, r2
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	011c      	lsls	r4, r3, #4
 80043a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043a6:	2200      	movs	r2, #0
 80043a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80043ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80043b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80043b4:	4642      	mov	r2, r8
 80043b6:	464b      	mov	r3, r9
 80043b8:	1891      	adds	r1, r2, r2
 80043ba:	61b9      	str	r1, [r7, #24]
 80043bc:	415b      	adcs	r3, r3
 80043be:	61fb      	str	r3, [r7, #28]
 80043c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043c4:	4641      	mov	r1, r8
 80043c6:	1851      	adds	r1, r2, r1
 80043c8:	6139      	str	r1, [r7, #16]
 80043ca:	4649      	mov	r1, r9
 80043cc:	414b      	adcs	r3, r1
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043dc:	4659      	mov	r1, fp
 80043de:	00cb      	lsls	r3, r1, #3
 80043e0:	4651      	mov	r1, sl
 80043e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043e6:	4651      	mov	r1, sl
 80043e8:	00ca      	lsls	r2, r1, #3
 80043ea:	4610      	mov	r0, r2
 80043ec:	4619      	mov	r1, r3
 80043ee:	4603      	mov	r3, r0
 80043f0:	4642      	mov	r2, r8
 80043f2:	189b      	adds	r3, r3, r2
 80043f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043f8:	464b      	mov	r3, r9
 80043fa:	460a      	mov	r2, r1
 80043fc:	eb42 0303 	adc.w	r3, r2, r3
 8004400:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	67bb      	str	r3, [r7, #120]	; 0x78
 800440e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800441c:	4649      	mov	r1, r9
 800441e:	008b      	lsls	r3, r1, #2
 8004420:	4641      	mov	r1, r8
 8004422:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004426:	4641      	mov	r1, r8
 8004428:	008a      	lsls	r2, r1, #2
 800442a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800442e:	f7fc fa4d 	bl	80008cc <__aeabi_uldivmod>
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	4b39      	ldr	r3, [pc, #228]	; (800451c <UART_SetConfig+0x4e4>)
 8004438:	fba3 1302 	umull	r1, r3, r3, r2
 800443c:	095b      	lsrs	r3, r3, #5
 800443e:	2164      	movs	r1, #100	; 0x64
 8004440:	fb01 f303 	mul.w	r3, r1, r3
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	011b      	lsls	r3, r3, #4
 8004448:	3332      	adds	r3, #50	; 0x32
 800444a:	4a34      	ldr	r2, [pc, #208]	; (800451c <UART_SetConfig+0x4e4>)
 800444c:	fba2 2303 	umull	r2, r3, r2, r3
 8004450:	095b      	lsrs	r3, r3, #5
 8004452:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004456:	441c      	add	r4, r3
 8004458:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800445c:	2200      	movs	r2, #0
 800445e:	673b      	str	r3, [r7, #112]	; 0x70
 8004460:	677a      	str	r2, [r7, #116]	; 0x74
 8004462:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004466:	4642      	mov	r2, r8
 8004468:	464b      	mov	r3, r9
 800446a:	1891      	adds	r1, r2, r2
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	415b      	adcs	r3, r3
 8004470:	60fb      	str	r3, [r7, #12]
 8004472:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004476:	4641      	mov	r1, r8
 8004478:	1851      	adds	r1, r2, r1
 800447a:	6039      	str	r1, [r7, #0]
 800447c:	4649      	mov	r1, r9
 800447e:	414b      	adcs	r3, r1
 8004480:	607b      	str	r3, [r7, #4]
 8004482:	f04f 0200 	mov.w	r2, #0
 8004486:	f04f 0300 	mov.w	r3, #0
 800448a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800448e:	4659      	mov	r1, fp
 8004490:	00cb      	lsls	r3, r1, #3
 8004492:	4651      	mov	r1, sl
 8004494:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004498:	4651      	mov	r1, sl
 800449a:	00ca      	lsls	r2, r1, #3
 800449c:	4610      	mov	r0, r2
 800449e:	4619      	mov	r1, r3
 80044a0:	4603      	mov	r3, r0
 80044a2:	4642      	mov	r2, r8
 80044a4:	189b      	adds	r3, r3, r2
 80044a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80044a8:	464b      	mov	r3, r9
 80044aa:	460a      	mov	r2, r1
 80044ac:	eb42 0303 	adc.w	r3, r2, r3
 80044b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	663b      	str	r3, [r7, #96]	; 0x60
 80044bc:	667a      	str	r2, [r7, #100]	; 0x64
 80044be:	f04f 0200 	mov.w	r2, #0
 80044c2:	f04f 0300 	mov.w	r3, #0
 80044c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80044ca:	4649      	mov	r1, r9
 80044cc:	008b      	lsls	r3, r1, #2
 80044ce:	4641      	mov	r1, r8
 80044d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044d4:	4641      	mov	r1, r8
 80044d6:	008a      	lsls	r2, r1, #2
 80044d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80044dc:	f7fc f9f6 	bl	80008cc <__aeabi_uldivmod>
 80044e0:	4602      	mov	r2, r0
 80044e2:	460b      	mov	r3, r1
 80044e4:	4b0d      	ldr	r3, [pc, #52]	; (800451c <UART_SetConfig+0x4e4>)
 80044e6:	fba3 1302 	umull	r1, r3, r3, r2
 80044ea:	095b      	lsrs	r3, r3, #5
 80044ec:	2164      	movs	r1, #100	; 0x64
 80044ee:	fb01 f303 	mul.w	r3, r1, r3
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	011b      	lsls	r3, r3, #4
 80044f6:	3332      	adds	r3, #50	; 0x32
 80044f8:	4a08      	ldr	r2, [pc, #32]	; (800451c <UART_SetConfig+0x4e4>)
 80044fa:	fba2 2303 	umull	r2, r3, r2, r3
 80044fe:	095b      	lsrs	r3, r3, #5
 8004500:	f003 020f 	and.w	r2, r3, #15
 8004504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4422      	add	r2, r4
 800450c:	609a      	str	r2, [r3, #8]
}
 800450e:	bf00      	nop
 8004510:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004514:	46bd      	mov	sp, r7
 8004516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800451a:	bf00      	nop
 800451c:	51eb851f 	.word	0x51eb851f

08004520 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	4603      	mov	r3, r0
 8004528:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800452a:	2300      	movs	r3, #0
 800452c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800452e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004532:	2b84      	cmp	r3, #132	; 0x84
 8004534:	d005      	beq.n	8004542 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004536:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	4413      	add	r3, r2
 800453e:	3303      	adds	r3, #3
 8004540:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004542:	68fb      	ldr	r3, [r7, #12]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004556:	f3ef 8305 	mrs	r3, IPSR
 800455a:	607b      	str	r3, [r7, #4]
  return(result);
 800455c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800455e:	2b00      	cmp	r3, #0
 8004560:	bf14      	ite	ne
 8004562:	2301      	movne	r3, #1
 8004564:	2300      	moveq	r3, #0
 8004566:	b2db      	uxtb	r3, r3
}
 8004568:	4618      	mov	r0, r3
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004578:	f001 fd88 	bl	800608c <vTaskStartScheduler>
  
  return osOK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	bd80      	pop	{r7, pc}

08004582 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004586:	f7ff ffe3 	bl	8004550 <inHandlerMode>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004590:	f001 fe96 	bl	80062c0 <xTaskGetTickCountFromISR>
 8004594:	4603      	mov	r3, r0
 8004596:	e002      	b.n	800459e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004598:	f001 fe82 	bl	80062a0 <xTaskGetTickCount>
 800459c:	4603      	mov	r3, r0
  }
}
 800459e:	4618      	mov	r0, r3
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80045a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045a4:	b089      	sub	sp, #36	; 0x24
 80045a6:	af04      	add	r7, sp, #16
 80045a8:	6078      	str	r0, [r7, #4]
 80045aa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d020      	beq.n	80045f6 <osThreadCreate+0x54>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d01c      	beq.n	80045f6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685c      	ldr	r4, [r3, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681d      	ldr	r5, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	691e      	ldr	r6, [r3, #16]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7ff ffa6 	bl	8004520 <makeFreeRtosPriority>
 80045d4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045de:	9202      	str	r2, [sp, #8]
 80045e0:	9301      	str	r3, [sp, #4]
 80045e2:	9100      	str	r1, [sp, #0]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	4632      	mov	r2, r6
 80045e8:	4629      	mov	r1, r5
 80045ea:	4620      	mov	r0, r4
 80045ec:	f001 faf4 	bl	8005bd8 <xTaskCreateStatic>
 80045f0:	4603      	mov	r3, r0
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	e01c      	b.n	8004630 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685c      	ldr	r4, [r3, #4]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004602:	b29e      	uxth	r6, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800460a:	4618      	mov	r0, r3
 800460c:	f7ff ff88 	bl	8004520 <makeFreeRtosPriority>
 8004610:	4602      	mov	r2, r0
 8004612:	f107 030c 	add.w	r3, r7, #12
 8004616:	9301      	str	r3, [sp, #4]
 8004618:	9200      	str	r2, [sp, #0]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	4632      	mov	r2, r6
 800461e:	4629      	mov	r1, r5
 8004620:	4620      	mov	r0, r4
 8004622:	f001 fb36 	bl	8005c92 <xTaskCreate>
 8004626:	4603      	mov	r3, r0
 8004628:	2b01      	cmp	r3, #1
 800462a:	d001      	beq.n	8004630 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800462c:	2300      	movs	r3, #0
 800462e:	e000      	b.n	8004632 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004630:	68fb      	ldr	r3, [r7, #12]
}
 8004632:	4618      	mov	r0, r3
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800463a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b084      	sub	sp, #16
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <osDelay+0x16>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	e000      	b.n	8004652 <osDelay+0x18>
 8004650:	2301      	movs	r3, #1
 8004652:	4618      	mov	r0, r3
 8004654:	f001 fc54 	bl	8005f00 <vTaskDelay>
  
  return osOK;
 8004658:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
	...

08004664 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af02      	add	r7, sp, #8
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800466e:	2300      	movs	r3, #0
 8004670:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8004672:	2300      	movs	r3, #0
 8004674:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8004676:	f7ff ff6b 	bl	8004550 <inHandlerMode>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d01c      	beq.n	80046ba <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8004680:	6839      	ldr	r1, [r7, #0]
 8004682:	f107 0208 	add.w	r2, r7, #8
 8004686:	f107 030c 	add.w	r3, r7, #12
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	4613      	mov	r3, r2
 800468e:	2201      	movs	r2, #1
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f002 fbe7 	bl	8006e64 <xTaskGenericNotifyFromISR>
 8004696:	4603      	mov	r3, r0
 8004698:	2b01      	cmp	r3, #1
 800469a:	d002      	beq.n	80046a2 <osSignalSet+0x3e>
      return 0x80000000;
 800469c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80046a0:	e019      	b.n	80046d6 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d015      	beq.n	80046d4 <osSignalSet+0x70>
 80046a8:	4b0d      	ldr	r3, [pc, #52]	; (80046e0 <osSignalSet+0x7c>)
 80046aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	f3bf 8f4f 	dsb	sy
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	e00c      	b.n	80046d4 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 80046ba:	6839      	ldr	r1, [r7, #0]
 80046bc:	f107 0308 	add.w	r3, r7, #8
 80046c0:	2201      	movs	r2, #1
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f002 fb18 	bl	8006cf8 <xTaskGenericNotify>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d002      	beq.n	80046d4 <osSignalSet+0x70>
    return 0x80000000;
 80046ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80046d2:	e000      	b.n	80046d6 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 80046d4:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	e000ed04 	.word	0xe000ed04

080046e4 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 80046e4:	b590      	push	{r4, r7, lr}
 80046e6:	b089      	sub	sp, #36	; 0x24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80046f0:	2300      	movs	r3, #0
 80046f2:	617b      	str	r3, [r7, #20]
  ticks = 0;
 80046f4:	2300      	movs	r3, #0
 80046f6:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fe:	d103      	bne.n	8004708 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8004700:	f04f 33ff 	mov.w	r3, #4294967295
 8004704:	61fb      	str	r3, [r7, #28]
 8004706:	e009      	b.n	800471c <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d006      	beq.n	800471c <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <osSignalWait+0x38>
      ticks = 1;
 8004718:	2301      	movs	r3, #1
 800471a:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 800471c:	f7ff ff18 	bl	8004550 <inHandlerMode>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d002      	beq.n	800472c <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8004726:	2382      	movs	r3, #130	; 0x82
 8004728:	613b      	str	r3, [r7, #16]
 800472a:	e01b      	b.n	8004764 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800472c:	68b9      	ldr	r1, [r7, #8]
 800472e:	f107 0310 	add.w	r3, r7, #16
 8004732:	1d1a      	adds	r2, r3, #4
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	2000      	movs	r0, #0
 8004738:	f002 fa84 	bl	8006c44 <xTaskNotifyWait>
 800473c:	4603      	mov	r3, r0
 800473e:	2b01      	cmp	r3, #1
 8004740:	d008      	beq.n	8004754 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d102      	bne.n	800474e <osSignalWait+0x6a>
 8004748:	2300      	movs	r3, #0
 800474a:	613b      	str	r3, [r7, #16]
 800474c:	e00a      	b.n	8004764 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800474e:	2340      	movs	r3, #64	; 0x40
 8004750:	613b      	str	r3, [r7, #16]
 8004752:	e007      	b.n	8004764 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	2b00      	cmp	r3, #0
 8004758:	da02      	bge.n	8004760 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800475a:	2386      	movs	r3, #134	; 0x86
 800475c:	613b      	str	r3, [r7, #16]
 800475e:	e001      	b.n	8004764 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8004760:	2308      	movs	r3, #8
 8004762:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	461c      	mov	r4, r3
 8004768:	f107 0310 	add.w	r3, r7, #16
 800476c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004770:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	3724      	adds	r7, #36	; 0x24
 8004778:	46bd      	mov	sp, r7
 800477a:	bd90      	pop	{r4, r7, pc}

0800477c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d007      	beq.n	800479c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	4619      	mov	r1, r3
 8004792:	2001      	movs	r0, #1
 8004794:	f000 fc4b 	bl	800502e <xQueueCreateMutexStatic>
 8004798:	4603      	mov	r3, r0
 800479a:	e003      	b.n	80047a4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800479c:	2001      	movs	r0, #1
 800479e:	f000 fc2e 	bl	8004ffe <xQueueCreateMutex>
 80047a2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80047b6:	2300      	movs	r3, #0
 80047b8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <osMutexWait+0x18>
    return osErrorParameter;
 80047c0:	2380      	movs	r3, #128	; 0x80
 80047c2:	e03a      	b.n	800483a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80047c4:	2300      	movs	r3, #0
 80047c6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ce:	d103      	bne.n	80047d8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80047d0:	f04f 33ff 	mov.w	r3, #4294967295
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	e009      	b.n	80047ec <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d006      	beq.n	80047ec <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <osMutexWait+0x40>
      ticks = 1;
 80047e8:	2301      	movs	r3, #1
 80047ea:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80047ec:	f7ff feb0 	bl	8004550 <inHandlerMode>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d017      	beq.n	8004826 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80047f6:	f107 0308 	add.w	r3, r7, #8
 80047fa:	461a      	mov	r2, r3
 80047fc:	2100      	movs	r1, #0
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f001 f842 	bl	8005888 <xQueueReceiveFromISR>
 8004804:	4603      	mov	r3, r0
 8004806:	2b01      	cmp	r3, #1
 8004808:	d001      	beq.n	800480e <osMutexWait+0x62>
      return osErrorOS;
 800480a:	23ff      	movs	r3, #255	; 0xff
 800480c:	e015      	b.n	800483a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d011      	beq.n	8004838 <osMutexWait+0x8c>
 8004814:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <osMutexWait+0x98>)
 8004816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	f3bf 8f6f 	isb	sy
 8004824:	e008      	b.n	8004838 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004826:	68f9      	ldr	r1, [r7, #12]
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 ff21 	bl	8005670 <xQueueSemaphoreTake>
 800482e:	4603      	mov	r3, r0
 8004830:	2b01      	cmp	r3, #1
 8004832:	d001      	beq.n	8004838 <osMutexWait+0x8c>
    return osErrorOS;
 8004834:	23ff      	movs	r3, #255	; 0xff
 8004836:	e000      	b.n	800483a <osMutexWait+0x8e>
  }
  
  return osOK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	e000ed04 	.word	0xe000ed04

08004848 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004850:	2300      	movs	r3, #0
 8004852:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004854:	2300      	movs	r3, #0
 8004856:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004858:	f7ff fe7a 	bl	8004550 <inHandlerMode>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d016      	beq.n	8004890 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004862:	f107 0308 	add.w	r3, r7, #8
 8004866:	4619      	mov	r1, r3
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 fd94 	bl	8005396 <xQueueGiveFromISR>
 800486e:	4603      	mov	r3, r0
 8004870:	2b01      	cmp	r3, #1
 8004872:	d001      	beq.n	8004878 <osMutexRelease+0x30>
      return osErrorOS;
 8004874:	23ff      	movs	r3, #255	; 0xff
 8004876:	e017      	b.n	80048a8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d013      	beq.n	80048a6 <osMutexRelease+0x5e>
 800487e:	4b0c      	ldr	r3, [pc, #48]	; (80048b0 <osMutexRelease+0x68>)
 8004880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	e00a      	b.n	80048a6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004890:	2300      	movs	r3, #0
 8004892:	2200      	movs	r2, #0
 8004894:	2100      	movs	r1, #0
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 fbe4 	bl	8005064 <xQueueGenericSend>
 800489c:	4603      	mov	r3, r0
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d001      	beq.n	80048a6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80048a2:	23ff      	movs	r3, #255	; 0xff
 80048a4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80048a6:	68fb      	ldr	r3, [r7, #12]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	e000ed04 	.word	0xe000ed04

080048b4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af02      	add	r7, sp, #8
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00f      	beq.n	80048e6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d10a      	bne.n	80048e2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2203      	movs	r2, #3
 80048d2:	9200      	str	r2, [sp, #0]
 80048d4:	2200      	movs	r2, #0
 80048d6:	2100      	movs	r1, #0
 80048d8:	2001      	movs	r0, #1
 80048da:	f000 faa5 	bl	8004e28 <xQueueGenericCreateStatic>
 80048de:	4603      	mov	r3, r0
 80048e0:	e016      	b.n	8004910 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80048e2:	2300      	movs	r3, #0
 80048e4:	e014      	b.n	8004910 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d110      	bne.n	800490e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80048ec:	2203      	movs	r2, #3
 80048ee:	2100      	movs	r1, #0
 80048f0:	2001      	movs	r0, #1
 80048f2:	f000 fb11 	bl	8004f18 <xQueueGenericCreate>
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d005      	beq.n	800490a <osSemaphoreCreate+0x56>
 80048fe:	2300      	movs	r3, #0
 8004900:	2200      	movs	r2, #0
 8004902:	2100      	movs	r1, #0
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f000 fbad 	bl	8005064 <xQueueGenericSend>
      return sema;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	e000      	b.n	8004910 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800490e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004922:	2300      	movs	r3, #0
 8004924:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800492c:	2380      	movs	r3, #128	; 0x80
 800492e:	e03a      	b.n	80049a6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004930:	2300      	movs	r3, #0
 8004932:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493a:	d103      	bne.n	8004944 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800493c:	f04f 33ff 	mov.w	r3, #4294967295
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	e009      	b.n	8004958 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d006      	beq.n	8004958 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <osSemaphoreWait+0x40>
      ticks = 1;
 8004954:	2301      	movs	r3, #1
 8004956:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004958:	f7ff fdfa 	bl	8004550 <inHandlerMode>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d017      	beq.n	8004992 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004962:	f107 0308 	add.w	r3, r7, #8
 8004966:	461a      	mov	r2, r3
 8004968:	2100      	movs	r1, #0
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 ff8c 	bl	8005888 <xQueueReceiveFromISR>
 8004970:	4603      	mov	r3, r0
 8004972:	2b01      	cmp	r3, #1
 8004974:	d001      	beq.n	800497a <osSemaphoreWait+0x62>
      return osErrorOS;
 8004976:	23ff      	movs	r3, #255	; 0xff
 8004978:	e015      	b.n	80049a6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d011      	beq.n	80049a4 <osSemaphoreWait+0x8c>
 8004980:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <osSemaphoreWait+0x98>)
 8004982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	f3bf 8f6f 	isb	sy
 8004990:	e008      	b.n	80049a4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004992:	68f9      	ldr	r1, [r7, #12]
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 fe6b 	bl	8005670 <xQueueSemaphoreTake>
 800499a:	4603      	mov	r3, r0
 800499c:	2b01      	cmp	r3, #1
 800499e:	d001      	beq.n	80049a4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80049a0:	23ff      	movs	r3, #255	; 0xff
 80049a2:	e000      	b.n	80049a6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	e000ed04 	.word	0xe000ed04

080049b4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80049bc:	2300      	movs	r3, #0
 80049be:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80049c0:	2300      	movs	r3, #0
 80049c2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80049c4:	f7ff fdc4 	bl	8004550 <inHandlerMode>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d016      	beq.n	80049fc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80049ce:	f107 0308 	add.w	r3, r7, #8
 80049d2:	4619      	mov	r1, r3
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 fcde 	bl	8005396 <xQueueGiveFromISR>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d001      	beq.n	80049e4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80049e0:	23ff      	movs	r3, #255	; 0xff
 80049e2:	e017      	b.n	8004a14 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d013      	beq.n	8004a12 <osSemaphoreRelease+0x5e>
 80049ea:	4b0c      	ldr	r3, [pc, #48]	; (8004a1c <osSemaphoreRelease+0x68>)
 80049ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	e00a      	b.n	8004a12 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80049fc:	2300      	movs	r3, #0
 80049fe:	2200      	movs	r2, #0
 8004a00:	2100      	movs	r1, #0
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 fb2e 	bl	8005064 <xQueueGenericSend>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d001      	beq.n	8004a12 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004a0e:	23ff      	movs	r3, #255	; 0xff
 8004a10:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004a12:	68fb      	ldr	r3, [r7, #12]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	e000ed04 	.word	0xe000ed04

08004a20 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004a20:	b590      	push	{r4, r7, lr}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af02      	add	r7, sp, #8
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d011      	beq.n	8004a56 <osMessageCreate+0x36>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00d      	beq.n	8004a56 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6818      	ldr	r0, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6859      	ldr	r1, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689a      	ldr	r2, [r3, #8]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	2400      	movs	r4, #0
 8004a4c:	9400      	str	r4, [sp, #0]
 8004a4e:	f000 f9eb 	bl	8004e28 <xQueueGenericCreateStatic>
 8004a52:	4603      	mov	r3, r0
 8004a54:	e008      	b.n	8004a68 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6818      	ldr	r0, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	4619      	mov	r1, r3
 8004a62:	f000 fa59 	bl	8004f18 <xQueueGenericCreate>
 8004a66:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd90      	pop	{r4, r7, pc}

08004a70 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <osMessagePut+0x1e>
    ticks = 1;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004a8e:	f7ff fd5f 	bl	8004550 <inHandlerMode>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d018      	beq.n	8004aca <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004a98:	f107 0210 	add.w	r2, r7, #16
 8004a9c:	f107 0108 	add.w	r1, r7, #8
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 fbdc 	bl	8005260 <xQueueGenericSendFromISR>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d001      	beq.n	8004ab2 <osMessagePut+0x42>
      return osErrorOS;
 8004aae:	23ff      	movs	r3, #255	; 0xff
 8004ab0:	e018      	b.n	8004ae4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d014      	beq.n	8004ae2 <osMessagePut+0x72>
 8004ab8:	4b0c      	ldr	r3, [pc, #48]	; (8004aec <osMessagePut+0x7c>)
 8004aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	e00b      	b.n	8004ae2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004aca:	f107 0108 	add.w	r1, r7, #8
 8004ace:	2300      	movs	r3, #0
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f000 fac6 	bl	8005064 <xQueueGenericSend>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d001      	beq.n	8004ae2 <osMessagePut+0x72>
      return osErrorOS;
 8004ade:	23ff      	movs	r3, #255	; 0xff
 8004ae0:	e000      	b.n	8004ae4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3718      	adds	r7, #24
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	e000ed04 	.word	0xe000ed04

08004af0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004af0:	b590      	push	{r4, r7, lr}
 8004af2:	b08b      	sub	sp, #44	; 0x2c
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004b00:	2300      	movs	r3, #0
 8004b02:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10a      	bne.n	8004b20 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004b0a:	2380      	movs	r3, #128	; 0x80
 8004b0c:	617b      	str	r3, [r7, #20]
    return event;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	461c      	mov	r4, r3
 8004b12:	f107 0314 	add.w	r3, r7, #20
 8004b16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004b1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004b1e:	e054      	b.n	8004bca <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004b20:	2300      	movs	r3, #0
 8004b22:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004b24:	2300      	movs	r3, #0
 8004b26:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2e:	d103      	bne.n	8004b38 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004b30:	f04f 33ff 	mov.w	r3, #4294967295
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24
 8004b36:	e009      	b.n	8004b4c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d006      	beq.n	8004b4c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <osMessageGet+0x5c>
      ticks = 1;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004b4c:	f7ff fd00 	bl	8004550 <inHandlerMode>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d01c      	beq.n	8004b90 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004b56:	f107 0220 	add.w	r2, r7, #32
 8004b5a:	f107 0314 	add.w	r3, r7, #20
 8004b5e:	3304      	adds	r3, #4
 8004b60:	4619      	mov	r1, r3
 8004b62:	68b8      	ldr	r0, [r7, #8]
 8004b64:	f000 fe90 	bl	8005888 <xQueueReceiveFromISR>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d102      	bne.n	8004b74 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8004b6e:	2310      	movs	r3, #16
 8004b70:	617b      	str	r3, [r7, #20]
 8004b72:	e001      	b.n	8004b78 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004b78:	6a3b      	ldr	r3, [r7, #32]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d01d      	beq.n	8004bba <osMessageGet+0xca>
 8004b7e:	4b15      	ldr	r3, [pc, #84]	; (8004bd4 <osMessageGet+0xe4>)
 8004b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	f3bf 8f4f 	dsb	sy
 8004b8a:	f3bf 8f6f 	isb	sy
 8004b8e:	e014      	b.n	8004bba <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004b90:	f107 0314 	add.w	r3, r7, #20
 8004b94:	3304      	adds	r3, #4
 8004b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b98:	4619      	mov	r1, r3
 8004b9a:	68b8      	ldr	r0, [r7, #8]
 8004b9c:	f000 fc88 	bl	80054b0 <xQueueReceive>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d102      	bne.n	8004bac <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8004ba6:	2310      	movs	r3, #16
 8004ba8:	617b      	str	r3, [r7, #20]
 8004baa:	e006      	b.n	8004bba <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <osMessageGet+0xc6>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	e000      	b.n	8004bb8 <osMessageGet+0xc8>
 8004bb6:	2340      	movs	r3, #64	; 0x40
 8004bb8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	461c      	mov	r4, r3
 8004bbe:	f107 0314 	add.w	r3, r7, #20
 8004bc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004bc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	372c      	adds	r7, #44	; 0x2c
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd90      	pop	{r4, r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	e000ed04 	.word	0xe000ed04

08004bd8 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f001 f9c1 	bl	8005f68 <vTaskSuspend>
  
  return osOK;
 8004be6:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f103 0208 	add.w	r2, r3, #8
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f04f 32ff 	mov.w	r2, #4294967295
 8004c08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f103 0208 	add.w	r2, r3, #8
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f103 0208 	add.w	r2, r3, #8
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c3e:	bf00      	nop
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b085      	sub	sp, #20
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
 8004c52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	689a      	ldr	r2, [r3, #8]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	1c5a      	adds	r2, r3, #1
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	601a      	str	r2, [r3, #0]
}
 8004c86:	bf00      	nop
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c92:	b480      	push	{r7}
 8004c94:	b085      	sub	sp, #20
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca8:	d103      	bne.n	8004cb2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	e00c      	b.n	8004ccc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	3308      	adds	r3, #8
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	e002      	b.n	8004cc0 <vListInsert+0x2e>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d2f6      	bcs.n	8004cba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	601a      	str	r2, [r3, #0]
}
 8004cf8:	bf00      	nop
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	6892      	ldr	r2, [r2, #8]
 8004d1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	6852      	ldr	r2, [r2, #4]
 8004d24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d103      	bne.n	8004d38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	1e5a      	subs	r2, r3, #1
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10a      	bne.n	8004d82 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d70:	f383 8811 	msr	BASEPRI, r3
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	f3bf 8f4f 	dsb	sy
 8004d7c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d7e:	bf00      	nop
 8004d80:	e7fe      	b.n	8004d80 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004d82:	f002 fadf 	bl	8007344 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8e:	68f9      	ldr	r1, [r7, #12]
 8004d90:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d92:	fb01 f303 	mul.w	r3, r1, r3
 8004d96:	441a      	add	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db2:	3b01      	subs	r3, #1
 8004db4:	68f9      	ldr	r1, [r7, #12]
 8004db6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004db8:	fb01 f303 	mul.w	r3, r1, r3
 8004dbc:	441a      	add	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	22ff      	movs	r2, #255	; 0xff
 8004dc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	22ff      	movs	r2, #255	; 0xff
 8004dce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d114      	bne.n	8004e02 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d01a      	beq.n	8004e16 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	3310      	adds	r3, #16
 8004de4:	4618      	mov	r0, r3
 8004de6:	f001 fbb5 	bl	8006554 <xTaskRemoveFromEventList>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d012      	beq.n	8004e16 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004df0:	4b0c      	ldr	r3, [pc, #48]	; (8004e24 <xQueueGenericReset+0xcc>)
 8004df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	e009      	b.n	8004e16 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	3310      	adds	r3, #16
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff fef2 	bl	8004bf0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	3324      	adds	r3, #36	; 0x24
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7ff feed 	bl	8004bf0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004e16:	f002 fac5 	bl	80073a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004e1a:	2301      	movs	r3, #1
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	e000ed04 	.word	0xe000ed04

08004e28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b08e      	sub	sp, #56	; 0x38
 8004e2c:	af02      	add	r7, sp, #8
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
 8004e34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10a      	bne.n	8004e52 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e40:	f383 8811 	msr	BASEPRI, r3
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e4e:	bf00      	nop
 8004e50:	e7fe      	b.n	8004e50 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10a      	bne.n	8004e6e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5c:	f383 8811 	msr	BASEPRI, r3
 8004e60:	f3bf 8f6f 	isb	sy
 8004e64:	f3bf 8f4f 	dsb	sy
 8004e68:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e6a:	bf00      	nop
 8004e6c:	e7fe      	b.n	8004e6c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d002      	beq.n	8004e7a <xQueueGenericCreateStatic+0x52>
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <xQueueGenericCreateStatic+0x56>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <xQueueGenericCreateStatic+0x58>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d10a      	bne.n	8004e9a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e88:	f383 8811 	msr	BASEPRI, r3
 8004e8c:	f3bf 8f6f 	isb	sy
 8004e90:	f3bf 8f4f 	dsb	sy
 8004e94:	623b      	str	r3, [r7, #32]
}
 8004e96:	bf00      	nop
 8004e98:	e7fe      	b.n	8004e98 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d102      	bne.n	8004ea6 <xQueueGenericCreateStatic+0x7e>
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <xQueueGenericCreateStatic+0x82>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e000      	b.n	8004eac <xQueueGenericCreateStatic+0x84>
 8004eaa:	2300      	movs	r3, #0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10a      	bne.n	8004ec6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb4:	f383 8811 	msr	BASEPRI, r3
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	61fb      	str	r3, [r7, #28]
}
 8004ec2:	bf00      	nop
 8004ec4:	e7fe      	b.n	8004ec4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004ec6:	2348      	movs	r3, #72	; 0x48
 8004ec8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2b48      	cmp	r3, #72	; 0x48
 8004ece:	d00a      	beq.n	8004ee6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed4:	f383 8811 	msr	BASEPRI, r3
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	61bb      	str	r3, [r7, #24]
}
 8004ee2:	bf00      	nop
 8004ee4:	e7fe      	b.n	8004ee4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ee6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00d      	beq.n	8004f0e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004efa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	4613      	mov	r3, r2
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	68b9      	ldr	r1, [r7, #8]
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f000 f83f 	bl	8004f8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3730      	adds	r7, #48	; 0x30
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b08a      	sub	sp, #40	; 0x28
 8004f1c:	af02      	add	r7, sp, #8
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	4613      	mov	r3, r2
 8004f24:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10a      	bne.n	8004f42 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f30:	f383 8811 	msr	BASEPRI, r3
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	613b      	str	r3, [r7, #16]
}
 8004f3e:	bf00      	nop
 8004f40:	e7fe      	b.n	8004f40 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	fb02 f303 	mul.w	r3, r2, r3
 8004f4a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	3348      	adds	r3, #72	; 0x48
 8004f50:	4618      	mov	r0, r3
 8004f52:	f002 fb19 	bl	8007588 <pvPortMalloc>
 8004f56:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d011      	beq.n	8004f82 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	3348      	adds	r3, #72	; 0x48
 8004f66:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f70:	79fa      	ldrb	r2, [r7, #7]
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	4613      	mov	r3, r2
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	68b9      	ldr	r1, [r7, #8]
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 f805 	bl	8004f8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f82:	69bb      	ldr	r3, [r7, #24]
	}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3720      	adds	r7, #32
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
 8004f98:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d103      	bne.n	8004fa8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	69ba      	ldr	r2, [r7, #24]
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	e002      	b.n	8004fae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004fba:	2101      	movs	r1, #1
 8004fbc:	69b8      	ldr	r0, [r7, #24]
 8004fbe:	f7ff fecb 	bl	8004d58 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004fc2:	bf00      	nop
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b082      	sub	sp, #8
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00e      	beq.n	8004ff6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004fea:	2300      	movs	r3, #0
 8004fec:	2200      	movs	r2, #0
 8004fee:	2100      	movs	r1, #0
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f837 	bl	8005064 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004ff6:	bf00      	nop
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b086      	sub	sp, #24
 8005002:	af00      	add	r7, sp, #0
 8005004:	4603      	mov	r3, r0
 8005006:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005008:	2301      	movs	r3, #1
 800500a:	617b      	str	r3, [r7, #20]
 800500c:	2300      	movs	r3, #0
 800500e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005010:	79fb      	ldrb	r3, [r7, #7]
 8005012:	461a      	mov	r2, r3
 8005014:	6939      	ldr	r1, [r7, #16]
 8005016:	6978      	ldr	r0, [r7, #20]
 8005018:	f7ff ff7e 	bl	8004f18 <xQueueGenericCreate>
 800501c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f7ff ffd3 	bl	8004fca <prvInitialiseMutex>

		return xNewQueue;
 8005024:	68fb      	ldr	r3, [r7, #12]
	}
 8005026:	4618      	mov	r0, r3
 8005028:	3718      	adds	r7, #24
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800502e:	b580      	push	{r7, lr}
 8005030:	b088      	sub	sp, #32
 8005032:	af02      	add	r7, sp, #8
 8005034:	4603      	mov	r3, r0
 8005036:	6039      	str	r1, [r7, #0]
 8005038:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800503a:	2301      	movs	r3, #1
 800503c:	617b      	str	r3, [r7, #20]
 800503e:	2300      	movs	r3, #0
 8005040:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005042:	79fb      	ldrb	r3, [r7, #7]
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2200      	movs	r2, #0
 800504a:	6939      	ldr	r1, [r7, #16]
 800504c:	6978      	ldr	r0, [r7, #20]
 800504e:	f7ff feeb 	bl	8004e28 <xQueueGenericCreateStatic>
 8005052:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f7ff ffb8 	bl	8004fca <prvInitialiseMutex>

		return xNewQueue;
 800505a:	68fb      	ldr	r3, [r7, #12]
	}
 800505c:	4618      	mov	r0, r3
 800505e:	3718      	adds	r7, #24
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08e      	sub	sp, #56	; 0x38
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
 8005070:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005072:	2300      	movs	r3, #0
 8005074:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800507a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10a      	bne.n	8005096 <xQueueGenericSend+0x32>
	__asm volatile
 8005080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005092:	bf00      	nop
 8005094:	e7fe      	b.n	8005094 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d103      	bne.n	80050a4 <xQueueGenericSend+0x40>
 800509c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d101      	bne.n	80050a8 <xQueueGenericSend+0x44>
 80050a4:	2301      	movs	r3, #1
 80050a6:	e000      	b.n	80050aa <xQueueGenericSend+0x46>
 80050a8:	2300      	movs	r3, #0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10a      	bne.n	80050c4 <xQueueGenericSend+0x60>
	__asm volatile
 80050ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050c0:	bf00      	nop
 80050c2:	e7fe      	b.n	80050c2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d103      	bne.n	80050d2 <xQueueGenericSend+0x6e>
 80050ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d101      	bne.n	80050d6 <xQueueGenericSend+0x72>
 80050d2:	2301      	movs	r3, #1
 80050d4:	e000      	b.n	80050d8 <xQueueGenericSend+0x74>
 80050d6:	2300      	movs	r3, #0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10a      	bne.n	80050f2 <xQueueGenericSend+0x8e>
	__asm volatile
 80050dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	623b      	str	r3, [r7, #32]
}
 80050ee:	bf00      	nop
 80050f0:	e7fe      	b.n	80050f0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050f2:	f001 fbeb 	bl	80068cc <xTaskGetSchedulerState>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d102      	bne.n	8005102 <xQueueGenericSend+0x9e>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <xQueueGenericSend+0xa2>
 8005102:	2301      	movs	r3, #1
 8005104:	e000      	b.n	8005108 <xQueueGenericSend+0xa4>
 8005106:	2300      	movs	r3, #0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10a      	bne.n	8005122 <xQueueGenericSend+0xbe>
	__asm volatile
 800510c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005110:	f383 8811 	msr	BASEPRI, r3
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	61fb      	str	r3, [r7, #28]
}
 800511e:	bf00      	nop
 8005120:	e7fe      	b.n	8005120 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005122:	f002 f90f 	bl	8007344 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800512a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512e:	429a      	cmp	r2, r3
 8005130:	d302      	bcc.n	8005138 <xQueueGenericSend+0xd4>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b02      	cmp	r3, #2
 8005136:	d129      	bne.n	800518c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	68b9      	ldr	r1, [r7, #8]
 800513c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800513e:	f000 fc3b 	bl	80059b8 <prvCopyDataToQueue>
 8005142:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	2b00      	cmp	r3, #0
 800514a:	d010      	beq.n	800516e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800514c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514e:	3324      	adds	r3, #36	; 0x24
 8005150:	4618      	mov	r0, r3
 8005152:	f001 f9ff 	bl	8006554 <xTaskRemoveFromEventList>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d013      	beq.n	8005184 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800515c:	4b3f      	ldr	r3, [pc, #252]	; (800525c <xQueueGenericSend+0x1f8>)
 800515e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	f3bf 8f4f 	dsb	sy
 8005168:	f3bf 8f6f 	isb	sy
 800516c:	e00a      	b.n	8005184 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800516e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005170:	2b00      	cmp	r3, #0
 8005172:	d007      	beq.n	8005184 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005174:	4b39      	ldr	r3, [pc, #228]	; (800525c <xQueueGenericSend+0x1f8>)
 8005176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005184:	f002 f90e 	bl	80073a4 <vPortExitCritical>
				return pdPASS;
 8005188:	2301      	movs	r3, #1
 800518a:	e063      	b.n	8005254 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d103      	bne.n	800519a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005192:	f002 f907 	bl	80073a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005196:	2300      	movs	r3, #0
 8005198:	e05c      	b.n	8005254 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800519a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800519c:	2b00      	cmp	r3, #0
 800519e:	d106      	bne.n	80051ae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051a0:	f107 0314 	add.w	r3, r7, #20
 80051a4:	4618      	mov	r0, r3
 80051a6:	f001 fa37 	bl	8006618 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051aa:	2301      	movs	r3, #1
 80051ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051ae:	f002 f8f9 	bl	80073a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051b2:	f000 ffcb 	bl	800614c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051b6:	f002 f8c5 	bl	8007344 <vPortEnterCritical>
 80051ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051c0:	b25b      	sxtb	r3, r3
 80051c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c6:	d103      	bne.n	80051d0 <xQueueGenericSend+0x16c>
 80051c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051d6:	b25b      	sxtb	r3, r3
 80051d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051dc:	d103      	bne.n	80051e6 <xQueueGenericSend+0x182>
 80051de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051e6:	f002 f8dd 	bl	80073a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051ea:	1d3a      	adds	r2, r7, #4
 80051ec:	f107 0314 	add.w	r3, r7, #20
 80051f0:	4611      	mov	r1, r2
 80051f2:	4618      	mov	r0, r3
 80051f4:	f001 fa26 	bl	8006644 <xTaskCheckForTimeOut>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d124      	bne.n	8005248 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80051fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005200:	f000 fcd2 	bl	8005ba8 <prvIsQueueFull>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d018      	beq.n	800523c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800520a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520c:	3310      	adds	r3, #16
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	4611      	mov	r1, r2
 8005212:	4618      	mov	r0, r3
 8005214:	f001 f97a 	bl	800650c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005218:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800521a:	f000 fc5d 	bl	8005ad8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800521e:	f000 ffa3 	bl	8006168 <xTaskResumeAll>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	f47f af7c 	bne.w	8005122 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800522a:	4b0c      	ldr	r3, [pc, #48]	; (800525c <xQueueGenericSend+0x1f8>)
 800522c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	e772      	b.n	8005122 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800523c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800523e:	f000 fc4b 	bl	8005ad8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005242:	f000 ff91 	bl	8006168 <xTaskResumeAll>
 8005246:	e76c      	b.n	8005122 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800524a:	f000 fc45 	bl	8005ad8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800524e:	f000 ff8b 	bl	8006168 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005252:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005254:	4618      	mov	r0, r3
 8005256:	3738      	adds	r7, #56	; 0x38
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	e000ed04 	.word	0xe000ed04

08005260 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b090      	sub	sp, #64	; 0x40
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
 800526c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10a      	bne.n	800528e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527c:	f383 8811 	msr	BASEPRI, r3
 8005280:	f3bf 8f6f 	isb	sy
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800528a:	bf00      	nop
 800528c:	e7fe      	b.n	800528c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d103      	bne.n	800529c <xQueueGenericSendFromISR+0x3c>
 8005294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005298:	2b00      	cmp	r3, #0
 800529a:	d101      	bne.n	80052a0 <xQueueGenericSendFromISR+0x40>
 800529c:	2301      	movs	r3, #1
 800529e:	e000      	b.n	80052a2 <xQueueGenericSendFromISR+0x42>
 80052a0:	2300      	movs	r3, #0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10a      	bne.n	80052bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80052a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052aa:	f383 8811 	msr	BASEPRI, r3
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80052b8:	bf00      	nop
 80052ba:	e7fe      	b.n	80052ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d103      	bne.n	80052ca <xQueueGenericSendFromISR+0x6a>
 80052c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d101      	bne.n	80052ce <xQueueGenericSendFromISR+0x6e>
 80052ca:	2301      	movs	r3, #1
 80052cc:	e000      	b.n	80052d0 <xQueueGenericSendFromISR+0x70>
 80052ce:	2300      	movs	r3, #0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10a      	bne.n	80052ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80052d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d8:	f383 8811 	msr	BASEPRI, r3
 80052dc:	f3bf 8f6f 	isb	sy
 80052e0:	f3bf 8f4f 	dsb	sy
 80052e4:	623b      	str	r3, [r7, #32]
}
 80052e6:	bf00      	nop
 80052e8:	e7fe      	b.n	80052e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052ea:	f002 f90d 	bl	8007508 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80052ee:	f3ef 8211 	mrs	r2, BASEPRI
 80052f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f6:	f383 8811 	msr	BASEPRI, r3
 80052fa:	f3bf 8f6f 	isb	sy
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	61fa      	str	r2, [r7, #28]
 8005304:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005306:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005308:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800530a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800530e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005312:	429a      	cmp	r2, r3
 8005314:	d302      	bcc.n	800531c <xQueueGenericSendFromISR+0xbc>
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b02      	cmp	r3, #2
 800531a:	d12f      	bne.n	800537c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800531c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	68b9      	ldr	r1, [r7, #8]
 8005330:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005332:	f000 fb41 	bl	80059b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005336:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800533a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533e:	d112      	bne.n	8005366 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005344:	2b00      	cmp	r3, #0
 8005346:	d016      	beq.n	8005376 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534a:	3324      	adds	r3, #36	; 0x24
 800534c:	4618      	mov	r0, r3
 800534e:	f001 f901 	bl	8006554 <xTaskRemoveFromEventList>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00e      	beq.n	8005376 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00b      	beq.n	8005376 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	e007      	b.n	8005376 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005366:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800536a:	3301      	adds	r3, #1
 800536c:	b2db      	uxtb	r3, r3
 800536e:	b25a      	sxtb	r2, r3
 8005370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005372:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005376:	2301      	movs	r3, #1
 8005378:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800537a:	e001      	b.n	8005380 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800537c:	2300      	movs	r3, #0
 800537e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005382:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800538a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800538c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800538e:	4618      	mov	r0, r3
 8005390:	3740      	adds	r7, #64	; 0x40
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b08e      	sub	sp, #56	; 0x38
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80053a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10a      	bne.n	80053c0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80053aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ae:	f383 8811 	msr	BASEPRI, r3
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	f3bf 8f4f 	dsb	sy
 80053ba:	623b      	str	r3, [r7, #32]
}
 80053bc:	bf00      	nop
 80053be:	e7fe      	b.n	80053be <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80053c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00a      	beq.n	80053de <xQueueGiveFromISR+0x48>
	__asm volatile
 80053c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053cc:	f383 8811 	msr	BASEPRI, r3
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	61fb      	str	r3, [r7, #28]
}
 80053da:	bf00      	nop
 80053dc:	e7fe      	b.n	80053dc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80053de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d103      	bne.n	80053ee <xQueueGiveFromISR+0x58>
 80053e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <xQueueGiveFromISR+0x5c>
 80053ee:	2301      	movs	r3, #1
 80053f0:	e000      	b.n	80053f4 <xQueueGiveFromISR+0x5e>
 80053f2:	2300      	movs	r3, #0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10a      	bne.n	800540e <xQueueGiveFromISR+0x78>
	__asm volatile
 80053f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fc:	f383 8811 	msr	BASEPRI, r3
 8005400:	f3bf 8f6f 	isb	sy
 8005404:	f3bf 8f4f 	dsb	sy
 8005408:	61bb      	str	r3, [r7, #24]
}
 800540a:	bf00      	nop
 800540c:	e7fe      	b.n	800540c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800540e:	f002 f87b 	bl	8007508 <vPortValidateInterruptPriority>
	__asm volatile
 8005412:	f3ef 8211 	mrs	r2, BASEPRI
 8005416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541a:	f383 8811 	msr	BASEPRI, r3
 800541e:	f3bf 8f6f 	isb	sy
 8005422:	f3bf 8f4f 	dsb	sy
 8005426:	617a      	str	r2, [r7, #20]
 8005428:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800542a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800542c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800542e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005432:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005438:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800543a:	429a      	cmp	r2, r3
 800543c:	d22b      	bcs.n	8005496 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800543e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005440:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005450:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005458:	d112      	bne.n	8005480 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800545a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	2b00      	cmp	r3, #0
 8005460:	d016      	beq.n	8005490 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005464:	3324      	adds	r3, #36	; 0x24
 8005466:	4618      	mov	r0, r3
 8005468:	f001 f874 	bl	8006554 <xTaskRemoveFromEventList>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00e      	beq.n	8005490 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00b      	beq.n	8005490 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	2201      	movs	r2, #1
 800547c:	601a      	str	r2, [r3, #0]
 800547e:	e007      	b.n	8005490 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005480:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005484:	3301      	adds	r3, #1
 8005486:	b2db      	uxtb	r3, r3
 8005488:	b25a      	sxtb	r2, r3
 800548a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005490:	2301      	movs	r3, #1
 8005492:	637b      	str	r3, [r7, #52]	; 0x34
 8005494:	e001      	b.n	800549a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005496:	2300      	movs	r3, #0
 8005498:	637b      	str	r3, [r7, #52]	; 0x34
 800549a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800549c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f383 8811 	msr	BASEPRI, r3
}
 80054a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3738      	adds	r7, #56	; 0x38
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08c      	sub	sp, #48	; 0x30
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80054bc:	2300      	movs	r3, #0
 80054be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80054c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10a      	bne.n	80054e0 <xQueueReceive+0x30>
	__asm volatile
 80054ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	623b      	str	r3, [r7, #32]
}
 80054dc:	bf00      	nop
 80054de:	e7fe      	b.n	80054de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d103      	bne.n	80054ee <xQueueReceive+0x3e>
 80054e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <xQueueReceive+0x42>
 80054ee:	2301      	movs	r3, #1
 80054f0:	e000      	b.n	80054f4 <xQueueReceive+0x44>
 80054f2:	2300      	movs	r3, #0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10a      	bne.n	800550e <xQueueReceive+0x5e>
	__asm volatile
 80054f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fc:	f383 8811 	msr	BASEPRI, r3
 8005500:	f3bf 8f6f 	isb	sy
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	61fb      	str	r3, [r7, #28]
}
 800550a:	bf00      	nop
 800550c:	e7fe      	b.n	800550c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800550e:	f001 f9dd 	bl	80068cc <xTaskGetSchedulerState>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d102      	bne.n	800551e <xQueueReceive+0x6e>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <xQueueReceive+0x72>
 800551e:	2301      	movs	r3, #1
 8005520:	e000      	b.n	8005524 <xQueueReceive+0x74>
 8005522:	2300      	movs	r3, #0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d10a      	bne.n	800553e <xQueueReceive+0x8e>
	__asm volatile
 8005528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552c:	f383 8811 	msr	BASEPRI, r3
 8005530:	f3bf 8f6f 	isb	sy
 8005534:	f3bf 8f4f 	dsb	sy
 8005538:	61bb      	str	r3, [r7, #24]
}
 800553a:	bf00      	nop
 800553c:	e7fe      	b.n	800553c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800553e:	f001 ff01 	bl	8007344 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005546:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	2b00      	cmp	r3, #0
 800554c:	d01f      	beq.n	800558e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800554e:	68b9      	ldr	r1, [r7, #8]
 8005550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005552:	f000 fa9b 	bl	8005a8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	1e5a      	subs	r2, r3, #1
 800555a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800555e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00f      	beq.n	8005586 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005568:	3310      	adds	r3, #16
 800556a:	4618      	mov	r0, r3
 800556c:	f000 fff2 	bl	8006554 <xTaskRemoveFromEventList>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d007      	beq.n	8005586 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005576:	4b3d      	ldr	r3, [pc, #244]	; (800566c <xQueueReceive+0x1bc>)
 8005578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800557c:	601a      	str	r2, [r3, #0]
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005586:	f001 ff0d 	bl	80073a4 <vPortExitCritical>
				return pdPASS;
 800558a:	2301      	movs	r3, #1
 800558c:	e069      	b.n	8005662 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d103      	bne.n	800559c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005594:	f001 ff06 	bl	80073a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005598:	2300      	movs	r3, #0
 800559a:	e062      	b.n	8005662 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800559c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d106      	bne.n	80055b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055a2:	f107 0310 	add.w	r3, r7, #16
 80055a6:	4618      	mov	r0, r3
 80055a8:	f001 f836 	bl	8006618 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055ac:	2301      	movs	r3, #1
 80055ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055b0:	f001 fef8 	bl	80073a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055b4:	f000 fdca 	bl	800614c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055b8:	f001 fec4 	bl	8007344 <vPortEnterCritical>
 80055bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055c2:	b25b      	sxtb	r3, r3
 80055c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c8:	d103      	bne.n	80055d2 <xQueueReceive+0x122>
 80055ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055d8:	b25b      	sxtb	r3, r3
 80055da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055de:	d103      	bne.n	80055e8 <xQueueReceive+0x138>
 80055e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055e8:	f001 fedc 	bl	80073a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055ec:	1d3a      	adds	r2, r7, #4
 80055ee:	f107 0310 	add.w	r3, r7, #16
 80055f2:	4611      	mov	r1, r2
 80055f4:	4618      	mov	r0, r3
 80055f6:	f001 f825 	bl	8006644 <xTaskCheckForTimeOut>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d123      	bne.n	8005648 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005600:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005602:	f000 fabb 	bl	8005b7c <prvIsQueueEmpty>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d017      	beq.n	800563c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800560c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560e:	3324      	adds	r3, #36	; 0x24
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	4611      	mov	r1, r2
 8005614:	4618      	mov	r0, r3
 8005616:	f000 ff79 	bl	800650c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800561a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800561c:	f000 fa5c 	bl	8005ad8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005620:	f000 fda2 	bl	8006168 <xTaskResumeAll>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d189      	bne.n	800553e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800562a:	4b10      	ldr	r3, [pc, #64]	; (800566c <xQueueReceive+0x1bc>)
 800562c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	e780      	b.n	800553e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800563c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800563e:	f000 fa4b 	bl	8005ad8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005642:	f000 fd91 	bl	8006168 <xTaskResumeAll>
 8005646:	e77a      	b.n	800553e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800564a:	f000 fa45 	bl	8005ad8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800564e:	f000 fd8b 	bl	8006168 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005654:	f000 fa92 	bl	8005b7c <prvIsQueueEmpty>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	f43f af6f 	beq.w	800553e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005660:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005662:	4618      	mov	r0, r3
 8005664:	3730      	adds	r7, #48	; 0x30
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	e000ed04 	.word	0xe000ed04

08005670 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b08e      	sub	sp, #56	; 0x38
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800567a:	2300      	movs	r3, #0
 800567c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005682:	2300      	movs	r3, #0
 8005684:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10a      	bne.n	80056a2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	623b      	str	r3, [r7, #32]
}
 800569e:	bf00      	nop
 80056a0:	e7fe      	b.n	80056a0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80056a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00a      	beq.n	80056c0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80056aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	61fb      	str	r3, [r7, #28]
}
 80056bc:	bf00      	nop
 80056be:	e7fe      	b.n	80056be <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056c0:	f001 f904 	bl	80068cc <xTaskGetSchedulerState>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d102      	bne.n	80056d0 <xQueueSemaphoreTake+0x60>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <xQueueSemaphoreTake+0x64>
 80056d0:	2301      	movs	r3, #1
 80056d2:	e000      	b.n	80056d6 <xQueueSemaphoreTake+0x66>
 80056d4:	2300      	movs	r3, #0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10a      	bne.n	80056f0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80056da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056de:	f383 8811 	msr	BASEPRI, r3
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	61bb      	str	r3, [r7, #24]
}
 80056ec:	bf00      	nop
 80056ee:	e7fe      	b.n	80056ee <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056f0:	f001 fe28 	bl	8007344 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80056f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80056fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d024      	beq.n	800574a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005702:	1e5a      	subs	r2, r3, #1
 8005704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005706:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d104      	bne.n	800571a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005710:	f001 fa84 	bl	8006c1c <pvTaskIncrementMutexHeldCount>
 8005714:	4602      	mov	r2, r0
 8005716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005718:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800571a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00f      	beq.n	8005742 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005724:	3310      	adds	r3, #16
 8005726:	4618      	mov	r0, r3
 8005728:	f000 ff14 	bl	8006554 <xTaskRemoveFromEventList>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d007      	beq.n	8005742 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005732:	4b54      	ldr	r3, [pc, #336]	; (8005884 <xQueueSemaphoreTake+0x214>)
 8005734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005742:	f001 fe2f 	bl	80073a4 <vPortExitCritical>
				return pdPASS;
 8005746:	2301      	movs	r3, #1
 8005748:	e097      	b.n	800587a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d111      	bne.n	8005774 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00a      	beq.n	800576c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575a:	f383 8811 	msr	BASEPRI, r3
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	f3bf 8f4f 	dsb	sy
 8005766:	617b      	str	r3, [r7, #20]
}
 8005768:	bf00      	nop
 800576a:	e7fe      	b.n	800576a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800576c:	f001 fe1a 	bl	80073a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005770:	2300      	movs	r3, #0
 8005772:	e082      	b.n	800587a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005776:	2b00      	cmp	r3, #0
 8005778:	d106      	bne.n	8005788 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800577a:	f107 030c 	add.w	r3, r7, #12
 800577e:	4618      	mov	r0, r3
 8005780:	f000 ff4a 	bl	8006618 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005784:	2301      	movs	r3, #1
 8005786:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005788:	f001 fe0c 	bl	80073a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800578c:	f000 fcde 	bl	800614c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005790:	f001 fdd8 	bl	8007344 <vPortEnterCritical>
 8005794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005796:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800579a:	b25b      	sxtb	r3, r3
 800579c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a0:	d103      	bne.n	80057aa <xQueueSemaphoreTake+0x13a>
 80057a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057b0:	b25b      	sxtb	r3, r3
 80057b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b6:	d103      	bne.n	80057c0 <xQueueSemaphoreTake+0x150>
 80057b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057c0:	f001 fdf0 	bl	80073a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057c4:	463a      	mov	r2, r7
 80057c6:	f107 030c 	add.w	r3, r7, #12
 80057ca:	4611      	mov	r1, r2
 80057cc:	4618      	mov	r0, r3
 80057ce:	f000 ff39 	bl	8006644 <xTaskCheckForTimeOut>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d132      	bne.n	800583e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80057da:	f000 f9cf 	bl	8005b7c <prvIsQueueEmpty>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d026      	beq.n	8005832 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d109      	bne.n	8005800 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80057ec:	f001 fdaa 	bl	8007344 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80057f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f001 f887 	bl	8006908 <xTaskPriorityInherit>
 80057fa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80057fc:	f001 fdd2 	bl	80073a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005802:	3324      	adds	r3, #36	; 0x24
 8005804:	683a      	ldr	r2, [r7, #0]
 8005806:	4611      	mov	r1, r2
 8005808:	4618      	mov	r0, r3
 800580a:	f000 fe7f 	bl	800650c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800580e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005810:	f000 f962 	bl	8005ad8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005814:	f000 fca8 	bl	8006168 <xTaskResumeAll>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	f47f af68 	bne.w	80056f0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005820:	4b18      	ldr	r3, [pc, #96]	; (8005884 <xQueueSemaphoreTake+0x214>)
 8005822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	f3bf 8f6f 	isb	sy
 8005830:	e75e      	b.n	80056f0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005832:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005834:	f000 f950 	bl	8005ad8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005838:	f000 fc96 	bl	8006168 <xTaskResumeAll>
 800583c:	e758      	b.n	80056f0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800583e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005840:	f000 f94a 	bl	8005ad8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005844:	f000 fc90 	bl	8006168 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005848:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800584a:	f000 f997 	bl	8005b7c <prvIsQueueEmpty>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	f43f af4d 	beq.w	80056f0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00d      	beq.n	8005878 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800585c:	f001 fd72 	bl	8007344 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005860:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005862:	f000 f891 	bl	8005988 <prvGetDisinheritPriorityAfterTimeout>
 8005866:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800586e:	4618      	mov	r0, r3
 8005870:	f001 f946 	bl	8006b00 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005874:	f001 fd96 	bl	80073a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005878:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800587a:	4618      	mov	r0, r3
 800587c:	3738      	adds	r7, #56	; 0x38
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	e000ed04 	.word	0xe000ed04

08005888 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b08e      	sub	sp, #56	; 0x38
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10a      	bne.n	80058b4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800589e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	623b      	str	r3, [r7, #32]
}
 80058b0:	bf00      	nop
 80058b2:	e7fe      	b.n	80058b2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d103      	bne.n	80058c2 <xQueueReceiveFromISR+0x3a>
 80058ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <xQueueReceiveFromISR+0x3e>
 80058c2:	2301      	movs	r3, #1
 80058c4:	e000      	b.n	80058c8 <xQueueReceiveFromISR+0x40>
 80058c6:	2300      	movs	r3, #0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10a      	bne.n	80058e2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80058cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d0:	f383 8811 	msr	BASEPRI, r3
 80058d4:	f3bf 8f6f 	isb	sy
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	61fb      	str	r3, [r7, #28]
}
 80058de:	bf00      	nop
 80058e0:	e7fe      	b.n	80058e0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058e2:	f001 fe11 	bl	8007508 <vPortValidateInterruptPriority>
	__asm volatile
 80058e6:	f3ef 8211 	mrs	r2, BASEPRI
 80058ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	61ba      	str	r2, [r7, #24]
 80058fc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80058fe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005900:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005906:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590a:	2b00      	cmp	r3, #0
 800590c:	d02f      	beq.n	800596e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800590e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005910:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005918:	68b9      	ldr	r1, [r7, #8]
 800591a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800591c:	f000 f8b6 	bl	8005a8c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005922:	1e5a      	subs	r2, r3, #1
 8005924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005926:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005928:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800592c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005930:	d112      	bne.n	8005958 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d016      	beq.n	8005968 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800593a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593c:	3310      	adds	r3, #16
 800593e:	4618      	mov	r0, r3
 8005940:	f000 fe08 	bl	8006554 <xTaskRemoveFromEventList>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00e      	beq.n	8005968 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00b      	beq.n	8005968 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	601a      	str	r2, [r3, #0]
 8005956:	e007      	b.n	8005968 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800595c:	3301      	adds	r3, #1
 800595e:	b2db      	uxtb	r3, r3
 8005960:	b25a      	sxtb	r2, r3
 8005962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005968:	2301      	movs	r3, #1
 800596a:	637b      	str	r3, [r7, #52]	; 0x34
 800596c:	e001      	b.n	8005972 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800596e:	2300      	movs	r3, #0
 8005970:	637b      	str	r3, [r7, #52]	; 0x34
 8005972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005974:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	f383 8811 	msr	BASEPRI, r3
}
 800597c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800597e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005980:	4618      	mov	r0, r3
 8005982:	3738      	adds	r7, #56	; 0x38
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005994:	2b00      	cmp	r3, #0
 8005996:	d006      	beq.n	80059a6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f1c3 0307 	rsb	r3, r3, #7
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	e001      	b.n	80059aa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80059a6:	2300      	movs	r3, #0
 80059a8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80059aa:	68fb      	ldr	r3, [r7, #12]
	}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3714      	adds	r7, #20
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80059c4:	2300      	movs	r3, #0
 80059c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10d      	bne.n	80059f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d14d      	bne.n	8005a7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f001 f806 	bl	80069f4 <xTaskPriorityDisinherit>
 80059e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	609a      	str	r2, [r3, #8]
 80059f0:	e043      	b.n	8005a7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d119      	bne.n	8005a2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6858      	ldr	r0, [r3, #4]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a00:	461a      	mov	r2, r3
 8005a02:	68b9      	ldr	r1, [r7, #8]
 8005a04:	f001 ffd4 	bl	80079b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a10:	441a      	add	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	685a      	ldr	r2, [r3, #4]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d32b      	bcc.n	8005a7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	605a      	str	r2, [r3, #4]
 8005a2a:	e026      	b.n	8005a7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	68d8      	ldr	r0, [r3, #12]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a34:	461a      	mov	r2, r3
 8005a36:	68b9      	ldr	r1, [r7, #8]
 8005a38:	f001 ffba 	bl	80079b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	68da      	ldr	r2, [r3, #12]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a44:	425b      	negs	r3, r3
 8005a46:	441a      	add	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	68da      	ldr	r2, [r3, #12]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d207      	bcs.n	8005a68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	689a      	ldr	r2, [r3, #8]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a60:	425b      	negs	r3, r3
 8005a62:	441a      	add	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d105      	bne.n	8005a7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d002      	beq.n	8005a7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	3b01      	subs	r3, #1
 8005a78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	1c5a      	adds	r2, r3, #1
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005a82:	697b      	ldr	r3, [r7, #20]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3718      	adds	r7, #24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d018      	beq.n	8005ad0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68da      	ldr	r2, [r3, #12]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa6:	441a      	add	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68da      	ldr	r2, [r3, #12]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d303      	bcc.n	8005ac0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68d9      	ldr	r1, [r3, #12]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac8:	461a      	mov	r2, r3
 8005aca:	6838      	ldr	r0, [r7, #0]
 8005acc:	f001 ff70 	bl	80079b0 <memcpy>
	}
}
 8005ad0:	bf00      	nop
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ae0:	f001 fc30 	bl	8007344 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005aea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005aec:	e011      	b.n	8005b12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d012      	beq.n	8005b1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	3324      	adds	r3, #36	; 0x24
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 fd2a 	bl	8006554 <xTaskRemoveFromEventList>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005b06:	f000 fdff 	bl	8006708 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005b0a:	7bfb      	ldrb	r3, [r7, #15]
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	dce9      	bgt.n	8005aee <prvUnlockQueue+0x16>
 8005b1a:	e000      	b.n	8005b1e <prvUnlockQueue+0x46>
					break;
 8005b1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	22ff      	movs	r2, #255	; 0xff
 8005b22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005b26:	f001 fc3d 	bl	80073a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005b2a:	f001 fc0b 	bl	8007344 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b36:	e011      	b.n	8005b5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d012      	beq.n	8005b66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	3310      	adds	r3, #16
 8005b44:	4618      	mov	r0, r3
 8005b46:	f000 fd05 	bl	8006554 <xTaskRemoveFromEventList>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005b50:	f000 fdda 	bl	8006708 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005b54:	7bbb      	ldrb	r3, [r7, #14]
 8005b56:	3b01      	subs	r3, #1
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	dce9      	bgt.n	8005b38 <prvUnlockQueue+0x60>
 8005b64:	e000      	b.n	8005b68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005b66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	22ff      	movs	r2, #255	; 0xff
 8005b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005b70:	f001 fc18 	bl	80073a4 <vPortExitCritical>
}
 8005b74:	bf00      	nop
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b84:	f001 fbde 	bl	8007344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d102      	bne.n	8005b96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b90:	2301      	movs	r3, #1
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	e001      	b.n	8005b9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b96:	2300      	movs	r3, #0
 8005b98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b9a:	f001 fc03 	bl	80073a4 <vPortExitCritical>

	return xReturn;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005bb0:	f001 fbc8 	bl	8007344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d102      	bne.n	8005bc6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	60fb      	str	r3, [r7, #12]
 8005bc4:	e001      	b.n	8005bca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005bca:	f001 fbeb 	bl	80073a4 <vPortExitCritical>

	return xReturn;
 8005bce:	68fb      	ldr	r3, [r7, #12]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b08e      	sub	sp, #56	; 0x38
 8005bdc:	af04      	add	r7, sp, #16
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
 8005be4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10a      	bne.n	8005c02 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf0:	f383 8811 	msr	BASEPRI, r3
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	623b      	str	r3, [r7, #32]
}
 8005bfe:	bf00      	nop
 8005c00:	e7fe      	b.n	8005c00 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10a      	bne.n	8005c1e <xTaskCreateStatic+0x46>
	__asm volatile
 8005c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0c:	f383 8811 	msr	BASEPRI, r3
 8005c10:	f3bf 8f6f 	isb	sy
 8005c14:	f3bf 8f4f 	dsb	sy
 8005c18:	61fb      	str	r3, [r7, #28]
}
 8005c1a:	bf00      	nop
 8005c1c:	e7fe      	b.n	8005c1c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005c1e:	2354      	movs	r3, #84	; 0x54
 8005c20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	2b54      	cmp	r3, #84	; 0x54
 8005c26:	d00a      	beq.n	8005c3e <xTaskCreateStatic+0x66>
	__asm volatile
 8005c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2c:	f383 8811 	msr	BASEPRI, r3
 8005c30:	f3bf 8f6f 	isb	sy
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	61bb      	str	r3, [r7, #24]
}
 8005c3a:	bf00      	nop
 8005c3c:	e7fe      	b.n	8005c3c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005c3e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d01e      	beq.n	8005c84 <xTaskCreateStatic+0xac>
 8005c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d01b      	beq.n	8005c84 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c54:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c58:	2202      	movs	r2, #2
 8005c5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005c5e:	2300      	movs	r3, #0
 8005c60:	9303      	str	r3, [sp, #12]
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	9302      	str	r3, [sp, #8]
 8005c66:	f107 0314 	add.w	r3, r7, #20
 8005c6a:	9301      	str	r3, [sp, #4]
 8005c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	68b9      	ldr	r1, [r7, #8]
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f000 f850 	bl	8005d1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c7e:	f000 f8d5 	bl	8005e2c <prvAddNewTaskToReadyList>
 8005c82:	e001      	b.n	8005c88 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005c84:	2300      	movs	r3, #0
 8005c86:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005c88:	697b      	ldr	r3, [r7, #20]
	}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3728      	adds	r7, #40	; 0x28
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b08c      	sub	sp, #48	; 0x30
 8005c96:	af04      	add	r7, sp, #16
 8005c98:	60f8      	str	r0, [r7, #12]
 8005c9a:	60b9      	str	r1, [r7, #8]
 8005c9c:	603b      	str	r3, [r7, #0]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ca2:	88fb      	ldrh	r3, [r7, #6]
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f001 fc6e 	bl	8007588 <pvPortMalloc>
 8005cac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00e      	beq.n	8005cd2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005cb4:	2054      	movs	r0, #84	; 0x54
 8005cb6:	f001 fc67 	bl	8007588 <pvPortMalloc>
 8005cba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d003      	beq.n	8005cca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	631a      	str	r2, [r3, #48]	; 0x30
 8005cc8:	e005      	b.n	8005cd6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005cca:	6978      	ldr	r0, [r7, #20]
 8005ccc:	f001 fd28 	bl	8007720 <vPortFree>
 8005cd0:	e001      	b.n	8005cd6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d017      	beq.n	8005d0c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ce4:	88fa      	ldrh	r2, [r7, #6]
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	9303      	str	r3, [sp, #12]
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	9302      	str	r3, [sp, #8]
 8005cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf0:	9301      	str	r3, [sp, #4]
 8005cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	68b9      	ldr	r1, [r7, #8]
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f000 f80e 	bl	8005d1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d00:	69f8      	ldr	r0, [r7, #28]
 8005d02:	f000 f893 	bl	8005e2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d06:	2301      	movs	r3, #1
 8005d08:	61bb      	str	r3, [r7, #24]
 8005d0a:	e002      	b.n	8005d12 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d10:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d12:	69bb      	ldr	r3, [r7, #24]
	}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3720      	adds	r7, #32
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b088      	sub	sp, #32
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
 8005d28:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005d34:	3b01      	subs	r3, #1
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	f023 0307 	bic.w	r3, r3, #7
 8005d42:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	f003 0307 	and.w	r3, r3, #7
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00a      	beq.n	8005d64 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d52:	f383 8811 	msr	BASEPRI, r3
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	617b      	str	r3, [r7, #20]
}
 8005d60:	bf00      	nop
 8005d62:	e7fe      	b.n	8005d62 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d01f      	beq.n	8005daa <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	61fb      	str	r3, [r7, #28]
 8005d6e:	e012      	b.n	8005d96 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	4413      	add	r3, r2
 8005d76:	7819      	ldrb	r1, [r3, #0]
 8005d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	3334      	adds	r3, #52	; 0x34
 8005d80:	460a      	mov	r2, r1
 8005d82:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	4413      	add	r3, r2
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d006      	beq.n	8005d9e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	3301      	adds	r3, #1
 8005d94:	61fb      	str	r3, [r7, #28]
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	2b0f      	cmp	r3, #15
 8005d9a:	d9e9      	bls.n	8005d70 <prvInitialiseNewTask+0x54>
 8005d9c:	e000      	b.n	8005da0 <prvInitialiseNewTask+0x84>
			{
				break;
 8005d9e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005da8:	e003      	b.n	8005db2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db4:	2b06      	cmp	r3, #6
 8005db6:	d901      	bls.n	8005dbc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005db8:	2306      	movs	r3, #6
 8005dba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dc0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dc6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dca:	2200      	movs	r2, #0
 8005dcc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd0:	3304      	adds	r3, #4
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7fe ff2c 	bl	8004c30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dda:	3318      	adds	r3, #24
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7fe ff27 	bl	8004c30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005de6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dea:	f1c3 0207 	rsb	r2, r3, #7
 8005dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005df6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	68f9      	ldr	r1, [r7, #12]
 8005e0a:	69b8      	ldr	r0, [r7, #24]
 8005e0c:	f001 f96a 	bl	80070e4 <pxPortInitialiseStack>
 8005e10:	4602      	mov	r2, r0
 8005e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e14:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d002      	beq.n	8005e22 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e22:	bf00      	nop
 8005e24:	3720      	adds	r7, #32
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
	...

08005e2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005e34:	f001 fa86 	bl	8007344 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005e38:	4b2a      	ldr	r3, [pc, #168]	; (8005ee4 <prvAddNewTaskToReadyList+0xb8>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	4a29      	ldr	r2, [pc, #164]	; (8005ee4 <prvAddNewTaskToReadyList+0xb8>)
 8005e40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005e42:	4b29      	ldr	r3, [pc, #164]	; (8005ee8 <prvAddNewTaskToReadyList+0xbc>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d109      	bne.n	8005e5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005e4a:	4a27      	ldr	r2, [pc, #156]	; (8005ee8 <prvAddNewTaskToReadyList+0xbc>)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e50:	4b24      	ldr	r3, [pc, #144]	; (8005ee4 <prvAddNewTaskToReadyList+0xb8>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d110      	bne.n	8005e7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005e58:	f000 fc7a 	bl	8006750 <prvInitialiseTaskLists>
 8005e5c:	e00d      	b.n	8005e7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005e5e:	4b23      	ldr	r3, [pc, #140]	; (8005eec <prvAddNewTaskToReadyList+0xc0>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d109      	bne.n	8005e7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e66:	4b20      	ldr	r3, [pc, #128]	; (8005ee8 <prvAddNewTaskToReadyList+0xbc>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d802      	bhi.n	8005e7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005e74:	4a1c      	ldr	r2, [pc, #112]	; (8005ee8 <prvAddNewTaskToReadyList+0xbc>)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005e7a:	4b1d      	ldr	r3, [pc, #116]	; (8005ef0 <prvAddNewTaskToReadyList+0xc4>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	3301      	adds	r3, #1
 8005e80:	4a1b      	ldr	r2, [pc, #108]	; (8005ef0 <prvAddNewTaskToReadyList+0xc4>)
 8005e82:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e88:	2201      	movs	r2, #1
 8005e8a:	409a      	lsls	r2, r3
 8005e8c:	4b19      	ldr	r3, [pc, #100]	; (8005ef4 <prvAddNewTaskToReadyList+0xc8>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	4a18      	ldr	r2, [pc, #96]	; (8005ef4 <prvAddNewTaskToReadyList+0xc8>)
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4413      	add	r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4a15      	ldr	r2, [pc, #84]	; (8005ef8 <prvAddNewTaskToReadyList+0xcc>)
 8005ea4:	441a      	add	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	3304      	adds	r3, #4
 8005eaa:	4619      	mov	r1, r3
 8005eac:	4610      	mov	r0, r2
 8005eae:	f7fe fecc 	bl	8004c4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005eb2:	f001 fa77 	bl	80073a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005eb6:	4b0d      	ldr	r3, [pc, #52]	; (8005eec <prvAddNewTaskToReadyList+0xc0>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00e      	beq.n	8005edc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ebe:	4b0a      	ldr	r3, [pc, #40]	; (8005ee8 <prvAddNewTaskToReadyList+0xbc>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d207      	bcs.n	8005edc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005ecc:	4b0b      	ldr	r3, [pc, #44]	; (8005efc <prvAddNewTaskToReadyList+0xd0>)
 8005ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	f3bf 8f4f 	dsb	sy
 8005ed8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005edc:	bf00      	nop
 8005ede:	3708      	adds	r7, #8
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	2000054c 	.word	0x2000054c
 8005ee8:	2000044c 	.word	0x2000044c
 8005eec:	20000558 	.word	0x20000558
 8005ef0:	20000568 	.word	0x20000568
 8005ef4:	20000554 	.word	0x20000554
 8005ef8:	20000450 	.word	0x20000450
 8005efc:	e000ed04 	.word	0xe000ed04

08005f00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d017      	beq.n	8005f42 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005f12:	4b13      	ldr	r3, [pc, #76]	; (8005f60 <vTaskDelay+0x60>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00a      	beq.n	8005f30 <vTaskDelay+0x30>
	__asm volatile
 8005f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1e:	f383 8811 	msr	BASEPRI, r3
 8005f22:	f3bf 8f6f 	isb	sy
 8005f26:	f3bf 8f4f 	dsb	sy
 8005f2a:	60bb      	str	r3, [r7, #8]
}
 8005f2c:	bf00      	nop
 8005f2e:	e7fe      	b.n	8005f2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005f30:	f000 f90c 	bl	800614c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005f34:	2100      	movs	r1, #0
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f001 f86e 	bl	8007018 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005f3c:	f000 f914 	bl	8006168 <xTaskResumeAll>
 8005f40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d107      	bne.n	8005f58 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005f48:	4b06      	ldr	r3, [pc, #24]	; (8005f64 <vTaskDelay+0x64>)
 8005f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f4e:	601a      	str	r2, [r3, #0]
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f58:	bf00      	nop
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	20000574 	.word	0x20000574
 8005f64:	e000ed04 	.word	0xe000ed04

08005f68 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005f70:	f001 f9e8 	bl	8007344 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d102      	bne.n	8005f80 <vTaskSuspend+0x18>
 8005f7a:	4b3c      	ldr	r3, [pc, #240]	; (800606c <vTaskSuspend+0x104>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	e000      	b.n	8005f82 <vTaskSuspend+0x1a>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	3304      	adds	r3, #4
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7fe febb 	bl	8004d04 <uxListRemove>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d115      	bne.n	8005fc0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f98:	4935      	ldr	r1, [pc, #212]	; (8006070 <vTaskSuspend+0x108>)
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4413      	add	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	440b      	add	r3, r1
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10a      	bne.n	8005fc0 <vTaskSuspend+0x58>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fae:	2201      	movs	r2, #1
 8005fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb4:	43da      	mvns	r2, r3
 8005fb6:	4b2f      	ldr	r3, [pc, #188]	; (8006074 <vTaskSuspend+0x10c>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4013      	ands	r3, r2
 8005fbc:	4a2d      	ldr	r2, [pc, #180]	; (8006074 <vTaskSuspend+0x10c>)
 8005fbe:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d004      	beq.n	8005fd2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	3318      	adds	r3, #24
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7fe fe99 	bl	8004d04 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	3304      	adds	r3, #4
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	4827      	ldr	r0, [pc, #156]	; (8006078 <vTaskSuspend+0x110>)
 8005fda:	f7fe fe36 	bl	8004c4a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d103      	bne.n	8005ff2 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8005ff2:	f001 f9d7 	bl	80073a4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8005ff6:	4b21      	ldr	r3, [pc, #132]	; (800607c <vTaskSuspend+0x114>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d005      	beq.n	800600a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8005ffe:	f001 f9a1 	bl	8007344 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006002:	f000 fc43 	bl	800688c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006006:	f001 f9cd 	bl	80073a4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800600a:	4b18      	ldr	r3, [pc, #96]	; (800606c <vTaskSuspend+0x104>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	429a      	cmp	r2, r3
 8006012:	d127      	bne.n	8006064 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8006014:	4b19      	ldr	r3, [pc, #100]	; (800607c <vTaskSuspend+0x114>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d017      	beq.n	800604c <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800601c:	4b18      	ldr	r3, [pc, #96]	; (8006080 <vTaskSuspend+0x118>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00a      	beq.n	800603a <vTaskSuspend+0xd2>
	__asm volatile
 8006024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006028:	f383 8811 	msr	BASEPRI, r3
 800602c:	f3bf 8f6f 	isb	sy
 8006030:	f3bf 8f4f 	dsb	sy
 8006034:	60bb      	str	r3, [r7, #8]
}
 8006036:	bf00      	nop
 8006038:	e7fe      	b.n	8006038 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800603a:	4b12      	ldr	r3, [pc, #72]	; (8006084 <vTaskSuspend+0x11c>)
 800603c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006040:	601a      	str	r2, [r3, #0]
 8006042:	f3bf 8f4f 	dsb	sy
 8006046:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800604a:	e00b      	b.n	8006064 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800604c:	4b0a      	ldr	r3, [pc, #40]	; (8006078 <vTaskSuspend+0x110>)
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	4b0d      	ldr	r3, [pc, #52]	; (8006088 <vTaskSuspend+0x120>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	429a      	cmp	r2, r3
 8006056:	d103      	bne.n	8006060 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8006058:	4b04      	ldr	r3, [pc, #16]	; (800606c <vTaskSuspend+0x104>)
 800605a:	2200      	movs	r2, #0
 800605c:	601a      	str	r2, [r3, #0]
	}
 800605e:	e001      	b.n	8006064 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8006060:	f000 f9f8 	bl	8006454 <vTaskSwitchContext>
	}
 8006064:	bf00      	nop
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	2000044c 	.word	0x2000044c
 8006070:	20000450 	.word	0x20000450
 8006074:	20000554 	.word	0x20000554
 8006078:	20000538 	.word	0x20000538
 800607c:	20000558 	.word	0x20000558
 8006080:	20000574 	.word	0x20000574
 8006084:	e000ed04 	.word	0xe000ed04
 8006088:	2000054c 	.word	0x2000054c

0800608c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b08a      	sub	sp, #40	; 0x28
 8006090:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006092:	2300      	movs	r3, #0
 8006094:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006096:	2300      	movs	r3, #0
 8006098:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800609a:	463a      	mov	r2, r7
 800609c:	1d39      	adds	r1, r7, #4
 800609e:	f107 0308 	add.w	r3, r7, #8
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fa fd94 	bl	8000bd0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80060a8:	6839      	ldr	r1, [r7, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68ba      	ldr	r2, [r7, #8]
 80060ae:	9202      	str	r2, [sp, #8]
 80060b0:	9301      	str	r3, [sp, #4]
 80060b2:	2300      	movs	r3, #0
 80060b4:	9300      	str	r3, [sp, #0]
 80060b6:	2300      	movs	r3, #0
 80060b8:	460a      	mov	r2, r1
 80060ba:	491e      	ldr	r1, [pc, #120]	; (8006134 <vTaskStartScheduler+0xa8>)
 80060bc:	481e      	ldr	r0, [pc, #120]	; (8006138 <vTaskStartScheduler+0xac>)
 80060be:	f7ff fd8b 	bl	8005bd8 <xTaskCreateStatic>
 80060c2:	4603      	mov	r3, r0
 80060c4:	4a1d      	ldr	r2, [pc, #116]	; (800613c <vTaskStartScheduler+0xb0>)
 80060c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80060c8:	4b1c      	ldr	r3, [pc, #112]	; (800613c <vTaskStartScheduler+0xb0>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d002      	beq.n	80060d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80060d0:	2301      	movs	r3, #1
 80060d2:	617b      	str	r3, [r7, #20]
 80060d4:	e001      	b.n	80060da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80060d6:	2300      	movs	r3, #0
 80060d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d116      	bne.n	800610e <vTaskStartScheduler+0x82>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	613b      	str	r3, [r7, #16]
}
 80060f2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80060f4:	4b12      	ldr	r3, [pc, #72]	; (8006140 <vTaskStartScheduler+0xb4>)
 80060f6:	f04f 32ff 	mov.w	r2, #4294967295
 80060fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80060fc:	4b11      	ldr	r3, [pc, #68]	; (8006144 <vTaskStartScheduler+0xb8>)
 80060fe:	2201      	movs	r2, #1
 8006100:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006102:	4b11      	ldr	r3, [pc, #68]	; (8006148 <vTaskStartScheduler+0xbc>)
 8006104:	2200      	movs	r2, #0
 8006106:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006108:	f001 f87a 	bl	8007200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800610c:	e00e      	b.n	800612c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006114:	d10a      	bne.n	800612c <vTaskStartScheduler+0xa0>
	__asm volatile
 8006116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	60fb      	str	r3, [r7, #12]
}
 8006128:	bf00      	nop
 800612a:	e7fe      	b.n	800612a <vTaskStartScheduler+0x9e>
}
 800612c:	bf00      	nop
 800612e:	3718      	adds	r7, #24
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	080085dc 	.word	0x080085dc
 8006138:	08006721 	.word	0x08006721
 800613c:	20000570 	.word	0x20000570
 8006140:	2000056c 	.word	0x2000056c
 8006144:	20000558 	.word	0x20000558
 8006148:	20000550 	.word	0x20000550

0800614c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800614c:	b480      	push	{r7}
 800614e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006150:	4b04      	ldr	r3, [pc, #16]	; (8006164 <vTaskSuspendAll+0x18>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3301      	adds	r3, #1
 8006156:	4a03      	ldr	r2, [pc, #12]	; (8006164 <vTaskSuspendAll+0x18>)
 8006158:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800615a:	bf00      	nop
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	20000574 	.word	0x20000574

08006168 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800616e:	2300      	movs	r3, #0
 8006170:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006172:	2300      	movs	r3, #0
 8006174:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006176:	4b41      	ldr	r3, [pc, #260]	; (800627c <xTaskResumeAll+0x114>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10a      	bne.n	8006194 <xTaskResumeAll+0x2c>
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	603b      	str	r3, [r7, #0]
}
 8006190:	bf00      	nop
 8006192:	e7fe      	b.n	8006192 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006194:	f001 f8d6 	bl	8007344 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006198:	4b38      	ldr	r3, [pc, #224]	; (800627c <xTaskResumeAll+0x114>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	3b01      	subs	r3, #1
 800619e:	4a37      	ldr	r2, [pc, #220]	; (800627c <xTaskResumeAll+0x114>)
 80061a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061a2:	4b36      	ldr	r3, [pc, #216]	; (800627c <xTaskResumeAll+0x114>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d161      	bne.n	800626e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80061aa:	4b35      	ldr	r3, [pc, #212]	; (8006280 <xTaskResumeAll+0x118>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d05d      	beq.n	800626e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061b2:	e02e      	b.n	8006212 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061b4:	4b33      	ldr	r3, [pc, #204]	; (8006284 <xTaskResumeAll+0x11c>)
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	3318      	adds	r3, #24
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7fe fd9f 	bl	8004d04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	3304      	adds	r3, #4
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fe fd9a 	bl	8004d04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d4:	2201      	movs	r2, #1
 80061d6:	409a      	lsls	r2, r3
 80061d8:	4b2b      	ldr	r3, [pc, #172]	; (8006288 <xTaskResumeAll+0x120>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4313      	orrs	r3, r2
 80061de:	4a2a      	ldr	r2, [pc, #168]	; (8006288 <xTaskResumeAll+0x120>)
 80061e0:	6013      	str	r3, [r2, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e6:	4613      	mov	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4413      	add	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4a27      	ldr	r2, [pc, #156]	; (800628c <xTaskResumeAll+0x124>)
 80061f0:	441a      	add	r2, r3
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	3304      	adds	r3, #4
 80061f6:	4619      	mov	r1, r3
 80061f8:	4610      	mov	r0, r2
 80061fa:	f7fe fd26 	bl	8004c4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006202:	4b23      	ldr	r3, [pc, #140]	; (8006290 <xTaskResumeAll+0x128>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006208:	429a      	cmp	r2, r3
 800620a:	d302      	bcc.n	8006212 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800620c:	4b21      	ldr	r3, [pc, #132]	; (8006294 <xTaskResumeAll+0x12c>)
 800620e:	2201      	movs	r2, #1
 8006210:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006212:	4b1c      	ldr	r3, [pc, #112]	; (8006284 <xTaskResumeAll+0x11c>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1cc      	bne.n	80061b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d001      	beq.n	8006224 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006220:	f000 fb34 	bl	800688c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006224:	4b1c      	ldr	r3, [pc, #112]	; (8006298 <xTaskResumeAll+0x130>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d010      	beq.n	8006252 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006230:	f000 f858 	bl	80062e4 <xTaskIncrementTick>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d002      	beq.n	8006240 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800623a:	4b16      	ldr	r3, [pc, #88]	; (8006294 <xTaskResumeAll+0x12c>)
 800623c:	2201      	movs	r2, #1
 800623e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	3b01      	subs	r3, #1
 8006244:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1f1      	bne.n	8006230 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800624c:	4b12      	ldr	r3, [pc, #72]	; (8006298 <xTaskResumeAll+0x130>)
 800624e:	2200      	movs	r2, #0
 8006250:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006252:	4b10      	ldr	r3, [pc, #64]	; (8006294 <xTaskResumeAll+0x12c>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d009      	beq.n	800626e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800625a:	2301      	movs	r3, #1
 800625c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800625e:	4b0f      	ldr	r3, [pc, #60]	; (800629c <xTaskResumeAll+0x134>)
 8006260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006264:	601a      	str	r2, [r3, #0]
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800626e:	f001 f899 	bl	80073a4 <vPortExitCritical>

	return xAlreadyYielded;
 8006272:	68bb      	ldr	r3, [r7, #8]
}
 8006274:	4618      	mov	r0, r3
 8006276:	3710      	adds	r7, #16
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	20000574 	.word	0x20000574
 8006280:	2000054c 	.word	0x2000054c
 8006284:	2000050c 	.word	0x2000050c
 8006288:	20000554 	.word	0x20000554
 800628c:	20000450 	.word	0x20000450
 8006290:	2000044c 	.word	0x2000044c
 8006294:	20000560 	.word	0x20000560
 8006298:	2000055c 	.word	0x2000055c
 800629c:	e000ed04 	.word	0xe000ed04

080062a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80062a6:	4b05      	ldr	r3, [pc, #20]	; (80062bc <xTaskGetTickCount+0x1c>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80062ac:	687b      	ldr	r3, [r7, #4]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	370c      	adds	r7, #12
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	20000550 	.word	0x20000550

080062c0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062c6:	f001 f91f 	bl	8007508 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80062ca:	2300      	movs	r3, #0
 80062cc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80062ce:	4b04      	ldr	r3, [pc, #16]	; (80062e0 <xTaskGetTickCountFromISR+0x20>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80062d4:	683b      	ldr	r3, [r7, #0]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	20000550 	.word	0x20000550

080062e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80062ea:	2300      	movs	r3, #0
 80062ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062ee:	4b4e      	ldr	r3, [pc, #312]	; (8006428 <xTaskIncrementTick+0x144>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f040 808e 	bne.w	8006414 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80062f8:	4b4c      	ldr	r3, [pc, #304]	; (800642c <xTaskIncrementTick+0x148>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	3301      	adds	r3, #1
 80062fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006300:	4a4a      	ldr	r2, [pc, #296]	; (800642c <xTaskIncrementTick+0x148>)
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d120      	bne.n	800634e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800630c:	4b48      	ldr	r3, [pc, #288]	; (8006430 <xTaskIncrementTick+0x14c>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00a      	beq.n	800632c <xTaskIncrementTick+0x48>
	__asm volatile
 8006316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631a:	f383 8811 	msr	BASEPRI, r3
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	f3bf 8f4f 	dsb	sy
 8006326:	603b      	str	r3, [r7, #0]
}
 8006328:	bf00      	nop
 800632a:	e7fe      	b.n	800632a <xTaskIncrementTick+0x46>
 800632c:	4b40      	ldr	r3, [pc, #256]	; (8006430 <xTaskIncrementTick+0x14c>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	60fb      	str	r3, [r7, #12]
 8006332:	4b40      	ldr	r3, [pc, #256]	; (8006434 <xTaskIncrementTick+0x150>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a3e      	ldr	r2, [pc, #248]	; (8006430 <xTaskIncrementTick+0x14c>)
 8006338:	6013      	str	r3, [r2, #0]
 800633a:	4a3e      	ldr	r2, [pc, #248]	; (8006434 <xTaskIncrementTick+0x150>)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6013      	str	r3, [r2, #0]
 8006340:	4b3d      	ldr	r3, [pc, #244]	; (8006438 <xTaskIncrementTick+0x154>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	3301      	adds	r3, #1
 8006346:	4a3c      	ldr	r2, [pc, #240]	; (8006438 <xTaskIncrementTick+0x154>)
 8006348:	6013      	str	r3, [r2, #0]
 800634a:	f000 fa9f 	bl	800688c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800634e:	4b3b      	ldr	r3, [pc, #236]	; (800643c <xTaskIncrementTick+0x158>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	429a      	cmp	r2, r3
 8006356:	d348      	bcc.n	80063ea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006358:	4b35      	ldr	r3, [pc, #212]	; (8006430 <xTaskIncrementTick+0x14c>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d104      	bne.n	800636c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006362:	4b36      	ldr	r3, [pc, #216]	; (800643c <xTaskIncrementTick+0x158>)
 8006364:	f04f 32ff 	mov.w	r2, #4294967295
 8006368:	601a      	str	r2, [r3, #0]
					break;
 800636a:	e03e      	b.n	80063ea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800636c:	4b30      	ldr	r3, [pc, #192]	; (8006430 <xTaskIncrementTick+0x14c>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	429a      	cmp	r2, r3
 8006382:	d203      	bcs.n	800638c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006384:	4a2d      	ldr	r2, [pc, #180]	; (800643c <xTaskIncrementTick+0x158>)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800638a:	e02e      	b.n	80063ea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	3304      	adds	r3, #4
 8006390:	4618      	mov	r0, r3
 8006392:	f7fe fcb7 	bl	8004d04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639a:	2b00      	cmp	r3, #0
 800639c:	d004      	beq.n	80063a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	3318      	adds	r3, #24
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fe fcae 	bl	8004d04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ac:	2201      	movs	r2, #1
 80063ae:	409a      	lsls	r2, r3
 80063b0:	4b23      	ldr	r3, [pc, #140]	; (8006440 <xTaskIncrementTick+0x15c>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	4a22      	ldr	r2, [pc, #136]	; (8006440 <xTaskIncrementTick+0x15c>)
 80063b8:	6013      	str	r3, [r2, #0]
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063be:	4613      	mov	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4a1f      	ldr	r2, [pc, #124]	; (8006444 <xTaskIncrementTick+0x160>)
 80063c8:	441a      	add	r2, r3
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	3304      	adds	r3, #4
 80063ce:	4619      	mov	r1, r3
 80063d0:	4610      	mov	r0, r2
 80063d2:	f7fe fc3a 	bl	8004c4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063da:	4b1b      	ldr	r3, [pc, #108]	; (8006448 <xTaskIncrementTick+0x164>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d3b9      	bcc.n	8006358 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80063e4:	2301      	movs	r3, #1
 80063e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063e8:	e7b6      	b.n	8006358 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80063ea:	4b17      	ldr	r3, [pc, #92]	; (8006448 <xTaskIncrementTick+0x164>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f0:	4914      	ldr	r1, [pc, #80]	; (8006444 <xTaskIncrementTick+0x160>)
 80063f2:	4613      	mov	r3, r2
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4413      	add	r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	440b      	add	r3, r1
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d901      	bls.n	8006406 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006402:	2301      	movs	r3, #1
 8006404:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006406:	4b11      	ldr	r3, [pc, #68]	; (800644c <xTaskIncrementTick+0x168>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d007      	beq.n	800641e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800640e:	2301      	movs	r3, #1
 8006410:	617b      	str	r3, [r7, #20]
 8006412:	e004      	b.n	800641e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006414:	4b0e      	ldr	r3, [pc, #56]	; (8006450 <xTaskIncrementTick+0x16c>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	3301      	adds	r3, #1
 800641a:	4a0d      	ldr	r2, [pc, #52]	; (8006450 <xTaskIncrementTick+0x16c>)
 800641c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800641e:	697b      	ldr	r3, [r7, #20]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3718      	adds	r7, #24
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	20000574 	.word	0x20000574
 800642c:	20000550 	.word	0x20000550
 8006430:	20000504 	.word	0x20000504
 8006434:	20000508 	.word	0x20000508
 8006438:	20000564 	.word	0x20000564
 800643c:	2000056c 	.word	0x2000056c
 8006440:	20000554 	.word	0x20000554
 8006444:	20000450 	.word	0x20000450
 8006448:	2000044c 	.word	0x2000044c
 800644c:	20000560 	.word	0x20000560
 8006450:	2000055c 	.word	0x2000055c

08006454 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006454:	b480      	push	{r7}
 8006456:	b087      	sub	sp, #28
 8006458:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800645a:	4b27      	ldr	r3, [pc, #156]	; (80064f8 <vTaskSwitchContext+0xa4>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006462:	4b26      	ldr	r3, [pc, #152]	; (80064fc <vTaskSwitchContext+0xa8>)
 8006464:	2201      	movs	r2, #1
 8006466:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006468:	e03f      	b.n	80064ea <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800646a:	4b24      	ldr	r3, [pc, #144]	; (80064fc <vTaskSwitchContext+0xa8>)
 800646c:	2200      	movs	r2, #0
 800646e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006470:	4b23      	ldr	r3, [pc, #140]	; (8006500 <vTaskSwitchContext+0xac>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	fab3 f383 	clz	r3, r3
 800647c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800647e:	7afb      	ldrb	r3, [r7, #11]
 8006480:	f1c3 031f 	rsb	r3, r3, #31
 8006484:	617b      	str	r3, [r7, #20]
 8006486:	491f      	ldr	r1, [pc, #124]	; (8006504 <vTaskSwitchContext+0xb0>)
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	4613      	mov	r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	4413      	add	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	440b      	add	r3, r1
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10a      	bne.n	80064b0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800649a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	607b      	str	r3, [r7, #4]
}
 80064ac:	bf00      	nop
 80064ae:	e7fe      	b.n	80064ae <vTaskSwitchContext+0x5a>
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	4613      	mov	r3, r2
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	4413      	add	r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4a12      	ldr	r2, [pc, #72]	; (8006504 <vTaskSwitchContext+0xb0>)
 80064bc:	4413      	add	r3, r2
 80064be:	613b      	str	r3, [r7, #16]
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	685a      	ldr	r2, [r3, #4]
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	605a      	str	r2, [r3, #4]
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	685a      	ldr	r2, [r3, #4]
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	3308      	adds	r3, #8
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d104      	bne.n	80064e0 <vTaskSwitchContext+0x8c>
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	605a      	str	r2, [r3, #4]
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	4a08      	ldr	r2, [pc, #32]	; (8006508 <vTaskSwitchContext+0xb4>)
 80064e8:	6013      	str	r3, [r2, #0]
}
 80064ea:	bf00      	nop
 80064ec:	371c      	adds	r7, #28
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	20000574 	.word	0x20000574
 80064fc:	20000560 	.word	0x20000560
 8006500:	20000554 	.word	0x20000554
 8006504:	20000450 	.word	0x20000450
 8006508:	2000044c 	.word	0x2000044c

0800650c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10a      	bne.n	8006532 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800651c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006520:	f383 8811 	msr	BASEPRI, r3
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	60fb      	str	r3, [r7, #12]
}
 800652e:	bf00      	nop
 8006530:	e7fe      	b.n	8006530 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006532:	4b07      	ldr	r3, [pc, #28]	; (8006550 <vTaskPlaceOnEventList+0x44>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3318      	adds	r3, #24
 8006538:	4619      	mov	r1, r3
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7fe fba9 	bl	8004c92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006540:	2101      	movs	r1, #1
 8006542:	6838      	ldr	r0, [r7, #0]
 8006544:	f000 fd68 	bl	8007018 <prvAddCurrentTaskToDelayedList>
}
 8006548:	bf00      	nop
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	2000044c 	.word	0x2000044c

08006554 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10a      	bne.n	8006580 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800656a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656e:	f383 8811 	msr	BASEPRI, r3
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	60fb      	str	r3, [r7, #12]
}
 800657c:	bf00      	nop
 800657e:	e7fe      	b.n	800657e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	3318      	adds	r3, #24
 8006584:	4618      	mov	r0, r3
 8006586:	f7fe fbbd 	bl	8004d04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800658a:	4b1d      	ldr	r3, [pc, #116]	; (8006600 <xTaskRemoveFromEventList+0xac>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d11c      	bne.n	80065cc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	3304      	adds	r3, #4
 8006596:	4618      	mov	r0, r3
 8006598:	f7fe fbb4 	bl	8004d04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a0:	2201      	movs	r2, #1
 80065a2:	409a      	lsls	r2, r3
 80065a4:	4b17      	ldr	r3, [pc, #92]	; (8006604 <xTaskRemoveFromEventList+0xb0>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	4a16      	ldr	r2, [pc, #88]	; (8006604 <xTaskRemoveFromEventList+0xb0>)
 80065ac:	6013      	str	r3, [r2, #0]
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b2:	4613      	mov	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4a13      	ldr	r2, [pc, #76]	; (8006608 <xTaskRemoveFromEventList+0xb4>)
 80065bc:	441a      	add	r2, r3
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	3304      	adds	r3, #4
 80065c2:	4619      	mov	r1, r3
 80065c4:	4610      	mov	r0, r2
 80065c6:	f7fe fb40 	bl	8004c4a <vListInsertEnd>
 80065ca:	e005      	b.n	80065d8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	3318      	adds	r3, #24
 80065d0:	4619      	mov	r1, r3
 80065d2:	480e      	ldr	r0, [pc, #56]	; (800660c <xTaskRemoveFromEventList+0xb8>)
 80065d4:	f7fe fb39 	bl	8004c4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065dc:	4b0c      	ldr	r3, [pc, #48]	; (8006610 <xTaskRemoveFromEventList+0xbc>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d905      	bls.n	80065f2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80065e6:	2301      	movs	r3, #1
 80065e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80065ea:	4b0a      	ldr	r3, [pc, #40]	; (8006614 <xTaskRemoveFromEventList+0xc0>)
 80065ec:	2201      	movs	r2, #1
 80065ee:	601a      	str	r2, [r3, #0]
 80065f0:	e001      	b.n	80065f6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80065f2:	2300      	movs	r3, #0
 80065f4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80065f6:	697b      	ldr	r3, [r7, #20]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3718      	adds	r7, #24
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	20000574 	.word	0x20000574
 8006604:	20000554 	.word	0x20000554
 8006608:	20000450 	.word	0x20000450
 800660c:	2000050c 	.word	0x2000050c
 8006610:	2000044c 	.word	0x2000044c
 8006614:	20000560 	.word	0x20000560

08006618 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006620:	4b06      	ldr	r3, [pc, #24]	; (800663c <vTaskInternalSetTimeOutState+0x24>)
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006628:	4b05      	ldr	r3, [pc, #20]	; (8006640 <vTaskInternalSetTimeOutState+0x28>)
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	605a      	str	r2, [r3, #4]
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	20000564 	.word	0x20000564
 8006640:	20000550 	.word	0x20000550

08006644 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b088      	sub	sp, #32
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10a      	bne.n	800666a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	613b      	str	r3, [r7, #16]
}
 8006666:	bf00      	nop
 8006668:	e7fe      	b.n	8006668 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10a      	bne.n	8006686 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006674:	f383 8811 	msr	BASEPRI, r3
 8006678:	f3bf 8f6f 	isb	sy
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	60fb      	str	r3, [r7, #12]
}
 8006682:	bf00      	nop
 8006684:	e7fe      	b.n	8006684 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006686:	f000 fe5d 	bl	8007344 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800668a:	4b1d      	ldr	r3, [pc, #116]	; (8006700 <xTaskCheckForTimeOut+0xbc>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	69ba      	ldr	r2, [r7, #24]
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a2:	d102      	bne.n	80066aa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80066a4:	2300      	movs	r3, #0
 80066a6:	61fb      	str	r3, [r7, #28]
 80066a8:	e023      	b.n	80066f2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	4b15      	ldr	r3, [pc, #84]	; (8006704 <xTaskCheckForTimeOut+0xc0>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d007      	beq.n	80066c6 <xTaskCheckForTimeOut+0x82>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	69ba      	ldr	r2, [r7, #24]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d302      	bcc.n	80066c6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80066c0:	2301      	movs	r3, #1
 80066c2:	61fb      	str	r3, [r7, #28]
 80066c4:	e015      	b.n	80066f2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d20b      	bcs.n	80066e8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	1ad2      	subs	r2, r2, r3
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f7ff ff9b 	bl	8006618 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80066e2:	2300      	movs	r3, #0
 80066e4:	61fb      	str	r3, [r7, #28]
 80066e6:	e004      	b.n	80066f2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	2200      	movs	r2, #0
 80066ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80066ee:	2301      	movs	r3, #1
 80066f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80066f2:	f000 fe57 	bl	80073a4 <vPortExitCritical>

	return xReturn;
 80066f6:	69fb      	ldr	r3, [r7, #28]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3720      	adds	r7, #32
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	20000550 	.word	0x20000550
 8006704:	20000564 	.word	0x20000564

08006708 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006708:	b480      	push	{r7}
 800670a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800670c:	4b03      	ldr	r3, [pc, #12]	; (800671c <vTaskMissedYield+0x14>)
 800670e:	2201      	movs	r2, #1
 8006710:	601a      	str	r2, [r3, #0]
}
 8006712:	bf00      	nop
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	20000560 	.word	0x20000560

08006720 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006728:	f000 f852 	bl	80067d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800672c:	4b06      	ldr	r3, [pc, #24]	; (8006748 <prvIdleTask+0x28>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d9f9      	bls.n	8006728 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006734:	4b05      	ldr	r3, [pc, #20]	; (800674c <prvIdleTask+0x2c>)
 8006736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800673a:	601a      	str	r2, [r3, #0]
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006744:	e7f0      	b.n	8006728 <prvIdleTask+0x8>
 8006746:	bf00      	nop
 8006748:	20000450 	.word	0x20000450
 800674c:	e000ed04 	.word	0xe000ed04

08006750 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006756:	2300      	movs	r3, #0
 8006758:	607b      	str	r3, [r7, #4]
 800675a:	e00c      	b.n	8006776 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	4613      	mov	r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4413      	add	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4a12      	ldr	r2, [pc, #72]	; (80067b0 <prvInitialiseTaskLists+0x60>)
 8006768:	4413      	add	r3, r2
 800676a:	4618      	mov	r0, r3
 800676c:	f7fe fa40 	bl	8004bf0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	3301      	adds	r3, #1
 8006774:	607b      	str	r3, [r7, #4]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2b06      	cmp	r3, #6
 800677a:	d9ef      	bls.n	800675c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800677c:	480d      	ldr	r0, [pc, #52]	; (80067b4 <prvInitialiseTaskLists+0x64>)
 800677e:	f7fe fa37 	bl	8004bf0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006782:	480d      	ldr	r0, [pc, #52]	; (80067b8 <prvInitialiseTaskLists+0x68>)
 8006784:	f7fe fa34 	bl	8004bf0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006788:	480c      	ldr	r0, [pc, #48]	; (80067bc <prvInitialiseTaskLists+0x6c>)
 800678a:	f7fe fa31 	bl	8004bf0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800678e:	480c      	ldr	r0, [pc, #48]	; (80067c0 <prvInitialiseTaskLists+0x70>)
 8006790:	f7fe fa2e 	bl	8004bf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006794:	480b      	ldr	r0, [pc, #44]	; (80067c4 <prvInitialiseTaskLists+0x74>)
 8006796:	f7fe fa2b 	bl	8004bf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800679a:	4b0b      	ldr	r3, [pc, #44]	; (80067c8 <prvInitialiseTaskLists+0x78>)
 800679c:	4a05      	ldr	r2, [pc, #20]	; (80067b4 <prvInitialiseTaskLists+0x64>)
 800679e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80067a0:	4b0a      	ldr	r3, [pc, #40]	; (80067cc <prvInitialiseTaskLists+0x7c>)
 80067a2:	4a05      	ldr	r2, [pc, #20]	; (80067b8 <prvInitialiseTaskLists+0x68>)
 80067a4:	601a      	str	r2, [r3, #0]
}
 80067a6:	bf00      	nop
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	20000450 	.word	0x20000450
 80067b4:	200004dc 	.word	0x200004dc
 80067b8:	200004f0 	.word	0x200004f0
 80067bc:	2000050c 	.word	0x2000050c
 80067c0:	20000520 	.word	0x20000520
 80067c4:	20000538 	.word	0x20000538
 80067c8:	20000504 	.word	0x20000504
 80067cc:	20000508 	.word	0x20000508

080067d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067d6:	e019      	b.n	800680c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80067d8:	f000 fdb4 	bl	8007344 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067dc:	4b10      	ldr	r3, [pc, #64]	; (8006820 <prvCheckTasksWaitingTermination+0x50>)
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	3304      	adds	r3, #4
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7fe fa8b 	bl	8004d04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80067ee:	4b0d      	ldr	r3, [pc, #52]	; (8006824 <prvCheckTasksWaitingTermination+0x54>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	3b01      	subs	r3, #1
 80067f4:	4a0b      	ldr	r2, [pc, #44]	; (8006824 <prvCheckTasksWaitingTermination+0x54>)
 80067f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80067f8:	4b0b      	ldr	r3, [pc, #44]	; (8006828 <prvCheckTasksWaitingTermination+0x58>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	3b01      	subs	r3, #1
 80067fe:	4a0a      	ldr	r2, [pc, #40]	; (8006828 <prvCheckTasksWaitingTermination+0x58>)
 8006800:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006802:	f000 fdcf 	bl	80073a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f810 	bl	800682c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800680c:	4b06      	ldr	r3, [pc, #24]	; (8006828 <prvCheckTasksWaitingTermination+0x58>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1e1      	bne.n	80067d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006814:	bf00      	nop
 8006816:	bf00      	nop
 8006818:	3708      	adds	r7, #8
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	20000520 	.word	0x20000520
 8006824:	2000054c 	.word	0x2000054c
 8006828:	20000534 	.word	0x20000534

0800682c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800683a:	2b00      	cmp	r3, #0
 800683c:	d108      	bne.n	8006850 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006842:	4618      	mov	r0, r3
 8006844:	f000 ff6c 	bl	8007720 <vPortFree>
				vPortFree( pxTCB );
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 ff69 	bl	8007720 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800684e:	e018      	b.n	8006882 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006856:	2b01      	cmp	r3, #1
 8006858:	d103      	bne.n	8006862 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 ff60 	bl	8007720 <vPortFree>
	}
 8006860:	e00f      	b.n	8006882 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006868:	2b02      	cmp	r3, #2
 800686a:	d00a      	beq.n	8006882 <prvDeleteTCB+0x56>
	__asm volatile
 800686c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006870:	f383 8811 	msr	BASEPRI, r3
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	60fb      	str	r3, [r7, #12]
}
 800687e:	bf00      	nop
 8006880:	e7fe      	b.n	8006880 <prvDeleteTCB+0x54>
	}
 8006882:	bf00      	nop
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
	...

0800688c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006892:	4b0c      	ldr	r3, [pc, #48]	; (80068c4 <prvResetNextTaskUnblockTime+0x38>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d104      	bne.n	80068a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800689c:	4b0a      	ldr	r3, [pc, #40]	; (80068c8 <prvResetNextTaskUnblockTime+0x3c>)
 800689e:	f04f 32ff 	mov.w	r2, #4294967295
 80068a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80068a4:	e008      	b.n	80068b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068a6:	4b07      	ldr	r3, [pc, #28]	; (80068c4 <prvResetNextTaskUnblockTime+0x38>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	4a04      	ldr	r2, [pc, #16]	; (80068c8 <prvResetNextTaskUnblockTime+0x3c>)
 80068b6:	6013      	str	r3, [r2, #0]
}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr
 80068c4:	20000504 	.word	0x20000504
 80068c8:	2000056c 	.word	0x2000056c

080068cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80068d2:	4b0b      	ldr	r3, [pc, #44]	; (8006900 <xTaskGetSchedulerState+0x34>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d102      	bne.n	80068e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80068da:	2301      	movs	r3, #1
 80068dc:	607b      	str	r3, [r7, #4]
 80068de:	e008      	b.n	80068f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068e0:	4b08      	ldr	r3, [pc, #32]	; (8006904 <xTaskGetSchedulerState+0x38>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d102      	bne.n	80068ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80068e8:	2302      	movs	r3, #2
 80068ea:	607b      	str	r3, [r7, #4]
 80068ec:	e001      	b.n	80068f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80068ee:	2300      	movs	r3, #0
 80068f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80068f2:	687b      	ldr	r3, [r7, #4]
	}
 80068f4:	4618      	mov	r0, r3
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	20000558 	.word	0x20000558
 8006904:	20000574 	.word	0x20000574

08006908 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006914:	2300      	movs	r3, #0
 8006916:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d05e      	beq.n	80069dc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006922:	4b31      	ldr	r3, [pc, #196]	; (80069e8 <xTaskPriorityInherit+0xe0>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006928:	429a      	cmp	r2, r3
 800692a:	d24e      	bcs.n	80069ca <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	2b00      	cmp	r3, #0
 8006932:	db06      	blt.n	8006942 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006934:	4b2c      	ldr	r3, [pc, #176]	; (80069e8 <xTaskPriorityInherit+0xe0>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693a:	f1c3 0207 	rsb	r2, r3, #7
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	6959      	ldr	r1, [r3, #20]
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800694a:	4613      	mov	r3, r2
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	4413      	add	r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4a26      	ldr	r2, [pc, #152]	; (80069ec <xTaskPriorityInherit+0xe4>)
 8006954:	4413      	add	r3, r2
 8006956:	4299      	cmp	r1, r3
 8006958:	d12f      	bne.n	80069ba <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	3304      	adds	r3, #4
 800695e:	4618      	mov	r0, r3
 8006960:	f7fe f9d0 	bl	8004d04 <uxListRemove>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10a      	bne.n	8006980 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696e:	2201      	movs	r2, #1
 8006970:	fa02 f303 	lsl.w	r3, r2, r3
 8006974:	43da      	mvns	r2, r3
 8006976:	4b1e      	ldr	r3, [pc, #120]	; (80069f0 <xTaskPriorityInherit+0xe8>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4013      	ands	r3, r2
 800697c:	4a1c      	ldr	r2, [pc, #112]	; (80069f0 <xTaskPriorityInherit+0xe8>)
 800697e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006980:	4b19      	ldr	r3, [pc, #100]	; (80069e8 <xTaskPriorityInherit+0xe0>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698e:	2201      	movs	r2, #1
 8006990:	409a      	lsls	r2, r3
 8006992:	4b17      	ldr	r3, [pc, #92]	; (80069f0 <xTaskPriorityInherit+0xe8>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4313      	orrs	r3, r2
 8006998:	4a15      	ldr	r2, [pc, #84]	; (80069f0 <xTaskPriorityInherit+0xe8>)
 800699a:	6013      	str	r3, [r2, #0]
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a0:	4613      	mov	r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4413      	add	r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	4a10      	ldr	r2, [pc, #64]	; (80069ec <xTaskPriorityInherit+0xe4>)
 80069aa:	441a      	add	r2, r3
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	3304      	adds	r3, #4
 80069b0:	4619      	mov	r1, r3
 80069b2:	4610      	mov	r0, r2
 80069b4:	f7fe f949 	bl	8004c4a <vListInsertEnd>
 80069b8:	e004      	b.n	80069c4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80069ba:	4b0b      	ldr	r3, [pc, #44]	; (80069e8 <xTaskPriorityInherit+0xe0>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80069c4:	2301      	movs	r3, #1
 80069c6:	60fb      	str	r3, [r7, #12]
 80069c8:	e008      	b.n	80069dc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069ce:	4b06      	ldr	r3, [pc, #24]	; (80069e8 <xTaskPriorityInherit+0xe0>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d201      	bcs.n	80069dc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80069d8:	2301      	movs	r3, #1
 80069da:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80069dc:	68fb      	ldr	r3, [r7, #12]
	}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	2000044c 	.word	0x2000044c
 80069ec:	20000450 	.word	0x20000450
 80069f0:	20000554 	.word	0x20000554

080069f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a00:	2300      	movs	r3, #0
 8006a02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d06e      	beq.n	8006ae8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a0a:	4b3a      	ldr	r3, [pc, #232]	; (8006af4 <xTaskPriorityDisinherit+0x100>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d00a      	beq.n	8006a2a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	60fb      	str	r3, [r7, #12]
}
 8006a26:	bf00      	nop
 8006a28:	e7fe      	b.n	8006a28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10a      	bne.n	8006a48 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a36:	f383 8811 	msr	BASEPRI, r3
 8006a3a:	f3bf 8f6f 	isb	sy
 8006a3e:	f3bf 8f4f 	dsb	sy
 8006a42:	60bb      	str	r3, [r7, #8]
}
 8006a44:	bf00      	nop
 8006a46:	e7fe      	b.n	8006a46 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a4c:	1e5a      	subs	r2, r3, #1
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d044      	beq.n	8006ae8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d140      	bne.n	8006ae8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	3304      	adds	r3, #4
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7fe f94a 	bl	8004d04 <uxListRemove>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d115      	bne.n	8006aa2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a7a:	491f      	ldr	r1, [pc, #124]	; (8006af8 <xTaskPriorityDisinherit+0x104>)
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4413      	add	r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	440b      	add	r3, r1
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10a      	bne.n	8006aa2 <xTaskPriorityDisinherit+0xae>
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a90:	2201      	movs	r2, #1
 8006a92:	fa02 f303 	lsl.w	r3, r2, r3
 8006a96:	43da      	mvns	r2, r3
 8006a98:	4b18      	ldr	r3, [pc, #96]	; (8006afc <xTaskPriorityDisinherit+0x108>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	4a17      	ldr	r2, [pc, #92]	; (8006afc <xTaskPriorityDisinherit+0x108>)
 8006aa0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aae:	f1c3 0207 	rsb	r2, r3, #7
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aba:	2201      	movs	r2, #1
 8006abc:	409a      	lsls	r2, r3
 8006abe:	4b0f      	ldr	r3, [pc, #60]	; (8006afc <xTaskPriorityDisinherit+0x108>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	4a0d      	ldr	r2, [pc, #52]	; (8006afc <xTaskPriorityDisinherit+0x108>)
 8006ac6:	6013      	str	r3, [r2, #0]
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006acc:	4613      	mov	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4413      	add	r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4a08      	ldr	r2, [pc, #32]	; (8006af8 <xTaskPriorityDisinherit+0x104>)
 8006ad6:	441a      	add	r2, r3
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	3304      	adds	r3, #4
 8006adc:	4619      	mov	r1, r3
 8006ade:	4610      	mov	r0, r2
 8006ae0:	f7fe f8b3 	bl	8004c4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ae8:	697b      	ldr	r3, [r7, #20]
	}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3718      	adds	r7, #24
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	2000044c 	.word	0x2000044c
 8006af8:	20000450 	.word	0x20000450
 8006afc:	20000554 	.word	0x20000554

08006b00 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b088      	sub	sp, #32
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d077      	beq.n	8006c08 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10a      	bne.n	8006b36 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	60fb      	str	r3, [r7, #12]
}
 8006b32:	bf00      	nop
 8006b34:	e7fe      	b.n	8006b34 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b3a:	683a      	ldr	r2, [r7, #0]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d902      	bls.n	8006b46 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	61fb      	str	r3, [r7, #28]
 8006b44:	e002      	b.n	8006b4c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b4a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b50:	69fa      	ldr	r2, [r7, #28]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d058      	beq.n	8006c08 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d153      	bne.n	8006c08 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006b60:	4b2b      	ldr	r3, [pc, #172]	; (8006c10 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	69ba      	ldr	r2, [r7, #24]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d10a      	bne.n	8006b80 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	60bb      	str	r3, [r7, #8]
}
 8006b7c:	bf00      	nop
 8006b7e:	e7fe      	b.n	8006b7e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b84:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	69fa      	ldr	r2, [r7, #28]
 8006b8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	db04      	blt.n	8006b9e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	f1c3 0207 	rsb	r2, r3, #7
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	6959      	ldr	r1, [r3, #20]
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	4a19      	ldr	r2, [pc, #100]	; (8006c14 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006bae:	4413      	add	r3, r2
 8006bb0:	4299      	cmp	r1, r3
 8006bb2:	d129      	bne.n	8006c08 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	3304      	adds	r3, #4
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7fe f8a3 	bl	8004d04 <uxListRemove>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d10a      	bne.n	8006bda <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc8:	2201      	movs	r2, #1
 8006bca:	fa02 f303 	lsl.w	r3, r2, r3
 8006bce:	43da      	mvns	r2, r3
 8006bd0:	4b11      	ldr	r3, [pc, #68]	; (8006c18 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	4a10      	ldr	r2, [pc, #64]	; (8006c18 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006bd8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bde:	2201      	movs	r2, #1
 8006be0:	409a      	lsls	r2, r3
 8006be2:	4b0d      	ldr	r3, [pc, #52]	; (8006c18 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	4a0b      	ldr	r2, [pc, #44]	; (8006c18 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006bea:	6013      	str	r3, [r2, #0]
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4a06      	ldr	r2, [pc, #24]	; (8006c14 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006bfa:	441a      	add	r2, r3
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	3304      	adds	r3, #4
 8006c00:	4619      	mov	r1, r3
 8006c02:	4610      	mov	r0, r2
 8006c04:	f7fe f821 	bl	8004c4a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c08:	bf00      	nop
 8006c0a:	3720      	adds	r7, #32
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	2000044c 	.word	0x2000044c
 8006c14:	20000450 	.word	0x20000450
 8006c18:	20000554 	.word	0x20000554

08006c1c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006c1c:	b480      	push	{r7}
 8006c1e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006c20:	4b07      	ldr	r3, [pc, #28]	; (8006c40 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d004      	beq.n	8006c32 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006c28:	4b05      	ldr	r3, [pc, #20]	; (8006c40 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c2e:	3201      	adds	r2, #1
 8006c30:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006c32:	4b03      	ldr	r3, [pc, #12]	; (8006c40 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c34:	681b      	ldr	r3, [r3, #0]
	}
 8006c36:	4618      	mov	r0, r3
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	2000044c 	.word	0x2000044c

08006c44 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
 8006c50:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8006c52:	f000 fb77 	bl	8007344 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006c56:	4b26      	ldr	r3, [pc, #152]	; (8006cf0 <xTaskNotifyWait+0xac>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d01a      	beq.n	8006c9a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006c64:	4b22      	ldr	r3, [pc, #136]	; (8006cf0 <xTaskNotifyWait+0xac>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	43d2      	mvns	r2, r2
 8006c6e:	400a      	ands	r2, r1
 8006c70:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006c72:	4b1f      	ldr	r3, [pc, #124]	; (8006cf0 <xTaskNotifyWait+0xac>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00b      	beq.n	8006c9a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006c82:	2101      	movs	r1, #1
 8006c84:	6838      	ldr	r0, [r7, #0]
 8006c86:	f000 f9c7 	bl	8007018 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006c8a:	4b1a      	ldr	r3, [pc, #104]	; (8006cf4 <xTaskNotifyWait+0xb0>)
 8006c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	f3bf 8f4f 	dsb	sy
 8006c96:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006c9a:	f000 fb83 	bl	80073a4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8006c9e:	f000 fb51 	bl	8007344 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d004      	beq.n	8006cb2 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8006ca8:	4b11      	ldr	r3, [pc, #68]	; (8006cf0 <xTaskNotifyWait+0xac>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006cb2:	4b0f      	ldr	r3, [pc, #60]	; (8006cf0 <xTaskNotifyWait+0xac>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d002      	beq.n	8006cc6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	617b      	str	r3, [r7, #20]
 8006cc4:	e008      	b.n	8006cd8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8006cc6:	4b0a      	ldr	r3, [pc, #40]	; (8006cf0 <xTaskNotifyWait+0xac>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	43d2      	mvns	r2, r2
 8006cd0:	400a      	ands	r2, r1
 8006cd2:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006cd8:	4b05      	ldr	r3, [pc, #20]	; (8006cf0 <xTaskNotifyWait+0xac>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8006ce2:	f000 fb5f 	bl	80073a4 <vPortExitCritical>

		return xReturn;
 8006ce6:	697b      	ldr	r3, [r7, #20]
	}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3718      	adds	r7, #24
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	2000044c 	.word	0x2000044c
 8006cf4:	e000ed04 	.word	0xe000ed04

08006cf8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b08a      	sub	sp, #40	; 0x28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	603b      	str	r3, [r7, #0]
 8006d04:	4613      	mov	r3, r2
 8006d06:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10a      	bne.n	8006d28 <xTaskGenericNotify+0x30>
	__asm volatile
 8006d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d16:	f383 8811 	msr	BASEPRI, r3
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	61bb      	str	r3, [r7, #24]
}
 8006d24:	bf00      	nop
 8006d26:	e7fe      	b.n	8006d26 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8006d2c:	f000 fb0a 	bl	8007344 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d003      	beq.n	8006d3e <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d44:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	2202      	movs	r2, #2
 8006d4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8006d4e:	79fb      	ldrb	r3, [r7, #7]
 8006d50:	2b04      	cmp	r3, #4
 8006d52:	d828      	bhi.n	8006da6 <xTaskGenericNotify+0xae>
 8006d54:	a201      	add	r2, pc, #4	; (adr r2, 8006d5c <xTaskGenericNotify+0x64>)
 8006d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d5a:	bf00      	nop
 8006d5c:	08006dc7 	.word	0x08006dc7
 8006d60:	08006d71 	.word	0x08006d71
 8006d64:	08006d7f 	.word	0x08006d7f
 8006d68:	08006d8b 	.word	0x08006d8b
 8006d6c:	08006d93 	.word	0x08006d93
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006d70:	6a3b      	ldr	r3, [r7, #32]
 8006d72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	431a      	orrs	r2, r3
 8006d78:	6a3b      	ldr	r3, [r7, #32]
 8006d7a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8006d7c:	e026      	b.n	8006dcc <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d82:	1c5a      	adds	r2, r3, #1
 8006d84:	6a3b      	ldr	r3, [r7, #32]
 8006d86:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8006d88:	e020      	b.n	8006dcc <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8006d90:	e01c      	b.n	8006dcc <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006d92:	7ffb      	ldrb	r3, [r7, #31]
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d003      	beq.n	8006da0 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006d98:	6a3b      	ldr	r3, [r7, #32]
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006d9e:	e015      	b.n	8006dcc <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 8006da0:	2300      	movs	r3, #0
 8006da2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8006da4:	e012      	b.n	8006dcc <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006da6:	6a3b      	ldr	r3, [r7, #32]
 8006da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dae:	d00c      	beq.n	8006dca <xTaskGenericNotify+0xd2>
	__asm volatile
 8006db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db4:	f383 8811 	msr	BASEPRI, r3
 8006db8:	f3bf 8f6f 	isb	sy
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	617b      	str	r3, [r7, #20]
}
 8006dc2:	bf00      	nop
 8006dc4:	e7fe      	b.n	8006dc4 <xTaskGenericNotify+0xcc>
					break;
 8006dc6:	bf00      	nop
 8006dc8:	e000      	b.n	8006dcc <xTaskGenericNotify+0xd4>

					break;
 8006dca:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006dcc:	7ffb      	ldrb	r3, [r7, #31]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d139      	bne.n	8006e46 <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dd2:	6a3b      	ldr	r3, [r7, #32]
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7fd ff94 	bl	8004d04 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8006ddc:	6a3b      	ldr	r3, [r7, #32]
 8006dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de0:	2201      	movs	r2, #1
 8006de2:	409a      	lsls	r2, r3
 8006de4:	4b1b      	ldr	r3, [pc, #108]	; (8006e54 <xTaskGenericNotify+0x15c>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	4a1a      	ldr	r2, [pc, #104]	; (8006e54 <xTaskGenericNotify+0x15c>)
 8006dec:	6013      	str	r3, [r2, #0]
 8006dee:	6a3b      	ldr	r3, [r7, #32]
 8006df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df2:	4613      	mov	r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4413      	add	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4a17      	ldr	r2, [pc, #92]	; (8006e58 <xTaskGenericNotify+0x160>)
 8006dfc:	441a      	add	r2, r3
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	3304      	adds	r3, #4
 8006e02:	4619      	mov	r1, r3
 8006e04:	4610      	mov	r0, r2
 8006e06:	f7fd ff20 	bl	8004c4a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006e0a:	6a3b      	ldr	r3, [r7, #32]
 8006e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00a      	beq.n	8006e28 <xTaskGenericNotify+0x130>
	__asm volatile
 8006e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e16:	f383 8811 	msr	BASEPRI, r3
 8006e1a:	f3bf 8f6f 	isb	sy
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	613b      	str	r3, [r7, #16]
}
 8006e24:	bf00      	nop
 8006e26:	e7fe      	b.n	8006e26 <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e28:	6a3b      	ldr	r3, [r7, #32]
 8006e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2c:	4b0b      	ldr	r3, [pc, #44]	; (8006e5c <xTaskGenericNotify+0x164>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d907      	bls.n	8006e46 <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8006e36:	4b0a      	ldr	r3, [pc, #40]	; (8006e60 <xTaskGenericNotify+0x168>)
 8006e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e3c:	601a      	str	r2, [r3, #0]
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006e46:	f000 faad 	bl	80073a4 <vPortExitCritical>

		return xReturn;
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3728      	adds	r7, #40	; 0x28
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	20000554 	.word	0x20000554
 8006e58:	20000450 	.word	0x20000450
 8006e5c:	2000044c 	.word	0x2000044c
 8006e60:	e000ed04 	.word	0xe000ed04

08006e64 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b08e      	sub	sp, #56	; 0x38
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	603b      	str	r3, [r7, #0]
 8006e70:	4613      	mov	r3, r2
 8006e72:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8006e74:	2301      	movs	r3, #1
 8006e76:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10a      	bne.n	8006e94 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8006e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e90:	bf00      	nop
 8006e92:	e7fe      	b.n	8006e92 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e94:	f000 fb38 	bl	8007508 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8006e9c:	f3ef 8211 	mrs	r2, BASEPRI
 8006ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	623a      	str	r2, [r7, #32]
 8006eb2:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8006eb4:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d003      	beq.n	8006ec6 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ecc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8006ed8:	79fb      	ldrb	r3, [r7, #7]
 8006eda:	2b04      	cmp	r3, #4
 8006edc:	d828      	bhi.n	8006f30 <xTaskGenericNotifyFromISR+0xcc>
 8006ede:	a201      	add	r2, pc, #4	; (adr r2, 8006ee4 <xTaskGenericNotifyFromISR+0x80>)
 8006ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee4:	08006f51 	.word	0x08006f51
 8006ee8:	08006ef9 	.word	0x08006ef9
 8006eec:	08006f07 	.word	0x08006f07
 8006ef0:	08006f13 	.word	0x08006f13
 8006ef4:	08006f1b 	.word	0x08006f1b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	431a      	orrs	r2, r3
 8006f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f02:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8006f04:	e027      	b.n	8006f56 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f0a:	1c5a      	adds	r2, r3, #1
 8006f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8006f10:	e021      	b.n	8006f56 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8006f18:	e01d      	b.n	8006f56 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006f1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d003      	beq.n	8006f2a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006f28:	e015      	b.n	8006f56 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8006f2e:	e012      	b.n	8006f56 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f38:	d00c      	beq.n	8006f54 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8006f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3e:	f383 8811 	msr	BASEPRI, r3
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	61bb      	str	r3, [r7, #24]
}
 8006f4c:	bf00      	nop
 8006f4e:	e7fe      	b.n	8006f4e <xTaskGenericNotifyFromISR+0xea>
					break;
 8006f50:	bf00      	nop
 8006f52:	e000      	b.n	8006f56 <xTaskGenericNotifyFromISR+0xf2>
					break;
 8006f54:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006f56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d145      	bne.n	8006fea <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00a      	beq.n	8006f7c <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8006f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6a:	f383 8811 	msr	BASEPRI, r3
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	617b      	str	r3, [r7, #20]
}
 8006f78:	bf00      	nop
 8006f7a:	e7fe      	b.n	8006f7a <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f7c:	4b20      	ldr	r3, [pc, #128]	; (8007000 <xTaskGenericNotifyFromISR+0x19c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d11c      	bne.n	8006fbe <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f86:	3304      	adds	r3, #4
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7fd febb 	bl	8004d04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f92:	2201      	movs	r2, #1
 8006f94:	409a      	lsls	r2, r3
 8006f96:	4b1b      	ldr	r3, [pc, #108]	; (8007004 <xTaskGenericNotifyFromISR+0x1a0>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	4a19      	ldr	r2, [pc, #100]	; (8007004 <xTaskGenericNotifyFromISR+0x1a0>)
 8006f9e:	6013      	str	r3, [r2, #0]
 8006fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	4413      	add	r3, r2
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	4a16      	ldr	r2, [pc, #88]	; (8007008 <xTaskGenericNotifyFromISR+0x1a4>)
 8006fae:	441a      	add	r2, r3
 8006fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb2:	3304      	adds	r3, #4
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	4610      	mov	r0, r2
 8006fb8:	f7fd fe47 	bl	8004c4a <vListInsertEnd>
 8006fbc:	e005      	b.n	8006fca <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc0:	3318      	adds	r3, #24
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	4811      	ldr	r0, [pc, #68]	; (800700c <xTaskGenericNotifyFromISR+0x1a8>)
 8006fc6:	f7fd fe40 	bl	8004c4a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fce:	4b10      	ldr	r3, [pc, #64]	; (8007010 <xTaskGenericNotifyFromISR+0x1ac>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d908      	bls.n	8006fea <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d002      	beq.n	8006fe4 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006fde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8006fe4:	4b0b      	ldr	r3, [pc, #44]	; (8007014 <xTaskGenericNotifyFromISR+0x1b0>)
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	601a      	str	r2, [r3, #0]
 8006fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fec:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	f383 8811 	msr	BASEPRI, r3
}
 8006ff4:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8006ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3738      	adds	r7, #56	; 0x38
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	20000574 	.word	0x20000574
 8007004:	20000554 	.word	0x20000554
 8007008:	20000450 	.word	0x20000450
 800700c:	2000050c 	.word	0x2000050c
 8007010:	2000044c 	.word	0x2000044c
 8007014:	20000560 	.word	0x20000560

08007018 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007022:	4b29      	ldr	r3, [pc, #164]	; (80070c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007028:	4b28      	ldr	r3, [pc, #160]	; (80070cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	3304      	adds	r3, #4
 800702e:	4618      	mov	r0, r3
 8007030:	f7fd fe68 	bl	8004d04 <uxListRemove>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10b      	bne.n	8007052 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800703a:	4b24      	ldr	r3, [pc, #144]	; (80070cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007040:	2201      	movs	r2, #1
 8007042:	fa02 f303 	lsl.w	r3, r2, r3
 8007046:	43da      	mvns	r2, r3
 8007048:	4b21      	ldr	r3, [pc, #132]	; (80070d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4013      	ands	r3, r2
 800704e:	4a20      	ldr	r2, [pc, #128]	; (80070d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007050:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007058:	d10a      	bne.n	8007070 <prvAddCurrentTaskToDelayedList+0x58>
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d007      	beq.n	8007070 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007060:	4b1a      	ldr	r3, [pc, #104]	; (80070cc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	3304      	adds	r3, #4
 8007066:	4619      	mov	r1, r3
 8007068:	481a      	ldr	r0, [pc, #104]	; (80070d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800706a:	f7fd fdee 	bl	8004c4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800706e:	e026      	b.n	80070be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4413      	add	r3, r2
 8007076:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007078:	4b14      	ldr	r3, [pc, #80]	; (80070cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68ba      	ldr	r2, [r7, #8]
 800707e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	429a      	cmp	r2, r3
 8007086:	d209      	bcs.n	800709c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007088:	4b13      	ldr	r3, [pc, #76]	; (80070d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	4b0f      	ldr	r3, [pc, #60]	; (80070cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3304      	adds	r3, #4
 8007092:	4619      	mov	r1, r3
 8007094:	4610      	mov	r0, r2
 8007096:	f7fd fdfc 	bl	8004c92 <vListInsert>
}
 800709a:	e010      	b.n	80070be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800709c:	4b0f      	ldr	r3, [pc, #60]	; (80070dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	4b0a      	ldr	r3, [pc, #40]	; (80070cc <prvAddCurrentTaskToDelayedList+0xb4>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	3304      	adds	r3, #4
 80070a6:	4619      	mov	r1, r3
 80070a8:	4610      	mov	r0, r2
 80070aa:	f7fd fdf2 	bl	8004c92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80070ae:	4b0c      	ldr	r3, [pc, #48]	; (80070e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d202      	bcs.n	80070be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80070b8:	4a09      	ldr	r2, [pc, #36]	; (80070e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	6013      	str	r3, [r2, #0]
}
 80070be:	bf00      	nop
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	20000550 	.word	0x20000550
 80070cc:	2000044c 	.word	0x2000044c
 80070d0:	20000554 	.word	0x20000554
 80070d4:	20000538 	.word	0x20000538
 80070d8:	20000508 	.word	0x20000508
 80070dc:	20000504 	.word	0x20000504
 80070e0:	2000056c 	.word	0x2000056c

080070e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	3b04      	subs	r3, #4
 80070f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80070fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	3b04      	subs	r3, #4
 8007102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	f023 0201 	bic.w	r2, r3, #1
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	3b04      	subs	r3, #4
 8007112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007114:	4a0c      	ldr	r2, [pc, #48]	; (8007148 <pxPortInitialiseStack+0x64>)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	3b14      	subs	r3, #20
 800711e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	3b04      	subs	r3, #4
 800712a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f06f 0202 	mvn.w	r2, #2
 8007132:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	3b20      	subs	r3, #32
 8007138:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800713a:	68fb      	ldr	r3, [r7, #12]
}
 800713c:	4618      	mov	r0, r3
 800713e:	3714      	adds	r7, #20
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	0800714d 	.word	0x0800714d

0800714c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007152:	2300      	movs	r3, #0
 8007154:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007156:	4b12      	ldr	r3, [pc, #72]	; (80071a0 <prvTaskExitError+0x54>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800715e:	d00a      	beq.n	8007176 <prvTaskExitError+0x2a>
	__asm volatile
 8007160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007164:	f383 8811 	msr	BASEPRI, r3
 8007168:	f3bf 8f6f 	isb	sy
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	60fb      	str	r3, [r7, #12]
}
 8007172:	bf00      	nop
 8007174:	e7fe      	b.n	8007174 <prvTaskExitError+0x28>
	__asm volatile
 8007176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717a:	f383 8811 	msr	BASEPRI, r3
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f3bf 8f4f 	dsb	sy
 8007186:	60bb      	str	r3, [r7, #8]
}
 8007188:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800718a:	bf00      	nop
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d0fc      	beq.n	800718c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007192:	bf00      	nop
 8007194:	bf00      	nop
 8007196:	3714      	adds	r7, #20
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	2000000c 	.word	0x2000000c
	...

080071b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80071b0:	4b07      	ldr	r3, [pc, #28]	; (80071d0 <pxCurrentTCBConst2>)
 80071b2:	6819      	ldr	r1, [r3, #0]
 80071b4:	6808      	ldr	r0, [r1, #0]
 80071b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ba:	f380 8809 	msr	PSP, r0
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f04f 0000 	mov.w	r0, #0
 80071c6:	f380 8811 	msr	BASEPRI, r0
 80071ca:	4770      	bx	lr
 80071cc:	f3af 8000 	nop.w

080071d0 <pxCurrentTCBConst2>:
 80071d0:	2000044c 	.word	0x2000044c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80071d4:	bf00      	nop
 80071d6:	bf00      	nop

080071d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80071d8:	4808      	ldr	r0, [pc, #32]	; (80071fc <prvPortStartFirstTask+0x24>)
 80071da:	6800      	ldr	r0, [r0, #0]
 80071dc:	6800      	ldr	r0, [r0, #0]
 80071de:	f380 8808 	msr	MSP, r0
 80071e2:	f04f 0000 	mov.w	r0, #0
 80071e6:	f380 8814 	msr	CONTROL, r0
 80071ea:	b662      	cpsie	i
 80071ec:	b661      	cpsie	f
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	df00      	svc	0
 80071f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80071fa:	bf00      	nop
 80071fc:	e000ed08 	.word	0xe000ed08

08007200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007206:	4b46      	ldr	r3, [pc, #280]	; (8007320 <xPortStartScheduler+0x120>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a46      	ldr	r2, [pc, #280]	; (8007324 <xPortStartScheduler+0x124>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d10a      	bne.n	8007226 <xPortStartScheduler+0x26>
	__asm volatile
 8007210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007214:	f383 8811 	msr	BASEPRI, r3
 8007218:	f3bf 8f6f 	isb	sy
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	613b      	str	r3, [r7, #16]
}
 8007222:	bf00      	nop
 8007224:	e7fe      	b.n	8007224 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007226:	4b3e      	ldr	r3, [pc, #248]	; (8007320 <xPortStartScheduler+0x120>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a3f      	ldr	r2, [pc, #252]	; (8007328 <xPortStartScheduler+0x128>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d10a      	bne.n	8007246 <xPortStartScheduler+0x46>
	__asm volatile
 8007230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007234:	f383 8811 	msr	BASEPRI, r3
 8007238:	f3bf 8f6f 	isb	sy
 800723c:	f3bf 8f4f 	dsb	sy
 8007240:	60fb      	str	r3, [r7, #12]
}
 8007242:	bf00      	nop
 8007244:	e7fe      	b.n	8007244 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007246:	4b39      	ldr	r3, [pc, #228]	; (800732c <xPortStartScheduler+0x12c>)
 8007248:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	b2db      	uxtb	r3, r3
 8007250:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	22ff      	movs	r2, #255	; 0xff
 8007256:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	b2db      	uxtb	r3, r3
 800725e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007260:	78fb      	ldrb	r3, [r7, #3]
 8007262:	b2db      	uxtb	r3, r3
 8007264:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007268:	b2da      	uxtb	r2, r3
 800726a:	4b31      	ldr	r3, [pc, #196]	; (8007330 <xPortStartScheduler+0x130>)
 800726c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800726e:	4b31      	ldr	r3, [pc, #196]	; (8007334 <xPortStartScheduler+0x134>)
 8007270:	2207      	movs	r2, #7
 8007272:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007274:	e009      	b.n	800728a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007276:	4b2f      	ldr	r3, [pc, #188]	; (8007334 <xPortStartScheduler+0x134>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	3b01      	subs	r3, #1
 800727c:	4a2d      	ldr	r2, [pc, #180]	; (8007334 <xPortStartScheduler+0x134>)
 800727e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007280:	78fb      	ldrb	r3, [r7, #3]
 8007282:	b2db      	uxtb	r3, r3
 8007284:	005b      	lsls	r3, r3, #1
 8007286:	b2db      	uxtb	r3, r3
 8007288:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800728a:	78fb      	ldrb	r3, [r7, #3]
 800728c:	b2db      	uxtb	r3, r3
 800728e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007292:	2b80      	cmp	r3, #128	; 0x80
 8007294:	d0ef      	beq.n	8007276 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007296:	4b27      	ldr	r3, [pc, #156]	; (8007334 <xPortStartScheduler+0x134>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f1c3 0307 	rsb	r3, r3, #7
 800729e:	2b04      	cmp	r3, #4
 80072a0:	d00a      	beq.n	80072b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80072a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a6:	f383 8811 	msr	BASEPRI, r3
 80072aa:	f3bf 8f6f 	isb	sy
 80072ae:	f3bf 8f4f 	dsb	sy
 80072b2:	60bb      	str	r3, [r7, #8]
}
 80072b4:	bf00      	nop
 80072b6:	e7fe      	b.n	80072b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80072b8:	4b1e      	ldr	r3, [pc, #120]	; (8007334 <xPortStartScheduler+0x134>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	021b      	lsls	r3, r3, #8
 80072be:	4a1d      	ldr	r2, [pc, #116]	; (8007334 <xPortStartScheduler+0x134>)
 80072c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80072c2:	4b1c      	ldr	r3, [pc, #112]	; (8007334 <xPortStartScheduler+0x134>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072ca:	4a1a      	ldr	r2, [pc, #104]	; (8007334 <xPortStartScheduler+0x134>)
 80072cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	b2da      	uxtb	r2, r3
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80072d6:	4b18      	ldr	r3, [pc, #96]	; (8007338 <xPortStartScheduler+0x138>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a17      	ldr	r2, [pc, #92]	; (8007338 <xPortStartScheduler+0x138>)
 80072dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80072e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80072e2:	4b15      	ldr	r3, [pc, #84]	; (8007338 <xPortStartScheduler+0x138>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a14      	ldr	r2, [pc, #80]	; (8007338 <xPortStartScheduler+0x138>)
 80072e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80072ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80072ee:	f000 f8dd 	bl	80074ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80072f2:	4b12      	ldr	r3, [pc, #72]	; (800733c <xPortStartScheduler+0x13c>)
 80072f4:	2200      	movs	r2, #0
 80072f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80072f8:	f000 f8fc 	bl	80074f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80072fc:	4b10      	ldr	r3, [pc, #64]	; (8007340 <xPortStartScheduler+0x140>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a0f      	ldr	r2, [pc, #60]	; (8007340 <xPortStartScheduler+0x140>)
 8007302:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007306:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007308:	f7ff ff66 	bl	80071d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800730c:	f7ff f8a2 	bl	8006454 <vTaskSwitchContext>
	prvTaskExitError();
 8007310:	f7ff ff1c 	bl	800714c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3718      	adds	r7, #24
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	e000ed00 	.word	0xe000ed00
 8007324:	410fc271 	.word	0x410fc271
 8007328:	410fc270 	.word	0x410fc270
 800732c:	e000e400 	.word	0xe000e400
 8007330:	20000578 	.word	0x20000578
 8007334:	2000057c 	.word	0x2000057c
 8007338:	e000ed20 	.word	0xe000ed20
 800733c:	2000000c 	.word	0x2000000c
 8007340:	e000ef34 	.word	0xe000ef34

08007344 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
	__asm volatile
 800734a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734e:	f383 8811 	msr	BASEPRI, r3
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	f3bf 8f4f 	dsb	sy
 800735a:	607b      	str	r3, [r7, #4]
}
 800735c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800735e:	4b0f      	ldr	r3, [pc, #60]	; (800739c <vPortEnterCritical+0x58>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	3301      	adds	r3, #1
 8007364:	4a0d      	ldr	r2, [pc, #52]	; (800739c <vPortEnterCritical+0x58>)
 8007366:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007368:	4b0c      	ldr	r3, [pc, #48]	; (800739c <vPortEnterCritical+0x58>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d10f      	bne.n	8007390 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007370:	4b0b      	ldr	r3, [pc, #44]	; (80073a0 <vPortEnterCritical+0x5c>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00a      	beq.n	8007390 <vPortEnterCritical+0x4c>
	__asm volatile
 800737a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737e:	f383 8811 	msr	BASEPRI, r3
 8007382:	f3bf 8f6f 	isb	sy
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	603b      	str	r3, [r7, #0]
}
 800738c:	bf00      	nop
 800738e:	e7fe      	b.n	800738e <vPortEnterCritical+0x4a>
	}
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	2000000c 	.word	0x2000000c
 80073a0:	e000ed04 	.word	0xe000ed04

080073a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80073aa:	4b12      	ldr	r3, [pc, #72]	; (80073f4 <vPortExitCritical+0x50>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d10a      	bne.n	80073c8 <vPortExitCritical+0x24>
	__asm volatile
 80073b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	607b      	str	r3, [r7, #4]
}
 80073c4:	bf00      	nop
 80073c6:	e7fe      	b.n	80073c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80073c8:	4b0a      	ldr	r3, [pc, #40]	; (80073f4 <vPortExitCritical+0x50>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	3b01      	subs	r3, #1
 80073ce:	4a09      	ldr	r2, [pc, #36]	; (80073f4 <vPortExitCritical+0x50>)
 80073d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80073d2:	4b08      	ldr	r3, [pc, #32]	; (80073f4 <vPortExitCritical+0x50>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d105      	bne.n	80073e6 <vPortExitCritical+0x42>
 80073da:	2300      	movs	r3, #0
 80073dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	f383 8811 	msr	BASEPRI, r3
}
 80073e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80073e6:	bf00      	nop
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	2000000c 	.word	0x2000000c
	...

08007400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007400:	f3ef 8009 	mrs	r0, PSP
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	4b15      	ldr	r3, [pc, #84]	; (8007460 <pxCurrentTCBConst>)
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	f01e 0f10 	tst.w	lr, #16
 8007410:	bf08      	it	eq
 8007412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800741a:	6010      	str	r0, [r2, #0]
 800741c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007420:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007424:	f380 8811 	msr	BASEPRI, r0
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	f3bf 8f6f 	isb	sy
 8007430:	f7ff f810 	bl	8006454 <vTaskSwitchContext>
 8007434:	f04f 0000 	mov.w	r0, #0
 8007438:	f380 8811 	msr	BASEPRI, r0
 800743c:	bc09      	pop	{r0, r3}
 800743e:	6819      	ldr	r1, [r3, #0]
 8007440:	6808      	ldr	r0, [r1, #0]
 8007442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007446:	f01e 0f10 	tst.w	lr, #16
 800744a:	bf08      	it	eq
 800744c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007450:	f380 8809 	msr	PSP, r0
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	f3af 8000 	nop.w

08007460 <pxCurrentTCBConst>:
 8007460:	2000044c 	.word	0x2000044c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007464:	bf00      	nop
 8007466:	bf00      	nop

08007468 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
	__asm volatile
 800746e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	607b      	str	r3, [r7, #4]
}
 8007480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007482:	f7fe ff2f 	bl	80062e4 <xTaskIncrementTick>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d003      	beq.n	8007494 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800748c:	4b06      	ldr	r3, [pc, #24]	; (80074a8 <SysTick_Handler+0x40>)
 800748e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007492:	601a      	str	r2, [r3, #0]
 8007494:	2300      	movs	r3, #0
 8007496:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	f383 8811 	msr	BASEPRI, r3
}
 800749e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80074a0:	bf00      	nop
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	e000ed04 	.word	0xe000ed04

080074ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80074ac:	b480      	push	{r7}
 80074ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80074b0:	4b0b      	ldr	r3, [pc, #44]	; (80074e0 <vPortSetupTimerInterrupt+0x34>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80074b6:	4b0b      	ldr	r3, [pc, #44]	; (80074e4 <vPortSetupTimerInterrupt+0x38>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80074bc:	4b0a      	ldr	r3, [pc, #40]	; (80074e8 <vPortSetupTimerInterrupt+0x3c>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a0a      	ldr	r2, [pc, #40]	; (80074ec <vPortSetupTimerInterrupt+0x40>)
 80074c2:	fba2 2303 	umull	r2, r3, r2, r3
 80074c6:	099b      	lsrs	r3, r3, #6
 80074c8:	4a09      	ldr	r2, [pc, #36]	; (80074f0 <vPortSetupTimerInterrupt+0x44>)
 80074ca:	3b01      	subs	r3, #1
 80074cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80074ce:	4b04      	ldr	r3, [pc, #16]	; (80074e0 <vPortSetupTimerInterrupt+0x34>)
 80074d0:	2207      	movs	r2, #7
 80074d2:	601a      	str	r2, [r3, #0]
}
 80074d4:	bf00      	nop
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	e000e010 	.word	0xe000e010
 80074e4:	e000e018 	.word	0xe000e018
 80074e8:	20000000 	.word	0x20000000
 80074ec:	10624dd3 	.word	0x10624dd3
 80074f0:	e000e014 	.word	0xe000e014

080074f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80074f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007504 <vPortEnableVFP+0x10>
 80074f8:	6801      	ldr	r1, [r0, #0]
 80074fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80074fe:	6001      	str	r1, [r0, #0]
 8007500:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007502:	bf00      	nop
 8007504:	e000ed88 	.word	0xe000ed88

08007508 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800750e:	f3ef 8305 	mrs	r3, IPSR
 8007512:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2b0f      	cmp	r3, #15
 8007518:	d914      	bls.n	8007544 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800751a:	4a17      	ldr	r2, [pc, #92]	; (8007578 <vPortValidateInterruptPriority+0x70>)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	4413      	add	r3, r2
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007524:	4b15      	ldr	r3, [pc, #84]	; (800757c <vPortValidateInterruptPriority+0x74>)
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	7afa      	ldrb	r2, [r7, #11]
 800752a:	429a      	cmp	r2, r3
 800752c:	d20a      	bcs.n	8007544 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800752e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007532:	f383 8811 	msr	BASEPRI, r3
 8007536:	f3bf 8f6f 	isb	sy
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	607b      	str	r3, [r7, #4]
}
 8007540:	bf00      	nop
 8007542:	e7fe      	b.n	8007542 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007544:	4b0e      	ldr	r3, [pc, #56]	; (8007580 <vPortValidateInterruptPriority+0x78>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800754c:	4b0d      	ldr	r3, [pc, #52]	; (8007584 <vPortValidateInterruptPriority+0x7c>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	429a      	cmp	r2, r3
 8007552:	d90a      	bls.n	800756a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007558:	f383 8811 	msr	BASEPRI, r3
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	603b      	str	r3, [r7, #0]
}
 8007566:	bf00      	nop
 8007568:	e7fe      	b.n	8007568 <vPortValidateInterruptPriority+0x60>
	}
 800756a:	bf00      	nop
 800756c:	3714      	adds	r7, #20
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr
 8007576:	bf00      	nop
 8007578:	e000e3f0 	.word	0xe000e3f0
 800757c:	20000578 	.word	0x20000578
 8007580:	e000ed0c 	.word	0xe000ed0c
 8007584:	2000057c 	.word	0x2000057c

08007588 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b08a      	sub	sp, #40	; 0x28
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007590:	2300      	movs	r3, #0
 8007592:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007594:	f7fe fdda 	bl	800614c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007598:	4b5b      	ldr	r3, [pc, #364]	; (8007708 <pvPortMalloc+0x180>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d101      	bne.n	80075a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80075a0:	f000 f920 	bl	80077e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80075a4:	4b59      	ldr	r3, [pc, #356]	; (800770c <pvPortMalloc+0x184>)
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4013      	ands	r3, r2
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f040 8093 	bne.w	80076d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d01d      	beq.n	80075f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80075b8:	2208      	movs	r2, #8
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4413      	add	r3, r2
 80075be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f003 0307 	and.w	r3, r3, #7
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d014      	beq.n	80075f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f023 0307 	bic.w	r3, r3, #7
 80075d0:	3308      	adds	r3, #8
 80075d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f003 0307 	and.w	r3, r3, #7
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00a      	beq.n	80075f4 <pvPortMalloc+0x6c>
	__asm volatile
 80075de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e2:	f383 8811 	msr	BASEPRI, r3
 80075e6:	f3bf 8f6f 	isb	sy
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	617b      	str	r3, [r7, #20]
}
 80075f0:	bf00      	nop
 80075f2:	e7fe      	b.n	80075f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d06e      	beq.n	80076d8 <pvPortMalloc+0x150>
 80075fa:	4b45      	ldr	r3, [pc, #276]	; (8007710 <pvPortMalloc+0x188>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	429a      	cmp	r2, r3
 8007602:	d869      	bhi.n	80076d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007604:	4b43      	ldr	r3, [pc, #268]	; (8007714 <pvPortMalloc+0x18c>)
 8007606:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007608:	4b42      	ldr	r3, [pc, #264]	; (8007714 <pvPortMalloc+0x18c>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800760e:	e004      	b.n	800761a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007612:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800761a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	429a      	cmp	r2, r3
 8007622:	d903      	bls.n	800762c <pvPortMalloc+0xa4>
 8007624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1f1      	bne.n	8007610 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800762c:	4b36      	ldr	r3, [pc, #216]	; (8007708 <pvPortMalloc+0x180>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007632:	429a      	cmp	r2, r3
 8007634:	d050      	beq.n	80076d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007636:	6a3b      	ldr	r3, [r7, #32]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2208      	movs	r2, #8
 800763c:	4413      	add	r3, r2
 800763e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	6a3b      	ldr	r3, [r7, #32]
 8007646:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764a:	685a      	ldr	r2, [r3, #4]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	1ad2      	subs	r2, r2, r3
 8007650:	2308      	movs	r3, #8
 8007652:	005b      	lsls	r3, r3, #1
 8007654:	429a      	cmp	r2, r3
 8007656:	d91f      	bls.n	8007698 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4413      	add	r3, r2
 800765e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	f003 0307 	and.w	r3, r3, #7
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00a      	beq.n	8007680 <pvPortMalloc+0xf8>
	__asm volatile
 800766a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766e:	f383 8811 	msr	BASEPRI, r3
 8007672:	f3bf 8f6f 	isb	sy
 8007676:	f3bf 8f4f 	dsb	sy
 800767a:	613b      	str	r3, [r7, #16]
}
 800767c:	bf00      	nop
 800767e:	e7fe      	b.n	800767e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007682:	685a      	ldr	r2, [r3, #4]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	1ad2      	subs	r2, r2, r3
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800768c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007692:	69b8      	ldr	r0, [r7, #24]
 8007694:	f000 f908 	bl	80078a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007698:	4b1d      	ldr	r3, [pc, #116]	; (8007710 <pvPortMalloc+0x188>)
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	4a1b      	ldr	r2, [pc, #108]	; (8007710 <pvPortMalloc+0x188>)
 80076a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80076a6:	4b1a      	ldr	r3, [pc, #104]	; (8007710 <pvPortMalloc+0x188>)
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	4b1b      	ldr	r3, [pc, #108]	; (8007718 <pvPortMalloc+0x190>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d203      	bcs.n	80076ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80076b2:	4b17      	ldr	r3, [pc, #92]	; (8007710 <pvPortMalloc+0x188>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a18      	ldr	r2, [pc, #96]	; (8007718 <pvPortMalloc+0x190>)
 80076b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80076ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076bc:	685a      	ldr	r2, [r3, #4]
 80076be:	4b13      	ldr	r3, [pc, #76]	; (800770c <pvPortMalloc+0x184>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	431a      	orrs	r2, r3
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80076c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ca:	2200      	movs	r2, #0
 80076cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80076ce:	4b13      	ldr	r3, [pc, #76]	; (800771c <pvPortMalloc+0x194>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	3301      	adds	r3, #1
 80076d4:	4a11      	ldr	r2, [pc, #68]	; (800771c <pvPortMalloc+0x194>)
 80076d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80076d8:	f7fe fd46 	bl	8006168 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	f003 0307 	and.w	r3, r3, #7
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00a      	beq.n	80076fc <pvPortMalloc+0x174>
	__asm volatile
 80076e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ea:	f383 8811 	msr	BASEPRI, r3
 80076ee:	f3bf 8f6f 	isb	sy
 80076f2:	f3bf 8f4f 	dsb	sy
 80076f6:	60fb      	str	r3, [r7, #12]
}
 80076f8:	bf00      	nop
 80076fa:	e7fe      	b.n	80076fa <pvPortMalloc+0x172>
	return pvReturn;
 80076fc:	69fb      	ldr	r3, [r7, #28]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3728      	adds	r7, #40	; 0x28
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	20004188 	.word	0x20004188
 800770c:	2000419c 	.word	0x2000419c
 8007710:	2000418c 	.word	0x2000418c
 8007714:	20004180 	.word	0x20004180
 8007718:	20004190 	.word	0x20004190
 800771c:	20004194 	.word	0x20004194

08007720 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b086      	sub	sp, #24
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d04d      	beq.n	80077ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007732:	2308      	movs	r3, #8
 8007734:	425b      	negs	r3, r3
 8007736:	697a      	ldr	r2, [r7, #20]
 8007738:	4413      	add	r3, r2
 800773a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	685a      	ldr	r2, [r3, #4]
 8007744:	4b24      	ldr	r3, [pc, #144]	; (80077d8 <vPortFree+0xb8>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4013      	ands	r3, r2
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10a      	bne.n	8007764 <vPortFree+0x44>
	__asm volatile
 800774e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007752:	f383 8811 	msr	BASEPRI, r3
 8007756:	f3bf 8f6f 	isb	sy
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	60fb      	str	r3, [r7, #12]
}
 8007760:	bf00      	nop
 8007762:	e7fe      	b.n	8007762 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00a      	beq.n	8007782 <vPortFree+0x62>
	__asm volatile
 800776c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007770:	f383 8811 	msr	BASEPRI, r3
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	f3bf 8f4f 	dsb	sy
 800777c:	60bb      	str	r3, [r7, #8]
}
 800777e:	bf00      	nop
 8007780:	e7fe      	b.n	8007780 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	685a      	ldr	r2, [r3, #4]
 8007786:	4b14      	ldr	r3, [pc, #80]	; (80077d8 <vPortFree+0xb8>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4013      	ands	r3, r2
 800778c:	2b00      	cmp	r3, #0
 800778e:	d01e      	beq.n	80077ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d11a      	bne.n	80077ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	685a      	ldr	r2, [r3, #4]
 800779c:	4b0e      	ldr	r3, [pc, #56]	; (80077d8 <vPortFree+0xb8>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	43db      	mvns	r3, r3
 80077a2:	401a      	ands	r2, r3
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80077a8:	f7fe fcd0 	bl	800614c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	685a      	ldr	r2, [r3, #4]
 80077b0:	4b0a      	ldr	r3, [pc, #40]	; (80077dc <vPortFree+0xbc>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4413      	add	r3, r2
 80077b6:	4a09      	ldr	r2, [pc, #36]	; (80077dc <vPortFree+0xbc>)
 80077b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80077ba:	6938      	ldr	r0, [r7, #16]
 80077bc:	f000 f874 	bl	80078a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80077c0:	4b07      	ldr	r3, [pc, #28]	; (80077e0 <vPortFree+0xc0>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	3301      	adds	r3, #1
 80077c6:	4a06      	ldr	r2, [pc, #24]	; (80077e0 <vPortFree+0xc0>)
 80077c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80077ca:	f7fe fccd 	bl	8006168 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80077ce:	bf00      	nop
 80077d0:	3718      	adds	r7, #24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	2000419c 	.word	0x2000419c
 80077dc:	2000418c 	.word	0x2000418c
 80077e0:	20004198 	.word	0x20004198

080077e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80077ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80077ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80077f0:	4b27      	ldr	r3, [pc, #156]	; (8007890 <prvHeapInit+0xac>)
 80077f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f003 0307 	and.w	r3, r3, #7
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00c      	beq.n	8007818 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	3307      	adds	r3, #7
 8007802:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f023 0307 	bic.w	r3, r3, #7
 800780a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	4a1f      	ldr	r2, [pc, #124]	; (8007890 <prvHeapInit+0xac>)
 8007814:	4413      	add	r3, r2
 8007816:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800781c:	4a1d      	ldr	r2, [pc, #116]	; (8007894 <prvHeapInit+0xb0>)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007822:	4b1c      	ldr	r3, [pc, #112]	; (8007894 <prvHeapInit+0xb0>)
 8007824:	2200      	movs	r2, #0
 8007826:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	4413      	add	r3, r2
 800782e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007830:	2208      	movs	r2, #8
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	1a9b      	subs	r3, r3, r2
 8007836:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f023 0307 	bic.w	r3, r3, #7
 800783e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	4a15      	ldr	r2, [pc, #84]	; (8007898 <prvHeapInit+0xb4>)
 8007844:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007846:	4b14      	ldr	r3, [pc, #80]	; (8007898 <prvHeapInit+0xb4>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	2200      	movs	r2, #0
 800784c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800784e:	4b12      	ldr	r3, [pc, #72]	; (8007898 <prvHeapInit+0xb4>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2200      	movs	r2, #0
 8007854:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	1ad2      	subs	r2, r2, r3
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007864:	4b0c      	ldr	r3, [pc, #48]	; (8007898 <prvHeapInit+0xb4>)
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	4a0a      	ldr	r2, [pc, #40]	; (800789c <prvHeapInit+0xb8>)
 8007872:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	4a09      	ldr	r2, [pc, #36]	; (80078a0 <prvHeapInit+0xbc>)
 800787a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800787c:	4b09      	ldr	r3, [pc, #36]	; (80078a4 <prvHeapInit+0xc0>)
 800787e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007882:	601a      	str	r2, [r3, #0]
}
 8007884:	bf00      	nop
 8007886:	3714      	adds	r7, #20
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr
 8007890:	20000580 	.word	0x20000580
 8007894:	20004180 	.word	0x20004180
 8007898:	20004188 	.word	0x20004188
 800789c:	20004190 	.word	0x20004190
 80078a0:	2000418c 	.word	0x2000418c
 80078a4:	2000419c 	.word	0x2000419c

080078a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80078b0:	4b28      	ldr	r3, [pc, #160]	; (8007954 <prvInsertBlockIntoFreeList+0xac>)
 80078b2:	60fb      	str	r3, [r7, #12]
 80078b4:	e002      	b.n	80078bc <prvInsertBlockIntoFreeList+0x14>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	60fb      	str	r3, [r7, #12]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d8f7      	bhi.n	80078b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	4413      	add	r3, r2
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d108      	bne.n	80078ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	685a      	ldr	r2, [r3, #4]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	441a      	add	r2, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	68ba      	ldr	r2, [r7, #8]
 80078f4:	441a      	add	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d118      	bne.n	8007930 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	4b15      	ldr	r3, [pc, #84]	; (8007958 <prvInsertBlockIntoFreeList+0xb0>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	429a      	cmp	r2, r3
 8007908:	d00d      	beq.n	8007926 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	685a      	ldr	r2, [r3, #4]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	441a      	add	r2, r3
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	601a      	str	r2, [r3, #0]
 8007924:	e008      	b.n	8007938 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007926:	4b0c      	ldr	r3, [pc, #48]	; (8007958 <prvInsertBlockIntoFreeList+0xb0>)
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	601a      	str	r2, [r3, #0]
 800792e:	e003      	b.n	8007938 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	429a      	cmp	r2, r3
 800793e:	d002      	beq.n	8007946 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007946:	bf00      	nop
 8007948:	3714      	adds	r7, #20
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	20004180 	.word	0x20004180
 8007958:	20004188 	.word	0x20004188

0800795c <__errno>:
 800795c:	4b01      	ldr	r3, [pc, #4]	; (8007964 <__errno+0x8>)
 800795e:	6818      	ldr	r0, [r3, #0]
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	20000010 	.word	0x20000010

08007968 <__libc_init_array>:
 8007968:	b570      	push	{r4, r5, r6, lr}
 800796a:	4d0d      	ldr	r5, [pc, #52]	; (80079a0 <__libc_init_array+0x38>)
 800796c:	4c0d      	ldr	r4, [pc, #52]	; (80079a4 <__libc_init_array+0x3c>)
 800796e:	1b64      	subs	r4, r4, r5
 8007970:	10a4      	asrs	r4, r4, #2
 8007972:	2600      	movs	r6, #0
 8007974:	42a6      	cmp	r6, r4
 8007976:	d109      	bne.n	800798c <__libc_init_array+0x24>
 8007978:	4d0b      	ldr	r5, [pc, #44]	; (80079a8 <__libc_init_array+0x40>)
 800797a:	4c0c      	ldr	r4, [pc, #48]	; (80079ac <__libc_init_array+0x44>)
 800797c:	f000 fc8e 	bl	800829c <_init>
 8007980:	1b64      	subs	r4, r4, r5
 8007982:	10a4      	asrs	r4, r4, #2
 8007984:	2600      	movs	r6, #0
 8007986:	42a6      	cmp	r6, r4
 8007988:	d105      	bne.n	8007996 <__libc_init_array+0x2e>
 800798a:	bd70      	pop	{r4, r5, r6, pc}
 800798c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007990:	4798      	blx	r3
 8007992:	3601      	adds	r6, #1
 8007994:	e7ee      	b.n	8007974 <__libc_init_array+0xc>
 8007996:	f855 3b04 	ldr.w	r3, [r5], #4
 800799a:	4798      	blx	r3
 800799c:	3601      	adds	r6, #1
 800799e:	e7f2      	b.n	8007986 <__libc_init_array+0x1e>
 80079a0:	08008638 	.word	0x08008638
 80079a4:	08008638 	.word	0x08008638
 80079a8:	08008638 	.word	0x08008638
 80079ac:	0800863c 	.word	0x0800863c

080079b0 <memcpy>:
 80079b0:	440a      	add	r2, r1
 80079b2:	4291      	cmp	r1, r2
 80079b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80079b8:	d100      	bne.n	80079bc <memcpy+0xc>
 80079ba:	4770      	bx	lr
 80079bc:	b510      	push	{r4, lr}
 80079be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079c6:	4291      	cmp	r1, r2
 80079c8:	d1f9      	bne.n	80079be <memcpy+0xe>
 80079ca:	bd10      	pop	{r4, pc}

080079cc <memset>:
 80079cc:	4402      	add	r2, r0
 80079ce:	4603      	mov	r3, r0
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d100      	bne.n	80079d6 <memset+0xa>
 80079d4:	4770      	bx	lr
 80079d6:	f803 1b01 	strb.w	r1, [r3], #1
 80079da:	e7f9      	b.n	80079d0 <memset+0x4>

080079dc <siprintf>:
 80079dc:	b40e      	push	{r1, r2, r3}
 80079de:	b500      	push	{lr}
 80079e0:	b09c      	sub	sp, #112	; 0x70
 80079e2:	ab1d      	add	r3, sp, #116	; 0x74
 80079e4:	9002      	str	r0, [sp, #8]
 80079e6:	9006      	str	r0, [sp, #24]
 80079e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80079ec:	4809      	ldr	r0, [pc, #36]	; (8007a14 <siprintf+0x38>)
 80079ee:	9107      	str	r1, [sp, #28]
 80079f0:	9104      	str	r1, [sp, #16]
 80079f2:	4909      	ldr	r1, [pc, #36]	; (8007a18 <siprintf+0x3c>)
 80079f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80079f8:	9105      	str	r1, [sp, #20]
 80079fa:	6800      	ldr	r0, [r0, #0]
 80079fc:	9301      	str	r3, [sp, #4]
 80079fe:	a902      	add	r1, sp, #8
 8007a00:	f000 f868 	bl	8007ad4 <_svfiprintf_r>
 8007a04:	9b02      	ldr	r3, [sp, #8]
 8007a06:	2200      	movs	r2, #0
 8007a08:	701a      	strb	r2, [r3, #0]
 8007a0a:	b01c      	add	sp, #112	; 0x70
 8007a0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a10:	b003      	add	sp, #12
 8007a12:	4770      	bx	lr
 8007a14:	20000010 	.word	0x20000010
 8007a18:	ffff0208 	.word	0xffff0208

08007a1c <__ssputs_r>:
 8007a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a20:	688e      	ldr	r6, [r1, #8]
 8007a22:	429e      	cmp	r6, r3
 8007a24:	4682      	mov	sl, r0
 8007a26:	460c      	mov	r4, r1
 8007a28:	4690      	mov	r8, r2
 8007a2a:	461f      	mov	r7, r3
 8007a2c:	d838      	bhi.n	8007aa0 <__ssputs_r+0x84>
 8007a2e:	898a      	ldrh	r2, [r1, #12]
 8007a30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a34:	d032      	beq.n	8007a9c <__ssputs_r+0x80>
 8007a36:	6825      	ldr	r5, [r4, #0]
 8007a38:	6909      	ldr	r1, [r1, #16]
 8007a3a:	eba5 0901 	sub.w	r9, r5, r1
 8007a3e:	6965      	ldr	r5, [r4, #20]
 8007a40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a48:	3301      	adds	r3, #1
 8007a4a:	444b      	add	r3, r9
 8007a4c:	106d      	asrs	r5, r5, #1
 8007a4e:	429d      	cmp	r5, r3
 8007a50:	bf38      	it	cc
 8007a52:	461d      	movcc	r5, r3
 8007a54:	0553      	lsls	r3, r2, #21
 8007a56:	d531      	bpl.n	8007abc <__ssputs_r+0xa0>
 8007a58:	4629      	mov	r1, r5
 8007a5a:	f000 fb55 	bl	8008108 <_malloc_r>
 8007a5e:	4606      	mov	r6, r0
 8007a60:	b950      	cbnz	r0, 8007a78 <__ssputs_r+0x5c>
 8007a62:	230c      	movs	r3, #12
 8007a64:	f8ca 3000 	str.w	r3, [sl]
 8007a68:	89a3      	ldrh	r3, [r4, #12]
 8007a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a6e:	81a3      	strh	r3, [r4, #12]
 8007a70:	f04f 30ff 	mov.w	r0, #4294967295
 8007a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a78:	6921      	ldr	r1, [r4, #16]
 8007a7a:	464a      	mov	r2, r9
 8007a7c:	f7ff ff98 	bl	80079b0 <memcpy>
 8007a80:	89a3      	ldrh	r3, [r4, #12]
 8007a82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a8a:	81a3      	strh	r3, [r4, #12]
 8007a8c:	6126      	str	r6, [r4, #16]
 8007a8e:	6165      	str	r5, [r4, #20]
 8007a90:	444e      	add	r6, r9
 8007a92:	eba5 0509 	sub.w	r5, r5, r9
 8007a96:	6026      	str	r6, [r4, #0]
 8007a98:	60a5      	str	r5, [r4, #8]
 8007a9a:	463e      	mov	r6, r7
 8007a9c:	42be      	cmp	r6, r7
 8007a9e:	d900      	bls.n	8007aa2 <__ssputs_r+0x86>
 8007aa0:	463e      	mov	r6, r7
 8007aa2:	6820      	ldr	r0, [r4, #0]
 8007aa4:	4632      	mov	r2, r6
 8007aa6:	4641      	mov	r1, r8
 8007aa8:	f000 faa8 	bl	8007ffc <memmove>
 8007aac:	68a3      	ldr	r3, [r4, #8]
 8007aae:	1b9b      	subs	r3, r3, r6
 8007ab0:	60a3      	str	r3, [r4, #8]
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	4433      	add	r3, r6
 8007ab6:	6023      	str	r3, [r4, #0]
 8007ab8:	2000      	movs	r0, #0
 8007aba:	e7db      	b.n	8007a74 <__ssputs_r+0x58>
 8007abc:	462a      	mov	r2, r5
 8007abe:	f000 fb97 	bl	80081f0 <_realloc_r>
 8007ac2:	4606      	mov	r6, r0
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	d1e1      	bne.n	8007a8c <__ssputs_r+0x70>
 8007ac8:	6921      	ldr	r1, [r4, #16]
 8007aca:	4650      	mov	r0, sl
 8007acc:	f000 fab0 	bl	8008030 <_free_r>
 8007ad0:	e7c7      	b.n	8007a62 <__ssputs_r+0x46>
	...

08007ad4 <_svfiprintf_r>:
 8007ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad8:	4698      	mov	r8, r3
 8007ada:	898b      	ldrh	r3, [r1, #12]
 8007adc:	061b      	lsls	r3, r3, #24
 8007ade:	b09d      	sub	sp, #116	; 0x74
 8007ae0:	4607      	mov	r7, r0
 8007ae2:	460d      	mov	r5, r1
 8007ae4:	4614      	mov	r4, r2
 8007ae6:	d50e      	bpl.n	8007b06 <_svfiprintf_r+0x32>
 8007ae8:	690b      	ldr	r3, [r1, #16]
 8007aea:	b963      	cbnz	r3, 8007b06 <_svfiprintf_r+0x32>
 8007aec:	2140      	movs	r1, #64	; 0x40
 8007aee:	f000 fb0b 	bl	8008108 <_malloc_r>
 8007af2:	6028      	str	r0, [r5, #0]
 8007af4:	6128      	str	r0, [r5, #16]
 8007af6:	b920      	cbnz	r0, 8007b02 <_svfiprintf_r+0x2e>
 8007af8:	230c      	movs	r3, #12
 8007afa:	603b      	str	r3, [r7, #0]
 8007afc:	f04f 30ff 	mov.w	r0, #4294967295
 8007b00:	e0d1      	b.n	8007ca6 <_svfiprintf_r+0x1d2>
 8007b02:	2340      	movs	r3, #64	; 0x40
 8007b04:	616b      	str	r3, [r5, #20]
 8007b06:	2300      	movs	r3, #0
 8007b08:	9309      	str	r3, [sp, #36]	; 0x24
 8007b0a:	2320      	movs	r3, #32
 8007b0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b10:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b14:	2330      	movs	r3, #48	; 0x30
 8007b16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007cc0 <_svfiprintf_r+0x1ec>
 8007b1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b1e:	f04f 0901 	mov.w	r9, #1
 8007b22:	4623      	mov	r3, r4
 8007b24:	469a      	mov	sl, r3
 8007b26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b2a:	b10a      	cbz	r2, 8007b30 <_svfiprintf_r+0x5c>
 8007b2c:	2a25      	cmp	r2, #37	; 0x25
 8007b2e:	d1f9      	bne.n	8007b24 <_svfiprintf_r+0x50>
 8007b30:	ebba 0b04 	subs.w	fp, sl, r4
 8007b34:	d00b      	beq.n	8007b4e <_svfiprintf_r+0x7a>
 8007b36:	465b      	mov	r3, fp
 8007b38:	4622      	mov	r2, r4
 8007b3a:	4629      	mov	r1, r5
 8007b3c:	4638      	mov	r0, r7
 8007b3e:	f7ff ff6d 	bl	8007a1c <__ssputs_r>
 8007b42:	3001      	adds	r0, #1
 8007b44:	f000 80aa 	beq.w	8007c9c <_svfiprintf_r+0x1c8>
 8007b48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b4a:	445a      	add	r2, fp
 8007b4c:	9209      	str	r2, [sp, #36]	; 0x24
 8007b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f000 80a2 	beq.w	8007c9c <_svfiprintf_r+0x1c8>
 8007b58:	2300      	movs	r3, #0
 8007b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b62:	f10a 0a01 	add.w	sl, sl, #1
 8007b66:	9304      	str	r3, [sp, #16]
 8007b68:	9307      	str	r3, [sp, #28]
 8007b6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b6e:	931a      	str	r3, [sp, #104]	; 0x68
 8007b70:	4654      	mov	r4, sl
 8007b72:	2205      	movs	r2, #5
 8007b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b78:	4851      	ldr	r0, [pc, #324]	; (8007cc0 <_svfiprintf_r+0x1ec>)
 8007b7a:	f7f8 fb49 	bl	8000210 <memchr>
 8007b7e:	9a04      	ldr	r2, [sp, #16]
 8007b80:	b9d8      	cbnz	r0, 8007bba <_svfiprintf_r+0xe6>
 8007b82:	06d0      	lsls	r0, r2, #27
 8007b84:	bf44      	itt	mi
 8007b86:	2320      	movmi	r3, #32
 8007b88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b8c:	0711      	lsls	r1, r2, #28
 8007b8e:	bf44      	itt	mi
 8007b90:	232b      	movmi	r3, #43	; 0x2b
 8007b92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b96:	f89a 3000 	ldrb.w	r3, [sl]
 8007b9a:	2b2a      	cmp	r3, #42	; 0x2a
 8007b9c:	d015      	beq.n	8007bca <_svfiprintf_r+0xf6>
 8007b9e:	9a07      	ldr	r2, [sp, #28]
 8007ba0:	4654      	mov	r4, sl
 8007ba2:	2000      	movs	r0, #0
 8007ba4:	f04f 0c0a 	mov.w	ip, #10
 8007ba8:	4621      	mov	r1, r4
 8007baa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bae:	3b30      	subs	r3, #48	; 0x30
 8007bb0:	2b09      	cmp	r3, #9
 8007bb2:	d94e      	bls.n	8007c52 <_svfiprintf_r+0x17e>
 8007bb4:	b1b0      	cbz	r0, 8007be4 <_svfiprintf_r+0x110>
 8007bb6:	9207      	str	r2, [sp, #28]
 8007bb8:	e014      	b.n	8007be4 <_svfiprintf_r+0x110>
 8007bba:	eba0 0308 	sub.w	r3, r0, r8
 8007bbe:	fa09 f303 	lsl.w	r3, r9, r3
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	9304      	str	r3, [sp, #16]
 8007bc6:	46a2      	mov	sl, r4
 8007bc8:	e7d2      	b.n	8007b70 <_svfiprintf_r+0x9c>
 8007bca:	9b03      	ldr	r3, [sp, #12]
 8007bcc:	1d19      	adds	r1, r3, #4
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	9103      	str	r1, [sp, #12]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	bfbb      	ittet	lt
 8007bd6:	425b      	neglt	r3, r3
 8007bd8:	f042 0202 	orrlt.w	r2, r2, #2
 8007bdc:	9307      	strge	r3, [sp, #28]
 8007bde:	9307      	strlt	r3, [sp, #28]
 8007be0:	bfb8      	it	lt
 8007be2:	9204      	strlt	r2, [sp, #16]
 8007be4:	7823      	ldrb	r3, [r4, #0]
 8007be6:	2b2e      	cmp	r3, #46	; 0x2e
 8007be8:	d10c      	bne.n	8007c04 <_svfiprintf_r+0x130>
 8007bea:	7863      	ldrb	r3, [r4, #1]
 8007bec:	2b2a      	cmp	r3, #42	; 0x2a
 8007bee:	d135      	bne.n	8007c5c <_svfiprintf_r+0x188>
 8007bf0:	9b03      	ldr	r3, [sp, #12]
 8007bf2:	1d1a      	adds	r2, r3, #4
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	9203      	str	r2, [sp, #12]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	bfb8      	it	lt
 8007bfc:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c00:	3402      	adds	r4, #2
 8007c02:	9305      	str	r3, [sp, #20]
 8007c04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007cd0 <_svfiprintf_r+0x1fc>
 8007c08:	7821      	ldrb	r1, [r4, #0]
 8007c0a:	2203      	movs	r2, #3
 8007c0c:	4650      	mov	r0, sl
 8007c0e:	f7f8 faff 	bl	8000210 <memchr>
 8007c12:	b140      	cbz	r0, 8007c26 <_svfiprintf_r+0x152>
 8007c14:	2340      	movs	r3, #64	; 0x40
 8007c16:	eba0 000a 	sub.w	r0, r0, sl
 8007c1a:	fa03 f000 	lsl.w	r0, r3, r0
 8007c1e:	9b04      	ldr	r3, [sp, #16]
 8007c20:	4303      	orrs	r3, r0
 8007c22:	3401      	adds	r4, #1
 8007c24:	9304      	str	r3, [sp, #16]
 8007c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c2a:	4826      	ldr	r0, [pc, #152]	; (8007cc4 <_svfiprintf_r+0x1f0>)
 8007c2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c30:	2206      	movs	r2, #6
 8007c32:	f7f8 faed 	bl	8000210 <memchr>
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d038      	beq.n	8007cac <_svfiprintf_r+0x1d8>
 8007c3a:	4b23      	ldr	r3, [pc, #140]	; (8007cc8 <_svfiprintf_r+0x1f4>)
 8007c3c:	bb1b      	cbnz	r3, 8007c86 <_svfiprintf_r+0x1b2>
 8007c3e:	9b03      	ldr	r3, [sp, #12]
 8007c40:	3307      	adds	r3, #7
 8007c42:	f023 0307 	bic.w	r3, r3, #7
 8007c46:	3308      	adds	r3, #8
 8007c48:	9303      	str	r3, [sp, #12]
 8007c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c4c:	4433      	add	r3, r6
 8007c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c50:	e767      	b.n	8007b22 <_svfiprintf_r+0x4e>
 8007c52:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c56:	460c      	mov	r4, r1
 8007c58:	2001      	movs	r0, #1
 8007c5a:	e7a5      	b.n	8007ba8 <_svfiprintf_r+0xd4>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	3401      	adds	r4, #1
 8007c60:	9305      	str	r3, [sp, #20]
 8007c62:	4619      	mov	r1, r3
 8007c64:	f04f 0c0a 	mov.w	ip, #10
 8007c68:	4620      	mov	r0, r4
 8007c6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c6e:	3a30      	subs	r2, #48	; 0x30
 8007c70:	2a09      	cmp	r2, #9
 8007c72:	d903      	bls.n	8007c7c <_svfiprintf_r+0x1a8>
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d0c5      	beq.n	8007c04 <_svfiprintf_r+0x130>
 8007c78:	9105      	str	r1, [sp, #20]
 8007c7a:	e7c3      	b.n	8007c04 <_svfiprintf_r+0x130>
 8007c7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c80:	4604      	mov	r4, r0
 8007c82:	2301      	movs	r3, #1
 8007c84:	e7f0      	b.n	8007c68 <_svfiprintf_r+0x194>
 8007c86:	ab03      	add	r3, sp, #12
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	462a      	mov	r2, r5
 8007c8c:	4b0f      	ldr	r3, [pc, #60]	; (8007ccc <_svfiprintf_r+0x1f8>)
 8007c8e:	a904      	add	r1, sp, #16
 8007c90:	4638      	mov	r0, r7
 8007c92:	f3af 8000 	nop.w
 8007c96:	1c42      	adds	r2, r0, #1
 8007c98:	4606      	mov	r6, r0
 8007c9a:	d1d6      	bne.n	8007c4a <_svfiprintf_r+0x176>
 8007c9c:	89ab      	ldrh	r3, [r5, #12]
 8007c9e:	065b      	lsls	r3, r3, #25
 8007ca0:	f53f af2c 	bmi.w	8007afc <_svfiprintf_r+0x28>
 8007ca4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ca6:	b01d      	add	sp, #116	; 0x74
 8007ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cac:	ab03      	add	r3, sp, #12
 8007cae:	9300      	str	r3, [sp, #0]
 8007cb0:	462a      	mov	r2, r5
 8007cb2:	4b06      	ldr	r3, [pc, #24]	; (8007ccc <_svfiprintf_r+0x1f8>)
 8007cb4:	a904      	add	r1, sp, #16
 8007cb6:	4638      	mov	r0, r7
 8007cb8:	f000 f87a 	bl	8007db0 <_printf_i>
 8007cbc:	e7eb      	b.n	8007c96 <_svfiprintf_r+0x1c2>
 8007cbe:	bf00      	nop
 8007cc0:	080085fc 	.word	0x080085fc
 8007cc4:	08008606 	.word	0x08008606
 8007cc8:	00000000 	.word	0x00000000
 8007ccc:	08007a1d 	.word	0x08007a1d
 8007cd0:	08008602 	.word	0x08008602

08007cd4 <_printf_common>:
 8007cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd8:	4616      	mov	r6, r2
 8007cda:	4699      	mov	r9, r3
 8007cdc:	688a      	ldr	r2, [r1, #8]
 8007cde:	690b      	ldr	r3, [r1, #16]
 8007ce0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	bfb8      	it	lt
 8007ce8:	4613      	movlt	r3, r2
 8007cea:	6033      	str	r3, [r6, #0]
 8007cec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007cf0:	4607      	mov	r7, r0
 8007cf2:	460c      	mov	r4, r1
 8007cf4:	b10a      	cbz	r2, 8007cfa <_printf_common+0x26>
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	6033      	str	r3, [r6, #0]
 8007cfa:	6823      	ldr	r3, [r4, #0]
 8007cfc:	0699      	lsls	r1, r3, #26
 8007cfe:	bf42      	ittt	mi
 8007d00:	6833      	ldrmi	r3, [r6, #0]
 8007d02:	3302      	addmi	r3, #2
 8007d04:	6033      	strmi	r3, [r6, #0]
 8007d06:	6825      	ldr	r5, [r4, #0]
 8007d08:	f015 0506 	ands.w	r5, r5, #6
 8007d0c:	d106      	bne.n	8007d1c <_printf_common+0x48>
 8007d0e:	f104 0a19 	add.w	sl, r4, #25
 8007d12:	68e3      	ldr	r3, [r4, #12]
 8007d14:	6832      	ldr	r2, [r6, #0]
 8007d16:	1a9b      	subs	r3, r3, r2
 8007d18:	42ab      	cmp	r3, r5
 8007d1a:	dc26      	bgt.n	8007d6a <_printf_common+0x96>
 8007d1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d20:	1e13      	subs	r3, r2, #0
 8007d22:	6822      	ldr	r2, [r4, #0]
 8007d24:	bf18      	it	ne
 8007d26:	2301      	movne	r3, #1
 8007d28:	0692      	lsls	r2, r2, #26
 8007d2a:	d42b      	bmi.n	8007d84 <_printf_common+0xb0>
 8007d2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d30:	4649      	mov	r1, r9
 8007d32:	4638      	mov	r0, r7
 8007d34:	47c0      	blx	r8
 8007d36:	3001      	adds	r0, #1
 8007d38:	d01e      	beq.n	8007d78 <_printf_common+0xa4>
 8007d3a:	6823      	ldr	r3, [r4, #0]
 8007d3c:	68e5      	ldr	r5, [r4, #12]
 8007d3e:	6832      	ldr	r2, [r6, #0]
 8007d40:	f003 0306 	and.w	r3, r3, #6
 8007d44:	2b04      	cmp	r3, #4
 8007d46:	bf08      	it	eq
 8007d48:	1aad      	subeq	r5, r5, r2
 8007d4a:	68a3      	ldr	r3, [r4, #8]
 8007d4c:	6922      	ldr	r2, [r4, #16]
 8007d4e:	bf0c      	ite	eq
 8007d50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d54:	2500      	movne	r5, #0
 8007d56:	4293      	cmp	r3, r2
 8007d58:	bfc4      	itt	gt
 8007d5a:	1a9b      	subgt	r3, r3, r2
 8007d5c:	18ed      	addgt	r5, r5, r3
 8007d5e:	2600      	movs	r6, #0
 8007d60:	341a      	adds	r4, #26
 8007d62:	42b5      	cmp	r5, r6
 8007d64:	d11a      	bne.n	8007d9c <_printf_common+0xc8>
 8007d66:	2000      	movs	r0, #0
 8007d68:	e008      	b.n	8007d7c <_printf_common+0xa8>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	4652      	mov	r2, sl
 8007d6e:	4649      	mov	r1, r9
 8007d70:	4638      	mov	r0, r7
 8007d72:	47c0      	blx	r8
 8007d74:	3001      	adds	r0, #1
 8007d76:	d103      	bne.n	8007d80 <_printf_common+0xac>
 8007d78:	f04f 30ff 	mov.w	r0, #4294967295
 8007d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d80:	3501      	adds	r5, #1
 8007d82:	e7c6      	b.n	8007d12 <_printf_common+0x3e>
 8007d84:	18e1      	adds	r1, r4, r3
 8007d86:	1c5a      	adds	r2, r3, #1
 8007d88:	2030      	movs	r0, #48	; 0x30
 8007d8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d8e:	4422      	add	r2, r4
 8007d90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d98:	3302      	adds	r3, #2
 8007d9a:	e7c7      	b.n	8007d2c <_printf_common+0x58>
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	4622      	mov	r2, r4
 8007da0:	4649      	mov	r1, r9
 8007da2:	4638      	mov	r0, r7
 8007da4:	47c0      	blx	r8
 8007da6:	3001      	adds	r0, #1
 8007da8:	d0e6      	beq.n	8007d78 <_printf_common+0xa4>
 8007daa:	3601      	adds	r6, #1
 8007dac:	e7d9      	b.n	8007d62 <_printf_common+0x8e>
	...

08007db0 <_printf_i>:
 8007db0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007db4:	7e0f      	ldrb	r7, [r1, #24]
 8007db6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007db8:	2f78      	cmp	r7, #120	; 0x78
 8007dba:	4691      	mov	r9, r2
 8007dbc:	4680      	mov	r8, r0
 8007dbe:	460c      	mov	r4, r1
 8007dc0:	469a      	mov	sl, r3
 8007dc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007dc6:	d807      	bhi.n	8007dd8 <_printf_i+0x28>
 8007dc8:	2f62      	cmp	r7, #98	; 0x62
 8007dca:	d80a      	bhi.n	8007de2 <_printf_i+0x32>
 8007dcc:	2f00      	cmp	r7, #0
 8007dce:	f000 80d8 	beq.w	8007f82 <_printf_i+0x1d2>
 8007dd2:	2f58      	cmp	r7, #88	; 0x58
 8007dd4:	f000 80a3 	beq.w	8007f1e <_printf_i+0x16e>
 8007dd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ddc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007de0:	e03a      	b.n	8007e58 <_printf_i+0xa8>
 8007de2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007de6:	2b15      	cmp	r3, #21
 8007de8:	d8f6      	bhi.n	8007dd8 <_printf_i+0x28>
 8007dea:	a101      	add	r1, pc, #4	; (adr r1, 8007df0 <_printf_i+0x40>)
 8007dec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007df0:	08007e49 	.word	0x08007e49
 8007df4:	08007e5d 	.word	0x08007e5d
 8007df8:	08007dd9 	.word	0x08007dd9
 8007dfc:	08007dd9 	.word	0x08007dd9
 8007e00:	08007dd9 	.word	0x08007dd9
 8007e04:	08007dd9 	.word	0x08007dd9
 8007e08:	08007e5d 	.word	0x08007e5d
 8007e0c:	08007dd9 	.word	0x08007dd9
 8007e10:	08007dd9 	.word	0x08007dd9
 8007e14:	08007dd9 	.word	0x08007dd9
 8007e18:	08007dd9 	.word	0x08007dd9
 8007e1c:	08007f69 	.word	0x08007f69
 8007e20:	08007e8d 	.word	0x08007e8d
 8007e24:	08007f4b 	.word	0x08007f4b
 8007e28:	08007dd9 	.word	0x08007dd9
 8007e2c:	08007dd9 	.word	0x08007dd9
 8007e30:	08007f8b 	.word	0x08007f8b
 8007e34:	08007dd9 	.word	0x08007dd9
 8007e38:	08007e8d 	.word	0x08007e8d
 8007e3c:	08007dd9 	.word	0x08007dd9
 8007e40:	08007dd9 	.word	0x08007dd9
 8007e44:	08007f53 	.word	0x08007f53
 8007e48:	682b      	ldr	r3, [r5, #0]
 8007e4a:	1d1a      	adds	r2, r3, #4
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	602a      	str	r2, [r5, #0]
 8007e50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e0a3      	b.n	8007fa4 <_printf_i+0x1f4>
 8007e5c:	6820      	ldr	r0, [r4, #0]
 8007e5e:	6829      	ldr	r1, [r5, #0]
 8007e60:	0606      	lsls	r6, r0, #24
 8007e62:	f101 0304 	add.w	r3, r1, #4
 8007e66:	d50a      	bpl.n	8007e7e <_printf_i+0xce>
 8007e68:	680e      	ldr	r6, [r1, #0]
 8007e6a:	602b      	str	r3, [r5, #0]
 8007e6c:	2e00      	cmp	r6, #0
 8007e6e:	da03      	bge.n	8007e78 <_printf_i+0xc8>
 8007e70:	232d      	movs	r3, #45	; 0x2d
 8007e72:	4276      	negs	r6, r6
 8007e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e78:	485e      	ldr	r0, [pc, #376]	; (8007ff4 <_printf_i+0x244>)
 8007e7a:	230a      	movs	r3, #10
 8007e7c:	e019      	b.n	8007eb2 <_printf_i+0x102>
 8007e7e:	680e      	ldr	r6, [r1, #0]
 8007e80:	602b      	str	r3, [r5, #0]
 8007e82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e86:	bf18      	it	ne
 8007e88:	b236      	sxthne	r6, r6
 8007e8a:	e7ef      	b.n	8007e6c <_printf_i+0xbc>
 8007e8c:	682b      	ldr	r3, [r5, #0]
 8007e8e:	6820      	ldr	r0, [r4, #0]
 8007e90:	1d19      	adds	r1, r3, #4
 8007e92:	6029      	str	r1, [r5, #0]
 8007e94:	0601      	lsls	r1, r0, #24
 8007e96:	d501      	bpl.n	8007e9c <_printf_i+0xec>
 8007e98:	681e      	ldr	r6, [r3, #0]
 8007e9a:	e002      	b.n	8007ea2 <_printf_i+0xf2>
 8007e9c:	0646      	lsls	r6, r0, #25
 8007e9e:	d5fb      	bpl.n	8007e98 <_printf_i+0xe8>
 8007ea0:	881e      	ldrh	r6, [r3, #0]
 8007ea2:	4854      	ldr	r0, [pc, #336]	; (8007ff4 <_printf_i+0x244>)
 8007ea4:	2f6f      	cmp	r7, #111	; 0x6f
 8007ea6:	bf0c      	ite	eq
 8007ea8:	2308      	moveq	r3, #8
 8007eaa:	230a      	movne	r3, #10
 8007eac:	2100      	movs	r1, #0
 8007eae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007eb2:	6865      	ldr	r5, [r4, #4]
 8007eb4:	60a5      	str	r5, [r4, #8]
 8007eb6:	2d00      	cmp	r5, #0
 8007eb8:	bfa2      	ittt	ge
 8007eba:	6821      	ldrge	r1, [r4, #0]
 8007ebc:	f021 0104 	bicge.w	r1, r1, #4
 8007ec0:	6021      	strge	r1, [r4, #0]
 8007ec2:	b90e      	cbnz	r6, 8007ec8 <_printf_i+0x118>
 8007ec4:	2d00      	cmp	r5, #0
 8007ec6:	d04d      	beq.n	8007f64 <_printf_i+0x1b4>
 8007ec8:	4615      	mov	r5, r2
 8007eca:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ece:	fb03 6711 	mls	r7, r3, r1, r6
 8007ed2:	5dc7      	ldrb	r7, [r0, r7]
 8007ed4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ed8:	4637      	mov	r7, r6
 8007eda:	42bb      	cmp	r3, r7
 8007edc:	460e      	mov	r6, r1
 8007ede:	d9f4      	bls.n	8007eca <_printf_i+0x11a>
 8007ee0:	2b08      	cmp	r3, #8
 8007ee2:	d10b      	bne.n	8007efc <_printf_i+0x14c>
 8007ee4:	6823      	ldr	r3, [r4, #0]
 8007ee6:	07de      	lsls	r6, r3, #31
 8007ee8:	d508      	bpl.n	8007efc <_printf_i+0x14c>
 8007eea:	6923      	ldr	r3, [r4, #16]
 8007eec:	6861      	ldr	r1, [r4, #4]
 8007eee:	4299      	cmp	r1, r3
 8007ef0:	bfde      	ittt	le
 8007ef2:	2330      	movle	r3, #48	; 0x30
 8007ef4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ef8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007efc:	1b52      	subs	r2, r2, r5
 8007efe:	6122      	str	r2, [r4, #16]
 8007f00:	f8cd a000 	str.w	sl, [sp]
 8007f04:	464b      	mov	r3, r9
 8007f06:	aa03      	add	r2, sp, #12
 8007f08:	4621      	mov	r1, r4
 8007f0a:	4640      	mov	r0, r8
 8007f0c:	f7ff fee2 	bl	8007cd4 <_printf_common>
 8007f10:	3001      	adds	r0, #1
 8007f12:	d14c      	bne.n	8007fae <_printf_i+0x1fe>
 8007f14:	f04f 30ff 	mov.w	r0, #4294967295
 8007f18:	b004      	add	sp, #16
 8007f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f1e:	4835      	ldr	r0, [pc, #212]	; (8007ff4 <_printf_i+0x244>)
 8007f20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007f24:	6829      	ldr	r1, [r5, #0]
 8007f26:	6823      	ldr	r3, [r4, #0]
 8007f28:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f2c:	6029      	str	r1, [r5, #0]
 8007f2e:	061d      	lsls	r5, r3, #24
 8007f30:	d514      	bpl.n	8007f5c <_printf_i+0x1ac>
 8007f32:	07df      	lsls	r7, r3, #31
 8007f34:	bf44      	itt	mi
 8007f36:	f043 0320 	orrmi.w	r3, r3, #32
 8007f3a:	6023      	strmi	r3, [r4, #0]
 8007f3c:	b91e      	cbnz	r6, 8007f46 <_printf_i+0x196>
 8007f3e:	6823      	ldr	r3, [r4, #0]
 8007f40:	f023 0320 	bic.w	r3, r3, #32
 8007f44:	6023      	str	r3, [r4, #0]
 8007f46:	2310      	movs	r3, #16
 8007f48:	e7b0      	b.n	8007eac <_printf_i+0xfc>
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	f043 0320 	orr.w	r3, r3, #32
 8007f50:	6023      	str	r3, [r4, #0]
 8007f52:	2378      	movs	r3, #120	; 0x78
 8007f54:	4828      	ldr	r0, [pc, #160]	; (8007ff8 <_printf_i+0x248>)
 8007f56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f5a:	e7e3      	b.n	8007f24 <_printf_i+0x174>
 8007f5c:	0659      	lsls	r1, r3, #25
 8007f5e:	bf48      	it	mi
 8007f60:	b2b6      	uxthmi	r6, r6
 8007f62:	e7e6      	b.n	8007f32 <_printf_i+0x182>
 8007f64:	4615      	mov	r5, r2
 8007f66:	e7bb      	b.n	8007ee0 <_printf_i+0x130>
 8007f68:	682b      	ldr	r3, [r5, #0]
 8007f6a:	6826      	ldr	r6, [r4, #0]
 8007f6c:	6961      	ldr	r1, [r4, #20]
 8007f6e:	1d18      	adds	r0, r3, #4
 8007f70:	6028      	str	r0, [r5, #0]
 8007f72:	0635      	lsls	r5, r6, #24
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	d501      	bpl.n	8007f7c <_printf_i+0x1cc>
 8007f78:	6019      	str	r1, [r3, #0]
 8007f7a:	e002      	b.n	8007f82 <_printf_i+0x1d2>
 8007f7c:	0670      	lsls	r0, r6, #25
 8007f7e:	d5fb      	bpl.n	8007f78 <_printf_i+0x1c8>
 8007f80:	8019      	strh	r1, [r3, #0]
 8007f82:	2300      	movs	r3, #0
 8007f84:	6123      	str	r3, [r4, #16]
 8007f86:	4615      	mov	r5, r2
 8007f88:	e7ba      	b.n	8007f00 <_printf_i+0x150>
 8007f8a:	682b      	ldr	r3, [r5, #0]
 8007f8c:	1d1a      	adds	r2, r3, #4
 8007f8e:	602a      	str	r2, [r5, #0]
 8007f90:	681d      	ldr	r5, [r3, #0]
 8007f92:	6862      	ldr	r2, [r4, #4]
 8007f94:	2100      	movs	r1, #0
 8007f96:	4628      	mov	r0, r5
 8007f98:	f7f8 f93a 	bl	8000210 <memchr>
 8007f9c:	b108      	cbz	r0, 8007fa2 <_printf_i+0x1f2>
 8007f9e:	1b40      	subs	r0, r0, r5
 8007fa0:	6060      	str	r0, [r4, #4]
 8007fa2:	6863      	ldr	r3, [r4, #4]
 8007fa4:	6123      	str	r3, [r4, #16]
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fac:	e7a8      	b.n	8007f00 <_printf_i+0x150>
 8007fae:	6923      	ldr	r3, [r4, #16]
 8007fb0:	462a      	mov	r2, r5
 8007fb2:	4649      	mov	r1, r9
 8007fb4:	4640      	mov	r0, r8
 8007fb6:	47d0      	blx	sl
 8007fb8:	3001      	adds	r0, #1
 8007fba:	d0ab      	beq.n	8007f14 <_printf_i+0x164>
 8007fbc:	6823      	ldr	r3, [r4, #0]
 8007fbe:	079b      	lsls	r3, r3, #30
 8007fc0:	d413      	bmi.n	8007fea <_printf_i+0x23a>
 8007fc2:	68e0      	ldr	r0, [r4, #12]
 8007fc4:	9b03      	ldr	r3, [sp, #12]
 8007fc6:	4298      	cmp	r0, r3
 8007fc8:	bfb8      	it	lt
 8007fca:	4618      	movlt	r0, r3
 8007fcc:	e7a4      	b.n	8007f18 <_printf_i+0x168>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	4632      	mov	r2, r6
 8007fd2:	4649      	mov	r1, r9
 8007fd4:	4640      	mov	r0, r8
 8007fd6:	47d0      	blx	sl
 8007fd8:	3001      	adds	r0, #1
 8007fda:	d09b      	beq.n	8007f14 <_printf_i+0x164>
 8007fdc:	3501      	adds	r5, #1
 8007fde:	68e3      	ldr	r3, [r4, #12]
 8007fe0:	9903      	ldr	r1, [sp, #12]
 8007fe2:	1a5b      	subs	r3, r3, r1
 8007fe4:	42ab      	cmp	r3, r5
 8007fe6:	dcf2      	bgt.n	8007fce <_printf_i+0x21e>
 8007fe8:	e7eb      	b.n	8007fc2 <_printf_i+0x212>
 8007fea:	2500      	movs	r5, #0
 8007fec:	f104 0619 	add.w	r6, r4, #25
 8007ff0:	e7f5      	b.n	8007fde <_printf_i+0x22e>
 8007ff2:	bf00      	nop
 8007ff4:	0800860d 	.word	0x0800860d
 8007ff8:	0800861e 	.word	0x0800861e

08007ffc <memmove>:
 8007ffc:	4288      	cmp	r0, r1
 8007ffe:	b510      	push	{r4, lr}
 8008000:	eb01 0402 	add.w	r4, r1, r2
 8008004:	d902      	bls.n	800800c <memmove+0x10>
 8008006:	4284      	cmp	r4, r0
 8008008:	4623      	mov	r3, r4
 800800a:	d807      	bhi.n	800801c <memmove+0x20>
 800800c:	1e43      	subs	r3, r0, #1
 800800e:	42a1      	cmp	r1, r4
 8008010:	d008      	beq.n	8008024 <memmove+0x28>
 8008012:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008016:	f803 2f01 	strb.w	r2, [r3, #1]!
 800801a:	e7f8      	b.n	800800e <memmove+0x12>
 800801c:	4402      	add	r2, r0
 800801e:	4601      	mov	r1, r0
 8008020:	428a      	cmp	r2, r1
 8008022:	d100      	bne.n	8008026 <memmove+0x2a>
 8008024:	bd10      	pop	{r4, pc}
 8008026:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800802a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800802e:	e7f7      	b.n	8008020 <memmove+0x24>

08008030 <_free_r>:
 8008030:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008032:	2900      	cmp	r1, #0
 8008034:	d044      	beq.n	80080c0 <_free_r+0x90>
 8008036:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800803a:	9001      	str	r0, [sp, #4]
 800803c:	2b00      	cmp	r3, #0
 800803e:	f1a1 0404 	sub.w	r4, r1, #4
 8008042:	bfb8      	it	lt
 8008044:	18e4      	addlt	r4, r4, r3
 8008046:	f000 f913 	bl	8008270 <__malloc_lock>
 800804a:	4a1e      	ldr	r2, [pc, #120]	; (80080c4 <_free_r+0x94>)
 800804c:	9801      	ldr	r0, [sp, #4]
 800804e:	6813      	ldr	r3, [r2, #0]
 8008050:	b933      	cbnz	r3, 8008060 <_free_r+0x30>
 8008052:	6063      	str	r3, [r4, #4]
 8008054:	6014      	str	r4, [r2, #0]
 8008056:	b003      	add	sp, #12
 8008058:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800805c:	f000 b90e 	b.w	800827c <__malloc_unlock>
 8008060:	42a3      	cmp	r3, r4
 8008062:	d908      	bls.n	8008076 <_free_r+0x46>
 8008064:	6825      	ldr	r5, [r4, #0]
 8008066:	1961      	adds	r1, r4, r5
 8008068:	428b      	cmp	r3, r1
 800806a:	bf01      	itttt	eq
 800806c:	6819      	ldreq	r1, [r3, #0]
 800806e:	685b      	ldreq	r3, [r3, #4]
 8008070:	1949      	addeq	r1, r1, r5
 8008072:	6021      	streq	r1, [r4, #0]
 8008074:	e7ed      	b.n	8008052 <_free_r+0x22>
 8008076:	461a      	mov	r2, r3
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	b10b      	cbz	r3, 8008080 <_free_r+0x50>
 800807c:	42a3      	cmp	r3, r4
 800807e:	d9fa      	bls.n	8008076 <_free_r+0x46>
 8008080:	6811      	ldr	r1, [r2, #0]
 8008082:	1855      	adds	r5, r2, r1
 8008084:	42a5      	cmp	r5, r4
 8008086:	d10b      	bne.n	80080a0 <_free_r+0x70>
 8008088:	6824      	ldr	r4, [r4, #0]
 800808a:	4421      	add	r1, r4
 800808c:	1854      	adds	r4, r2, r1
 800808e:	42a3      	cmp	r3, r4
 8008090:	6011      	str	r1, [r2, #0]
 8008092:	d1e0      	bne.n	8008056 <_free_r+0x26>
 8008094:	681c      	ldr	r4, [r3, #0]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	6053      	str	r3, [r2, #4]
 800809a:	4421      	add	r1, r4
 800809c:	6011      	str	r1, [r2, #0]
 800809e:	e7da      	b.n	8008056 <_free_r+0x26>
 80080a0:	d902      	bls.n	80080a8 <_free_r+0x78>
 80080a2:	230c      	movs	r3, #12
 80080a4:	6003      	str	r3, [r0, #0]
 80080a6:	e7d6      	b.n	8008056 <_free_r+0x26>
 80080a8:	6825      	ldr	r5, [r4, #0]
 80080aa:	1961      	adds	r1, r4, r5
 80080ac:	428b      	cmp	r3, r1
 80080ae:	bf04      	itt	eq
 80080b0:	6819      	ldreq	r1, [r3, #0]
 80080b2:	685b      	ldreq	r3, [r3, #4]
 80080b4:	6063      	str	r3, [r4, #4]
 80080b6:	bf04      	itt	eq
 80080b8:	1949      	addeq	r1, r1, r5
 80080ba:	6021      	streq	r1, [r4, #0]
 80080bc:	6054      	str	r4, [r2, #4]
 80080be:	e7ca      	b.n	8008056 <_free_r+0x26>
 80080c0:	b003      	add	sp, #12
 80080c2:	bd30      	pop	{r4, r5, pc}
 80080c4:	200041a0 	.word	0x200041a0

080080c8 <sbrk_aligned>:
 80080c8:	b570      	push	{r4, r5, r6, lr}
 80080ca:	4e0e      	ldr	r6, [pc, #56]	; (8008104 <sbrk_aligned+0x3c>)
 80080cc:	460c      	mov	r4, r1
 80080ce:	6831      	ldr	r1, [r6, #0]
 80080d0:	4605      	mov	r5, r0
 80080d2:	b911      	cbnz	r1, 80080da <sbrk_aligned+0x12>
 80080d4:	f000 f8bc 	bl	8008250 <_sbrk_r>
 80080d8:	6030      	str	r0, [r6, #0]
 80080da:	4621      	mov	r1, r4
 80080dc:	4628      	mov	r0, r5
 80080de:	f000 f8b7 	bl	8008250 <_sbrk_r>
 80080e2:	1c43      	adds	r3, r0, #1
 80080e4:	d00a      	beq.n	80080fc <sbrk_aligned+0x34>
 80080e6:	1cc4      	adds	r4, r0, #3
 80080e8:	f024 0403 	bic.w	r4, r4, #3
 80080ec:	42a0      	cmp	r0, r4
 80080ee:	d007      	beq.n	8008100 <sbrk_aligned+0x38>
 80080f0:	1a21      	subs	r1, r4, r0
 80080f2:	4628      	mov	r0, r5
 80080f4:	f000 f8ac 	bl	8008250 <_sbrk_r>
 80080f8:	3001      	adds	r0, #1
 80080fa:	d101      	bne.n	8008100 <sbrk_aligned+0x38>
 80080fc:	f04f 34ff 	mov.w	r4, #4294967295
 8008100:	4620      	mov	r0, r4
 8008102:	bd70      	pop	{r4, r5, r6, pc}
 8008104:	200041a4 	.word	0x200041a4

08008108 <_malloc_r>:
 8008108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800810c:	1ccd      	adds	r5, r1, #3
 800810e:	f025 0503 	bic.w	r5, r5, #3
 8008112:	3508      	adds	r5, #8
 8008114:	2d0c      	cmp	r5, #12
 8008116:	bf38      	it	cc
 8008118:	250c      	movcc	r5, #12
 800811a:	2d00      	cmp	r5, #0
 800811c:	4607      	mov	r7, r0
 800811e:	db01      	blt.n	8008124 <_malloc_r+0x1c>
 8008120:	42a9      	cmp	r1, r5
 8008122:	d905      	bls.n	8008130 <_malloc_r+0x28>
 8008124:	230c      	movs	r3, #12
 8008126:	603b      	str	r3, [r7, #0]
 8008128:	2600      	movs	r6, #0
 800812a:	4630      	mov	r0, r6
 800812c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008130:	4e2e      	ldr	r6, [pc, #184]	; (80081ec <_malloc_r+0xe4>)
 8008132:	f000 f89d 	bl	8008270 <__malloc_lock>
 8008136:	6833      	ldr	r3, [r6, #0]
 8008138:	461c      	mov	r4, r3
 800813a:	bb34      	cbnz	r4, 800818a <_malloc_r+0x82>
 800813c:	4629      	mov	r1, r5
 800813e:	4638      	mov	r0, r7
 8008140:	f7ff ffc2 	bl	80080c8 <sbrk_aligned>
 8008144:	1c43      	adds	r3, r0, #1
 8008146:	4604      	mov	r4, r0
 8008148:	d14d      	bne.n	80081e6 <_malloc_r+0xde>
 800814a:	6834      	ldr	r4, [r6, #0]
 800814c:	4626      	mov	r6, r4
 800814e:	2e00      	cmp	r6, #0
 8008150:	d140      	bne.n	80081d4 <_malloc_r+0xcc>
 8008152:	6823      	ldr	r3, [r4, #0]
 8008154:	4631      	mov	r1, r6
 8008156:	4638      	mov	r0, r7
 8008158:	eb04 0803 	add.w	r8, r4, r3
 800815c:	f000 f878 	bl	8008250 <_sbrk_r>
 8008160:	4580      	cmp	r8, r0
 8008162:	d13a      	bne.n	80081da <_malloc_r+0xd2>
 8008164:	6821      	ldr	r1, [r4, #0]
 8008166:	3503      	adds	r5, #3
 8008168:	1a6d      	subs	r5, r5, r1
 800816a:	f025 0503 	bic.w	r5, r5, #3
 800816e:	3508      	adds	r5, #8
 8008170:	2d0c      	cmp	r5, #12
 8008172:	bf38      	it	cc
 8008174:	250c      	movcc	r5, #12
 8008176:	4629      	mov	r1, r5
 8008178:	4638      	mov	r0, r7
 800817a:	f7ff ffa5 	bl	80080c8 <sbrk_aligned>
 800817e:	3001      	adds	r0, #1
 8008180:	d02b      	beq.n	80081da <_malloc_r+0xd2>
 8008182:	6823      	ldr	r3, [r4, #0]
 8008184:	442b      	add	r3, r5
 8008186:	6023      	str	r3, [r4, #0]
 8008188:	e00e      	b.n	80081a8 <_malloc_r+0xa0>
 800818a:	6822      	ldr	r2, [r4, #0]
 800818c:	1b52      	subs	r2, r2, r5
 800818e:	d41e      	bmi.n	80081ce <_malloc_r+0xc6>
 8008190:	2a0b      	cmp	r2, #11
 8008192:	d916      	bls.n	80081c2 <_malloc_r+0xba>
 8008194:	1961      	adds	r1, r4, r5
 8008196:	42a3      	cmp	r3, r4
 8008198:	6025      	str	r5, [r4, #0]
 800819a:	bf18      	it	ne
 800819c:	6059      	strne	r1, [r3, #4]
 800819e:	6863      	ldr	r3, [r4, #4]
 80081a0:	bf08      	it	eq
 80081a2:	6031      	streq	r1, [r6, #0]
 80081a4:	5162      	str	r2, [r4, r5]
 80081a6:	604b      	str	r3, [r1, #4]
 80081a8:	4638      	mov	r0, r7
 80081aa:	f104 060b 	add.w	r6, r4, #11
 80081ae:	f000 f865 	bl	800827c <__malloc_unlock>
 80081b2:	f026 0607 	bic.w	r6, r6, #7
 80081b6:	1d23      	adds	r3, r4, #4
 80081b8:	1af2      	subs	r2, r6, r3
 80081ba:	d0b6      	beq.n	800812a <_malloc_r+0x22>
 80081bc:	1b9b      	subs	r3, r3, r6
 80081be:	50a3      	str	r3, [r4, r2]
 80081c0:	e7b3      	b.n	800812a <_malloc_r+0x22>
 80081c2:	6862      	ldr	r2, [r4, #4]
 80081c4:	42a3      	cmp	r3, r4
 80081c6:	bf0c      	ite	eq
 80081c8:	6032      	streq	r2, [r6, #0]
 80081ca:	605a      	strne	r2, [r3, #4]
 80081cc:	e7ec      	b.n	80081a8 <_malloc_r+0xa0>
 80081ce:	4623      	mov	r3, r4
 80081d0:	6864      	ldr	r4, [r4, #4]
 80081d2:	e7b2      	b.n	800813a <_malloc_r+0x32>
 80081d4:	4634      	mov	r4, r6
 80081d6:	6876      	ldr	r6, [r6, #4]
 80081d8:	e7b9      	b.n	800814e <_malloc_r+0x46>
 80081da:	230c      	movs	r3, #12
 80081dc:	603b      	str	r3, [r7, #0]
 80081de:	4638      	mov	r0, r7
 80081e0:	f000 f84c 	bl	800827c <__malloc_unlock>
 80081e4:	e7a1      	b.n	800812a <_malloc_r+0x22>
 80081e6:	6025      	str	r5, [r4, #0]
 80081e8:	e7de      	b.n	80081a8 <_malloc_r+0xa0>
 80081ea:	bf00      	nop
 80081ec:	200041a0 	.word	0x200041a0

080081f0 <_realloc_r>:
 80081f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081f4:	4680      	mov	r8, r0
 80081f6:	4614      	mov	r4, r2
 80081f8:	460e      	mov	r6, r1
 80081fa:	b921      	cbnz	r1, 8008206 <_realloc_r+0x16>
 80081fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008200:	4611      	mov	r1, r2
 8008202:	f7ff bf81 	b.w	8008108 <_malloc_r>
 8008206:	b92a      	cbnz	r2, 8008214 <_realloc_r+0x24>
 8008208:	f7ff ff12 	bl	8008030 <_free_r>
 800820c:	4625      	mov	r5, r4
 800820e:	4628      	mov	r0, r5
 8008210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008214:	f000 f838 	bl	8008288 <_malloc_usable_size_r>
 8008218:	4284      	cmp	r4, r0
 800821a:	4607      	mov	r7, r0
 800821c:	d802      	bhi.n	8008224 <_realloc_r+0x34>
 800821e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008222:	d812      	bhi.n	800824a <_realloc_r+0x5a>
 8008224:	4621      	mov	r1, r4
 8008226:	4640      	mov	r0, r8
 8008228:	f7ff ff6e 	bl	8008108 <_malloc_r>
 800822c:	4605      	mov	r5, r0
 800822e:	2800      	cmp	r0, #0
 8008230:	d0ed      	beq.n	800820e <_realloc_r+0x1e>
 8008232:	42bc      	cmp	r4, r7
 8008234:	4622      	mov	r2, r4
 8008236:	4631      	mov	r1, r6
 8008238:	bf28      	it	cs
 800823a:	463a      	movcs	r2, r7
 800823c:	f7ff fbb8 	bl	80079b0 <memcpy>
 8008240:	4631      	mov	r1, r6
 8008242:	4640      	mov	r0, r8
 8008244:	f7ff fef4 	bl	8008030 <_free_r>
 8008248:	e7e1      	b.n	800820e <_realloc_r+0x1e>
 800824a:	4635      	mov	r5, r6
 800824c:	e7df      	b.n	800820e <_realloc_r+0x1e>
	...

08008250 <_sbrk_r>:
 8008250:	b538      	push	{r3, r4, r5, lr}
 8008252:	4d06      	ldr	r5, [pc, #24]	; (800826c <_sbrk_r+0x1c>)
 8008254:	2300      	movs	r3, #0
 8008256:	4604      	mov	r4, r0
 8008258:	4608      	mov	r0, r1
 800825a:	602b      	str	r3, [r5, #0]
 800825c:	f7f9 fd92 	bl	8001d84 <_sbrk>
 8008260:	1c43      	adds	r3, r0, #1
 8008262:	d102      	bne.n	800826a <_sbrk_r+0x1a>
 8008264:	682b      	ldr	r3, [r5, #0]
 8008266:	b103      	cbz	r3, 800826a <_sbrk_r+0x1a>
 8008268:	6023      	str	r3, [r4, #0]
 800826a:	bd38      	pop	{r3, r4, r5, pc}
 800826c:	200041a8 	.word	0x200041a8

08008270 <__malloc_lock>:
 8008270:	4801      	ldr	r0, [pc, #4]	; (8008278 <__malloc_lock+0x8>)
 8008272:	f000 b811 	b.w	8008298 <__retarget_lock_acquire_recursive>
 8008276:	bf00      	nop
 8008278:	200041ac 	.word	0x200041ac

0800827c <__malloc_unlock>:
 800827c:	4801      	ldr	r0, [pc, #4]	; (8008284 <__malloc_unlock+0x8>)
 800827e:	f000 b80c 	b.w	800829a <__retarget_lock_release_recursive>
 8008282:	bf00      	nop
 8008284:	200041ac 	.word	0x200041ac

08008288 <_malloc_usable_size_r>:
 8008288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800828c:	1f18      	subs	r0, r3, #4
 800828e:	2b00      	cmp	r3, #0
 8008290:	bfbc      	itt	lt
 8008292:	580b      	ldrlt	r3, [r1, r0]
 8008294:	18c0      	addlt	r0, r0, r3
 8008296:	4770      	bx	lr

08008298 <__retarget_lock_acquire_recursive>:
 8008298:	4770      	bx	lr

0800829a <__retarget_lock_release_recursive>:
 800829a:	4770      	bx	lr

0800829c <_init>:
 800829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829e:	bf00      	nop
 80082a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082a2:	bc08      	pop	{r3}
 80082a4:	469e      	mov	lr, r3
 80082a6:	4770      	bx	lr

080082a8 <_fini>:
 80082a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082aa:	bf00      	nop
 80082ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ae:	bc08      	pop	{r3}
 80082b0:	469e      	mov	lr, r3
 80082b2:	4770      	bx	lr
