
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bb4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08004d54  08004d54  00014d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ec8  08004ec8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004ec8  08004ec8  00014ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ed0  08004ed0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ed0  08004ed0  00014ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ed4  08004ed4  00014ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004ed8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040a8  20000074  08004f4c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000411c  08004f4c  0002411c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012245  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002934  00000000  00000000  000322e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  00034c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f98  00000000  00000000  00035cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017548  00000000  00000000  00036c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011cab  00000000  00000000  0004e1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095c62  00000000  00000000  0005fe4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f5aad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048e8  00000000  00000000  000f5b00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004d3c 	.word	0x08004d3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08004d3c 	.word	0x08004d3c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000594:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <vApplicationGetIdleTaskMemory+0x30>)
 800059a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2280      	movs	r2, #128	; 0x80
 80005a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000090 	.word	0x20000090
 80005b4:	200000e4 	.word	0x200000e4

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b5b0      	push	{r4, r5, r7, lr}
 80005ba:	b0b2      	sub	sp, #200	; 0xc8
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005be:	f000 fbeb 	bl	8000d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c2:	f000 f8a9 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c6:	f000 f947 	bl	8000858 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ca:	f000 f91b 	bl	8000804 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80005ce:	f000 f90d 	bl	80007ec <MX_NVIC_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ImuTask */
  osThreadDef(ImuTask, StartImuTask, osPriorityNormal, 0, 128);
 80005d2:	4b43      	ldr	r3, [pc, #268]	; (80006e0 <main+0x128>)
 80005d4:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 80005d8:	461d      	mov	r5, r3
 80005da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ImuTaskHandle = osThreadCreate(osThread(ImuTask), NULL);
 80005e6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f002 fa1c 	bl	8002a2a <osThreadCreate>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a3b      	ldr	r2, [pc, #236]	; (80006e4 <main+0x12c>)
 80005f6:	6013      	str	r3, [r2, #0]

  /* definition and creation of GpsTask */
  osThreadDef(GpsTask, StartGpsTask, osPriorityLow, 0, 128);
 80005f8:	4b3b      	ldr	r3, [pc, #236]	; (80006e8 <main+0x130>)
 80005fa:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80005fe:	461d      	mov	r5, r3
 8000600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000604:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000608:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GpsTaskHandle = osThreadCreate(osThread(GpsTask), NULL);
 800060c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f002 fa09 	bl	8002a2a <osThreadCreate>
 8000618:	4603      	mov	r3, r0
 800061a:	4a34      	ldr	r2, [pc, #208]	; (80006ec <main+0x134>)
 800061c:	6013      	str	r3, [r2, #0]

  /* definition and creation of KFTask */
  osThreadDef(KFTask, StartKFTask, osPriorityLow, 0, 128);
 800061e:	4b34      	ldr	r3, [pc, #208]	; (80006f0 <main+0x138>)
 8000620:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000624:	461d      	mov	r5, r3
 8000626:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000628:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800062e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  KFTaskHandle = osThreadCreate(osThread(KFTask), NULL);
 8000632:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f002 f9f6 	bl	8002a2a <osThreadCreate>
 800063e:	4603      	mov	r3, r0
 8000640:	4a2c      	ldr	r2, [pc, #176]	; (80006f4 <main+0x13c>)
 8000642:	6013      	str	r3, [r2, #0]

  /* definition and creation of RadarTask */
  osThreadDef(RadarTask, StartRadarTask, osPriorityLow, 0, 128);
 8000644:	4b2c      	ldr	r3, [pc, #176]	; (80006f8 <main+0x140>)
 8000646:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800064a:	461d      	mov	r5, r3
 800064c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000650:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000654:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RadarTaskHandle = osThreadCreate(osThread(RadarTask), NULL);
 8000658:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f002 f9e3 	bl	8002a2a <osThreadCreate>
 8000664:	4603      	mov	r3, r0
 8000666:	4a25      	ldr	r2, [pc, #148]	; (80006fc <main+0x144>)
 8000668:	6013      	str	r3, [r2, #0]

  /* definition and creation of UartTask */
  osThreadDef(UartTask, StartUartTask, osPriorityLow, 0, 128);
 800066a:	4b25      	ldr	r3, [pc, #148]	; (8000700 <main+0x148>)
 800066c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000670:	461d      	mov	r5, r3
 8000672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000676:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800067a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UartTaskHandle = osThreadCreate(osThread(UartTask), NULL);
 800067e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f002 f9d0 	bl	8002a2a <osThreadCreate>
 800068a:	4603      	mov	r3, r0
 800068c:	4a1d      	ldr	r2, [pc, #116]	; (8000704 <main+0x14c>)
 800068e:	6013      	str	r3, [r2, #0]

  /* definition and creation of ExButtonIntTask */
  osThreadDef(ExButtonIntTask, StartExButtonIntTask, osPriorityHigh, 0, 128);
 8000690:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <main+0x150>)
 8000692:	f107 0420 	add.w	r4, r7, #32
 8000696:	461d      	mov	r5, r3
 8000698:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800069a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800069c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ExButtonIntTaskHandle = osThreadCreate(osThread(ExButtonIntTask), NULL);
 80006a4:	f107 0320 	add.w	r3, r7, #32
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f002 f9bd 	bl	8002a2a <osThreadCreate>
 80006b0:	4603      	mov	r3, r0
 80006b2:	4a16      	ldr	r2, [pc, #88]	; (800070c <main+0x154>)
 80006b4:	6013      	str	r3, [r2, #0]

  /* definition and creation of LcdTask */
  osThreadDef(LcdTask, StartLcdTask, osPriorityLow, 0, 128);
 80006b6:	4b16      	ldr	r3, [pc, #88]	; (8000710 <main+0x158>)
 80006b8:	1d3c      	adds	r4, r7, #4
 80006ba:	461d      	mov	r5, r3
 80006bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LcdTaskHandle = osThreadCreate(osThread(LcdTask), NULL);
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f002 f9ac 	bl	8002a2a <osThreadCreate>
 80006d2:	4603      	mov	r3, r0
 80006d4:	4a0f      	ldr	r2, [pc, #60]	; (8000714 <main+0x15c>)
 80006d6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006d8:	f002 f9a0 	bl	8002a1c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <main+0x124>
 80006de:	bf00      	nop
 80006e0:	08004d9c 	.word	0x08004d9c
 80006e4:	2000034c 	.word	0x2000034c
 80006e8:	08004db8 	.word	0x08004db8
 80006ec:	20000350 	.word	0x20000350
 80006f0:	08004dd4 	.word	0x08004dd4
 80006f4:	20000354 	.word	0x20000354
 80006f8:	08004df0 	.word	0x08004df0
 80006fc:	20000358 	.word	0x20000358
 8000700:	08004e0c 	.word	0x08004e0c
 8000704:	2000035c 	.word	0x2000035c
 8000708:	08004e28 	.word	0x08004e28
 800070c:	20000360 	.word	0x20000360
 8000710:	08004e44 	.word	0x08004e44
 8000714:	20000364 	.word	0x20000364

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b094      	sub	sp, #80	; 0x50
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0320 	add.w	r3, r7, #32
 8000722:	2230      	movs	r2, #48	; 0x30
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f003 fea0 	bl	800446c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800073c:	2300      	movs	r3, #0
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	4b28      	ldr	r3, [pc, #160]	; (80007e4 <SystemClock_Config+0xcc>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	4a27      	ldr	r2, [pc, #156]	; (80007e4 <SystemClock_Config+0xcc>)
 8000746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074a:	6413      	str	r3, [r2, #64]	; 0x40
 800074c:	4b25      	ldr	r3, [pc, #148]	; (80007e4 <SystemClock_Config+0xcc>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000758:	2300      	movs	r3, #0
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <SystemClock_Config+0xd0>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a21      	ldr	r2, [pc, #132]	; (80007e8 <SystemClock_Config+0xd0>)
 8000762:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <SystemClock_Config+0xd0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000774:	2302      	movs	r3, #2
 8000776:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000778:	2301      	movs	r3, #1
 800077a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077c:	2310      	movs	r3, #16
 800077e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000780:	2302      	movs	r3, #2
 8000782:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000784:	2300      	movs	r3, #0
 8000786:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000788:	2310      	movs	r3, #16
 800078a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800078c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000790:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000792:	2304      	movs	r3, #4
 8000794:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000796:	2304      	movs	r3, #4
 8000798:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079a:	f107 0320 	add.w	r3, r7, #32
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 fe06 	bl	80013b0 <HAL_RCC_OscConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007aa:	f000 f985 	bl	8000ab8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ae:	230f      	movs	r3, #15
 80007b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b2:	2302      	movs	r3, #2
 80007b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	2102      	movs	r1, #2
 80007ca:	4618      	mov	r0, r3
 80007cc:	f001 f868 	bl	80018a0 <HAL_RCC_ClockConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007d6:	f000 f96f 	bl	8000ab8 <Error_Handler>
  }
}
 80007da:	bf00      	nop
 80007dc:	3750      	adds	r7, #80	; 0x50
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40007000 	.word	0x40007000

080007ec <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2105      	movs	r1, #5
 80007f4:	2028      	movs	r0, #40	; 0x28
 80007f6:	f000 fbc9 	bl	8000f8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007fa:	2028      	movs	r0, #40	; 0x28
 80007fc:	f000 fbe2 	bl	8000fc4 <HAL_NVIC_EnableIRQ>
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}

08000804 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800080a:	4a12      	ldr	r2, [pc, #72]	; (8000854 <MX_USART2_UART_Init+0x50>)
 800080c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000810:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000814:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800083c:	f001 fd02 	bl	8002244 <HAL_UART_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000846:	f000 f937 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200002e4 	.word	0x200002e4
 8000854:	40004400 	.word	0x40004400

08000858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	4b3f      	ldr	r3, [pc, #252]	; (8000970 <MX_GPIO_Init+0x118>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a3e      	ldr	r2, [pc, #248]	; (8000970 <MX_GPIO_Init+0x118>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b3c      	ldr	r3, [pc, #240]	; (8000970 <MX_GPIO_Init+0x118>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	4b38      	ldr	r3, [pc, #224]	; (8000970 <MX_GPIO_Init+0x118>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a37      	ldr	r2, [pc, #220]	; (8000970 <MX_GPIO_Init+0x118>)
 8000894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b35      	ldr	r3, [pc, #212]	; (8000970 <MX_GPIO_Init+0x118>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	4b31      	ldr	r3, [pc, #196]	; (8000970 <MX_GPIO_Init+0x118>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a30      	ldr	r2, [pc, #192]	; (8000970 <MX_GPIO_Init+0x118>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b2e      	ldr	r3, [pc, #184]	; (8000970 <MX_GPIO_Init+0x118>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b2a      	ldr	r3, [pc, #168]	; (8000970 <MX_GPIO_Init+0x118>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a29      	ldr	r2, [pc, #164]	; (8000970 <MX_GPIO_Init+0x118>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b27      	ldr	r3, [pc, #156]	; (8000970 <MX_GPIO_Init+0x118>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2120      	movs	r1, #32
 80008e2:	4824      	ldr	r0, [pc, #144]	; (8000974 <MX_GPIO_Init+0x11c>)
 80008e4:	f000 fd18 	bl	8001318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, YellowLed_Pin|RedLed_Pin|GreenLed_Pin|BlueLed_Pin, GPIO_PIN_RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	f24e 0102 	movw	r1, #57346	; 0xe002
 80008ee:	4822      	ldr	r0, [pc, #136]	; (8000978 <MX_GPIO_Init+0x120>)
 80008f0:	f000 fd12 	bl	8001318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008fa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	481c      	ldr	r0, [pc, #112]	; (800097c <MX_GPIO_Init+0x124>)
 800090c:	f000 fb68 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000910:	2320      	movs	r3, #32
 8000912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4619      	mov	r1, r3
 8000926:	4813      	ldr	r0, [pc, #76]	; (8000974 <MX_GPIO_Init+0x11c>)
 8000928:	f000 fb5a 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : YellowLed_Pin RedLed_Pin GreenLed_Pin BlueLed_Pin */
  GPIO_InitStruct.Pin = YellowLed_Pin|RedLed_Pin|GreenLed_Pin|BlueLed_Pin;
 800092c:	f24e 0302 	movw	r3, #57346	; 0xe002
 8000930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4619      	mov	r1, r3
 8000944:	480c      	ldr	r0, [pc, #48]	; (8000978 <MX_GPIO_Init+0x120>)
 8000946:	f000 fb4b 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ExButton_Pin */
  GPIO_InitStruct.Pin = ExButton_Pin;
 800094a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000950:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ExButton_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4619      	mov	r1, r3
 8000960:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_GPIO_Init+0x120>)
 8000962:	f000 fb3d 	bl	8000fe0 <HAL_GPIO_Init>

}
 8000966:	bf00      	nop
 8000968:	3728      	adds	r7, #40	; 0x28
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800
 8000974:	40020000 	.word	0x40020000
 8000978:	40020400 	.word	0x40020400
 800097c:	40020800 	.word	0x40020800

08000980 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// overwrite the HAL_GPIO_EXTI_Callback function
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == ExButton_Pin) {
 800098a:	88fb      	ldrh	r3, [r7, #6]
 800098c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000990:	d105      	bne.n	800099e <HAL_GPIO_EXTI_Callback+0x1e>
  	osSignalSet(ExButtonIntTaskHandle, SIGNAL_BUTTON_PRESS);
 8000992:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <HAL_GPIO_EXTI_Callback+0x3c>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2101      	movs	r1, #1
 8000998:	4618      	mov	r0, r3
 800099a:	f002 f8a7 	bl	8002aec <osSignalSet>
  }
  if(GPIO_Pin == B1_Pin) {
 800099e:	88fb      	ldrh	r3, [r7, #6]
 80009a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009a4:	d105      	bne.n	80009b2 <HAL_GPIO_EXTI_Callback+0x32>
  	osSignalSet(ExButtonIntTaskHandle, SIGNAL_BUTTON_PRESS);
 80009a6:	4b05      	ldr	r3, [pc, #20]	; (80009bc <HAL_GPIO_EXTI_Callback+0x3c>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2101      	movs	r1, #1
 80009ac:	4618      	mov	r0, r3
 80009ae:	f002 f89d 	bl	8002aec <osSignalSet>
  }
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000360 	.word	0x20000360

080009c0 <StartImuTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartImuTask */
void StartImuTask(void const * argument)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009c8:	2001      	movs	r0, #1
 80009ca:	f002 f87a 	bl	8002ac2 <osDelay>
 80009ce:	e7fb      	b.n	80009c8 <StartImuTask+0x8>

080009d0 <StartGpsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGpsTask */
void StartGpsTask(void const * argument)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGpsTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009d8:	2001      	movs	r0, #1
 80009da:	f002 f872 	bl	8002ac2 <osDelay>
 80009de:	e7fb      	b.n	80009d8 <StartGpsTask+0x8>

080009e0 <StartKFTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartKFTask */
void StartKFTask(void const * argument)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartKFTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009e8:	2001      	movs	r0, #1
 80009ea:	f002 f86a 	bl	8002ac2 <osDelay>
 80009ee:	e7fb      	b.n	80009e8 <StartKFTask+0x8>

080009f0 <StartRadarTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRadarTask */
void StartRadarTask(void const * argument)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRadarTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009f8:	2001      	movs	r0, #1
 80009fa:	f002 f862 	bl	8002ac2 <osDelay>
 80009fe:	e7fb      	b.n	80009f8 <StartRadarTask+0x8>

08000a00 <StartUartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUartTask */
void StartUartTask(void const * argument)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUartTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f002 f85a 	bl	8002ac2 <osDelay>
 8000a0e:	e7fb      	b.n	8000a08 <StartUartTask+0x8>

08000a10 <StartExButtonIntTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartExButtonIntTask */
void StartExButtonIntTask(void const * argument)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartExButtonIntTask */
  /* Infinite loop */
  for(;;)
  {
  	// print to uart
  	sprintf(MSG, "Button pressed...\r\n");
 8000a18:	4916      	ldr	r1, [pc, #88]	; (8000a74 <StartExButtonIntTask+0x64>)
 8000a1a:	4817      	ldr	r0, [pc, #92]	; (8000a78 <StartExButtonIntTask+0x68>)
 8000a1c:	f003 fd2e 	bl	800447c <siprintf>
  //	HAL_StatusTypeDef HAL_UART_Transmit (UART_HandleTypeDef * huart, uint8_t * pData, uint16_t Size, uint32_t Timeout)
  	HAL_UART_Transmit(&huart2, (uint8_t*) MSG, sizeof(MSG), 100);
 8000a20:	2364      	movs	r3, #100	; 0x64
 8000a22:	2223      	movs	r2, #35	; 0x23
 8000a24:	4914      	ldr	r1, [pc, #80]	; (8000a78 <StartExButtonIntTask+0x68>)
 8000a26:	4815      	ldr	r0, [pc, #84]	; (8000a7c <StartExButtonIntTask+0x6c>)
 8000a28:	f001 fc59 	bl	80022de <HAL_UART_Transmit>

  	//wait for signal
  	osSignalWait(SIGNAL_BUTTON_PRESS, osWaitForever);
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8000a32:	2101      	movs	r1, #1
 8000a34:	4618      	mov	r0, r3
 8000a36:	f002 f899 	bl	8002b6c <osSignalWait>
  	// toggle led
  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000a3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a3e:	4810      	ldr	r0, [pc, #64]	; (8000a80 <StartExButtonIntTask+0x70>)
 8000a40:	f000 fc83 	bl	800134a <HAL_GPIO_TogglePin>
	  GPIO_PinState red_trig = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8000a44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a48:	480d      	ldr	r0, [pc, #52]	; (8000a80 <StartExButtonIntTask+0x70>)
 8000a4a:	f000 fc4d 	bl	80012e8 <HAL_GPIO_ReadPin>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	77fb      	strb	r3, [r7, #31]
	  if (red_trig == GPIO_PIN_SET){
 8000a52:	7ffb      	ldrb	r3, [r7, #31]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d106      	bne.n	8000a66 <StartExButtonIntTask+0x56>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a5e:	4808      	ldr	r0, [pc, #32]	; (8000a80 <StartExButtonIntTask+0x70>)
 8000a60:	f000 fc5a 	bl	8001318 <HAL_GPIO_WritePin>
 8000a64:	e7d8      	b.n	8000a18 <StartExButtonIntTask+0x8>
	  } else {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000a66:	2201      	movs	r2, #1
 8000a68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a6c:	4804      	ldr	r0, [pc, #16]	; (8000a80 <StartExButtonIntTask+0x70>)
 8000a6e:	f000 fc53 	bl	8001318 <HAL_GPIO_WritePin>
  {
 8000a72:	e7d1      	b.n	8000a18 <StartExButtonIntTask+0x8>
 8000a74:	08004e60 	.word	0x08004e60
 8000a78:	20000328 	.word	0x20000328
 8000a7c:	200002e4 	.word	0x200002e4
 8000a80:	40020400 	.word	0x40020400

08000a84 <StartLcdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLcdTask */
void StartLcdTask(void const * argument)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLcdTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	f002 f818 	bl	8002ac2 <osDelay>
 8000a92:	e7fb      	b.n	8000a8c <StartLcdTask+0x8>

08000a94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d101      	bne.n	8000aaa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aa6:	f000 f999 	bl	8000ddc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40014400 	.word	0x40014400

08000ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000abc:	b672      	cpsid	i
}
 8000abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <Error_Handler+0x8>
	...

08000ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <HAL_MspInit+0x54>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	4a11      	ldr	r2, [pc, #68]	; (8000b18 <HAL_MspInit+0x54>)
 8000ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ada:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <HAL_MspInit+0x54>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <HAL_MspInit+0x54>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <HAL_MspInit+0x54>)
 8000af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af4:	6413      	str	r3, [r2, #64]	; 0x40
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <HAL_MspInit+0x54>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	210f      	movs	r1, #15
 8000b06:	f06f 0001 	mvn.w	r0, #1
 8000b0a:	f000 fa3f 	bl	8000f8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800

08000b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	; 0x28
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a19      	ldr	r2, [pc, #100]	; (8000ba0 <HAL_UART_MspInit+0x84>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d12b      	bne.n	8000b96 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <HAL_UART_MspInit+0x88>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	4a17      	ldr	r2, [pc, #92]	; (8000ba4 <HAL_UART_MspInit+0x88>)
 8000b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4e:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <HAL_UART_MspInit+0x88>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <HAL_UART_MspInit+0x88>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a10      	ldr	r2, [pc, #64]	; (8000ba4 <HAL_UART_MspInit+0x88>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <HAL_UART_MspInit+0x88>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b76:	230c      	movs	r3, #12
 8000b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b82:	2303      	movs	r3, #3
 8000b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b86:	2307      	movs	r3, #7
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <HAL_UART_MspInit+0x8c>)
 8000b92:	f000 fa25 	bl	8000fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b96:	bf00      	nop
 8000b98:	3728      	adds	r7, #40	; 0x28
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40004400 	.word	0x40004400
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020000 	.word	0x40020000

08000bac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08c      	sub	sp, #48	; 0x30
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	2019      	movs	r0, #25
 8000bc2:	f000 f9e3 	bl	8000f8c <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000bc6:	2019      	movs	r0, #25
 8000bc8:	f000 f9fc 	bl	8000fc4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <HAL_InitTick+0xa0>)
 8000bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd4:	4a1d      	ldr	r2, [pc, #116]	; (8000c4c <HAL_InitTick+0xa0>)
 8000bd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bda:	6453      	str	r3, [r2, #68]	; 0x44
 8000bdc:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <HAL_InitTick+0xa0>)
 8000bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000be8:	f107 0210 	add.w	r2, r7, #16
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4611      	mov	r1, r2
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f001 f874 	bl	8001ce0 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000bf8:	f001 f85e 	bl	8001cb8 <HAL_RCC_GetPCLK2Freq>
 8000bfc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c00:	4a13      	ldr	r2, [pc, #76]	; (8000c50 <HAL_InitTick+0xa4>)
 8000c02:	fba2 2303 	umull	r2, r3, r2, r3
 8000c06:	0c9b      	lsrs	r3, r3, #18
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <HAL_InitTick+0xa8>)
 8000c0e:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <HAL_InitTick+0xac>)
 8000c10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <HAL_InitTick+0xa8>)
 8000c14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c18:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000c1a:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <HAL_InitTick+0xa8>)
 8000c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c1e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <HAL_InitTick+0xa8>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <HAL_InitTick+0xa8>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8000c2c:	4809      	ldr	r0, [pc, #36]	; (8000c54 <HAL_InitTick+0xa8>)
 8000c2e:	f001 f889 	bl	8001d44 <HAL_TIM_Base_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d104      	bne.n	8000c42 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8000c38:	4806      	ldr	r0, [pc, #24]	; (8000c54 <HAL_InitTick+0xa8>)
 8000c3a:	f001 f8dd 	bl	8001df8 <HAL_TIM_Base_Start_IT>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	e000      	b.n	8000c44 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3730      	adds	r7, #48	; 0x30
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	431bde83 	.word	0x431bde83
 8000c54:	20000368 	.word	0x20000368
 8000c58:	40014400 	.word	0x40014400

08000c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <NMI_Handler+0x4>

08000c62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c66:	e7fe      	b.n	8000c66 <HardFault_Handler+0x4>

08000c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <MemManage_Handler+0x4>

08000c6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <BusFault_Handler+0x4>

08000c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <UsageFault_Handler+0x4>

08000c7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c8e:	f001 f915 	bl	8001ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000368 	.word	0x20000368

08000c9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ExButton_Pin);
 8000ca0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000ca4:	f000 fb6c 	bl	8001380 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ca8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cac:	f000 fb68 	bl	8001380 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cbc:	4a14      	ldr	r2, [pc, #80]	; (8000d10 <_sbrk+0x5c>)
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <_sbrk+0x60>)
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc8:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <_sbrk+0x64>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d102      	bne.n	8000cd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <_sbrk+0x64>)
 8000cd2:	4a12      	ldr	r2, [pc, #72]	; (8000d1c <_sbrk+0x68>)
 8000cd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <_sbrk+0x64>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d207      	bcs.n	8000cf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ce4:	f003 fb8a 	bl	80043fc <__errno>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	220c      	movs	r2, #12
 8000cec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cee:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf2:	e009      	b.n	8000d08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <_sbrk+0x64>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	4a05      	ldr	r2, [pc, #20]	; (8000d18 <_sbrk+0x64>)
 8000d04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d06:	68fb      	ldr	r3, [r7, #12]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20020000 	.word	0x20020000
 8000d14:	00000400 	.word	0x00000400
 8000d18:	200003b0 	.word	0x200003b0
 8000d1c:	20004120 	.word	0x20004120

08000d20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <SystemInit+0x20>)
 8000d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d2a:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <SystemInit+0x20>)
 8000d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d48:	480d      	ldr	r0, [pc, #52]	; (8000d80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d4a:	490e      	ldr	r1, [pc, #56]	; (8000d84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d4c:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d50:	e002      	b.n	8000d58 <LoopCopyDataInit>

08000d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d56:	3304      	adds	r3, #4

08000d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d5c:	d3f9      	bcc.n	8000d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5e:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d60:	4c0b      	ldr	r4, [pc, #44]	; (8000d90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d64:	e001      	b.n	8000d6a <LoopFillZerobss>

08000d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d68:	3204      	adds	r2, #4

08000d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d6c:	d3fb      	bcc.n	8000d66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d6e:	f7ff ffd7 	bl	8000d20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d72:	f003 fb49 	bl	8004408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d76:	f7ff fc1f 	bl	80005b8 <main>
  bx  lr    
 8000d7a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d84:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d88:	08004ed8 	.word	0x08004ed8
  ldr r2, =_sbss
 8000d8c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d90:	2000411c 	.word	0x2000411c

08000d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC_IRQHandler>
	...

08000d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <HAL_Init+0x40>)
 8000da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <HAL_Init+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <HAL_Init+0x40>)
 8000dae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <HAL_Init+0x40>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <HAL_Init+0x40>)
 8000dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f000 f8d8 	bl	8000f76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc6:	200f      	movs	r0, #15
 8000dc8:	f7ff fef0 	bl	8000bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dcc:	f7ff fe7a 	bl	8000ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40023c00 	.word	0x40023c00

08000ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_IncTick+0x20>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_IncTick+0x24>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <HAL_IncTick+0x24>)
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	200003b4 	.word	0x200003b4

08000e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return uwTick;
 8000e08:	4b03      	ldr	r3, [pc, #12]	; (8000e18 <HAL_GetTick+0x14>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	200003b4 	.word	0x200003b4

08000e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4e:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	60d3      	str	r3, [r2, #12]
}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <__NVIC_GetPriorityGrouping+0x18>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	0a1b      	lsrs	r3, r3, #8
 8000e6e:	f003 0307 	and.w	r3, r3, #7
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	db0b      	blt.n	8000eaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	f003 021f 	and.w	r2, r3, #31
 8000e98:	4907      	ldr	r1, [pc, #28]	; (8000eb8 <__NVIC_EnableIRQ+0x38>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	095b      	lsrs	r3, r3, #5
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000e100 	.word	0xe000e100

08000ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	db0a      	blt.n	8000ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	490c      	ldr	r1, [pc, #48]	; (8000f08 <__NVIC_SetPriority+0x4c>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	0112      	lsls	r2, r2, #4
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	440b      	add	r3, r1
 8000ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee4:	e00a      	b.n	8000efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4908      	ldr	r1, [pc, #32]	; (8000f0c <__NVIC_SetPriority+0x50>)
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	f003 030f 	and.w	r3, r3, #15
 8000ef2:	3b04      	subs	r3, #4
 8000ef4:	0112      	lsls	r2, r2, #4
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	440b      	add	r3, r1
 8000efa:	761a      	strb	r2, [r3, #24]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000e100 	.word	0xe000e100
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f1c3 0307 	rsb	r3, r3, #7
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	bf28      	it	cs
 8000f2e:	2304      	movcs	r3, #4
 8000f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3304      	adds	r3, #4
 8000f36:	2b06      	cmp	r3, #6
 8000f38:	d902      	bls.n	8000f40 <NVIC_EncodePriority+0x30>
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3b03      	subs	r3, #3
 8000f3e:	e000      	b.n	8000f42 <NVIC_EncodePriority+0x32>
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	f04f 32ff 	mov.w	r2, #4294967295
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	401a      	ands	r2, r3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f58:	f04f 31ff 	mov.w	r1, #4294967295
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	43d9      	mvns	r1, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	4313      	orrs	r3, r2
         );
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3724      	adds	r7, #36	; 0x24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff ff4c 	bl	8000e1c <__NVIC_SetPriorityGrouping>
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f9e:	f7ff ff61 	bl	8000e64 <__NVIC_GetPriorityGrouping>
 8000fa2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	68b9      	ldr	r1, [r7, #8]
 8000fa8:	6978      	ldr	r0, [r7, #20]
 8000faa:	f7ff ffb1 	bl	8000f10 <NVIC_EncodePriority>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff ff80 	bl	8000ebc <__NVIC_SetPriority>
}
 8000fbc:	bf00      	nop
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff ff54 	bl	8000e80 <__NVIC_EnableIRQ>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
 8000ffa:	e159      	b.n	80012b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	697a      	ldr	r2, [r7, #20]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	429a      	cmp	r2, r3
 8001016:	f040 8148 	bne.w	80012aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	2b01      	cmp	r3, #1
 8001024:	d005      	beq.n	8001032 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800102e:	2b02      	cmp	r3, #2
 8001030:	d130      	bne.n	8001094 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	2203      	movs	r2, #3
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	68da      	ldr	r2, [r3, #12]
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001068:	2201      	movs	r2, #1
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	091b      	lsrs	r3, r3, #4
 800107e:	f003 0201 	and.w	r2, r3, #1
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	2b03      	cmp	r3, #3
 800109e:	d017      	beq.n	80010d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	2203      	movs	r2, #3
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0303 	and.w	r3, r3, #3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d123      	bne.n	8001124 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	08da      	lsrs	r2, r3, #3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3208      	adds	r2, #8
 80010e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	f003 0307 	and.w	r3, r3, #7
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	220f      	movs	r2, #15
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	691a      	ldr	r2, [r3, #16]
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	08da      	lsrs	r2, r3, #3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3208      	adds	r2, #8
 800111e:	69b9      	ldr	r1, [r7, #24]
 8001120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	2203      	movs	r2, #3
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0203 	and.w	r2, r3, #3
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001160:	2b00      	cmp	r3, #0
 8001162:	f000 80a2 	beq.w	80012aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	4b57      	ldr	r3, [pc, #348]	; (80012c8 <HAL_GPIO_Init+0x2e8>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	4a56      	ldr	r2, [pc, #344]	; (80012c8 <HAL_GPIO_Init+0x2e8>)
 8001170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001174:	6453      	str	r3, [r2, #68]	; 0x44
 8001176:	4b54      	ldr	r3, [pc, #336]	; (80012c8 <HAL_GPIO_Init+0x2e8>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001182:	4a52      	ldr	r2, [pc, #328]	; (80012cc <HAL_GPIO_Init+0x2ec>)
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	089b      	lsrs	r3, r3, #2
 8001188:	3302      	adds	r3, #2
 800118a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f003 0303 	and.w	r3, r3, #3
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	220f      	movs	r2, #15
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a49      	ldr	r2, [pc, #292]	; (80012d0 <HAL_GPIO_Init+0x2f0>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d019      	beq.n	80011e2 <HAL_GPIO_Init+0x202>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a48      	ldr	r2, [pc, #288]	; (80012d4 <HAL_GPIO_Init+0x2f4>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d013      	beq.n	80011de <HAL_GPIO_Init+0x1fe>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a47      	ldr	r2, [pc, #284]	; (80012d8 <HAL_GPIO_Init+0x2f8>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d00d      	beq.n	80011da <HAL_GPIO_Init+0x1fa>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a46      	ldr	r2, [pc, #280]	; (80012dc <HAL_GPIO_Init+0x2fc>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d007      	beq.n	80011d6 <HAL_GPIO_Init+0x1f6>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a45      	ldr	r2, [pc, #276]	; (80012e0 <HAL_GPIO_Init+0x300>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d101      	bne.n	80011d2 <HAL_GPIO_Init+0x1f2>
 80011ce:	2304      	movs	r3, #4
 80011d0:	e008      	b.n	80011e4 <HAL_GPIO_Init+0x204>
 80011d2:	2307      	movs	r3, #7
 80011d4:	e006      	b.n	80011e4 <HAL_GPIO_Init+0x204>
 80011d6:	2303      	movs	r3, #3
 80011d8:	e004      	b.n	80011e4 <HAL_GPIO_Init+0x204>
 80011da:	2302      	movs	r3, #2
 80011dc:	e002      	b.n	80011e4 <HAL_GPIO_Init+0x204>
 80011de:	2301      	movs	r3, #1
 80011e0:	e000      	b.n	80011e4 <HAL_GPIO_Init+0x204>
 80011e2:	2300      	movs	r3, #0
 80011e4:	69fa      	ldr	r2, [r7, #28]
 80011e6:	f002 0203 	and.w	r2, r2, #3
 80011ea:	0092      	lsls	r2, r2, #2
 80011ec:	4093      	lsls	r3, r2
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011f4:	4935      	ldr	r1, [pc, #212]	; (80012cc <HAL_GPIO_Init+0x2ec>)
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	089b      	lsrs	r3, r3, #2
 80011fa:	3302      	adds	r3, #2
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001202:	4b38      	ldr	r3, [pc, #224]	; (80012e4 <HAL_GPIO_Init+0x304>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001226:	4a2f      	ldr	r2, [pc, #188]	; (80012e4 <HAL_GPIO_Init+0x304>)
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800122c:	4b2d      	ldr	r3, [pc, #180]	; (80012e4 <HAL_GPIO_Init+0x304>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001250:	4a24      	ldr	r2, [pc, #144]	; (80012e4 <HAL_GPIO_Init+0x304>)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001256:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <HAL_GPIO_Init+0x304>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	43db      	mvns	r3, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4013      	ands	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800127a:	4a1a      	ldr	r2, [pc, #104]	; (80012e4 <HAL_GPIO_Init+0x304>)
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001280:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <HAL_GPIO_Init+0x304>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012a4:	4a0f      	ldr	r2, [pc, #60]	; (80012e4 <HAL_GPIO_Init+0x304>)
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3301      	adds	r3, #1
 80012ae:	61fb      	str	r3, [r7, #28]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	2b0f      	cmp	r3, #15
 80012b4:	f67f aea2 	bls.w	8000ffc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012b8:	bf00      	nop
 80012ba:	bf00      	nop
 80012bc:	3724      	adds	r7, #36	; 0x24
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40013800 	.word	0x40013800
 80012d0:	40020000 	.word	0x40020000
 80012d4:	40020400 	.word	0x40020400
 80012d8:	40020800 	.word	0x40020800
 80012dc:	40020c00 	.word	0x40020c00
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40013c00 	.word	0x40013c00

080012e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	691a      	ldr	r2, [r3, #16]
 80012f8:	887b      	ldrh	r3, [r7, #2]
 80012fa:	4013      	ands	r3, r2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d002      	beq.n	8001306 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001300:	2301      	movs	r3, #1
 8001302:	73fb      	strb	r3, [r7, #15]
 8001304:	e001      	b.n	800130a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001306:	2300      	movs	r3, #0
 8001308:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800130a:	7bfb      	ldrb	r3, [r7, #15]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	807b      	strh	r3, [r7, #2]
 8001324:	4613      	mov	r3, r2
 8001326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001328:	787b      	ldrb	r3, [r7, #1]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800132e:	887a      	ldrh	r2, [r7, #2]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001334:	e003      	b.n	800133e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001336:	887b      	ldrh	r3, [r7, #2]
 8001338:	041a      	lsls	r2, r3, #16
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	619a      	str	r2, [r3, #24]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800134a:	b480      	push	{r7}
 800134c:	b085      	sub	sp, #20
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	460b      	mov	r3, r1
 8001354:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800135c:	887a      	ldrh	r2, [r7, #2]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4013      	ands	r3, r2
 8001362:	041a      	lsls	r2, r3, #16
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	43d9      	mvns	r1, r3
 8001368:	887b      	ldrh	r3, [r7, #2]
 800136a:	400b      	ands	r3, r1
 800136c:	431a      	orrs	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	619a      	str	r2, [r3, #24]
}
 8001372:	bf00      	nop
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
	...

08001380 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800138c:	695a      	ldr	r2, [r3, #20]
 800138e:	88fb      	ldrh	r3, [r7, #6]
 8001390:	4013      	ands	r3, r2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d006      	beq.n	80013a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001396:	4a05      	ldr	r2, [pc, #20]	; (80013ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001398:	88fb      	ldrh	r3, [r7, #6]
 800139a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff faee 	bl	8000980 <HAL_GPIO_EXTI_Callback>
  }
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40013c00 	.word	0x40013c00

080013b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e267      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d075      	beq.n	80014ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ce:	4b88      	ldr	r3, [pc, #544]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	d00c      	beq.n	80013f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013da:	4b85      	ldr	r3, [pc, #532]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013e2:	2b08      	cmp	r3, #8
 80013e4:	d112      	bne.n	800140c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013e6:	4b82      	ldr	r3, [pc, #520]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013f2:	d10b      	bne.n	800140c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f4:	4b7e      	ldr	r3, [pc, #504]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d05b      	beq.n	80014b8 <HAL_RCC_OscConfig+0x108>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d157      	bne.n	80014b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e242      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001414:	d106      	bne.n	8001424 <HAL_RCC_OscConfig+0x74>
 8001416:	4b76      	ldr	r3, [pc, #472]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a75      	ldr	r2, [pc, #468]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 800141c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	e01d      	b.n	8001460 <HAL_RCC_OscConfig+0xb0>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800142c:	d10c      	bne.n	8001448 <HAL_RCC_OscConfig+0x98>
 800142e:	4b70      	ldr	r3, [pc, #448]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a6f      	ldr	r2, [pc, #444]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	4b6d      	ldr	r3, [pc, #436]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a6c      	ldr	r2, [pc, #432]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	e00b      	b.n	8001460 <HAL_RCC_OscConfig+0xb0>
 8001448:	4b69      	ldr	r3, [pc, #420]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a68      	ldr	r2, [pc, #416]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 800144e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	4b66      	ldr	r3, [pc, #408]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a65      	ldr	r2, [pc, #404]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 800145a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800145e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d013      	beq.n	8001490 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff fccc 	bl	8000e04 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001470:	f7ff fcc8 	bl	8000e04 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b64      	cmp	r3, #100	; 0x64
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e207      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001482:	4b5b      	ldr	r3, [pc, #364]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0f0      	beq.n	8001470 <HAL_RCC_OscConfig+0xc0>
 800148e:	e014      	b.n	80014ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001490:	f7ff fcb8 	bl	8000e04 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001498:	f7ff fcb4 	bl	8000e04 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b64      	cmp	r3, #100	; 0x64
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e1f3      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014aa:	4b51      	ldr	r3, [pc, #324]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f0      	bne.n	8001498 <HAL_RCC_OscConfig+0xe8>
 80014b6:	e000      	b.n	80014ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d063      	beq.n	800158e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014c6:	4b4a      	ldr	r3, [pc, #296]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 030c 	and.w	r3, r3, #12
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00b      	beq.n	80014ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014d2:	4b47      	ldr	r3, [pc, #284]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014da:	2b08      	cmp	r3, #8
 80014dc:	d11c      	bne.n	8001518 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014de:	4b44      	ldr	r3, [pc, #272]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d116      	bne.n	8001518 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ea:	4b41      	ldr	r3, [pc, #260]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d005      	beq.n	8001502 <HAL_RCC_OscConfig+0x152>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d001      	beq.n	8001502 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e1c7      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001502:	4b3b      	ldr	r3, [pc, #236]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	4937      	ldr	r1, [pc, #220]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001512:	4313      	orrs	r3, r2
 8001514:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001516:	e03a      	b.n	800158e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d020      	beq.n	8001562 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001520:	4b34      	ldr	r3, [pc, #208]	; (80015f4 <HAL_RCC_OscConfig+0x244>)
 8001522:	2201      	movs	r2, #1
 8001524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001526:	f7ff fc6d 	bl	8000e04 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800152e:	f7ff fc69 	bl	8000e04 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e1a8      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001540:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154c:	4b28      	ldr	r3, [pc, #160]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	4925      	ldr	r1, [pc, #148]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 800155c:	4313      	orrs	r3, r2
 800155e:	600b      	str	r3, [r1, #0]
 8001560:	e015      	b.n	800158e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001562:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <HAL_RCC_OscConfig+0x244>)
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001568:	f7ff fc4c 	bl	8000e04 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001570:	f7ff fc48 	bl	8000e04 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e187      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001582:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	2b00      	cmp	r3, #0
 8001598:	d036      	beq.n	8001608 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d016      	beq.n	80015d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <HAL_RCC_OscConfig+0x248>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a8:	f7ff fc2c 	bl	8000e04 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015b0:	f7ff fc28 	bl	8000e04 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e167      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 80015c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0f0      	beq.n	80015b0 <HAL_RCC_OscConfig+0x200>
 80015ce:	e01b      	b.n	8001608 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <HAL_RCC_OscConfig+0x248>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d6:	f7ff fc15 	bl	8000e04 <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015dc:	e00e      	b.n	80015fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015de:	f7ff fc11 	bl	8000e04 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d907      	bls.n	80015fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e150      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
 80015f0:	40023800 	.word	0x40023800
 80015f4:	42470000 	.word	0x42470000
 80015f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015fc:	4b88      	ldr	r3, [pc, #544]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80015fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1ea      	bne.n	80015de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 8097 	beq.w	8001744 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001616:	2300      	movs	r3, #0
 8001618:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800161a:	4b81      	ldr	r3, [pc, #516]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10f      	bne.n	8001646 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	4b7d      	ldr	r3, [pc, #500]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	4a7c      	ldr	r2, [pc, #496]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 8001630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001634:	6413      	str	r3, [r2, #64]	; 0x40
 8001636:	4b7a      	ldr	r3, [pc, #488]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001642:	2301      	movs	r3, #1
 8001644:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001646:	4b77      	ldr	r3, [pc, #476]	; (8001824 <HAL_RCC_OscConfig+0x474>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164e:	2b00      	cmp	r3, #0
 8001650:	d118      	bne.n	8001684 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001652:	4b74      	ldr	r3, [pc, #464]	; (8001824 <HAL_RCC_OscConfig+0x474>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a73      	ldr	r2, [pc, #460]	; (8001824 <HAL_RCC_OscConfig+0x474>)
 8001658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800165e:	f7ff fbd1 	bl	8000e04 <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001666:	f7ff fbcd 	bl	8000e04 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e10c      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001678:	4b6a      	ldr	r3, [pc, #424]	; (8001824 <HAL_RCC_OscConfig+0x474>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0f0      	beq.n	8001666 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d106      	bne.n	800169a <HAL_RCC_OscConfig+0x2ea>
 800168c:	4b64      	ldr	r3, [pc, #400]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 800168e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001690:	4a63      	ldr	r2, [pc, #396]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6713      	str	r3, [r2, #112]	; 0x70
 8001698:	e01c      	b.n	80016d4 <HAL_RCC_OscConfig+0x324>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	2b05      	cmp	r3, #5
 80016a0:	d10c      	bne.n	80016bc <HAL_RCC_OscConfig+0x30c>
 80016a2:	4b5f      	ldr	r3, [pc, #380]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80016a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a6:	4a5e      	ldr	r2, [pc, #376]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	6713      	str	r3, [r2, #112]	; 0x70
 80016ae:	4b5c      	ldr	r3, [pc, #368]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80016b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b2:	4a5b      	ldr	r2, [pc, #364]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6713      	str	r3, [r2, #112]	; 0x70
 80016ba:	e00b      	b.n	80016d4 <HAL_RCC_OscConfig+0x324>
 80016bc:	4b58      	ldr	r3, [pc, #352]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80016be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c0:	4a57      	ldr	r2, [pc, #348]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80016c2:	f023 0301 	bic.w	r3, r3, #1
 80016c6:	6713      	str	r3, [r2, #112]	; 0x70
 80016c8:	4b55      	ldr	r3, [pc, #340]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80016ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016cc:	4a54      	ldr	r2, [pc, #336]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80016ce:	f023 0304 	bic.w	r3, r3, #4
 80016d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d015      	beq.n	8001708 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016dc:	f7ff fb92 	bl	8000e04 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e2:	e00a      	b.n	80016fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e4:	f7ff fb8e 	bl	8000e04 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e0cb      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016fa:	4b49      	ldr	r3, [pc, #292]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80016fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0ee      	beq.n	80016e4 <HAL_RCC_OscConfig+0x334>
 8001706:	e014      	b.n	8001732 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001708:	f7ff fb7c 	bl	8000e04 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800170e:	e00a      	b.n	8001726 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001710:	f7ff fb78 	bl	8000e04 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	f241 3288 	movw	r2, #5000	; 0x1388
 800171e:	4293      	cmp	r3, r2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e0b5      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001726:	4b3e      	ldr	r3, [pc, #248]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 8001728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1ee      	bne.n	8001710 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001732:	7dfb      	ldrb	r3, [r7, #23]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d105      	bne.n	8001744 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001738:	4b39      	ldr	r3, [pc, #228]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	4a38      	ldr	r2, [pc, #224]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 800173e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001742:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 80a1 	beq.w	8001890 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800174e:	4b34      	ldr	r3, [pc, #208]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 030c 	and.w	r3, r3, #12
 8001756:	2b08      	cmp	r3, #8
 8001758:	d05c      	beq.n	8001814 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d141      	bne.n	80017e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001762:	4b31      	ldr	r3, [pc, #196]	; (8001828 <HAL_RCC_OscConfig+0x478>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001768:	f7ff fb4c 	bl	8000e04 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001770:	f7ff fb48 	bl	8000e04 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e087      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001782:	4b27      	ldr	r3, [pc, #156]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69da      	ldr	r2, [r3, #28]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a1b      	ldr	r3, [r3, #32]
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179c:	019b      	lsls	r3, r3, #6
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a4:	085b      	lsrs	r3, r3, #1
 80017a6:	3b01      	subs	r3, #1
 80017a8:	041b      	lsls	r3, r3, #16
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b0:	061b      	lsls	r3, r3, #24
 80017b2:	491b      	ldr	r1, [pc, #108]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <HAL_RCC_OscConfig+0x478>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017be:	f7ff fb21 	bl	8000e04 <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c6:	f7ff fb1d 	bl	8000e04 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e05c      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0f0      	beq.n	80017c6 <HAL_RCC_OscConfig+0x416>
 80017e4:	e054      	b.n	8001890 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <HAL_RCC_OscConfig+0x478>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fb0a 	bl	8000e04 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f4:	f7ff fb06 	bl	8000e04 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e045      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x444>
 8001812:	e03d      	b.n	8001890 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d107      	bne.n	800182c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e038      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
 8001820:	40023800 	.word	0x40023800
 8001824:	40007000 	.word	0x40007000
 8001828:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800182c:	4b1b      	ldr	r3, [pc, #108]	; (800189c <HAL_RCC_OscConfig+0x4ec>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d028      	beq.n	800188c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001844:	429a      	cmp	r2, r3
 8001846:	d121      	bne.n	800188c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001852:	429a      	cmp	r2, r3
 8001854:	d11a      	bne.n	800188c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800185c:	4013      	ands	r3, r2
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001862:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001864:	4293      	cmp	r3, r2
 8001866:	d111      	bne.n	800188c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001872:	085b      	lsrs	r3, r3, #1
 8001874:	3b01      	subs	r3, #1
 8001876:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001878:	429a      	cmp	r2, r3
 800187a:	d107      	bne.n	800188c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001886:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001888:	429a      	cmp	r2, r3
 800188a:	d001      	beq.n	8001890 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e000      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800

080018a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e0cc      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018b4:	4b68      	ldr	r3, [pc, #416]	; (8001a58 <HAL_RCC_ClockConfig+0x1b8>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d90c      	bls.n	80018dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c2:	4b65      	ldr	r3, [pc, #404]	; (8001a58 <HAL_RCC_ClockConfig+0x1b8>)
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ca:	4b63      	ldr	r3, [pc, #396]	; (8001a58 <HAL_RCC_ClockConfig+0x1b8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d001      	beq.n	80018dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e0b8      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d020      	beq.n	800192a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d005      	beq.n	8001900 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018f4:	4b59      	ldr	r3, [pc, #356]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	4a58      	ldr	r2, [pc, #352]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0308 	and.w	r3, r3, #8
 8001908:	2b00      	cmp	r3, #0
 800190a:	d005      	beq.n	8001918 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800190c:	4b53      	ldr	r3, [pc, #332]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	4a52      	ldr	r2, [pc, #328]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001916:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001918:	4b50      	ldr	r3, [pc, #320]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	494d      	ldr	r1, [pc, #308]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	4313      	orrs	r3, r2
 8001928:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	d044      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d107      	bne.n	800194e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193e:	4b47      	ldr	r3, [pc, #284]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d119      	bne.n	800197e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e07f      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d003      	beq.n	800195e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800195a:	2b03      	cmp	r3, #3
 800195c:	d107      	bne.n	800196e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800195e:	4b3f      	ldr	r3, [pc, #252]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d109      	bne.n	800197e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e06f      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196e:	4b3b      	ldr	r3, [pc, #236]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e067      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800197e:	4b37      	ldr	r3, [pc, #220]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f023 0203 	bic.w	r2, r3, #3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	4934      	ldr	r1, [pc, #208]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 800198c:	4313      	orrs	r3, r2
 800198e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001990:	f7ff fa38 	bl	8000e04 <HAL_GetTick>
 8001994:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001996:	e00a      	b.n	80019ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001998:	f7ff fa34 	bl	8000e04 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e04f      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ae:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 020c 	and.w	r2, r3, #12
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	429a      	cmp	r2, r3
 80019be:	d1eb      	bne.n	8001998 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019c0:	4b25      	ldr	r3, [pc, #148]	; (8001a58 <HAL_RCC_ClockConfig+0x1b8>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d20c      	bcs.n	80019e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ce:	4b22      	ldr	r3, [pc, #136]	; (8001a58 <HAL_RCC_ClockConfig+0x1b8>)
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d6:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <HAL_RCC_ClockConfig+0x1b8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d001      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e032      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d008      	beq.n	8001a06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019f4:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	4916      	ldr	r1, [pc, #88]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d009      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a12:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	490e      	ldr	r1, [pc, #56]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a26:	f000 f821 	bl	8001a6c <HAL_RCC_GetSysClockFreq>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	091b      	lsrs	r3, r3, #4
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	490a      	ldr	r1, [pc, #40]	; (8001a60 <HAL_RCC_ClockConfig+0x1c0>)
 8001a38:	5ccb      	ldrb	r3, [r1, r3]
 8001a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a3e:	4a09      	ldr	r2, [pc, #36]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 8001a40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <HAL_RCC_ClockConfig+0x1c8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff f8b0 	bl	8000bac <HAL_InitTick>

  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40023c00 	.word	0x40023c00
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	08004e7c 	.word	0x08004e7c
 8001a64:	20000000 	.word	0x20000000
 8001a68:	20000004 	.word	0x20000004

08001a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a70:	b094      	sub	sp, #80	; 0x50
 8001a72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a74:	2300      	movs	r3, #0
 8001a76:	647b      	str	r3, [r7, #68]	; 0x44
 8001a78:	2300      	movs	r3, #0
 8001a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a84:	4b79      	ldr	r3, [pc, #484]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 030c 	and.w	r3, r3, #12
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d00d      	beq.n	8001aac <HAL_RCC_GetSysClockFreq+0x40>
 8001a90:	2b08      	cmp	r3, #8
 8001a92:	f200 80e1 	bhi.w	8001c58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d002      	beq.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x34>
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	d003      	beq.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a9e:	e0db      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001aa0:	4b73      	ldr	r3, [pc, #460]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x204>)
 8001aa2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001aa4:	e0db      	b.n	8001c5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aa6:	4b73      	ldr	r3, [pc, #460]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x208>)
 8001aa8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001aaa:	e0d8      	b.n	8001c5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aac:	4b6f      	ldr	r3, [pc, #444]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ab4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ab6:	4b6d      	ldr	r3, [pc, #436]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d063      	beq.n	8001b8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac2:	4b6a      	ldr	r3, [pc, #424]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	099b      	lsrs	r3, r3, #6
 8001ac8:	2200      	movs	r2, #0
 8001aca:	63bb      	str	r3, [r7, #56]	; 0x38
 8001acc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ad4:	633b      	str	r3, [r7, #48]	; 0x30
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	637b      	str	r3, [r7, #52]	; 0x34
 8001ada:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ade:	4622      	mov	r2, r4
 8001ae0:	462b      	mov	r3, r5
 8001ae2:	f04f 0000 	mov.w	r0, #0
 8001ae6:	f04f 0100 	mov.w	r1, #0
 8001aea:	0159      	lsls	r1, r3, #5
 8001aec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001af0:	0150      	lsls	r0, r2, #5
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4621      	mov	r1, r4
 8001af8:	1a51      	subs	r1, r2, r1
 8001afa:	6139      	str	r1, [r7, #16]
 8001afc:	4629      	mov	r1, r5
 8001afe:	eb63 0301 	sbc.w	r3, r3, r1
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	f04f 0300 	mov.w	r3, #0
 8001b0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b10:	4659      	mov	r1, fp
 8001b12:	018b      	lsls	r3, r1, #6
 8001b14:	4651      	mov	r1, sl
 8001b16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b1a:	4651      	mov	r1, sl
 8001b1c:	018a      	lsls	r2, r1, #6
 8001b1e:	4651      	mov	r1, sl
 8001b20:	ebb2 0801 	subs.w	r8, r2, r1
 8001b24:	4659      	mov	r1, fp
 8001b26:	eb63 0901 	sbc.w	r9, r3, r1
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b3e:	4690      	mov	r8, r2
 8001b40:	4699      	mov	r9, r3
 8001b42:	4623      	mov	r3, r4
 8001b44:	eb18 0303 	adds.w	r3, r8, r3
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	462b      	mov	r3, r5
 8001b4c:	eb49 0303 	adc.w	r3, r9, r3
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b5e:	4629      	mov	r1, r5
 8001b60:	024b      	lsls	r3, r1, #9
 8001b62:	4621      	mov	r1, r4
 8001b64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b68:	4621      	mov	r1, r4
 8001b6a:	024a      	lsls	r2, r1, #9
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b72:	2200      	movs	r2, #0
 8001b74:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b7c:	f7fe fb80 	bl	8000280 <__aeabi_uldivmod>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4613      	mov	r3, r2
 8001b86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b88:	e058      	b.n	8001c3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b8a:	4b38      	ldr	r3, [pc, #224]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	099b      	lsrs	r3, r3, #6
 8001b90:	2200      	movs	r2, #0
 8001b92:	4618      	mov	r0, r3
 8001b94:	4611      	mov	r1, r2
 8001b96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b9a:	623b      	str	r3, [r7, #32]
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ba4:	4642      	mov	r2, r8
 8001ba6:	464b      	mov	r3, r9
 8001ba8:	f04f 0000 	mov.w	r0, #0
 8001bac:	f04f 0100 	mov.w	r1, #0
 8001bb0:	0159      	lsls	r1, r3, #5
 8001bb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bb6:	0150      	lsls	r0, r2, #5
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4641      	mov	r1, r8
 8001bbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bc2:	4649      	mov	r1, r9
 8001bc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	f04f 0300 	mov.w	r3, #0
 8001bd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bdc:	ebb2 040a 	subs.w	r4, r2, sl
 8001be0:	eb63 050b 	sbc.w	r5, r3, fp
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	f04f 0300 	mov.w	r3, #0
 8001bec:	00eb      	lsls	r3, r5, #3
 8001bee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bf2:	00e2      	lsls	r2, r4, #3
 8001bf4:	4614      	mov	r4, r2
 8001bf6:	461d      	mov	r5, r3
 8001bf8:	4643      	mov	r3, r8
 8001bfa:	18e3      	adds	r3, r4, r3
 8001bfc:	603b      	str	r3, [r7, #0]
 8001bfe:	464b      	mov	r3, r9
 8001c00:	eb45 0303 	adc.w	r3, r5, r3
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	f04f 0300 	mov.w	r3, #0
 8001c0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c12:	4629      	mov	r1, r5
 8001c14:	028b      	lsls	r3, r1, #10
 8001c16:	4621      	mov	r1, r4
 8001c18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c1c:	4621      	mov	r1, r4
 8001c1e:	028a      	lsls	r2, r1, #10
 8001c20:	4610      	mov	r0, r2
 8001c22:	4619      	mov	r1, r3
 8001c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c26:	2200      	movs	r2, #0
 8001c28:	61bb      	str	r3, [r7, #24]
 8001c2a:	61fa      	str	r2, [r7, #28]
 8001c2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c30:	f7fe fb26 	bl	8000280 <__aeabi_uldivmod>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4613      	mov	r3, r2
 8001c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	0c1b      	lsrs	r3, r3, #16
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	3301      	adds	r3, #1
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c56:	e002      	b.n	8001c5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c58:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3750      	adds	r7, #80	; 0x50
 8001c64:	46bd      	mov	sp, r7
 8001c66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	00f42400 	.word	0x00f42400
 8001c74:	007a1200 	.word	0x007a1200

08001c78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c7c:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20000000 	.word	0x20000000

08001c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c94:	f7ff fff0 	bl	8001c78 <HAL_RCC_GetHCLKFreq>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	0a9b      	lsrs	r3, r3, #10
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	4903      	ldr	r1, [pc, #12]	; (8001cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ca6:	5ccb      	ldrb	r3, [r1, r3]
 8001ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	08004e8c 	.word	0x08004e8c

08001cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cbc:	f7ff ffdc 	bl	8001c78 <HAL_RCC_GetHCLKFreq>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	0b5b      	lsrs	r3, r3, #13
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	4903      	ldr	r1, [pc, #12]	; (8001cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cce:	5ccb      	ldrb	r3, [r1, r3]
 8001cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	08004e8c 	.word	0x08004e8c

08001ce0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	220f      	movs	r2, #15
 8001cee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_RCC_GetClockConfig+0x5c>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 0203 	and.w	r2, r3, #3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <HAL_RCC_GetClockConfig+0x5c>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <HAL_RCC_GetClockConfig+0x5c>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d14:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <HAL_RCC_GetClockConfig+0x5c>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	08db      	lsrs	r3, r3, #3
 8001d1a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d22:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <HAL_RCC_GetClockConfig+0x60>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0207 	and.w	r2, r3, #7
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	601a      	str	r2, [r3, #0]
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40023c00 	.word	0x40023c00

08001d44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e041      	b.n	8001dda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d106      	bne.n	8001d70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f839 	bl	8001de2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2202      	movs	r2, #2
 8001d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3304      	adds	r3, #4
 8001d80:	4619      	mov	r1, r3
 8001d82:	4610      	mov	r0, r2
 8001d84:	f000 f9ca 	bl	800211c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d001      	beq.n	8001e10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e044      	b.n	8001e9a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2202      	movs	r2, #2
 8001e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0201 	orr.w	r2, r2, #1
 8001e26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a1e      	ldr	r2, [pc, #120]	; (8001ea8 <HAL_TIM_Base_Start_IT+0xb0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d018      	beq.n	8001e64 <HAL_TIM_Base_Start_IT+0x6c>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e3a:	d013      	beq.n	8001e64 <HAL_TIM_Base_Start_IT+0x6c>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a1a      	ldr	r2, [pc, #104]	; (8001eac <HAL_TIM_Base_Start_IT+0xb4>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d00e      	beq.n	8001e64 <HAL_TIM_Base_Start_IT+0x6c>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a19      	ldr	r2, [pc, #100]	; (8001eb0 <HAL_TIM_Base_Start_IT+0xb8>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d009      	beq.n	8001e64 <HAL_TIM_Base_Start_IT+0x6c>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a17      	ldr	r2, [pc, #92]	; (8001eb4 <HAL_TIM_Base_Start_IT+0xbc>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d004      	beq.n	8001e64 <HAL_TIM_Base_Start_IT+0x6c>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a16      	ldr	r2, [pc, #88]	; (8001eb8 <HAL_TIM_Base_Start_IT+0xc0>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d111      	bne.n	8001e88 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2b06      	cmp	r3, #6
 8001e74:	d010      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f042 0201 	orr.w	r2, r2, #1
 8001e84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e86:	e007      	b.n	8001e98 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0201 	orr.w	r2, r2, #1
 8001e96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	40010000 	.word	0x40010000
 8001eac:	40000400 	.word	0x40000400
 8001eb0:	40000800 	.word	0x40000800
 8001eb4:	40000c00 	.word	0x40000c00
 8001eb8:	40014000 	.word	0x40014000

08001ebc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d122      	bne.n	8001f18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d11b      	bne.n	8001f18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f06f 0202 	mvn.w	r2, #2
 8001ee8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f8ee 	bl	80020e0 <HAL_TIM_IC_CaptureCallback>
 8001f04:	e005      	b.n	8001f12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f8e0 	bl	80020cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f8f1 	bl	80020f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d122      	bne.n	8001f6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d11b      	bne.n	8001f6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f06f 0204 	mvn.w	r2, #4
 8001f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2202      	movs	r2, #2
 8001f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f8c4 	bl	80020e0 <HAL_TIM_IC_CaptureCallback>
 8001f58:	e005      	b.n	8001f66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f8b6 	bl	80020cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f8c7 	bl	80020f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d122      	bne.n	8001fc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	f003 0308 	and.w	r3, r3, #8
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d11b      	bne.n	8001fc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f06f 0208 	mvn.w	r2, #8
 8001f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2204      	movs	r2, #4
 8001f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f89a 	bl	80020e0 <HAL_TIM_IC_CaptureCallback>
 8001fac:	e005      	b.n	8001fba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f88c 	bl	80020cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 f89d 	bl	80020f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	f003 0310 	and.w	r3, r3, #16
 8001fca:	2b10      	cmp	r3, #16
 8001fcc:	d122      	bne.n	8002014 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	f003 0310 	and.w	r3, r3, #16
 8001fd8:	2b10      	cmp	r3, #16
 8001fda:	d11b      	bne.n	8002014 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f06f 0210 	mvn.w	r2, #16
 8001fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2208      	movs	r2, #8
 8001fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f870 	bl	80020e0 <HAL_TIM_IC_CaptureCallback>
 8002000:	e005      	b.n	800200e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f862 	bl	80020cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 f873 	bl	80020f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b01      	cmp	r3, #1
 8002020:	d10e      	bne.n	8002040 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b01      	cmp	r3, #1
 800202e:	d107      	bne.n	8002040 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f06f 0201 	mvn.w	r2, #1
 8002038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7fe fd2a 	bl	8000a94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204a:	2b80      	cmp	r3, #128	; 0x80
 800204c:	d10e      	bne.n	800206c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002058:	2b80      	cmp	r3, #128	; 0x80
 800205a:	d107      	bne.n	800206c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f8e2 	bl	8002230 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002076:	2b40      	cmp	r3, #64	; 0x40
 8002078:	d10e      	bne.n	8002098 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002084:	2b40      	cmp	r3, #64	; 0x40
 8002086:	d107      	bne.n	8002098 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f838 	bl	8002108 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	f003 0320 	and.w	r3, r3, #32
 80020a2:	2b20      	cmp	r3, #32
 80020a4:	d10e      	bne.n	80020c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f003 0320 	and.w	r3, r3, #32
 80020b0:	2b20      	cmp	r3, #32
 80020b2:	d107      	bne.n	80020c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f06f 0220 	mvn.w	r2, #32
 80020bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f8ac 	bl	800221c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a34      	ldr	r2, [pc, #208]	; (8002200 <TIM_Base_SetConfig+0xe4>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d00f      	beq.n	8002154 <TIM_Base_SetConfig+0x38>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800213a:	d00b      	beq.n	8002154 <TIM_Base_SetConfig+0x38>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a31      	ldr	r2, [pc, #196]	; (8002204 <TIM_Base_SetConfig+0xe8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d007      	beq.n	8002154 <TIM_Base_SetConfig+0x38>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a30      	ldr	r2, [pc, #192]	; (8002208 <TIM_Base_SetConfig+0xec>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d003      	beq.n	8002154 <TIM_Base_SetConfig+0x38>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a2f      	ldr	r2, [pc, #188]	; (800220c <TIM_Base_SetConfig+0xf0>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d108      	bne.n	8002166 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800215a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	4313      	orrs	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a25      	ldr	r2, [pc, #148]	; (8002200 <TIM_Base_SetConfig+0xe4>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d01b      	beq.n	80021a6 <TIM_Base_SetConfig+0x8a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002174:	d017      	beq.n	80021a6 <TIM_Base_SetConfig+0x8a>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a22      	ldr	r2, [pc, #136]	; (8002204 <TIM_Base_SetConfig+0xe8>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d013      	beq.n	80021a6 <TIM_Base_SetConfig+0x8a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a21      	ldr	r2, [pc, #132]	; (8002208 <TIM_Base_SetConfig+0xec>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d00f      	beq.n	80021a6 <TIM_Base_SetConfig+0x8a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a20      	ldr	r2, [pc, #128]	; (800220c <TIM_Base_SetConfig+0xf0>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d00b      	beq.n	80021a6 <TIM_Base_SetConfig+0x8a>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a1f      	ldr	r2, [pc, #124]	; (8002210 <TIM_Base_SetConfig+0xf4>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d007      	beq.n	80021a6 <TIM_Base_SetConfig+0x8a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a1e      	ldr	r2, [pc, #120]	; (8002214 <TIM_Base_SetConfig+0xf8>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d003      	beq.n	80021a6 <TIM_Base_SetConfig+0x8a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a1d      	ldr	r2, [pc, #116]	; (8002218 <TIM_Base_SetConfig+0xfc>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d108      	bne.n	80021b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a08      	ldr	r2, [pc, #32]	; (8002200 <TIM_Base_SetConfig+0xe4>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d103      	bne.n	80021ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	615a      	str	r2, [r3, #20]
}
 80021f2:	bf00      	nop
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40010000 	.word	0x40010000
 8002204:	40000400 	.word	0x40000400
 8002208:	40000800 	.word	0x40000800
 800220c:	40000c00 	.word	0x40000c00
 8002210:	40014000 	.word	0x40014000
 8002214:	40014400 	.word	0x40014400
 8002218:	40014800 	.word	0x40014800

0800221c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e03f      	b.n	80022d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d106      	bne.n	8002270 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7fe fc56 	bl	8000b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2224      	movs	r2, #36	; 0x24
 8002274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002286:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 f929 	bl	80024e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800229c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695a      	ldr	r2, [r3, #20]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68da      	ldr	r2, [r3, #12]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2220      	movs	r2, #32
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2220      	movs	r2, #32
 80022d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b08a      	sub	sp, #40	; 0x28
 80022e2:	af02      	add	r7, sp, #8
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	603b      	str	r3, [r7, #0]
 80022ea:	4613      	mov	r3, r2
 80022ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b20      	cmp	r3, #32
 80022fc:	d17c      	bne.n	80023f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d002      	beq.n	800230a <HAL_UART_Transmit+0x2c>
 8002304:	88fb      	ldrh	r3, [r7, #6]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e075      	b.n	80023fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002314:	2b01      	cmp	r3, #1
 8002316:	d101      	bne.n	800231c <HAL_UART_Transmit+0x3e>
 8002318:	2302      	movs	r3, #2
 800231a:	e06e      	b.n	80023fa <HAL_UART_Transmit+0x11c>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2221      	movs	r2, #33	; 0x21
 800232e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002332:	f7fe fd67 	bl	8000e04 <HAL_GetTick>
 8002336:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	88fa      	ldrh	r2, [r7, #6]
 800233c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	88fa      	ldrh	r2, [r7, #6]
 8002342:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800234c:	d108      	bne.n	8002360 <HAL_UART_Transmit+0x82>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d104      	bne.n	8002360 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	61bb      	str	r3, [r7, #24]
 800235e:	e003      	b.n	8002368 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002364:	2300      	movs	r3, #0
 8002366:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002370:	e02a      	b.n	80023c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	2200      	movs	r2, #0
 800237a:	2180      	movs	r1, #128	; 0x80
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 f840 	bl	8002402 <UART_WaitOnFlagUntilTimeout>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e036      	b.n	80023fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10b      	bne.n	80023aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	461a      	mov	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	3302      	adds	r3, #2
 80023a6:	61bb      	str	r3, [r7, #24]
 80023a8:	e007      	b.n	80023ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	781a      	ldrb	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	3301      	adds	r3, #1
 80023b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023be:	b29b      	uxth	r3, r3
 80023c0:	3b01      	subs	r3, #1
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1cf      	bne.n	8002372 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2200      	movs	r2, #0
 80023da:	2140      	movs	r1, #64	; 0x40
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 f810 	bl	8002402 <UART_WaitOnFlagUntilTimeout>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e006      	b.n	80023fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2220      	movs	r2, #32
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	e000      	b.n	80023fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80023f8:	2302      	movs	r3, #2
  }
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3720      	adds	r7, #32
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b090      	sub	sp, #64	; 0x40
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	603b      	str	r3, [r7, #0]
 800240e:	4613      	mov	r3, r2
 8002410:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002412:	e050      	b.n	80024b6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800241a:	d04c      	beq.n	80024b6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800241c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800241e:	2b00      	cmp	r3, #0
 8002420:	d007      	beq.n	8002432 <UART_WaitOnFlagUntilTimeout+0x30>
 8002422:	f7fe fcef 	bl	8000e04 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800242e:	429a      	cmp	r2, r3
 8002430:	d241      	bcs.n	80024b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	330c      	adds	r3, #12
 8002438:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800243a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243c:	e853 3f00 	ldrex	r3, [r3]
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002448:	63fb      	str	r3, [r7, #60]	; 0x3c
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	330c      	adds	r3, #12
 8002450:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002452:	637a      	str	r2, [r7, #52]	; 0x34
 8002454:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002456:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002458:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800245a:	e841 2300 	strex	r3, r2, [r1]
 800245e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1e5      	bne.n	8002432 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	3314      	adds	r3, #20
 800246c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	e853 3f00 	ldrex	r3, [r3]
 8002474:	613b      	str	r3, [r7, #16]
   return(result);
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	f023 0301 	bic.w	r3, r3, #1
 800247c:	63bb      	str	r3, [r7, #56]	; 0x38
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	3314      	adds	r3, #20
 8002484:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002486:	623a      	str	r2, [r7, #32]
 8002488:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800248a:	69f9      	ldr	r1, [r7, #28]
 800248c:	6a3a      	ldr	r2, [r7, #32]
 800248e:	e841 2300 	strex	r3, r2, [r1]
 8002492:	61bb      	str	r3, [r7, #24]
   return(result);
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1e5      	bne.n	8002466 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2220      	movs	r2, #32
 800249e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2220      	movs	r2, #32
 80024a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e00f      	b.n	80024d6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	4013      	ands	r3, r2
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	bf0c      	ite	eq
 80024c6:	2301      	moveq	r3, #1
 80024c8:	2300      	movne	r3, #0
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	461a      	mov	r2, r3
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d09f      	beq.n	8002414 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3740      	adds	r7, #64	; 0x40
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
	...

080024e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024e4:	b0c0      	sub	sp, #256	; 0x100
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80024f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024fc:	68d9      	ldr	r1, [r3, #12]
 80024fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	ea40 0301 	orr.w	r3, r0, r1
 8002508:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800250a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	431a      	orrs	r2, r3
 8002518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	431a      	orrs	r2, r3
 8002520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	4313      	orrs	r3, r2
 8002528:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800252c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002538:	f021 010c 	bic.w	r1, r1, #12
 800253c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002546:	430b      	orrs	r3, r1
 8002548:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800254a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800255a:	6999      	ldr	r1, [r3, #24]
 800255c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	ea40 0301 	orr.w	r3, r0, r1
 8002566:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	4b8f      	ldr	r3, [pc, #572]	; (80027ac <UART_SetConfig+0x2cc>)
 8002570:	429a      	cmp	r2, r3
 8002572:	d005      	beq.n	8002580 <UART_SetConfig+0xa0>
 8002574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	4b8d      	ldr	r3, [pc, #564]	; (80027b0 <UART_SetConfig+0x2d0>)
 800257c:	429a      	cmp	r2, r3
 800257e:	d104      	bne.n	800258a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002580:	f7ff fb9a 	bl	8001cb8 <HAL_RCC_GetPCLK2Freq>
 8002584:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002588:	e003      	b.n	8002592 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800258a:	f7ff fb81 	bl	8001c90 <HAL_RCC_GetPCLK1Freq>
 800258e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800259c:	f040 810c 	bne.w	80027b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025a4:	2200      	movs	r2, #0
 80025a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80025aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80025ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80025b2:	4622      	mov	r2, r4
 80025b4:	462b      	mov	r3, r5
 80025b6:	1891      	adds	r1, r2, r2
 80025b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80025ba:	415b      	adcs	r3, r3
 80025bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80025c2:	4621      	mov	r1, r4
 80025c4:	eb12 0801 	adds.w	r8, r2, r1
 80025c8:	4629      	mov	r1, r5
 80025ca:	eb43 0901 	adc.w	r9, r3, r1
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	f04f 0300 	mov.w	r3, #0
 80025d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025e2:	4690      	mov	r8, r2
 80025e4:	4699      	mov	r9, r3
 80025e6:	4623      	mov	r3, r4
 80025e8:	eb18 0303 	adds.w	r3, r8, r3
 80025ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80025f0:	462b      	mov	r3, r5
 80025f2:	eb49 0303 	adc.w	r3, r9, r3
 80025f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80025fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002606:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800260a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800260e:	460b      	mov	r3, r1
 8002610:	18db      	adds	r3, r3, r3
 8002612:	653b      	str	r3, [r7, #80]	; 0x50
 8002614:	4613      	mov	r3, r2
 8002616:	eb42 0303 	adc.w	r3, r2, r3
 800261a:	657b      	str	r3, [r7, #84]	; 0x54
 800261c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002620:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002624:	f7fd fe2c 	bl	8000280 <__aeabi_uldivmod>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4b61      	ldr	r3, [pc, #388]	; (80027b4 <UART_SetConfig+0x2d4>)
 800262e:	fba3 2302 	umull	r2, r3, r3, r2
 8002632:	095b      	lsrs	r3, r3, #5
 8002634:	011c      	lsls	r4, r3, #4
 8002636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800263a:	2200      	movs	r2, #0
 800263c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002640:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002644:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002648:	4642      	mov	r2, r8
 800264a:	464b      	mov	r3, r9
 800264c:	1891      	adds	r1, r2, r2
 800264e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002650:	415b      	adcs	r3, r3
 8002652:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002654:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002658:	4641      	mov	r1, r8
 800265a:	eb12 0a01 	adds.w	sl, r2, r1
 800265e:	4649      	mov	r1, r9
 8002660:	eb43 0b01 	adc.w	fp, r3, r1
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002670:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002674:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002678:	4692      	mov	sl, r2
 800267a:	469b      	mov	fp, r3
 800267c:	4643      	mov	r3, r8
 800267e:	eb1a 0303 	adds.w	r3, sl, r3
 8002682:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002686:	464b      	mov	r3, r9
 8002688:	eb4b 0303 	adc.w	r3, fp, r3
 800268c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800269c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80026a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80026a4:	460b      	mov	r3, r1
 80026a6:	18db      	adds	r3, r3, r3
 80026a8:	643b      	str	r3, [r7, #64]	; 0x40
 80026aa:	4613      	mov	r3, r2
 80026ac:	eb42 0303 	adc.w	r3, r2, r3
 80026b0:	647b      	str	r3, [r7, #68]	; 0x44
 80026b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80026b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80026ba:	f7fd fde1 	bl	8000280 <__aeabi_uldivmod>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	4611      	mov	r1, r2
 80026c4:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <UART_SetConfig+0x2d4>)
 80026c6:	fba3 2301 	umull	r2, r3, r3, r1
 80026ca:	095b      	lsrs	r3, r3, #5
 80026cc:	2264      	movs	r2, #100	; 0x64
 80026ce:	fb02 f303 	mul.w	r3, r2, r3
 80026d2:	1acb      	subs	r3, r1, r3
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80026da:	4b36      	ldr	r3, [pc, #216]	; (80027b4 <UART_SetConfig+0x2d4>)
 80026dc:	fba3 2302 	umull	r2, r3, r3, r2
 80026e0:	095b      	lsrs	r3, r3, #5
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026e8:	441c      	add	r4, r3
 80026ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026ee:	2200      	movs	r2, #0
 80026f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80026f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80026f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80026fc:	4642      	mov	r2, r8
 80026fe:	464b      	mov	r3, r9
 8002700:	1891      	adds	r1, r2, r2
 8002702:	63b9      	str	r1, [r7, #56]	; 0x38
 8002704:	415b      	adcs	r3, r3
 8002706:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002708:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800270c:	4641      	mov	r1, r8
 800270e:	1851      	adds	r1, r2, r1
 8002710:	6339      	str	r1, [r7, #48]	; 0x30
 8002712:	4649      	mov	r1, r9
 8002714:	414b      	adcs	r3, r1
 8002716:	637b      	str	r3, [r7, #52]	; 0x34
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	f04f 0300 	mov.w	r3, #0
 8002720:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002724:	4659      	mov	r1, fp
 8002726:	00cb      	lsls	r3, r1, #3
 8002728:	4651      	mov	r1, sl
 800272a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800272e:	4651      	mov	r1, sl
 8002730:	00ca      	lsls	r2, r1, #3
 8002732:	4610      	mov	r0, r2
 8002734:	4619      	mov	r1, r3
 8002736:	4603      	mov	r3, r0
 8002738:	4642      	mov	r2, r8
 800273a:	189b      	adds	r3, r3, r2
 800273c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002740:	464b      	mov	r3, r9
 8002742:	460a      	mov	r2, r1
 8002744:	eb42 0303 	adc.w	r3, r2, r3
 8002748:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800274c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002758:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800275c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002760:	460b      	mov	r3, r1
 8002762:	18db      	adds	r3, r3, r3
 8002764:	62bb      	str	r3, [r7, #40]	; 0x28
 8002766:	4613      	mov	r3, r2
 8002768:	eb42 0303 	adc.w	r3, r2, r3
 800276c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800276e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002772:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002776:	f7fd fd83 	bl	8000280 <__aeabi_uldivmod>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	4b0d      	ldr	r3, [pc, #52]	; (80027b4 <UART_SetConfig+0x2d4>)
 8002780:	fba3 1302 	umull	r1, r3, r3, r2
 8002784:	095b      	lsrs	r3, r3, #5
 8002786:	2164      	movs	r1, #100	; 0x64
 8002788:	fb01 f303 	mul.w	r3, r1, r3
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	3332      	adds	r3, #50	; 0x32
 8002792:	4a08      	ldr	r2, [pc, #32]	; (80027b4 <UART_SetConfig+0x2d4>)
 8002794:	fba2 2303 	umull	r2, r3, r2, r3
 8002798:	095b      	lsrs	r3, r3, #5
 800279a:	f003 0207 	and.w	r2, r3, #7
 800279e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4422      	add	r2, r4
 80027a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80027a8:	e105      	b.n	80029b6 <UART_SetConfig+0x4d6>
 80027aa:	bf00      	nop
 80027ac:	40011000 	.word	0x40011000
 80027b0:	40011400 	.word	0x40011400
 80027b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027bc:	2200      	movs	r2, #0
 80027be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80027c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80027c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80027ca:	4642      	mov	r2, r8
 80027cc:	464b      	mov	r3, r9
 80027ce:	1891      	adds	r1, r2, r2
 80027d0:	6239      	str	r1, [r7, #32]
 80027d2:	415b      	adcs	r3, r3
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
 80027d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027da:	4641      	mov	r1, r8
 80027dc:	1854      	adds	r4, r2, r1
 80027de:	4649      	mov	r1, r9
 80027e0:	eb43 0501 	adc.w	r5, r3, r1
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	f04f 0300 	mov.w	r3, #0
 80027ec:	00eb      	lsls	r3, r5, #3
 80027ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027f2:	00e2      	lsls	r2, r4, #3
 80027f4:	4614      	mov	r4, r2
 80027f6:	461d      	mov	r5, r3
 80027f8:	4643      	mov	r3, r8
 80027fa:	18e3      	adds	r3, r4, r3
 80027fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002800:	464b      	mov	r3, r9
 8002802:	eb45 0303 	adc.w	r3, r5, r3
 8002806:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800280a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002816:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	f04f 0300 	mov.w	r3, #0
 8002822:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002826:	4629      	mov	r1, r5
 8002828:	008b      	lsls	r3, r1, #2
 800282a:	4621      	mov	r1, r4
 800282c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002830:	4621      	mov	r1, r4
 8002832:	008a      	lsls	r2, r1, #2
 8002834:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002838:	f7fd fd22 	bl	8000280 <__aeabi_uldivmod>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4b60      	ldr	r3, [pc, #384]	; (80029c4 <UART_SetConfig+0x4e4>)
 8002842:	fba3 2302 	umull	r2, r3, r3, r2
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	011c      	lsls	r4, r3, #4
 800284a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800284e:	2200      	movs	r2, #0
 8002850:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002854:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002858:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800285c:	4642      	mov	r2, r8
 800285e:	464b      	mov	r3, r9
 8002860:	1891      	adds	r1, r2, r2
 8002862:	61b9      	str	r1, [r7, #24]
 8002864:	415b      	adcs	r3, r3
 8002866:	61fb      	str	r3, [r7, #28]
 8002868:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800286c:	4641      	mov	r1, r8
 800286e:	1851      	adds	r1, r2, r1
 8002870:	6139      	str	r1, [r7, #16]
 8002872:	4649      	mov	r1, r9
 8002874:	414b      	adcs	r3, r1
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002884:	4659      	mov	r1, fp
 8002886:	00cb      	lsls	r3, r1, #3
 8002888:	4651      	mov	r1, sl
 800288a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800288e:	4651      	mov	r1, sl
 8002890:	00ca      	lsls	r2, r1, #3
 8002892:	4610      	mov	r0, r2
 8002894:	4619      	mov	r1, r3
 8002896:	4603      	mov	r3, r0
 8002898:	4642      	mov	r2, r8
 800289a:	189b      	adds	r3, r3, r2
 800289c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028a0:	464b      	mov	r3, r9
 80028a2:	460a      	mov	r2, r1
 80028a4:	eb42 0303 	adc.w	r3, r2, r3
 80028a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80028ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80028b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	f04f 0300 	mov.w	r3, #0
 80028c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80028c4:	4649      	mov	r1, r9
 80028c6:	008b      	lsls	r3, r1, #2
 80028c8:	4641      	mov	r1, r8
 80028ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028ce:	4641      	mov	r1, r8
 80028d0:	008a      	lsls	r2, r1, #2
 80028d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80028d6:	f7fd fcd3 	bl	8000280 <__aeabi_uldivmod>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4b39      	ldr	r3, [pc, #228]	; (80029c4 <UART_SetConfig+0x4e4>)
 80028e0:	fba3 1302 	umull	r1, r3, r3, r2
 80028e4:	095b      	lsrs	r3, r3, #5
 80028e6:	2164      	movs	r1, #100	; 0x64
 80028e8:	fb01 f303 	mul.w	r3, r1, r3
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	3332      	adds	r3, #50	; 0x32
 80028f2:	4a34      	ldr	r2, [pc, #208]	; (80029c4 <UART_SetConfig+0x4e4>)
 80028f4:	fba2 2303 	umull	r2, r3, r2, r3
 80028f8:	095b      	lsrs	r3, r3, #5
 80028fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028fe:	441c      	add	r4, r3
 8002900:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002904:	2200      	movs	r2, #0
 8002906:	673b      	str	r3, [r7, #112]	; 0x70
 8002908:	677a      	str	r2, [r7, #116]	; 0x74
 800290a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800290e:	4642      	mov	r2, r8
 8002910:	464b      	mov	r3, r9
 8002912:	1891      	adds	r1, r2, r2
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	415b      	adcs	r3, r3
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800291e:	4641      	mov	r1, r8
 8002920:	1851      	adds	r1, r2, r1
 8002922:	6039      	str	r1, [r7, #0]
 8002924:	4649      	mov	r1, r9
 8002926:	414b      	adcs	r3, r1
 8002928:	607b      	str	r3, [r7, #4]
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	f04f 0300 	mov.w	r3, #0
 8002932:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002936:	4659      	mov	r1, fp
 8002938:	00cb      	lsls	r3, r1, #3
 800293a:	4651      	mov	r1, sl
 800293c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002940:	4651      	mov	r1, sl
 8002942:	00ca      	lsls	r2, r1, #3
 8002944:	4610      	mov	r0, r2
 8002946:	4619      	mov	r1, r3
 8002948:	4603      	mov	r3, r0
 800294a:	4642      	mov	r2, r8
 800294c:	189b      	adds	r3, r3, r2
 800294e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002950:	464b      	mov	r3, r9
 8002952:	460a      	mov	r2, r1
 8002954:	eb42 0303 	adc.w	r3, r2, r3
 8002958:	66fb      	str	r3, [r7, #108]	; 0x6c
 800295a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	663b      	str	r3, [r7, #96]	; 0x60
 8002964:	667a      	str	r2, [r7, #100]	; 0x64
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002972:	4649      	mov	r1, r9
 8002974:	008b      	lsls	r3, r1, #2
 8002976:	4641      	mov	r1, r8
 8002978:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800297c:	4641      	mov	r1, r8
 800297e:	008a      	lsls	r2, r1, #2
 8002980:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002984:	f7fd fc7c 	bl	8000280 <__aeabi_uldivmod>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4b0d      	ldr	r3, [pc, #52]	; (80029c4 <UART_SetConfig+0x4e4>)
 800298e:	fba3 1302 	umull	r1, r3, r3, r2
 8002992:	095b      	lsrs	r3, r3, #5
 8002994:	2164      	movs	r1, #100	; 0x64
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	011b      	lsls	r3, r3, #4
 800299e:	3332      	adds	r3, #50	; 0x32
 80029a0:	4a08      	ldr	r2, [pc, #32]	; (80029c4 <UART_SetConfig+0x4e4>)
 80029a2:	fba2 2303 	umull	r2, r3, r2, r3
 80029a6:	095b      	lsrs	r3, r3, #5
 80029a8:	f003 020f 	and.w	r2, r3, #15
 80029ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4422      	add	r2, r4
 80029b4:	609a      	str	r2, [r3, #8]
}
 80029b6:	bf00      	nop
 80029b8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80029bc:	46bd      	mov	sp, r7
 80029be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029c2:	bf00      	nop
 80029c4:	51eb851f 	.word	0x51eb851f

080029c8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80029d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029da:	2b84      	cmp	r3, #132	; 0x84
 80029dc:	d005      	beq.n	80029ea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80029de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	4413      	add	r3, r2
 80029e6:	3303      	adds	r3, #3
 80029e8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80029ea:	68fb      	ldr	r3, [r7, #12]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029fe:	f3ef 8305 	mrs	r3, IPSR
 8002a02:	607b      	str	r3, [r7, #4]
  return(result);
 8002a04:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	bf14      	ite	ne
 8002a0a:	2301      	movne	r3, #1
 8002a0c:	2300      	moveq	r3, #0
 8002a0e:	b2db      	uxtb	r3, r3
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002a20:	f000 fb6c 	bl	80030fc <vTaskStartScheduler>
  
  return osOK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002a2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a2c:	b089      	sub	sp, #36	; 0x24
 8002a2e:	af04      	add	r7, sp, #16
 8002a30:	6078      	str	r0, [r7, #4]
 8002a32:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d020      	beq.n	8002a7e <osThreadCreate+0x54>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d01c      	beq.n	8002a7e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685c      	ldr	r4, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681d      	ldr	r5, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691e      	ldr	r6, [r3, #16]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff ffb6 	bl	80029c8 <makeFreeRtosPriority>
 8002a5c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a66:	9202      	str	r2, [sp, #8]
 8002a68:	9301      	str	r3, [sp, #4]
 8002a6a:	9100      	str	r1, [sp, #0]
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	4632      	mov	r2, r6
 8002a70:	4629      	mov	r1, r5
 8002a72:	4620      	mov	r0, r4
 8002a74:	f000 f97a 	bl	8002d6c <xTaskCreateStatic>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	e01c      	b.n	8002ab8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685c      	ldr	r4, [r3, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a8a:	b29e      	uxth	r6, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff ff98 	bl	80029c8 <makeFreeRtosPriority>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	f107 030c 	add.w	r3, r7, #12
 8002a9e:	9301      	str	r3, [sp, #4]
 8002aa0:	9200      	str	r2, [sp, #0]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	4632      	mov	r2, r6
 8002aa6:	4629      	mov	r1, r5
 8002aa8:	4620      	mov	r0, r4
 8002aaa:	f000 f9bc 	bl	8002e26 <xTaskCreate>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d001      	beq.n	8002ab8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	e000      	b.n	8002aba <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ac2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b084      	sub	sp, #16
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <osDelay+0x16>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	e000      	b.n	8002ada <osDelay+0x18>
 8002ad8:	2301      	movs	r3, #1
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 fada 	bl	8003094 <vTaskDelay>
  
  return osOK;
 8002ae0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af02      	add	r7, sp, #8
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8002afe:	f7ff ff7b 	bl	80029f8 <inHandlerMode>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d01c      	beq.n	8002b42 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8002b08:	6839      	ldr	r1, [r7, #0]
 8002b0a:	f107 0208 	add.w	r2, r7, #8
 8002b0e:	f107 030c 	add.w	r3, r7, #12
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	4613      	mov	r3, r2
 8002b16:	2201      	movs	r2, #1
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 fef3 	bl	8003904 <xTaskGenericNotifyFromISR>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d002      	beq.n	8002b2a <osSignalSet+0x3e>
      return 0x80000000;
 8002b24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002b28:	e019      	b.n	8002b5e <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d015      	beq.n	8002b5c <osSignalSet+0x70>
 8002b30:	4b0d      	ldr	r3, [pc, #52]	; (8002b68 <osSignalSet+0x7c>)
 8002b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	f3bf 8f4f 	dsb	sy
 8002b3c:	f3bf 8f6f 	isb	sy
 8002b40:	e00c      	b.n	8002b5c <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8002b42:	6839      	ldr	r1, [r7, #0]
 8002b44:	f107 0308 	add.w	r3, r7, #8
 8002b48:	2201      	movs	r2, #1
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fe24 	bl	8003798 <xTaskGenericNotify>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d002      	beq.n	8002b5c <osSignalSet+0x70>
    return 0x80000000;
 8002b56:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002b5a:	e000      	b.n	8002b5e <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8002b5c:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	e000ed04 	.word	0xe000ed04

08002b6c <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8002b6c:	b590      	push	{r4, r7, lr}
 8002b6e:	b089      	sub	sp, #36	; 0x24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b86:	d103      	bne.n	8002b90 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8002b88:	f04f 33ff 	mov.w	r3, #4294967295
 8002b8c:	61fb      	str	r3, [r7, #28]
 8002b8e:	e009      	b.n	8002ba4 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d006      	beq.n	8002ba4 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <osSignalWait+0x38>
      ticks = 1;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8002ba4:	f7ff ff28 	bl	80029f8 <inHandlerMode>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d002      	beq.n	8002bb4 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8002bae:	2382      	movs	r3, #130	; 0x82
 8002bb0:	613b      	str	r3, [r7, #16]
 8002bb2:	e01b      	b.n	8002bec <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8002bb4:	68b9      	ldr	r1, [r7, #8]
 8002bb6:	f107 0310 	add.w	r3, r7, #16
 8002bba:	1d1a      	adds	r2, r3, #4
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	f000 fd90 	bl	80036e4 <xTaskNotifyWait>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d008      	beq.n	8002bdc <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d102      	bne.n	8002bd6 <osSignalWait+0x6a>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	613b      	str	r3, [r7, #16]
 8002bd4:	e00a      	b.n	8002bec <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8002bd6:	2340      	movs	r3, #64	; 0x40
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	e007      	b.n	8002bec <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	da02      	bge.n	8002be8 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8002be2:	2386      	movs	r3, #134	; 0x86
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	e001      	b.n	8002bec <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8002be8:	2308      	movs	r3, #8
 8002bea:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	461c      	mov	r4, r3
 8002bf0:	f107 0310 	add.w	r3, r7, #16
 8002bf4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002bf8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	3724      	adds	r7, #36	; 0x24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd90      	pop	{r4, r7, pc}

08002c04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f103 0208 	add.w	r2, r3, #8
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f04f 32ff 	mov.w	r2, #4294967295
 8002c1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f103 0208 	add.w	r2, r3, #8
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f103 0208 	add.w	r2, r3, #8
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b085      	sub	sp, #20
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
 8002c66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	601a      	str	r2, [r3, #0]
}
 8002c9a:	bf00      	nop
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b085      	sub	sp, #20
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
 8002cae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbc:	d103      	bne.n	8002cc6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	e00c      	b.n	8002ce0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3308      	adds	r3, #8
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	e002      	b.n	8002cd4 <vListInsert+0x2e>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d2f6      	bcs.n	8002cce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	601a      	str	r2, [r3, #0]
}
 8002d0c:	bf00      	nop
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6892      	ldr	r2, [r2, #8]
 8002d2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6852      	ldr	r2, [r2, #4]
 8002d38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d103      	bne.n	8002d4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	1e5a      	subs	r2, r3, #1
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08e      	sub	sp, #56	; 0x38
 8002d70:	af04      	add	r7, sp, #16
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
 8002d78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10a      	bne.n	8002d96 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d84:	f383 8811 	msr	BASEPRI, r3
 8002d88:	f3bf 8f6f 	isb	sy
 8002d8c:	f3bf 8f4f 	dsb	sy
 8002d90:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d92:	bf00      	nop
 8002d94:	e7fe      	b.n	8002d94 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10a      	bne.n	8002db2 <xTaskCreateStatic+0x46>
	__asm volatile
 8002d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da0:	f383 8811 	msr	BASEPRI, r3
 8002da4:	f3bf 8f6f 	isb	sy
 8002da8:	f3bf 8f4f 	dsb	sy
 8002dac:	61fb      	str	r3, [r7, #28]
}
 8002dae:	bf00      	nop
 8002db0:	e7fe      	b.n	8002db0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002db2:	2354      	movs	r3, #84	; 0x54
 8002db4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	2b54      	cmp	r3, #84	; 0x54
 8002dba:	d00a      	beq.n	8002dd2 <xTaskCreateStatic+0x66>
	__asm volatile
 8002dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc0:	f383 8811 	msr	BASEPRI, r3
 8002dc4:	f3bf 8f6f 	isb	sy
 8002dc8:	f3bf 8f4f 	dsb	sy
 8002dcc:	61bb      	str	r3, [r7, #24]
}
 8002dce:	bf00      	nop
 8002dd0:	e7fe      	b.n	8002dd0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002dd2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d01e      	beq.n	8002e18 <xTaskCreateStatic+0xac>
 8002dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d01b      	beq.n	8002e18 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002de8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	2202      	movs	r2, #2
 8002dee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002df2:	2300      	movs	r3, #0
 8002df4:	9303      	str	r3, [sp, #12]
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	9302      	str	r3, [sp, #8]
 8002dfa:	f107 0314 	add.w	r3, r7, #20
 8002dfe:	9301      	str	r3, [sp, #4]
 8002e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	68b9      	ldr	r1, [r7, #8]
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f850 	bl	8002eb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e12:	f000 f8d5 	bl	8002fc0 <prvAddNewTaskToReadyList>
 8002e16:	e001      	b.n	8002e1c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002e1c:	697b      	ldr	r3, [r7, #20]
	}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3728      	adds	r7, #40	; 0x28
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b08c      	sub	sp, #48	; 0x30
 8002e2a:	af04      	add	r7, sp, #16
 8002e2c:	60f8      	str	r0, [r7, #12]
 8002e2e:	60b9      	str	r1, [r7, #8]
 8002e30:	603b      	str	r3, [r7, #0]
 8002e32:	4613      	mov	r3, r2
 8002e34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e36:	88fb      	ldrh	r3, [r7, #6]
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f001 f8f4 	bl	8004028 <pvPortMalloc>
 8002e40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00e      	beq.n	8002e66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e48:	2054      	movs	r0, #84	; 0x54
 8002e4a:	f001 f8ed 	bl	8004028 <pvPortMalloc>
 8002e4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	631a      	str	r2, [r3, #48]	; 0x30
 8002e5c:	e005      	b.n	8002e6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e5e:	6978      	ldr	r0, [r7, #20]
 8002e60:	f001 f9ae 	bl	80041c0 <vPortFree>
 8002e64:	e001      	b.n	8002e6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d017      	beq.n	8002ea0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e78:	88fa      	ldrh	r2, [r7, #6]
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	9303      	str	r3, [sp, #12]
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	9302      	str	r3, [sp, #8]
 8002e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e84:	9301      	str	r3, [sp, #4]
 8002e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68b9      	ldr	r1, [r7, #8]
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 f80e 	bl	8002eb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e94:	69f8      	ldr	r0, [r7, #28]
 8002e96:	f000 f893 	bl	8002fc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	61bb      	str	r3, [r7, #24]
 8002e9e:	e002      	b.n	8002ea6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002ea6:	69bb      	ldr	r3, [r7, #24]
	}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3720      	adds	r7, #32
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
 8002ebc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	f023 0307 	bic.w	r3, r3, #7
 8002ed6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee6:	f383 8811 	msr	BASEPRI, r3
 8002eea:	f3bf 8f6f 	isb	sy
 8002eee:	f3bf 8f4f 	dsb	sy
 8002ef2:	617b      	str	r3, [r7, #20]
}
 8002ef4:	bf00      	nop
 8002ef6:	e7fe      	b.n	8002ef6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d01f      	beq.n	8002f3e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002efe:	2300      	movs	r3, #0
 8002f00:	61fb      	str	r3, [r7, #28]
 8002f02:	e012      	b.n	8002f2a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	4413      	add	r3, r2
 8002f0a:	7819      	ldrb	r1, [r3, #0]
 8002f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	4413      	add	r3, r2
 8002f12:	3334      	adds	r3, #52	; 0x34
 8002f14:	460a      	mov	r2, r1
 8002f16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d006      	beq.n	8002f32 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	3301      	adds	r3, #1
 8002f28:	61fb      	str	r3, [r7, #28]
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	2b0f      	cmp	r3, #15
 8002f2e:	d9e9      	bls.n	8002f04 <prvInitialiseNewTask+0x54>
 8002f30:	e000      	b.n	8002f34 <prvInitialiseNewTask+0x84>
			{
				break;
 8002f32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f3c:	e003      	b.n	8002f46 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f48:	2b06      	cmp	r3, #6
 8002f4a:	d901      	bls.n	8002f50 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f4c:	2306      	movs	r3, #6
 8002f4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f5a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5e:	2200      	movs	r2, #0
 8002f60:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f64:	3304      	adds	r3, #4
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff fe6c 	bl	8002c44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6e:	3318      	adds	r3, #24
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff fe67 	bl	8002c44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7e:	f1c3 0207 	rsb	r2, r3, #7
 8002f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8e:	2200      	movs	r2, #0
 8002f90:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	68f9      	ldr	r1, [r7, #12]
 8002f9e:	69b8      	ldr	r0, [r7, #24]
 8002fa0:	f000 fdf0 	bl	8003b84 <pxPortInitialiseStack>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d002      	beq.n	8002fb6 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fb6:	bf00      	nop
 8002fb8:	3720      	adds	r7, #32
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002fc8:	f000 ff0c 	bl	8003de4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002fcc:	4b2a      	ldr	r3, [pc, #168]	; (8003078 <prvAddNewTaskToReadyList+0xb8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	4a29      	ldr	r2, [pc, #164]	; (8003078 <prvAddNewTaskToReadyList+0xb8>)
 8002fd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002fd6:	4b29      	ldr	r3, [pc, #164]	; (800307c <prvAddNewTaskToReadyList+0xbc>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d109      	bne.n	8002ff2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002fde:	4a27      	ldr	r2, [pc, #156]	; (800307c <prvAddNewTaskToReadyList+0xbc>)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002fe4:	4b24      	ldr	r3, [pc, #144]	; (8003078 <prvAddNewTaskToReadyList+0xb8>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d110      	bne.n	800300e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002fec:	f000 fabc 	bl	8003568 <prvInitialiseTaskLists>
 8002ff0:	e00d      	b.n	800300e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002ff2:	4b23      	ldr	r3, [pc, #140]	; (8003080 <prvAddNewTaskToReadyList+0xc0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d109      	bne.n	800300e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ffa:	4b20      	ldr	r3, [pc, #128]	; (800307c <prvAddNewTaskToReadyList+0xbc>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003004:	429a      	cmp	r2, r3
 8003006:	d802      	bhi.n	800300e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003008:	4a1c      	ldr	r2, [pc, #112]	; (800307c <prvAddNewTaskToReadyList+0xbc>)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800300e:	4b1d      	ldr	r3, [pc, #116]	; (8003084 <prvAddNewTaskToReadyList+0xc4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	3301      	adds	r3, #1
 8003014:	4a1b      	ldr	r2, [pc, #108]	; (8003084 <prvAddNewTaskToReadyList+0xc4>)
 8003016:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	2201      	movs	r2, #1
 800301e:	409a      	lsls	r2, r3
 8003020:	4b19      	ldr	r3, [pc, #100]	; (8003088 <prvAddNewTaskToReadyList+0xc8>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4313      	orrs	r3, r2
 8003026:	4a18      	ldr	r2, [pc, #96]	; (8003088 <prvAddNewTaskToReadyList+0xc8>)
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800302e:	4613      	mov	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4a15      	ldr	r2, [pc, #84]	; (800308c <prvAddNewTaskToReadyList+0xcc>)
 8003038:	441a      	add	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3304      	adds	r3, #4
 800303e:	4619      	mov	r1, r3
 8003040:	4610      	mov	r0, r2
 8003042:	f7ff fe0c 	bl	8002c5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003046:	f000 fefd 	bl	8003e44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800304a:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <prvAddNewTaskToReadyList+0xc0>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00e      	beq.n	8003070 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003052:	4b0a      	ldr	r3, [pc, #40]	; (800307c <prvAddNewTaskToReadyList+0xbc>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305c:	429a      	cmp	r2, r3
 800305e:	d207      	bcs.n	8003070 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <prvAddNewTaskToReadyList+0xd0>)
 8003062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	f3bf 8f4f 	dsb	sy
 800306c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003070:	bf00      	nop
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	200004b8 	.word	0x200004b8
 800307c:	200003b8 	.word	0x200003b8
 8003080:	200004c4 	.word	0x200004c4
 8003084:	200004d4 	.word	0x200004d4
 8003088:	200004c0 	.word	0x200004c0
 800308c:	200003bc 	.word	0x200003bc
 8003090:	e000ed04 	.word	0xe000ed04

08003094 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800309c:	2300      	movs	r3, #0
 800309e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d017      	beq.n	80030d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80030a6:	4b13      	ldr	r3, [pc, #76]	; (80030f4 <vTaskDelay+0x60>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00a      	beq.n	80030c4 <vTaskDelay+0x30>
	__asm volatile
 80030ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b2:	f383 8811 	msr	BASEPRI, r3
 80030b6:	f3bf 8f6f 	isb	sy
 80030ba:	f3bf 8f4f 	dsb	sy
 80030be:	60bb      	str	r3, [r7, #8]
}
 80030c0:	bf00      	nop
 80030c2:	e7fe      	b.n	80030c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80030c4:	f000 f87a 	bl	80031bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80030c8:	2100      	movs	r1, #0
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 fcf4 	bl	8003ab8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80030d0:	f000 f882 	bl	80031d8 <xTaskResumeAll>
 80030d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d107      	bne.n	80030ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80030dc:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <vTaskDelay+0x64>)
 80030de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	f3bf 8f4f 	dsb	sy
 80030e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80030ec:	bf00      	nop
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	200004e0 	.word	0x200004e0
 80030f8:	e000ed04 	.word	0xe000ed04

080030fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b08a      	sub	sp, #40	; 0x28
 8003100:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003102:	2300      	movs	r3, #0
 8003104:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003106:	2300      	movs	r3, #0
 8003108:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800310a:	463a      	mov	r2, r7
 800310c:	1d39      	adds	r1, r7, #4
 800310e:	f107 0308 	add.w	r3, r7, #8
 8003112:	4618      	mov	r0, r3
 8003114:	f7fd fa36 	bl	8000584 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003118:	6839      	ldr	r1, [r7, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	9202      	str	r2, [sp, #8]
 8003120:	9301      	str	r3, [sp, #4]
 8003122:	2300      	movs	r3, #0
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	2300      	movs	r3, #0
 8003128:	460a      	mov	r2, r1
 800312a:	491e      	ldr	r1, [pc, #120]	; (80031a4 <vTaskStartScheduler+0xa8>)
 800312c:	481e      	ldr	r0, [pc, #120]	; (80031a8 <vTaskStartScheduler+0xac>)
 800312e:	f7ff fe1d 	bl	8002d6c <xTaskCreateStatic>
 8003132:	4603      	mov	r3, r0
 8003134:	4a1d      	ldr	r2, [pc, #116]	; (80031ac <vTaskStartScheduler+0xb0>)
 8003136:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003138:	4b1c      	ldr	r3, [pc, #112]	; (80031ac <vTaskStartScheduler+0xb0>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d002      	beq.n	8003146 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003140:	2301      	movs	r3, #1
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	e001      	b.n	800314a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d116      	bne.n	800317e <vTaskStartScheduler+0x82>
	__asm volatile
 8003150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003154:	f383 8811 	msr	BASEPRI, r3
 8003158:	f3bf 8f6f 	isb	sy
 800315c:	f3bf 8f4f 	dsb	sy
 8003160:	613b      	str	r3, [r7, #16]
}
 8003162:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003164:	4b12      	ldr	r3, [pc, #72]	; (80031b0 <vTaskStartScheduler+0xb4>)
 8003166:	f04f 32ff 	mov.w	r2, #4294967295
 800316a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800316c:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <vTaskStartScheduler+0xb8>)
 800316e:	2201      	movs	r2, #1
 8003170:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003172:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <vTaskStartScheduler+0xbc>)
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003178:	f000 fd92 	bl	8003ca0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800317c:	e00e      	b.n	800319c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003184:	d10a      	bne.n	800319c <vTaskStartScheduler+0xa0>
	__asm volatile
 8003186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318a:	f383 8811 	msr	BASEPRI, r3
 800318e:	f3bf 8f6f 	isb	sy
 8003192:	f3bf 8f4f 	dsb	sy
 8003196:	60fb      	str	r3, [r7, #12]
}
 8003198:	bf00      	nop
 800319a:	e7fe      	b.n	800319a <vTaskStartScheduler+0x9e>
}
 800319c:	bf00      	nop
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	08004e74 	.word	0x08004e74
 80031a8:	08003539 	.word	0x08003539
 80031ac:	200004dc 	.word	0x200004dc
 80031b0:	200004d8 	.word	0x200004d8
 80031b4:	200004c4 	.word	0x200004c4
 80031b8:	200004bc 	.word	0x200004bc

080031bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80031c0:	4b04      	ldr	r3, [pc, #16]	; (80031d4 <vTaskSuspendAll+0x18>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	3301      	adds	r3, #1
 80031c6:	4a03      	ldr	r2, [pc, #12]	; (80031d4 <vTaskSuspendAll+0x18>)
 80031c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80031ca:	bf00      	nop
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	200004e0 	.word	0x200004e0

080031d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80031e2:	2300      	movs	r3, #0
 80031e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80031e6:	4b41      	ldr	r3, [pc, #260]	; (80032ec <xTaskResumeAll+0x114>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10a      	bne.n	8003204 <xTaskResumeAll+0x2c>
	__asm volatile
 80031ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f2:	f383 8811 	msr	BASEPRI, r3
 80031f6:	f3bf 8f6f 	isb	sy
 80031fa:	f3bf 8f4f 	dsb	sy
 80031fe:	603b      	str	r3, [r7, #0]
}
 8003200:	bf00      	nop
 8003202:	e7fe      	b.n	8003202 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003204:	f000 fdee 	bl	8003de4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003208:	4b38      	ldr	r3, [pc, #224]	; (80032ec <xTaskResumeAll+0x114>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	3b01      	subs	r3, #1
 800320e:	4a37      	ldr	r2, [pc, #220]	; (80032ec <xTaskResumeAll+0x114>)
 8003210:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003212:	4b36      	ldr	r3, [pc, #216]	; (80032ec <xTaskResumeAll+0x114>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d161      	bne.n	80032de <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800321a:	4b35      	ldr	r3, [pc, #212]	; (80032f0 <xTaskResumeAll+0x118>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d05d      	beq.n	80032de <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003222:	e02e      	b.n	8003282 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003224:	4b33      	ldr	r3, [pc, #204]	; (80032f4 <xTaskResumeAll+0x11c>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	3318      	adds	r3, #24
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff fd71 	bl	8002d18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	3304      	adds	r3, #4
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff fd6c 	bl	8002d18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003244:	2201      	movs	r2, #1
 8003246:	409a      	lsls	r2, r3
 8003248:	4b2b      	ldr	r3, [pc, #172]	; (80032f8 <xTaskResumeAll+0x120>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4313      	orrs	r3, r2
 800324e:	4a2a      	ldr	r2, [pc, #168]	; (80032f8 <xTaskResumeAll+0x120>)
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4a27      	ldr	r2, [pc, #156]	; (80032fc <xTaskResumeAll+0x124>)
 8003260:	441a      	add	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	3304      	adds	r3, #4
 8003266:	4619      	mov	r1, r3
 8003268:	4610      	mov	r0, r2
 800326a:	f7ff fcf8 	bl	8002c5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003272:	4b23      	ldr	r3, [pc, #140]	; (8003300 <xTaskResumeAll+0x128>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003278:	429a      	cmp	r2, r3
 800327a:	d302      	bcc.n	8003282 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800327c:	4b21      	ldr	r3, [pc, #132]	; (8003304 <xTaskResumeAll+0x12c>)
 800327e:	2201      	movs	r2, #1
 8003280:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003282:	4b1c      	ldr	r3, [pc, #112]	; (80032f4 <xTaskResumeAll+0x11c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1cc      	bne.n	8003224 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003290:	f000 fa08 	bl	80036a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003294:	4b1c      	ldr	r3, [pc, #112]	; (8003308 <xTaskResumeAll+0x130>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d010      	beq.n	80032c2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80032a0:	f000 f836 	bl	8003310 <xTaskIncrementTick>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80032aa:	4b16      	ldr	r3, [pc, #88]	; (8003304 <xTaskResumeAll+0x12c>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3b01      	subs	r3, #1
 80032b4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1f1      	bne.n	80032a0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80032bc:	4b12      	ldr	r3, [pc, #72]	; (8003308 <xTaskResumeAll+0x130>)
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80032c2:	4b10      	ldr	r3, [pc, #64]	; (8003304 <xTaskResumeAll+0x12c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d009      	beq.n	80032de <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80032ca:	2301      	movs	r3, #1
 80032cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80032ce:	4b0f      	ldr	r3, [pc, #60]	; (800330c <xTaskResumeAll+0x134>)
 80032d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	f3bf 8f4f 	dsb	sy
 80032da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80032de:	f000 fdb1 	bl	8003e44 <vPortExitCritical>

	return xAlreadyYielded;
 80032e2:	68bb      	ldr	r3, [r7, #8]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	200004e0 	.word	0x200004e0
 80032f0:	200004b8 	.word	0x200004b8
 80032f4:	20000478 	.word	0x20000478
 80032f8:	200004c0 	.word	0x200004c0
 80032fc:	200003bc 	.word	0x200003bc
 8003300:	200003b8 	.word	0x200003b8
 8003304:	200004cc 	.word	0x200004cc
 8003308:	200004c8 	.word	0x200004c8
 800330c:	e000ed04 	.word	0xe000ed04

08003310 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003316:	2300      	movs	r3, #0
 8003318:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800331a:	4b4e      	ldr	r3, [pc, #312]	; (8003454 <xTaskIncrementTick+0x144>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	f040 808e 	bne.w	8003440 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003324:	4b4c      	ldr	r3, [pc, #304]	; (8003458 <xTaskIncrementTick+0x148>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	3301      	adds	r3, #1
 800332a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800332c:	4a4a      	ldr	r2, [pc, #296]	; (8003458 <xTaskIncrementTick+0x148>)
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d120      	bne.n	800337a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003338:	4b48      	ldr	r3, [pc, #288]	; (800345c <xTaskIncrementTick+0x14c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00a      	beq.n	8003358 <xTaskIncrementTick+0x48>
	__asm volatile
 8003342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003346:	f383 8811 	msr	BASEPRI, r3
 800334a:	f3bf 8f6f 	isb	sy
 800334e:	f3bf 8f4f 	dsb	sy
 8003352:	603b      	str	r3, [r7, #0]
}
 8003354:	bf00      	nop
 8003356:	e7fe      	b.n	8003356 <xTaskIncrementTick+0x46>
 8003358:	4b40      	ldr	r3, [pc, #256]	; (800345c <xTaskIncrementTick+0x14c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	4b40      	ldr	r3, [pc, #256]	; (8003460 <xTaskIncrementTick+0x150>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a3e      	ldr	r2, [pc, #248]	; (800345c <xTaskIncrementTick+0x14c>)
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	4a3e      	ldr	r2, [pc, #248]	; (8003460 <xTaskIncrementTick+0x150>)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6013      	str	r3, [r2, #0]
 800336c:	4b3d      	ldr	r3, [pc, #244]	; (8003464 <xTaskIncrementTick+0x154>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	3301      	adds	r3, #1
 8003372:	4a3c      	ldr	r2, [pc, #240]	; (8003464 <xTaskIncrementTick+0x154>)
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	f000 f995 	bl	80036a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800337a:	4b3b      	ldr	r3, [pc, #236]	; (8003468 <xTaskIncrementTick+0x158>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	429a      	cmp	r2, r3
 8003382:	d348      	bcc.n	8003416 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003384:	4b35      	ldr	r3, [pc, #212]	; (800345c <xTaskIncrementTick+0x14c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d104      	bne.n	8003398 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800338e:	4b36      	ldr	r3, [pc, #216]	; (8003468 <xTaskIncrementTick+0x158>)
 8003390:	f04f 32ff 	mov.w	r2, #4294967295
 8003394:	601a      	str	r2, [r3, #0]
					break;
 8003396:	e03e      	b.n	8003416 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003398:	4b30      	ldr	r3, [pc, #192]	; (800345c <xTaskIncrementTick+0x14c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d203      	bcs.n	80033b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80033b0:	4a2d      	ldr	r2, [pc, #180]	; (8003468 <xTaskIncrementTick+0x158>)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80033b6:	e02e      	b.n	8003416 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	3304      	adds	r3, #4
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff fcab 	bl	8002d18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d004      	beq.n	80033d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	3318      	adds	r3, #24
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff fca2 	bl	8002d18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d8:	2201      	movs	r2, #1
 80033da:	409a      	lsls	r2, r3
 80033dc:	4b23      	ldr	r3, [pc, #140]	; (800346c <xTaskIncrementTick+0x15c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	4a22      	ldr	r2, [pc, #136]	; (800346c <xTaskIncrementTick+0x15c>)
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ea:	4613      	mov	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4a1f      	ldr	r2, [pc, #124]	; (8003470 <xTaskIncrementTick+0x160>)
 80033f4:	441a      	add	r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	3304      	adds	r3, #4
 80033fa:	4619      	mov	r1, r3
 80033fc:	4610      	mov	r0, r2
 80033fe:	f7ff fc2e 	bl	8002c5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003406:	4b1b      	ldr	r3, [pc, #108]	; (8003474 <xTaskIncrementTick+0x164>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340c:	429a      	cmp	r2, r3
 800340e:	d3b9      	bcc.n	8003384 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003410:	2301      	movs	r3, #1
 8003412:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003414:	e7b6      	b.n	8003384 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003416:	4b17      	ldr	r3, [pc, #92]	; (8003474 <xTaskIncrementTick+0x164>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800341c:	4914      	ldr	r1, [pc, #80]	; (8003470 <xTaskIncrementTick+0x160>)
 800341e:	4613      	mov	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	440b      	add	r3, r1
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d901      	bls.n	8003432 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800342e:	2301      	movs	r3, #1
 8003430:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003432:	4b11      	ldr	r3, [pc, #68]	; (8003478 <xTaskIncrementTick+0x168>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d007      	beq.n	800344a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800343a:	2301      	movs	r3, #1
 800343c:	617b      	str	r3, [r7, #20]
 800343e:	e004      	b.n	800344a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003440:	4b0e      	ldr	r3, [pc, #56]	; (800347c <xTaskIncrementTick+0x16c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	3301      	adds	r3, #1
 8003446:	4a0d      	ldr	r2, [pc, #52]	; (800347c <xTaskIncrementTick+0x16c>)
 8003448:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800344a:	697b      	ldr	r3, [r7, #20]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	200004e0 	.word	0x200004e0
 8003458:	200004bc 	.word	0x200004bc
 800345c:	20000470 	.word	0x20000470
 8003460:	20000474 	.word	0x20000474
 8003464:	200004d0 	.word	0x200004d0
 8003468:	200004d8 	.word	0x200004d8
 800346c:	200004c0 	.word	0x200004c0
 8003470:	200003bc 	.word	0x200003bc
 8003474:	200003b8 	.word	0x200003b8
 8003478:	200004cc 	.word	0x200004cc
 800347c:	200004c8 	.word	0x200004c8

08003480 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003480:	b480      	push	{r7}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003486:	4b27      	ldr	r3, [pc, #156]	; (8003524 <vTaskSwitchContext+0xa4>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800348e:	4b26      	ldr	r3, [pc, #152]	; (8003528 <vTaskSwitchContext+0xa8>)
 8003490:	2201      	movs	r2, #1
 8003492:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003494:	e03f      	b.n	8003516 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003496:	4b24      	ldr	r3, [pc, #144]	; (8003528 <vTaskSwitchContext+0xa8>)
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800349c:	4b23      	ldr	r3, [pc, #140]	; (800352c <vTaskSwitchContext+0xac>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	fab3 f383 	clz	r3, r3
 80034a8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80034aa:	7afb      	ldrb	r3, [r7, #11]
 80034ac:	f1c3 031f 	rsb	r3, r3, #31
 80034b0:	617b      	str	r3, [r7, #20]
 80034b2:	491f      	ldr	r1, [pc, #124]	; (8003530 <vTaskSwitchContext+0xb0>)
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	4613      	mov	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10a      	bne.n	80034dc <vTaskSwitchContext+0x5c>
	__asm volatile
 80034c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ca:	f383 8811 	msr	BASEPRI, r3
 80034ce:	f3bf 8f6f 	isb	sy
 80034d2:	f3bf 8f4f 	dsb	sy
 80034d6:	607b      	str	r3, [r7, #4]
}
 80034d8:	bf00      	nop
 80034da:	e7fe      	b.n	80034da <vTaskSwitchContext+0x5a>
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4a12      	ldr	r2, [pc, #72]	; (8003530 <vTaskSwitchContext+0xb0>)
 80034e8:	4413      	add	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	605a      	str	r2, [r3, #4]
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	3308      	adds	r3, #8
 80034fe:	429a      	cmp	r2, r3
 8003500:	d104      	bne.n	800350c <vTaskSwitchContext+0x8c>
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	605a      	str	r2, [r3, #4]
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	4a08      	ldr	r2, [pc, #32]	; (8003534 <vTaskSwitchContext+0xb4>)
 8003514:	6013      	str	r3, [r2, #0]
}
 8003516:	bf00      	nop
 8003518:	371c      	adds	r7, #28
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	200004e0 	.word	0x200004e0
 8003528:	200004cc 	.word	0x200004cc
 800352c:	200004c0 	.word	0x200004c0
 8003530:	200003bc 	.word	0x200003bc
 8003534:	200003b8 	.word	0x200003b8

08003538 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003540:	f000 f852 	bl	80035e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003544:	4b06      	ldr	r3, [pc, #24]	; (8003560 <prvIdleTask+0x28>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d9f9      	bls.n	8003540 <prvIdleTask+0x8>
			{
				taskYIELD();
 800354c:	4b05      	ldr	r3, [pc, #20]	; (8003564 <prvIdleTask+0x2c>)
 800354e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	f3bf 8f4f 	dsb	sy
 8003558:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800355c:	e7f0      	b.n	8003540 <prvIdleTask+0x8>
 800355e:	bf00      	nop
 8003560:	200003bc 	.word	0x200003bc
 8003564:	e000ed04 	.word	0xe000ed04

08003568 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800356e:	2300      	movs	r3, #0
 8003570:	607b      	str	r3, [r7, #4]
 8003572:	e00c      	b.n	800358e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4a12      	ldr	r2, [pc, #72]	; (80035c8 <prvInitialiseTaskLists+0x60>)
 8003580:	4413      	add	r3, r2
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff fb3e 	bl	8002c04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3301      	adds	r3, #1
 800358c:	607b      	str	r3, [r7, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b06      	cmp	r3, #6
 8003592:	d9ef      	bls.n	8003574 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003594:	480d      	ldr	r0, [pc, #52]	; (80035cc <prvInitialiseTaskLists+0x64>)
 8003596:	f7ff fb35 	bl	8002c04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800359a:	480d      	ldr	r0, [pc, #52]	; (80035d0 <prvInitialiseTaskLists+0x68>)
 800359c:	f7ff fb32 	bl	8002c04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80035a0:	480c      	ldr	r0, [pc, #48]	; (80035d4 <prvInitialiseTaskLists+0x6c>)
 80035a2:	f7ff fb2f 	bl	8002c04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80035a6:	480c      	ldr	r0, [pc, #48]	; (80035d8 <prvInitialiseTaskLists+0x70>)
 80035a8:	f7ff fb2c 	bl	8002c04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80035ac:	480b      	ldr	r0, [pc, #44]	; (80035dc <prvInitialiseTaskLists+0x74>)
 80035ae:	f7ff fb29 	bl	8002c04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80035b2:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <prvInitialiseTaskLists+0x78>)
 80035b4:	4a05      	ldr	r2, [pc, #20]	; (80035cc <prvInitialiseTaskLists+0x64>)
 80035b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80035b8:	4b0a      	ldr	r3, [pc, #40]	; (80035e4 <prvInitialiseTaskLists+0x7c>)
 80035ba:	4a05      	ldr	r2, [pc, #20]	; (80035d0 <prvInitialiseTaskLists+0x68>)
 80035bc:	601a      	str	r2, [r3, #0]
}
 80035be:	bf00      	nop
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	200003bc 	.word	0x200003bc
 80035cc:	20000448 	.word	0x20000448
 80035d0:	2000045c 	.word	0x2000045c
 80035d4:	20000478 	.word	0x20000478
 80035d8:	2000048c 	.word	0x2000048c
 80035dc:	200004a4 	.word	0x200004a4
 80035e0:	20000470 	.word	0x20000470
 80035e4:	20000474 	.word	0x20000474

080035e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035ee:	e019      	b.n	8003624 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80035f0:	f000 fbf8 	bl	8003de4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035f4:	4b10      	ldr	r3, [pc, #64]	; (8003638 <prvCheckTasksWaitingTermination+0x50>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3304      	adds	r3, #4
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff fb89 	bl	8002d18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003606:	4b0d      	ldr	r3, [pc, #52]	; (800363c <prvCheckTasksWaitingTermination+0x54>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	3b01      	subs	r3, #1
 800360c:	4a0b      	ldr	r2, [pc, #44]	; (800363c <prvCheckTasksWaitingTermination+0x54>)
 800360e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003610:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <prvCheckTasksWaitingTermination+0x58>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	3b01      	subs	r3, #1
 8003616:	4a0a      	ldr	r2, [pc, #40]	; (8003640 <prvCheckTasksWaitingTermination+0x58>)
 8003618:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800361a:	f000 fc13 	bl	8003e44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f810 	bl	8003644 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003624:	4b06      	ldr	r3, [pc, #24]	; (8003640 <prvCheckTasksWaitingTermination+0x58>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1e1      	bne.n	80035f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800362c:	bf00      	nop
 800362e:	bf00      	nop
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	2000048c 	.word	0x2000048c
 800363c:	200004b8 	.word	0x200004b8
 8003640:	200004a0 	.word	0x200004a0

08003644 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003652:	2b00      	cmp	r3, #0
 8003654:	d108      	bne.n	8003668 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	4618      	mov	r0, r3
 800365c:	f000 fdb0 	bl	80041c0 <vPortFree>
				vPortFree( pxTCB );
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 fdad 	bl	80041c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003666:	e018      	b.n	800369a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800366e:	2b01      	cmp	r3, #1
 8003670:	d103      	bne.n	800367a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 fda4 	bl	80041c0 <vPortFree>
	}
 8003678:	e00f      	b.n	800369a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003680:	2b02      	cmp	r3, #2
 8003682:	d00a      	beq.n	800369a <prvDeleteTCB+0x56>
	__asm volatile
 8003684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003688:	f383 8811 	msr	BASEPRI, r3
 800368c:	f3bf 8f6f 	isb	sy
 8003690:	f3bf 8f4f 	dsb	sy
 8003694:	60fb      	str	r3, [r7, #12]
}
 8003696:	bf00      	nop
 8003698:	e7fe      	b.n	8003698 <prvDeleteTCB+0x54>
	}
 800369a:	bf00      	nop
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
	...

080036a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036aa:	4b0c      	ldr	r3, [pc, #48]	; (80036dc <prvResetNextTaskUnblockTime+0x38>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d104      	bne.n	80036be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80036b4:	4b0a      	ldr	r3, [pc, #40]	; (80036e0 <prvResetNextTaskUnblockTime+0x3c>)
 80036b6:	f04f 32ff 	mov.w	r2, #4294967295
 80036ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80036bc:	e008      	b.n	80036d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036be:	4b07      	ldr	r3, [pc, #28]	; (80036dc <prvResetNextTaskUnblockTime+0x38>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	4a04      	ldr	r2, [pc, #16]	; (80036e0 <prvResetNextTaskUnblockTime+0x3c>)
 80036ce:	6013      	str	r3, [r2, #0]
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	20000470 	.word	0x20000470
 80036e0:	200004d8 	.word	0x200004d8

080036e4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
 80036f0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80036f2:	f000 fb77 	bl	8003de4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80036f6:	4b26      	ldr	r3, [pc, #152]	; (8003790 <xTaskNotifyWait+0xac>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d01a      	beq.n	800373a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8003704:	4b22      	ldr	r3, [pc, #136]	; (8003790 <xTaskNotifyWait+0xac>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	43d2      	mvns	r2, r2
 800370e:	400a      	ands	r2, r1
 8003710:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8003712:	4b1f      	ldr	r3, [pc, #124]	; (8003790 <xTaskNotifyWait+0xac>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00b      	beq.n	800373a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003722:	2101      	movs	r1, #1
 8003724:	6838      	ldr	r0, [r7, #0]
 8003726:	f000 f9c7 	bl	8003ab8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800372a:	4b1a      	ldr	r3, [pc, #104]	; (8003794 <xTaskNotifyWait+0xb0>)
 800372c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	f3bf 8f4f 	dsb	sy
 8003736:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800373a:	f000 fb83 	bl	8003e44 <vPortExitCritical>

		taskENTER_CRITICAL();
 800373e:	f000 fb51 	bl	8003de4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d004      	beq.n	8003752 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8003748:	4b11      	ldr	r3, [pc, #68]	; (8003790 <xTaskNotifyWait+0xac>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8003752:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <xTaskNotifyWait+0xac>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d002      	beq.n	8003766 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8003760:	2300      	movs	r3, #0
 8003762:	617b      	str	r3, [r7, #20]
 8003764:	e008      	b.n	8003778 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8003766:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <xTaskNotifyWait+0xac>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	43d2      	mvns	r2, r2
 8003770:	400a      	ands	r2, r1
 8003772:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8003774:	2301      	movs	r3, #1
 8003776:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003778:	4b05      	ldr	r3, [pc, #20]	; (8003790 <xTaskNotifyWait+0xac>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8003782:	f000 fb5f 	bl	8003e44 <vPortExitCritical>

		return xReturn;
 8003786:	697b      	ldr	r3, [r7, #20]
	}
 8003788:	4618      	mov	r0, r3
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	200003b8 	.word	0x200003b8
 8003794:	e000ed04 	.word	0xe000ed04

08003798 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8003798:	b580      	push	{r7, lr}
 800379a:	b08a      	sub	sp, #40	; 0x28
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	603b      	str	r3, [r7, #0]
 80037a4:	4613      	mov	r3, r2
 80037a6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80037a8:	2301      	movs	r3, #1
 80037aa:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10a      	bne.n	80037c8 <xTaskGenericNotify+0x30>
	__asm volatile
 80037b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b6:	f383 8811 	msr	BASEPRI, r3
 80037ba:	f3bf 8f6f 	isb	sy
 80037be:	f3bf 8f4f 	dsb	sy
 80037c2:	61bb      	str	r3, [r7, #24]
}
 80037c4:	bf00      	nop
 80037c6:	e7fe      	b.n	80037c6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80037cc:	f000 fb0a 	bl	8003de4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037e4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	2202      	movs	r2, #2
 80037ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 80037ee:	79fb      	ldrb	r3, [r7, #7]
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d828      	bhi.n	8003846 <xTaskGenericNotify+0xae>
 80037f4:	a201      	add	r2, pc, #4	; (adr r2, 80037fc <xTaskGenericNotify+0x64>)
 80037f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fa:	bf00      	nop
 80037fc:	08003867 	.word	0x08003867
 8003800:	08003811 	.word	0x08003811
 8003804:	0800381f 	.word	0x0800381f
 8003808:	0800382b 	.word	0x0800382b
 800380c:	08003833 	.word	0x08003833
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	431a      	orrs	r2, r3
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800381c:	e026      	b.n	800386c <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003822:	1c5a      	adds	r2, r3, #1
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8003828:	e020      	b.n	800386c <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800382a:	6a3b      	ldr	r3, [r7, #32]
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8003830:	e01c      	b.n	800386c <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003832:	7ffb      	ldrb	r3, [r7, #31]
 8003834:	2b02      	cmp	r3, #2
 8003836:	d003      	beq.n	8003840 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800383e:	e015      	b.n	800386c <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 8003840:	2300      	movs	r3, #0
 8003842:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8003844:	e012      	b.n	800386c <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800384a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384e:	d00c      	beq.n	800386a <xTaskGenericNotify+0xd2>
	__asm volatile
 8003850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003854:	f383 8811 	msr	BASEPRI, r3
 8003858:	f3bf 8f6f 	isb	sy
 800385c:	f3bf 8f4f 	dsb	sy
 8003860:	617b      	str	r3, [r7, #20]
}
 8003862:	bf00      	nop
 8003864:	e7fe      	b.n	8003864 <xTaskGenericNotify+0xcc>
					break;
 8003866:	bf00      	nop
 8003868:	e000      	b.n	800386c <xTaskGenericNotify+0xd4>

					break;
 800386a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800386c:	7ffb      	ldrb	r3, [r7, #31]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d139      	bne.n	80038e6 <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	3304      	adds	r3, #4
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff fa4e 	bl	8002d18 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	2201      	movs	r2, #1
 8003882:	409a      	lsls	r2, r3
 8003884:	4b1b      	ldr	r3, [pc, #108]	; (80038f4 <xTaskGenericNotify+0x15c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4313      	orrs	r3, r2
 800388a:	4a1a      	ldr	r2, [pc, #104]	; (80038f4 <xTaskGenericNotify+0x15c>)
 800388c:	6013      	str	r3, [r2, #0]
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003892:	4613      	mov	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4a17      	ldr	r2, [pc, #92]	; (80038f8 <xTaskGenericNotify+0x160>)
 800389c:	441a      	add	r2, r3
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	3304      	adds	r3, #4
 80038a2:	4619      	mov	r1, r3
 80038a4:	4610      	mov	r0, r2
 80038a6:	f7ff f9da 	bl	8002c5e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <xTaskGenericNotify+0x130>
	__asm volatile
 80038b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b6:	f383 8811 	msr	BASEPRI, r3
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	f3bf 8f4f 	dsb	sy
 80038c2:	613b      	str	r3, [r7, #16]
}
 80038c4:	bf00      	nop
 80038c6:	e7fe      	b.n	80038c6 <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038cc:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <xTaskGenericNotify+0x164>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d907      	bls.n	80038e6 <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80038d6:	4b0a      	ldr	r3, [pc, #40]	; (8003900 <xTaskGenericNotify+0x168>)
 80038d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	f3bf 8f4f 	dsb	sy
 80038e2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80038e6:	f000 faad 	bl	8003e44 <vPortExitCritical>

		return xReturn;
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3728      	adds	r7, #40	; 0x28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	200004c0 	.word	0x200004c0
 80038f8:	200003bc 	.word	0x200003bc
 80038fc:	200003b8 	.word	0x200003b8
 8003900:	e000ed04 	.word	0xe000ed04

08003904 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08e      	sub	sp, #56	; 0x38
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	603b      	str	r3, [r7, #0]
 8003910:	4613      	mov	r3, r2
 8003912:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8003914:	2301      	movs	r3, #1
 8003916:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10a      	bne.n	8003934 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800391e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003922:	f383 8811 	msr	BASEPRI, r3
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003930:	bf00      	nop
 8003932:	e7fe      	b.n	8003932 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003934:	f000 fb38 	bl	8003fa8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800393c:	f3ef 8211 	mrs	r2, BASEPRI
 8003940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003944:	f383 8811 	msr	BASEPRI, r3
 8003948:	f3bf 8f6f 	isb	sy
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	623a      	str	r2, [r7, #32]
 8003952:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003954:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003956:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800395e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003960:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8003966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003968:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800396c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8003970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003972:	2202      	movs	r2, #2
 8003974:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8003978:	79fb      	ldrb	r3, [r7, #7]
 800397a:	2b04      	cmp	r3, #4
 800397c:	d828      	bhi.n	80039d0 <xTaskGenericNotifyFromISR+0xcc>
 800397e:	a201      	add	r2, pc, #4	; (adr r2, 8003984 <xTaskGenericNotifyFromISR+0x80>)
 8003980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003984:	080039f1 	.word	0x080039f1
 8003988:	08003999 	.word	0x08003999
 800398c:	080039a7 	.word	0x080039a7
 8003990:	080039b3 	.word	0x080039b3
 8003994:	080039bb 	.word	0x080039bb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8003998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	431a      	orrs	r2, r3
 80039a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80039a4:	e027      	b.n	80039f6 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80039a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ae:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80039b0:	e021      	b.n	80039f6 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80039b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80039b8:	e01d      	b.n	80039f6 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80039ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d003      	beq.n	80039ca <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80039c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80039c8:	e015      	b.n	80039f6 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80039ce:	e012      	b.n	80039f6 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80039d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d8:	d00c      	beq.n	80039f4 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 80039da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039de:	f383 8811 	msr	BASEPRI, r3
 80039e2:	f3bf 8f6f 	isb	sy
 80039e6:	f3bf 8f4f 	dsb	sy
 80039ea:	61bb      	str	r3, [r7, #24]
}
 80039ec:	bf00      	nop
 80039ee:	e7fe      	b.n	80039ee <xTaskGenericNotifyFromISR+0xea>
					break;
 80039f0:	bf00      	nop
 80039f2:	e000      	b.n	80039f6 <xTaskGenericNotifyFromISR+0xf2>
					break;
 80039f4:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80039f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d145      	bne.n	8003a8a <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80039fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8003a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0a:	f383 8811 	msr	BASEPRI, r3
 8003a0e:	f3bf 8f6f 	isb	sy
 8003a12:	f3bf 8f4f 	dsb	sy
 8003a16:	617b      	str	r3, [r7, #20]
}
 8003a18:	bf00      	nop
 8003a1a:	e7fe      	b.n	8003a1a <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a1c:	4b20      	ldr	r3, [pc, #128]	; (8003aa0 <xTaskGenericNotifyFromISR+0x19c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d11c      	bne.n	8003a5e <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a26:	3304      	adds	r3, #4
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff f975 	bl	8002d18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a32:	2201      	movs	r2, #1
 8003a34:	409a      	lsls	r2, r3
 8003a36:	4b1b      	ldr	r3, [pc, #108]	; (8003aa4 <xTaskGenericNotifyFromISR+0x1a0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	4a19      	ldr	r2, [pc, #100]	; (8003aa4 <xTaskGenericNotifyFromISR+0x1a0>)
 8003a3e:	6013      	str	r3, [r2, #0]
 8003a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4a16      	ldr	r2, [pc, #88]	; (8003aa8 <xTaskGenericNotifyFromISR+0x1a4>)
 8003a4e:	441a      	add	r2, r3
 8003a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a52:	3304      	adds	r3, #4
 8003a54:	4619      	mov	r1, r3
 8003a56:	4610      	mov	r0, r2
 8003a58:	f7ff f901 	bl	8002c5e <vListInsertEnd>
 8003a5c:	e005      	b.n	8003a6a <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a60:	3318      	adds	r3, #24
 8003a62:	4619      	mov	r1, r3
 8003a64:	4811      	ldr	r0, [pc, #68]	; (8003aac <xTaskGenericNotifyFromISR+0x1a8>)
 8003a66:	f7ff f8fa 	bl	8002c5e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a6e:	4b10      	ldr	r3, [pc, #64]	; (8003ab0 <xTaskGenericNotifyFromISR+0x1ac>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d908      	bls.n	8003a8a <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8003a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d002      	beq.n	8003a84 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8003a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a80:	2201      	movs	r2, #1
 8003a82:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8003a84:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <xTaskGenericNotifyFromISR+0x1b0>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003a94:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8003a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3738      	adds	r7, #56	; 0x38
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	200004e0 	.word	0x200004e0
 8003aa4:	200004c0 	.word	0x200004c0
 8003aa8:	200003bc 	.word	0x200003bc
 8003aac:	20000478 	.word	0x20000478
 8003ab0:	200003b8 	.word	0x200003b8
 8003ab4:	200004cc 	.word	0x200004cc

08003ab8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003ac2:	4b29      	ldr	r3, [pc, #164]	; (8003b68 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ac8:	4b28      	ldr	r3, [pc, #160]	; (8003b6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	3304      	adds	r3, #4
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7ff f922 	bl	8002d18 <uxListRemove>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10b      	bne.n	8003af2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003ada:	4b24      	ldr	r3, [pc, #144]	; (8003b6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	43da      	mvns	r2, r3
 8003ae8:	4b21      	ldr	r3, [pc, #132]	; (8003b70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4013      	ands	r3, r2
 8003aee:	4a20      	ldr	r2, [pc, #128]	; (8003b70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003af0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af8:	d10a      	bne.n	8003b10 <prvAddCurrentTaskToDelayedList+0x58>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d007      	beq.n	8003b10 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b00:	4b1a      	ldr	r3, [pc, #104]	; (8003b6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	3304      	adds	r3, #4
 8003b06:	4619      	mov	r1, r3
 8003b08:	481a      	ldr	r0, [pc, #104]	; (8003b74 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003b0a:	f7ff f8a8 	bl	8002c5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003b0e:	e026      	b.n	8003b5e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4413      	add	r3, r2
 8003b16:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b18:	4b14      	ldr	r3, [pc, #80]	; (8003b6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d209      	bcs.n	8003b3c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b28:	4b13      	ldr	r3, [pc, #76]	; (8003b78 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	4b0f      	ldr	r3, [pc, #60]	; (8003b6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	3304      	adds	r3, #4
 8003b32:	4619      	mov	r1, r3
 8003b34:	4610      	mov	r0, r2
 8003b36:	f7ff f8b6 	bl	8002ca6 <vListInsert>
}
 8003b3a:	e010      	b.n	8003b5e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b3c:	4b0f      	ldr	r3, [pc, #60]	; (8003b7c <prvAddCurrentTaskToDelayedList+0xc4>)
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	3304      	adds	r3, #4
 8003b46:	4619      	mov	r1, r3
 8003b48:	4610      	mov	r0, r2
 8003b4a:	f7ff f8ac 	bl	8002ca6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003b4e:	4b0c      	ldr	r3, [pc, #48]	; (8003b80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d202      	bcs.n	8003b5e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003b58:	4a09      	ldr	r2, [pc, #36]	; (8003b80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	6013      	str	r3, [r2, #0]
}
 8003b5e:	bf00      	nop
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	200004bc 	.word	0x200004bc
 8003b6c:	200003b8 	.word	0x200003b8
 8003b70:	200004c0 	.word	0x200004c0
 8003b74:	200004a4 	.word	0x200004a4
 8003b78:	20000474 	.word	0x20000474
 8003b7c:	20000470 	.word	0x20000470
 8003b80:	200004d8 	.word	0x200004d8

08003b84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	3b04      	subs	r3, #4
 8003b94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	3b04      	subs	r3, #4
 8003ba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	f023 0201 	bic.w	r2, r3, #1
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	3b04      	subs	r3, #4
 8003bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003bb4:	4a0c      	ldr	r2, [pc, #48]	; (8003be8 <pxPortInitialiseStack+0x64>)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	3b14      	subs	r3, #20
 8003bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	3b04      	subs	r3, #4
 8003bca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f06f 0202 	mvn.w	r2, #2
 8003bd2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	3b20      	subs	r3, #32
 8003bd8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003bda:	68fb      	ldr	r3, [r7, #12]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	08003bed 	.word	0x08003bed

08003bec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003bf6:	4b12      	ldr	r3, [pc, #72]	; (8003c40 <prvTaskExitError+0x54>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bfe:	d00a      	beq.n	8003c16 <prvTaskExitError+0x2a>
	__asm volatile
 8003c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c04:	f383 8811 	msr	BASEPRI, r3
 8003c08:	f3bf 8f6f 	isb	sy
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	60fb      	str	r3, [r7, #12]
}
 8003c12:	bf00      	nop
 8003c14:	e7fe      	b.n	8003c14 <prvTaskExitError+0x28>
	__asm volatile
 8003c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1a:	f383 8811 	msr	BASEPRI, r3
 8003c1e:	f3bf 8f6f 	isb	sy
 8003c22:	f3bf 8f4f 	dsb	sy
 8003c26:	60bb      	str	r3, [r7, #8]
}
 8003c28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003c2a:	bf00      	nop
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0fc      	beq.n	8003c2c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003c32:	bf00      	nop
 8003c34:	bf00      	nop
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	2000000c 	.word	0x2000000c
	...

08003c50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003c50:	4b07      	ldr	r3, [pc, #28]	; (8003c70 <pxCurrentTCBConst2>)
 8003c52:	6819      	ldr	r1, [r3, #0]
 8003c54:	6808      	ldr	r0, [r1, #0]
 8003c56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c5a:	f380 8809 	msr	PSP, r0
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f04f 0000 	mov.w	r0, #0
 8003c66:	f380 8811 	msr	BASEPRI, r0
 8003c6a:	4770      	bx	lr
 8003c6c:	f3af 8000 	nop.w

08003c70 <pxCurrentTCBConst2>:
 8003c70:	200003b8 	.word	0x200003b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003c74:	bf00      	nop
 8003c76:	bf00      	nop

08003c78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003c78:	4808      	ldr	r0, [pc, #32]	; (8003c9c <prvPortStartFirstTask+0x24>)
 8003c7a:	6800      	ldr	r0, [r0, #0]
 8003c7c:	6800      	ldr	r0, [r0, #0]
 8003c7e:	f380 8808 	msr	MSP, r0
 8003c82:	f04f 0000 	mov.w	r0, #0
 8003c86:	f380 8814 	msr	CONTROL, r0
 8003c8a:	b662      	cpsie	i
 8003c8c:	b661      	cpsie	f
 8003c8e:	f3bf 8f4f 	dsb	sy
 8003c92:	f3bf 8f6f 	isb	sy
 8003c96:	df00      	svc	0
 8003c98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003c9a:	bf00      	nop
 8003c9c:	e000ed08 	.word	0xe000ed08

08003ca0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003ca6:	4b46      	ldr	r3, [pc, #280]	; (8003dc0 <xPortStartScheduler+0x120>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a46      	ldr	r2, [pc, #280]	; (8003dc4 <xPortStartScheduler+0x124>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d10a      	bne.n	8003cc6 <xPortStartScheduler+0x26>
	__asm volatile
 8003cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb4:	f383 8811 	msr	BASEPRI, r3
 8003cb8:	f3bf 8f6f 	isb	sy
 8003cbc:	f3bf 8f4f 	dsb	sy
 8003cc0:	613b      	str	r3, [r7, #16]
}
 8003cc2:	bf00      	nop
 8003cc4:	e7fe      	b.n	8003cc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003cc6:	4b3e      	ldr	r3, [pc, #248]	; (8003dc0 <xPortStartScheduler+0x120>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a3f      	ldr	r2, [pc, #252]	; (8003dc8 <xPortStartScheduler+0x128>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d10a      	bne.n	8003ce6 <xPortStartScheduler+0x46>
	__asm volatile
 8003cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd4:	f383 8811 	msr	BASEPRI, r3
 8003cd8:	f3bf 8f6f 	isb	sy
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	60fb      	str	r3, [r7, #12]
}
 8003ce2:	bf00      	nop
 8003ce4:	e7fe      	b.n	8003ce4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003ce6:	4b39      	ldr	r3, [pc, #228]	; (8003dcc <xPortStartScheduler+0x12c>)
 8003ce8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	22ff      	movs	r2, #255	; 0xff
 8003cf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d00:	78fb      	ldrb	r3, [r7, #3]
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	4b31      	ldr	r3, [pc, #196]	; (8003dd0 <xPortStartScheduler+0x130>)
 8003d0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003d0e:	4b31      	ldr	r3, [pc, #196]	; (8003dd4 <xPortStartScheduler+0x134>)
 8003d10:	2207      	movs	r2, #7
 8003d12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d14:	e009      	b.n	8003d2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003d16:	4b2f      	ldr	r3, [pc, #188]	; (8003dd4 <xPortStartScheduler+0x134>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	4a2d      	ldr	r2, [pc, #180]	; (8003dd4 <xPortStartScheduler+0x134>)
 8003d1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003d20:	78fb      	ldrb	r3, [r7, #3]
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d2a:	78fb      	ldrb	r3, [r7, #3]
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d32:	2b80      	cmp	r3, #128	; 0x80
 8003d34:	d0ef      	beq.n	8003d16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003d36:	4b27      	ldr	r3, [pc, #156]	; (8003dd4 <xPortStartScheduler+0x134>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f1c3 0307 	rsb	r3, r3, #7
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d00a      	beq.n	8003d58 <xPortStartScheduler+0xb8>
	__asm volatile
 8003d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d46:	f383 8811 	msr	BASEPRI, r3
 8003d4a:	f3bf 8f6f 	isb	sy
 8003d4e:	f3bf 8f4f 	dsb	sy
 8003d52:	60bb      	str	r3, [r7, #8]
}
 8003d54:	bf00      	nop
 8003d56:	e7fe      	b.n	8003d56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003d58:	4b1e      	ldr	r3, [pc, #120]	; (8003dd4 <xPortStartScheduler+0x134>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	021b      	lsls	r3, r3, #8
 8003d5e:	4a1d      	ldr	r2, [pc, #116]	; (8003dd4 <xPortStartScheduler+0x134>)
 8003d60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d62:	4b1c      	ldr	r3, [pc, #112]	; (8003dd4 <xPortStartScheduler+0x134>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d6a:	4a1a      	ldr	r2, [pc, #104]	; (8003dd4 <xPortStartScheduler+0x134>)
 8003d6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003d76:	4b18      	ldr	r3, [pc, #96]	; (8003dd8 <xPortStartScheduler+0x138>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a17      	ldr	r2, [pc, #92]	; (8003dd8 <xPortStartScheduler+0x138>)
 8003d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003d82:	4b15      	ldr	r3, [pc, #84]	; (8003dd8 <xPortStartScheduler+0x138>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a14      	ldr	r2, [pc, #80]	; (8003dd8 <xPortStartScheduler+0x138>)
 8003d88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003d8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003d8e:	f000 f8dd 	bl	8003f4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003d92:	4b12      	ldr	r3, [pc, #72]	; (8003ddc <xPortStartScheduler+0x13c>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003d98:	f000 f8fc 	bl	8003f94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003d9c:	4b10      	ldr	r3, [pc, #64]	; (8003de0 <xPortStartScheduler+0x140>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a0f      	ldr	r2, [pc, #60]	; (8003de0 <xPortStartScheduler+0x140>)
 8003da2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003da6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003da8:	f7ff ff66 	bl	8003c78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003dac:	f7ff fb68 	bl	8003480 <vTaskSwitchContext>
	prvTaskExitError();
 8003db0:	f7ff ff1c 	bl	8003bec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3718      	adds	r7, #24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	e000ed00 	.word	0xe000ed00
 8003dc4:	410fc271 	.word	0x410fc271
 8003dc8:	410fc270 	.word	0x410fc270
 8003dcc:	e000e400 	.word	0xe000e400
 8003dd0:	200004e4 	.word	0x200004e4
 8003dd4:	200004e8 	.word	0x200004e8
 8003dd8:	e000ed20 	.word	0xe000ed20
 8003ddc:	2000000c 	.word	0x2000000c
 8003de0:	e000ef34 	.word	0xe000ef34

08003de4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
	__asm volatile
 8003dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dee:	f383 8811 	msr	BASEPRI, r3
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	f3bf 8f4f 	dsb	sy
 8003dfa:	607b      	str	r3, [r7, #4]
}
 8003dfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003dfe:	4b0f      	ldr	r3, [pc, #60]	; (8003e3c <vPortEnterCritical+0x58>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3301      	adds	r3, #1
 8003e04:	4a0d      	ldr	r2, [pc, #52]	; (8003e3c <vPortEnterCritical+0x58>)
 8003e06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003e08:	4b0c      	ldr	r3, [pc, #48]	; (8003e3c <vPortEnterCritical+0x58>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d10f      	bne.n	8003e30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e10:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <vPortEnterCritical+0x5c>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <vPortEnterCritical+0x4c>
	__asm volatile
 8003e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	603b      	str	r3, [r7, #0]
}
 8003e2c:	bf00      	nop
 8003e2e:	e7fe      	b.n	8003e2e <vPortEnterCritical+0x4a>
	}
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	2000000c 	.word	0x2000000c
 8003e40:	e000ed04 	.word	0xe000ed04

08003e44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003e4a:	4b12      	ldr	r3, [pc, #72]	; (8003e94 <vPortExitCritical+0x50>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10a      	bne.n	8003e68 <vPortExitCritical+0x24>
	__asm volatile
 8003e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e56:	f383 8811 	msr	BASEPRI, r3
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	607b      	str	r3, [r7, #4]
}
 8003e64:	bf00      	nop
 8003e66:	e7fe      	b.n	8003e66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003e68:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <vPortExitCritical+0x50>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	4a09      	ldr	r2, [pc, #36]	; (8003e94 <vPortExitCritical+0x50>)
 8003e70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003e72:	4b08      	ldr	r3, [pc, #32]	; (8003e94 <vPortExitCritical+0x50>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d105      	bne.n	8003e86 <vPortExitCritical+0x42>
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	f383 8811 	msr	BASEPRI, r3
}
 8003e84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	2000000c 	.word	0x2000000c
	...

08003ea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003ea0:	f3ef 8009 	mrs	r0, PSP
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	4b15      	ldr	r3, [pc, #84]	; (8003f00 <pxCurrentTCBConst>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	f01e 0f10 	tst.w	lr, #16
 8003eb0:	bf08      	it	eq
 8003eb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003eb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eba:	6010      	str	r0, [r2, #0]
 8003ebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003ec0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003ec4:	f380 8811 	msr	BASEPRI, r0
 8003ec8:	f3bf 8f4f 	dsb	sy
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f7ff fad6 	bl	8003480 <vTaskSwitchContext>
 8003ed4:	f04f 0000 	mov.w	r0, #0
 8003ed8:	f380 8811 	msr	BASEPRI, r0
 8003edc:	bc09      	pop	{r0, r3}
 8003ede:	6819      	ldr	r1, [r3, #0]
 8003ee0:	6808      	ldr	r0, [r1, #0]
 8003ee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ee6:	f01e 0f10 	tst.w	lr, #16
 8003eea:	bf08      	it	eq
 8003eec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003ef0:	f380 8809 	msr	PSP, r0
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	f3af 8000 	nop.w

08003f00 <pxCurrentTCBConst>:
 8003f00:	200003b8 	.word	0x200003b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003f04:	bf00      	nop
 8003f06:	bf00      	nop

08003f08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8003f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f12:	f383 8811 	msr	BASEPRI, r3
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	607b      	str	r3, [r7, #4]
}
 8003f20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003f22:	f7ff f9f5 	bl	8003310 <xTaskIncrementTick>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f2c:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <SysTick_Handler+0x40>)
 8003f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	2300      	movs	r3, #0
 8003f36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	f383 8811 	msr	BASEPRI, r3
}
 8003f3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003f40:	bf00      	nop
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	e000ed04 	.word	0xe000ed04

08003f4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003f50:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <vPortSetupTimerInterrupt+0x34>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003f56:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <vPortSetupTimerInterrupt+0x38>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f5c:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <vPortSetupTimerInterrupt+0x3c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a0a      	ldr	r2, [pc, #40]	; (8003f8c <vPortSetupTimerInterrupt+0x40>)
 8003f62:	fba2 2303 	umull	r2, r3, r2, r3
 8003f66:	099b      	lsrs	r3, r3, #6
 8003f68:	4a09      	ldr	r2, [pc, #36]	; (8003f90 <vPortSetupTimerInterrupt+0x44>)
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f6e:	4b04      	ldr	r3, [pc, #16]	; (8003f80 <vPortSetupTimerInterrupt+0x34>)
 8003f70:	2207      	movs	r2, #7
 8003f72:	601a      	str	r2, [r3, #0]
}
 8003f74:	bf00      	nop
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	e000e010 	.word	0xe000e010
 8003f84:	e000e018 	.word	0xe000e018
 8003f88:	20000000 	.word	0x20000000
 8003f8c:	10624dd3 	.word	0x10624dd3
 8003f90:	e000e014 	.word	0xe000e014

08003f94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003f94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003fa4 <vPortEnableVFP+0x10>
 8003f98:	6801      	ldr	r1, [r0, #0]
 8003f9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003f9e:	6001      	str	r1, [r0, #0]
 8003fa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003fa2:	bf00      	nop
 8003fa4:	e000ed88 	.word	0xe000ed88

08003fa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003fae:	f3ef 8305 	mrs	r3, IPSR
 8003fb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2b0f      	cmp	r3, #15
 8003fb8:	d914      	bls.n	8003fe4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003fba:	4a17      	ldr	r2, [pc, #92]	; (8004018 <vPortValidateInterruptPriority+0x70>)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003fc4:	4b15      	ldr	r3, [pc, #84]	; (800401c <vPortValidateInterruptPriority+0x74>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	7afa      	ldrb	r2, [r7, #11]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d20a      	bcs.n	8003fe4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd2:	f383 8811 	msr	BASEPRI, r3
 8003fd6:	f3bf 8f6f 	isb	sy
 8003fda:	f3bf 8f4f 	dsb	sy
 8003fde:	607b      	str	r3, [r7, #4]
}
 8003fe0:	bf00      	nop
 8003fe2:	e7fe      	b.n	8003fe2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003fe4:	4b0e      	ldr	r3, [pc, #56]	; (8004020 <vPortValidateInterruptPriority+0x78>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003fec:	4b0d      	ldr	r3, [pc, #52]	; (8004024 <vPortValidateInterruptPriority+0x7c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d90a      	bls.n	800400a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff8:	f383 8811 	msr	BASEPRI, r3
 8003ffc:	f3bf 8f6f 	isb	sy
 8004000:	f3bf 8f4f 	dsb	sy
 8004004:	603b      	str	r3, [r7, #0]
}
 8004006:	bf00      	nop
 8004008:	e7fe      	b.n	8004008 <vPortValidateInterruptPriority+0x60>
	}
 800400a:	bf00      	nop
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	e000e3f0 	.word	0xe000e3f0
 800401c:	200004e4 	.word	0x200004e4
 8004020:	e000ed0c 	.word	0xe000ed0c
 8004024:	200004e8 	.word	0x200004e8

08004028 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08a      	sub	sp, #40	; 0x28
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004030:	2300      	movs	r3, #0
 8004032:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004034:	f7ff f8c2 	bl	80031bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004038:	4b5b      	ldr	r3, [pc, #364]	; (80041a8 <pvPortMalloc+0x180>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004040:	f000 f920 	bl	8004284 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004044:	4b59      	ldr	r3, [pc, #356]	; (80041ac <pvPortMalloc+0x184>)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4013      	ands	r3, r2
 800404c:	2b00      	cmp	r3, #0
 800404e:	f040 8093 	bne.w	8004178 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d01d      	beq.n	8004094 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004058:	2208      	movs	r2, #8
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4413      	add	r3, r2
 800405e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	2b00      	cmp	r3, #0
 8004068:	d014      	beq.n	8004094 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f023 0307 	bic.w	r3, r3, #7
 8004070:	3308      	adds	r3, #8
 8004072:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f003 0307 	and.w	r3, r3, #7
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00a      	beq.n	8004094 <pvPortMalloc+0x6c>
	__asm volatile
 800407e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004082:	f383 8811 	msr	BASEPRI, r3
 8004086:	f3bf 8f6f 	isb	sy
 800408a:	f3bf 8f4f 	dsb	sy
 800408e:	617b      	str	r3, [r7, #20]
}
 8004090:	bf00      	nop
 8004092:	e7fe      	b.n	8004092 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d06e      	beq.n	8004178 <pvPortMalloc+0x150>
 800409a:	4b45      	ldr	r3, [pc, #276]	; (80041b0 <pvPortMalloc+0x188>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d869      	bhi.n	8004178 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80040a4:	4b43      	ldr	r3, [pc, #268]	; (80041b4 <pvPortMalloc+0x18c>)
 80040a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80040a8:	4b42      	ldr	r3, [pc, #264]	; (80041b4 <pvPortMalloc+0x18c>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040ae:	e004      	b.n	80040ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d903      	bls.n	80040cc <pvPortMalloc+0xa4>
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1f1      	bne.n	80040b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80040cc:	4b36      	ldr	r3, [pc, #216]	; (80041a8 <pvPortMalloc+0x180>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d050      	beq.n	8004178 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80040d6:	6a3b      	ldr	r3, [r7, #32]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2208      	movs	r2, #8
 80040dc:	4413      	add	r3, r2
 80040de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	1ad2      	subs	r2, r2, r3
 80040f0:	2308      	movs	r3, #8
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d91f      	bls.n	8004138 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80040f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4413      	add	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <pvPortMalloc+0xf8>
	__asm volatile
 800410a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410e:	f383 8811 	msr	BASEPRI, r3
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	f3bf 8f4f 	dsb	sy
 800411a:	613b      	str	r3, [r7, #16]
}
 800411c:	bf00      	nop
 800411e:	e7fe      	b.n	800411e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	1ad2      	subs	r2, r2, r3
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004132:	69b8      	ldr	r0, [r7, #24]
 8004134:	f000 f908 	bl	8004348 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004138:	4b1d      	ldr	r3, [pc, #116]	; (80041b0 <pvPortMalloc+0x188>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	4a1b      	ldr	r2, [pc, #108]	; (80041b0 <pvPortMalloc+0x188>)
 8004144:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004146:	4b1a      	ldr	r3, [pc, #104]	; (80041b0 <pvPortMalloc+0x188>)
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	4b1b      	ldr	r3, [pc, #108]	; (80041b8 <pvPortMalloc+0x190>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	429a      	cmp	r2, r3
 8004150:	d203      	bcs.n	800415a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004152:	4b17      	ldr	r3, [pc, #92]	; (80041b0 <pvPortMalloc+0x188>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a18      	ldr	r2, [pc, #96]	; (80041b8 <pvPortMalloc+0x190>)
 8004158:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	4b13      	ldr	r3, [pc, #76]	; (80041ac <pvPortMalloc+0x184>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	431a      	orrs	r2, r3
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	2200      	movs	r2, #0
 800416c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800416e:	4b13      	ldr	r3, [pc, #76]	; (80041bc <pvPortMalloc+0x194>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3301      	adds	r3, #1
 8004174:	4a11      	ldr	r2, [pc, #68]	; (80041bc <pvPortMalloc+0x194>)
 8004176:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004178:	f7ff f82e 	bl	80031d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00a      	beq.n	800419c <pvPortMalloc+0x174>
	__asm volatile
 8004186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418a:	f383 8811 	msr	BASEPRI, r3
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	60fb      	str	r3, [r7, #12]
}
 8004198:	bf00      	nop
 800419a:	e7fe      	b.n	800419a <pvPortMalloc+0x172>
	return pvReturn;
 800419c:	69fb      	ldr	r3, [r7, #28]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3728      	adds	r7, #40	; 0x28
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	200040f4 	.word	0x200040f4
 80041ac:	20004108 	.word	0x20004108
 80041b0:	200040f8 	.word	0x200040f8
 80041b4:	200040ec 	.word	0x200040ec
 80041b8:	200040fc 	.word	0x200040fc
 80041bc:	20004100 	.word	0x20004100

080041c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d04d      	beq.n	800426e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80041d2:	2308      	movs	r3, #8
 80041d4:	425b      	negs	r3, r3
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	4413      	add	r3, r2
 80041da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	4b24      	ldr	r3, [pc, #144]	; (8004278 <vPortFree+0xb8>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4013      	ands	r3, r2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10a      	bne.n	8004204 <vPortFree+0x44>
	__asm volatile
 80041ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f2:	f383 8811 	msr	BASEPRI, r3
 80041f6:	f3bf 8f6f 	isb	sy
 80041fa:	f3bf 8f4f 	dsb	sy
 80041fe:	60fb      	str	r3, [r7, #12]
}
 8004200:	bf00      	nop
 8004202:	e7fe      	b.n	8004202 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <vPortFree+0x62>
	__asm volatile
 800420c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004210:	f383 8811 	msr	BASEPRI, r3
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	60bb      	str	r3, [r7, #8]
}
 800421e:	bf00      	nop
 8004220:	e7fe      	b.n	8004220 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	4b14      	ldr	r3, [pc, #80]	; (8004278 <vPortFree+0xb8>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4013      	ands	r3, r2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d01e      	beq.n	800426e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d11a      	bne.n	800426e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	4b0e      	ldr	r3, [pc, #56]	; (8004278 <vPortFree+0xb8>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	43db      	mvns	r3, r3
 8004242:	401a      	ands	r2, r3
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004248:	f7fe ffb8 	bl	80031bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	4b0a      	ldr	r3, [pc, #40]	; (800427c <vPortFree+0xbc>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4413      	add	r3, r2
 8004256:	4a09      	ldr	r2, [pc, #36]	; (800427c <vPortFree+0xbc>)
 8004258:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800425a:	6938      	ldr	r0, [r7, #16]
 800425c:	f000 f874 	bl	8004348 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004260:	4b07      	ldr	r3, [pc, #28]	; (8004280 <vPortFree+0xc0>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	3301      	adds	r3, #1
 8004266:	4a06      	ldr	r2, [pc, #24]	; (8004280 <vPortFree+0xc0>)
 8004268:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800426a:	f7fe ffb5 	bl	80031d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800426e:	bf00      	nop
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	20004108 	.word	0x20004108
 800427c:	200040f8 	.word	0x200040f8
 8004280:	20004104 	.word	0x20004104

08004284 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800428a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800428e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004290:	4b27      	ldr	r3, [pc, #156]	; (8004330 <prvHeapInit+0xac>)
 8004292:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00c      	beq.n	80042b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	3307      	adds	r3, #7
 80042a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0307 	bic.w	r3, r3, #7
 80042aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	4a1f      	ldr	r2, [pc, #124]	; (8004330 <prvHeapInit+0xac>)
 80042b4:	4413      	add	r3, r2
 80042b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80042bc:	4a1d      	ldr	r2, [pc, #116]	; (8004334 <prvHeapInit+0xb0>)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80042c2:	4b1c      	ldr	r3, [pc, #112]	; (8004334 <prvHeapInit+0xb0>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	4413      	add	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80042d0:	2208      	movs	r2, #8
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	1a9b      	subs	r3, r3, r2
 80042d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f023 0307 	bic.w	r3, r3, #7
 80042de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4a15      	ldr	r2, [pc, #84]	; (8004338 <prvHeapInit+0xb4>)
 80042e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80042e6:	4b14      	ldr	r3, [pc, #80]	; (8004338 <prvHeapInit+0xb4>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2200      	movs	r2, #0
 80042ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80042ee:	4b12      	ldr	r3, [pc, #72]	; (8004338 <prvHeapInit+0xb4>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	1ad2      	subs	r2, r2, r3
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004304:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <prvHeapInit+0xb4>)
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	4a0a      	ldr	r2, [pc, #40]	; (800433c <prvHeapInit+0xb8>)
 8004312:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	4a09      	ldr	r2, [pc, #36]	; (8004340 <prvHeapInit+0xbc>)
 800431a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800431c:	4b09      	ldr	r3, [pc, #36]	; (8004344 <prvHeapInit+0xc0>)
 800431e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004322:	601a      	str	r2, [r3, #0]
}
 8004324:	bf00      	nop
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	200004ec 	.word	0x200004ec
 8004334:	200040ec 	.word	0x200040ec
 8004338:	200040f4 	.word	0x200040f4
 800433c:	200040fc 	.word	0x200040fc
 8004340:	200040f8 	.word	0x200040f8
 8004344:	20004108 	.word	0x20004108

08004348 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004350:	4b28      	ldr	r3, [pc, #160]	; (80043f4 <prvInsertBlockIntoFreeList+0xac>)
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	e002      	b.n	800435c <prvInsertBlockIntoFreeList+0x14>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	429a      	cmp	r2, r3
 8004364:	d8f7      	bhi.n	8004356 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	4413      	add	r3, r2
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	429a      	cmp	r2, r3
 8004376:	d108      	bne.n	800438a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	441a      	add	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	441a      	add	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	429a      	cmp	r2, r3
 800439c:	d118      	bne.n	80043d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	4b15      	ldr	r3, [pc, #84]	; (80043f8 <prvInsertBlockIntoFreeList+0xb0>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d00d      	beq.n	80043c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	441a      	add	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	e008      	b.n	80043d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80043c6:	4b0c      	ldr	r3, [pc, #48]	; (80043f8 <prvInsertBlockIntoFreeList+0xb0>)
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	e003      	b.n	80043d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d002      	beq.n	80043e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043e6:	bf00      	nop
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	200040ec 	.word	0x200040ec
 80043f8:	200040f4 	.word	0x200040f4

080043fc <__errno>:
 80043fc:	4b01      	ldr	r3, [pc, #4]	; (8004404 <__errno+0x8>)
 80043fe:	6818      	ldr	r0, [r3, #0]
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	20000010 	.word	0x20000010

08004408 <__libc_init_array>:
 8004408:	b570      	push	{r4, r5, r6, lr}
 800440a:	4d0d      	ldr	r5, [pc, #52]	; (8004440 <__libc_init_array+0x38>)
 800440c:	4c0d      	ldr	r4, [pc, #52]	; (8004444 <__libc_init_array+0x3c>)
 800440e:	1b64      	subs	r4, r4, r5
 8004410:	10a4      	asrs	r4, r4, #2
 8004412:	2600      	movs	r6, #0
 8004414:	42a6      	cmp	r6, r4
 8004416:	d109      	bne.n	800442c <__libc_init_array+0x24>
 8004418:	4d0b      	ldr	r5, [pc, #44]	; (8004448 <__libc_init_array+0x40>)
 800441a:	4c0c      	ldr	r4, [pc, #48]	; (800444c <__libc_init_array+0x44>)
 800441c:	f000 fc8e 	bl	8004d3c <_init>
 8004420:	1b64      	subs	r4, r4, r5
 8004422:	10a4      	asrs	r4, r4, #2
 8004424:	2600      	movs	r6, #0
 8004426:	42a6      	cmp	r6, r4
 8004428:	d105      	bne.n	8004436 <__libc_init_array+0x2e>
 800442a:	bd70      	pop	{r4, r5, r6, pc}
 800442c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004430:	4798      	blx	r3
 8004432:	3601      	adds	r6, #1
 8004434:	e7ee      	b.n	8004414 <__libc_init_array+0xc>
 8004436:	f855 3b04 	ldr.w	r3, [r5], #4
 800443a:	4798      	blx	r3
 800443c:	3601      	adds	r6, #1
 800443e:	e7f2      	b.n	8004426 <__libc_init_array+0x1e>
 8004440:	08004ed0 	.word	0x08004ed0
 8004444:	08004ed0 	.word	0x08004ed0
 8004448:	08004ed0 	.word	0x08004ed0
 800444c:	08004ed4 	.word	0x08004ed4

08004450 <memcpy>:
 8004450:	440a      	add	r2, r1
 8004452:	4291      	cmp	r1, r2
 8004454:	f100 33ff 	add.w	r3, r0, #4294967295
 8004458:	d100      	bne.n	800445c <memcpy+0xc>
 800445a:	4770      	bx	lr
 800445c:	b510      	push	{r4, lr}
 800445e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004462:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004466:	4291      	cmp	r1, r2
 8004468:	d1f9      	bne.n	800445e <memcpy+0xe>
 800446a:	bd10      	pop	{r4, pc}

0800446c <memset>:
 800446c:	4402      	add	r2, r0
 800446e:	4603      	mov	r3, r0
 8004470:	4293      	cmp	r3, r2
 8004472:	d100      	bne.n	8004476 <memset+0xa>
 8004474:	4770      	bx	lr
 8004476:	f803 1b01 	strb.w	r1, [r3], #1
 800447a:	e7f9      	b.n	8004470 <memset+0x4>

0800447c <siprintf>:
 800447c:	b40e      	push	{r1, r2, r3}
 800447e:	b500      	push	{lr}
 8004480:	b09c      	sub	sp, #112	; 0x70
 8004482:	ab1d      	add	r3, sp, #116	; 0x74
 8004484:	9002      	str	r0, [sp, #8]
 8004486:	9006      	str	r0, [sp, #24]
 8004488:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800448c:	4809      	ldr	r0, [pc, #36]	; (80044b4 <siprintf+0x38>)
 800448e:	9107      	str	r1, [sp, #28]
 8004490:	9104      	str	r1, [sp, #16]
 8004492:	4909      	ldr	r1, [pc, #36]	; (80044b8 <siprintf+0x3c>)
 8004494:	f853 2b04 	ldr.w	r2, [r3], #4
 8004498:	9105      	str	r1, [sp, #20]
 800449a:	6800      	ldr	r0, [r0, #0]
 800449c:	9301      	str	r3, [sp, #4]
 800449e:	a902      	add	r1, sp, #8
 80044a0:	f000 f868 	bl	8004574 <_svfiprintf_r>
 80044a4:	9b02      	ldr	r3, [sp, #8]
 80044a6:	2200      	movs	r2, #0
 80044a8:	701a      	strb	r2, [r3, #0]
 80044aa:	b01c      	add	sp, #112	; 0x70
 80044ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80044b0:	b003      	add	sp, #12
 80044b2:	4770      	bx	lr
 80044b4:	20000010 	.word	0x20000010
 80044b8:	ffff0208 	.word	0xffff0208

080044bc <__ssputs_r>:
 80044bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044c0:	688e      	ldr	r6, [r1, #8]
 80044c2:	429e      	cmp	r6, r3
 80044c4:	4682      	mov	sl, r0
 80044c6:	460c      	mov	r4, r1
 80044c8:	4690      	mov	r8, r2
 80044ca:	461f      	mov	r7, r3
 80044cc:	d838      	bhi.n	8004540 <__ssputs_r+0x84>
 80044ce:	898a      	ldrh	r2, [r1, #12]
 80044d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80044d4:	d032      	beq.n	800453c <__ssputs_r+0x80>
 80044d6:	6825      	ldr	r5, [r4, #0]
 80044d8:	6909      	ldr	r1, [r1, #16]
 80044da:	eba5 0901 	sub.w	r9, r5, r1
 80044de:	6965      	ldr	r5, [r4, #20]
 80044e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80044e8:	3301      	adds	r3, #1
 80044ea:	444b      	add	r3, r9
 80044ec:	106d      	asrs	r5, r5, #1
 80044ee:	429d      	cmp	r5, r3
 80044f0:	bf38      	it	cc
 80044f2:	461d      	movcc	r5, r3
 80044f4:	0553      	lsls	r3, r2, #21
 80044f6:	d531      	bpl.n	800455c <__ssputs_r+0xa0>
 80044f8:	4629      	mov	r1, r5
 80044fa:	f000 fb55 	bl	8004ba8 <_malloc_r>
 80044fe:	4606      	mov	r6, r0
 8004500:	b950      	cbnz	r0, 8004518 <__ssputs_r+0x5c>
 8004502:	230c      	movs	r3, #12
 8004504:	f8ca 3000 	str.w	r3, [sl]
 8004508:	89a3      	ldrh	r3, [r4, #12]
 800450a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800450e:	81a3      	strh	r3, [r4, #12]
 8004510:	f04f 30ff 	mov.w	r0, #4294967295
 8004514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004518:	6921      	ldr	r1, [r4, #16]
 800451a:	464a      	mov	r2, r9
 800451c:	f7ff ff98 	bl	8004450 <memcpy>
 8004520:	89a3      	ldrh	r3, [r4, #12]
 8004522:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800452a:	81a3      	strh	r3, [r4, #12]
 800452c:	6126      	str	r6, [r4, #16]
 800452e:	6165      	str	r5, [r4, #20]
 8004530:	444e      	add	r6, r9
 8004532:	eba5 0509 	sub.w	r5, r5, r9
 8004536:	6026      	str	r6, [r4, #0]
 8004538:	60a5      	str	r5, [r4, #8]
 800453a:	463e      	mov	r6, r7
 800453c:	42be      	cmp	r6, r7
 800453e:	d900      	bls.n	8004542 <__ssputs_r+0x86>
 8004540:	463e      	mov	r6, r7
 8004542:	6820      	ldr	r0, [r4, #0]
 8004544:	4632      	mov	r2, r6
 8004546:	4641      	mov	r1, r8
 8004548:	f000 faa8 	bl	8004a9c <memmove>
 800454c:	68a3      	ldr	r3, [r4, #8]
 800454e:	1b9b      	subs	r3, r3, r6
 8004550:	60a3      	str	r3, [r4, #8]
 8004552:	6823      	ldr	r3, [r4, #0]
 8004554:	4433      	add	r3, r6
 8004556:	6023      	str	r3, [r4, #0]
 8004558:	2000      	movs	r0, #0
 800455a:	e7db      	b.n	8004514 <__ssputs_r+0x58>
 800455c:	462a      	mov	r2, r5
 800455e:	f000 fb97 	bl	8004c90 <_realloc_r>
 8004562:	4606      	mov	r6, r0
 8004564:	2800      	cmp	r0, #0
 8004566:	d1e1      	bne.n	800452c <__ssputs_r+0x70>
 8004568:	6921      	ldr	r1, [r4, #16]
 800456a:	4650      	mov	r0, sl
 800456c:	f000 fab0 	bl	8004ad0 <_free_r>
 8004570:	e7c7      	b.n	8004502 <__ssputs_r+0x46>
	...

08004574 <_svfiprintf_r>:
 8004574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004578:	4698      	mov	r8, r3
 800457a:	898b      	ldrh	r3, [r1, #12]
 800457c:	061b      	lsls	r3, r3, #24
 800457e:	b09d      	sub	sp, #116	; 0x74
 8004580:	4607      	mov	r7, r0
 8004582:	460d      	mov	r5, r1
 8004584:	4614      	mov	r4, r2
 8004586:	d50e      	bpl.n	80045a6 <_svfiprintf_r+0x32>
 8004588:	690b      	ldr	r3, [r1, #16]
 800458a:	b963      	cbnz	r3, 80045a6 <_svfiprintf_r+0x32>
 800458c:	2140      	movs	r1, #64	; 0x40
 800458e:	f000 fb0b 	bl	8004ba8 <_malloc_r>
 8004592:	6028      	str	r0, [r5, #0]
 8004594:	6128      	str	r0, [r5, #16]
 8004596:	b920      	cbnz	r0, 80045a2 <_svfiprintf_r+0x2e>
 8004598:	230c      	movs	r3, #12
 800459a:	603b      	str	r3, [r7, #0]
 800459c:	f04f 30ff 	mov.w	r0, #4294967295
 80045a0:	e0d1      	b.n	8004746 <_svfiprintf_r+0x1d2>
 80045a2:	2340      	movs	r3, #64	; 0x40
 80045a4:	616b      	str	r3, [r5, #20]
 80045a6:	2300      	movs	r3, #0
 80045a8:	9309      	str	r3, [sp, #36]	; 0x24
 80045aa:	2320      	movs	r3, #32
 80045ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80045b4:	2330      	movs	r3, #48	; 0x30
 80045b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004760 <_svfiprintf_r+0x1ec>
 80045ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045be:	f04f 0901 	mov.w	r9, #1
 80045c2:	4623      	mov	r3, r4
 80045c4:	469a      	mov	sl, r3
 80045c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045ca:	b10a      	cbz	r2, 80045d0 <_svfiprintf_r+0x5c>
 80045cc:	2a25      	cmp	r2, #37	; 0x25
 80045ce:	d1f9      	bne.n	80045c4 <_svfiprintf_r+0x50>
 80045d0:	ebba 0b04 	subs.w	fp, sl, r4
 80045d4:	d00b      	beq.n	80045ee <_svfiprintf_r+0x7a>
 80045d6:	465b      	mov	r3, fp
 80045d8:	4622      	mov	r2, r4
 80045da:	4629      	mov	r1, r5
 80045dc:	4638      	mov	r0, r7
 80045de:	f7ff ff6d 	bl	80044bc <__ssputs_r>
 80045e2:	3001      	adds	r0, #1
 80045e4:	f000 80aa 	beq.w	800473c <_svfiprintf_r+0x1c8>
 80045e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045ea:	445a      	add	r2, fp
 80045ec:	9209      	str	r2, [sp, #36]	; 0x24
 80045ee:	f89a 3000 	ldrb.w	r3, [sl]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 80a2 	beq.w	800473c <_svfiprintf_r+0x1c8>
 80045f8:	2300      	movs	r3, #0
 80045fa:	f04f 32ff 	mov.w	r2, #4294967295
 80045fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004602:	f10a 0a01 	add.w	sl, sl, #1
 8004606:	9304      	str	r3, [sp, #16]
 8004608:	9307      	str	r3, [sp, #28]
 800460a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800460e:	931a      	str	r3, [sp, #104]	; 0x68
 8004610:	4654      	mov	r4, sl
 8004612:	2205      	movs	r2, #5
 8004614:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004618:	4851      	ldr	r0, [pc, #324]	; (8004760 <_svfiprintf_r+0x1ec>)
 800461a:	f7fb fde1 	bl	80001e0 <memchr>
 800461e:	9a04      	ldr	r2, [sp, #16]
 8004620:	b9d8      	cbnz	r0, 800465a <_svfiprintf_r+0xe6>
 8004622:	06d0      	lsls	r0, r2, #27
 8004624:	bf44      	itt	mi
 8004626:	2320      	movmi	r3, #32
 8004628:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800462c:	0711      	lsls	r1, r2, #28
 800462e:	bf44      	itt	mi
 8004630:	232b      	movmi	r3, #43	; 0x2b
 8004632:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004636:	f89a 3000 	ldrb.w	r3, [sl]
 800463a:	2b2a      	cmp	r3, #42	; 0x2a
 800463c:	d015      	beq.n	800466a <_svfiprintf_r+0xf6>
 800463e:	9a07      	ldr	r2, [sp, #28]
 8004640:	4654      	mov	r4, sl
 8004642:	2000      	movs	r0, #0
 8004644:	f04f 0c0a 	mov.w	ip, #10
 8004648:	4621      	mov	r1, r4
 800464a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800464e:	3b30      	subs	r3, #48	; 0x30
 8004650:	2b09      	cmp	r3, #9
 8004652:	d94e      	bls.n	80046f2 <_svfiprintf_r+0x17e>
 8004654:	b1b0      	cbz	r0, 8004684 <_svfiprintf_r+0x110>
 8004656:	9207      	str	r2, [sp, #28]
 8004658:	e014      	b.n	8004684 <_svfiprintf_r+0x110>
 800465a:	eba0 0308 	sub.w	r3, r0, r8
 800465e:	fa09 f303 	lsl.w	r3, r9, r3
 8004662:	4313      	orrs	r3, r2
 8004664:	9304      	str	r3, [sp, #16]
 8004666:	46a2      	mov	sl, r4
 8004668:	e7d2      	b.n	8004610 <_svfiprintf_r+0x9c>
 800466a:	9b03      	ldr	r3, [sp, #12]
 800466c:	1d19      	adds	r1, r3, #4
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	9103      	str	r1, [sp, #12]
 8004672:	2b00      	cmp	r3, #0
 8004674:	bfbb      	ittet	lt
 8004676:	425b      	neglt	r3, r3
 8004678:	f042 0202 	orrlt.w	r2, r2, #2
 800467c:	9307      	strge	r3, [sp, #28]
 800467e:	9307      	strlt	r3, [sp, #28]
 8004680:	bfb8      	it	lt
 8004682:	9204      	strlt	r2, [sp, #16]
 8004684:	7823      	ldrb	r3, [r4, #0]
 8004686:	2b2e      	cmp	r3, #46	; 0x2e
 8004688:	d10c      	bne.n	80046a4 <_svfiprintf_r+0x130>
 800468a:	7863      	ldrb	r3, [r4, #1]
 800468c:	2b2a      	cmp	r3, #42	; 0x2a
 800468e:	d135      	bne.n	80046fc <_svfiprintf_r+0x188>
 8004690:	9b03      	ldr	r3, [sp, #12]
 8004692:	1d1a      	adds	r2, r3, #4
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	9203      	str	r2, [sp, #12]
 8004698:	2b00      	cmp	r3, #0
 800469a:	bfb8      	it	lt
 800469c:	f04f 33ff 	movlt.w	r3, #4294967295
 80046a0:	3402      	adds	r4, #2
 80046a2:	9305      	str	r3, [sp, #20]
 80046a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004770 <_svfiprintf_r+0x1fc>
 80046a8:	7821      	ldrb	r1, [r4, #0]
 80046aa:	2203      	movs	r2, #3
 80046ac:	4650      	mov	r0, sl
 80046ae:	f7fb fd97 	bl	80001e0 <memchr>
 80046b2:	b140      	cbz	r0, 80046c6 <_svfiprintf_r+0x152>
 80046b4:	2340      	movs	r3, #64	; 0x40
 80046b6:	eba0 000a 	sub.w	r0, r0, sl
 80046ba:	fa03 f000 	lsl.w	r0, r3, r0
 80046be:	9b04      	ldr	r3, [sp, #16]
 80046c0:	4303      	orrs	r3, r0
 80046c2:	3401      	adds	r4, #1
 80046c4:	9304      	str	r3, [sp, #16]
 80046c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046ca:	4826      	ldr	r0, [pc, #152]	; (8004764 <_svfiprintf_r+0x1f0>)
 80046cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046d0:	2206      	movs	r2, #6
 80046d2:	f7fb fd85 	bl	80001e0 <memchr>
 80046d6:	2800      	cmp	r0, #0
 80046d8:	d038      	beq.n	800474c <_svfiprintf_r+0x1d8>
 80046da:	4b23      	ldr	r3, [pc, #140]	; (8004768 <_svfiprintf_r+0x1f4>)
 80046dc:	bb1b      	cbnz	r3, 8004726 <_svfiprintf_r+0x1b2>
 80046de:	9b03      	ldr	r3, [sp, #12]
 80046e0:	3307      	adds	r3, #7
 80046e2:	f023 0307 	bic.w	r3, r3, #7
 80046e6:	3308      	adds	r3, #8
 80046e8:	9303      	str	r3, [sp, #12]
 80046ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046ec:	4433      	add	r3, r6
 80046ee:	9309      	str	r3, [sp, #36]	; 0x24
 80046f0:	e767      	b.n	80045c2 <_svfiprintf_r+0x4e>
 80046f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80046f6:	460c      	mov	r4, r1
 80046f8:	2001      	movs	r0, #1
 80046fa:	e7a5      	b.n	8004648 <_svfiprintf_r+0xd4>
 80046fc:	2300      	movs	r3, #0
 80046fe:	3401      	adds	r4, #1
 8004700:	9305      	str	r3, [sp, #20]
 8004702:	4619      	mov	r1, r3
 8004704:	f04f 0c0a 	mov.w	ip, #10
 8004708:	4620      	mov	r0, r4
 800470a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800470e:	3a30      	subs	r2, #48	; 0x30
 8004710:	2a09      	cmp	r2, #9
 8004712:	d903      	bls.n	800471c <_svfiprintf_r+0x1a8>
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0c5      	beq.n	80046a4 <_svfiprintf_r+0x130>
 8004718:	9105      	str	r1, [sp, #20]
 800471a:	e7c3      	b.n	80046a4 <_svfiprintf_r+0x130>
 800471c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004720:	4604      	mov	r4, r0
 8004722:	2301      	movs	r3, #1
 8004724:	e7f0      	b.n	8004708 <_svfiprintf_r+0x194>
 8004726:	ab03      	add	r3, sp, #12
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	462a      	mov	r2, r5
 800472c:	4b0f      	ldr	r3, [pc, #60]	; (800476c <_svfiprintf_r+0x1f8>)
 800472e:	a904      	add	r1, sp, #16
 8004730:	4638      	mov	r0, r7
 8004732:	f3af 8000 	nop.w
 8004736:	1c42      	adds	r2, r0, #1
 8004738:	4606      	mov	r6, r0
 800473a:	d1d6      	bne.n	80046ea <_svfiprintf_r+0x176>
 800473c:	89ab      	ldrh	r3, [r5, #12]
 800473e:	065b      	lsls	r3, r3, #25
 8004740:	f53f af2c 	bmi.w	800459c <_svfiprintf_r+0x28>
 8004744:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004746:	b01d      	add	sp, #116	; 0x74
 8004748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800474c:	ab03      	add	r3, sp, #12
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	462a      	mov	r2, r5
 8004752:	4b06      	ldr	r3, [pc, #24]	; (800476c <_svfiprintf_r+0x1f8>)
 8004754:	a904      	add	r1, sp, #16
 8004756:	4638      	mov	r0, r7
 8004758:	f000 f87a 	bl	8004850 <_printf_i>
 800475c:	e7eb      	b.n	8004736 <_svfiprintf_r+0x1c2>
 800475e:	bf00      	nop
 8004760:	08004e94 	.word	0x08004e94
 8004764:	08004e9e 	.word	0x08004e9e
 8004768:	00000000 	.word	0x00000000
 800476c:	080044bd 	.word	0x080044bd
 8004770:	08004e9a 	.word	0x08004e9a

08004774 <_printf_common>:
 8004774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004778:	4616      	mov	r6, r2
 800477a:	4699      	mov	r9, r3
 800477c:	688a      	ldr	r2, [r1, #8]
 800477e:	690b      	ldr	r3, [r1, #16]
 8004780:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004784:	4293      	cmp	r3, r2
 8004786:	bfb8      	it	lt
 8004788:	4613      	movlt	r3, r2
 800478a:	6033      	str	r3, [r6, #0]
 800478c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004790:	4607      	mov	r7, r0
 8004792:	460c      	mov	r4, r1
 8004794:	b10a      	cbz	r2, 800479a <_printf_common+0x26>
 8004796:	3301      	adds	r3, #1
 8004798:	6033      	str	r3, [r6, #0]
 800479a:	6823      	ldr	r3, [r4, #0]
 800479c:	0699      	lsls	r1, r3, #26
 800479e:	bf42      	ittt	mi
 80047a0:	6833      	ldrmi	r3, [r6, #0]
 80047a2:	3302      	addmi	r3, #2
 80047a4:	6033      	strmi	r3, [r6, #0]
 80047a6:	6825      	ldr	r5, [r4, #0]
 80047a8:	f015 0506 	ands.w	r5, r5, #6
 80047ac:	d106      	bne.n	80047bc <_printf_common+0x48>
 80047ae:	f104 0a19 	add.w	sl, r4, #25
 80047b2:	68e3      	ldr	r3, [r4, #12]
 80047b4:	6832      	ldr	r2, [r6, #0]
 80047b6:	1a9b      	subs	r3, r3, r2
 80047b8:	42ab      	cmp	r3, r5
 80047ba:	dc26      	bgt.n	800480a <_printf_common+0x96>
 80047bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047c0:	1e13      	subs	r3, r2, #0
 80047c2:	6822      	ldr	r2, [r4, #0]
 80047c4:	bf18      	it	ne
 80047c6:	2301      	movne	r3, #1
 80047c8:	0692      	lsls	r2, r2, #26
 80047ca:	d42b      	bmi.n	8004824 <_printf_common+0xb0>
 80047cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047d0:	4649      	mov	r1, r9
 80047d2:	4638      	mov	r0, r7
 80047d4:	47c0      	blx	r8
 80047d6:	3001      	adds	r0, #1
 80047d8:	d01e      	beq.n	8004818 <_printf_common+0xa4>
 80047da:	6823      	ldr	r3, [r4, #0]
 80047dc:	68e5      	ldr	r5, [r4, #12]
 80047de:	6832      	ldr	r2, [r6, #0]
 80047e0:	f003 0306 	and.w	r3, r3, #6
 80047e4:	2b04      	cmp	r3, #4
 80047e6:	bf08      	it	eq
 80047e8:	1aad      	subeq	r5, r5, r2
 80047ea:	68a3      	ldr	r3, [r4, #8]
 80047ec:	6922      	ldr	r2, [r4, #16]
 80047ee:	bf0c      	ite	eq
 80047f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047f4:	2500      	movne	r5, #0
 80047f6:	4293      	cmp	r3, r2
 80047f8:	bfc4      	itt	gt
 80047fa:	1a9b      	subgt	r3, r3, r2
 80047fc:	18ed      	addgt	r5, r5, r3
 80047fe:	2600      	movs	r6, #0
 8004800:	341a      	adds	r4, #26
 8004802:	42b5      	cmp	r5, r6
 8004804:	d11a      	bne.n	800483c <_printf_common+0xc8>
 8004806:	2000      	movs	r0, #0
 8004808:	e008      	b.n	800481c <_printf_common+0xa8>
 800480a:	2301      	movs	r3, #1
 800480c:	4652      	mov	r2, sl
 800480e:	4649      	mov	r1, r9
 8004810:	4638      	mov	r0, r7
 8004812:	47c0      	blx	r8
 8004814:	3001      	adds	r0, #1
 8004816:	d103      	bne.n	8004820 <_printf_common+0xac>
 8004818:	f04f 30ff 	mov.w	r0, #4294967295
 800481c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004820:	3501      	adds	r5, #1
 8004822:	e7c6      	b.n	80047b2 <_printf_common+0x3e>
 8004824:	18e1      	adds	r1, r4, r3
 8004826:	1c5a      	adds	r2, r3, #1
 8004828:	2030      	movs	r0, #48	; 0x30
 800482a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800482e:	4422      	add	r2, r4
 8004830:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004834:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004838:	3302      	adds	r3, #2
 800483a:	e7c7      	b.n	80047cc <_printf_common+0x58>
 800483c:	2301      	movs	r3, #1
 800483e:	4622      	mov	r2, r4
 8004840:	4649      	mov	r1, r9
 8004842:	4638      	mov	r0, r7
 8004844:	47c0      	blx	r8
 8004846:	3001      	adds	r0, #1
 8004848:	d0e6      	beq.n	8004818 <_printf_common+0xa4>
 800484a:	3601      	adds	r6, #1
 800484c:	e7d9      	b.n	8004802 <_printf_common+0x8e>
	...

08004850 <_printf_i>:
 8004850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004854:	7e0f      	ldrb	r7, [r1, #24]
 8004856:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004858:	2f78      	cmp	r7, #120	; 0x78
 800485a:	4691      	mov	r9, r2
 800485c:	4680      	mov	r8, r0
 800485e:	460c      	mov	r4, r1
 8004860:	469a      	mov	sl, r3
 8004862:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004866:	d807      	bhi.n	8004878 <_printf_i+0x28>
 8004868:	2f62      	cmp	r7, #98	; 0x62
 800486a:	d80a      	bhi.n	8004882 <_printf_i+0x32>
 800486c:	2f00      	cmp	r7, #0
 800486e:	f000 80d8 	beq.w	8004a22 <_printf_i+0x1d2>
 8004872:	2f58      	cmp	r7, #88	; 0x58
 8004874:	f000 80a3 	beq.w	80049be <_printf_i+0x16e>
 8004878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800487c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004880:	e03a      	b.n	80048f8 <_printf_i+0xa8>
 8004882:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004886:	2b15      	cmp	r3, #21
 8004888:	d8f6      	bhi.n	8004878 <_printf_i+0x28>
 800488a:	a101      	add	r1, pc, #4	; (adr r1, 8004890 <_printf_i+0x40>)
 800488c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004890:	080048e9 	.word	0x080048e9
 8004894:	080048fd 	.word	0x080048fd
 8004898:	08004879 	.word	0x08004879
 800489c:	08004879 	.word	0x08004879
 80048a0:	08004879 	.word	0x08004879
 80048a4:	08004879 	.word	0x08004879
 80048a8:	080048fd 	.word	0x080048fd
 80048ac:	08004879 	.word	0x08004879
 80048b0:	08004879 	.word	0x08004879
 80048b4:	08004879 	.word	0x08004879
 80048b8:	08004879 	.word	0x08004879
 80048bc:	08004a09 	.word	0x08004a09
 80048c0:	0800492d 	.word	0x0800492d
 80048c4:	080049eb 	.word	0x080049eb
 80048c8:	08004879 	.word	0x08004879
 80048cc:	08004879 	.word	0x08004879
 80048d0:	08004a2b 	.word	0x08004a2b
 80048d4:	08004879 	.word	0x08004879
 80048d8:	0800492d 	.word	0x0800492d
 80048dc:	08004879 	.word	0x08004879
 80048e0:	08004879 	.word	0x08004879
 80048e4:	080049f3 	.word	0x080049f3
 80048e8:	682b      	ldr	r3, [r5, #0]
 80048ea:	1d1a      	adds	r2, r3, #4
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	602a      	str	r2, [r5, #0]
 80048f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048f8:	2301      	movs	r3, #1
 80048fa:	e0a3      	b.n	8004a44 <_printf_i+0x1f4>
 80048fc:	6820      	ldr	r0, [r4, #0]
 80048fe:	6829      	ldr	r1, [r5, #0]
 8004900:	0606      	lsls	r6, r0, #24
 8004902:	f101 0304 	add.w	r3, r1, #4
 8004906:	d50a      	bpl.n	800491e <_printf_i+0xce>
 8004908:	680e      	ldr	r6, [r1, #0]
 800490a:	602b      	str	r3, [r5, #0]
 800490c:	2e00      	cmp	r6, #0
 800490e:	da03      	bge.n	8004918 <_printf_i+0xc8>
 8004910:	232d      	movs	r3, #45	; 0x2d
 8004912:	4276      	negs	r6, r6
 8004914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004918:	485e      	ldr	r0, [pc, #376]	; (8004a94 <_printf_i+0x244>)
 800491a:	230a      	movs	r3, #10
 800491c:	e019      	b.n	8004952 <_printf_i+0x102>
 800491e:	680e      	ldr	r6, [r1, #0]
 8004920:	602b      	str	r3, [r5, #0]
 8004922:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004926:	bf18      	it	ne
 8004928:	b236      	sxthne	r6, r6
 800492a:	e7ef      	b.n	800490c <_printf_i+0xbc>
 800492c:	682b      	ldr	r3, [r5, #0]
 800492e:	6820      	ldr	r0, [r4, #0]
 8004930:	1d19      	adds	r1, r3, #4
 8004932:	6029      	str	r1, [r5, #0]
 8004934:	0601      	lsls	r1, r0, #24
 8004936:	d501      	bpl.n	800493c <_printf_i+0xec>
 8004938:	681e      	ldr	r6, [r3, #0]
 800493a:	e002      	b.n	8004942 <_printf_i+0xf2>
 800493c:	0646      	lsls	r6, r0, #25
 800493e:	d5fb      	bpl.n	8004938 <_printf_i+0xe8>
 8004940:	881e      	ldrh	r6, [r3, #0]
 8004942:	4854      	ldr	r0, [pc, #336]	; (8004a94 <_printf_i+0x244>)
 8004944:	2f6f      	cmp	r7, #111	; 0x6f
 8004946:	bf0c      	ite	eq
 8004948:	2308      	moveq	r3, #8
 800494a:	230a      	movne	r3, #10
 800494c:	2100      	movs	r1, #0
 800494e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004952:	6865      	ldr	r5, [r4, #4]
 8004954:	60a5      	str	r5, [r4, #8]
 8004956:	2d00      	cmp	r5, #0
 8004958:	bfa2      	ittt	ge
 800495a:	6821      	ldrge	r1, [r4, #0]
 800495c:	f021 0104 	bicge.w	r1, r1, #4
 8004960:	6021      	strge	r1, [r4, #0]
 8004962:	b90e      	cbnz	r6, 8004968 <_printf_i+0x118>
 8004964:	2d00      	cmp	r5, #0
 8004966:	d04d      	beq.n	8004a04 <_printf_i+0x1b4>
 8004968:	4615      	mov	r5, r2
 800496a:	fbb6 f1f3 	udiv	r1, r6, r3
 800496e:	fb03 6711 	mls	r7, r3, r1, r6
 8004972:	5dc7      	ldrb	r7, [r0, r7]
 8004974:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004978:	4637      	mov	r7, r6
 800497a:	42bb      	cmp	r3, r7
 800497c:	460e      	mov	r6, r1
 800497e:	d9f4      	bls.n	800496a <_printf_i+0x11a>
 8004980:	2b08      	cmp	r3, #8
 8004982:	d10b      	bne.n	800499c <_printf_i+0x14c>
 8004984:	6823      	ldr	r3, [r4, #0]
 8004986:	07de      	lsls	r6, r3, #31
 8004988:	d508      	bpl.n	800499c <_printf_i+0x14c>
 800498a:	6923      	ldr	r3, [r4, #16]
 800498c:	6861      	ldr	r1, [r4, #4]
 800498e:	4299      	cmp	r1, r3
 8004990:	bfde      	ittt	le
 8004992:	2330      	movle	r3, #48	; 0x30
 8004994:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004998:	f105 35ff 	addle.w	r5, r5, #4294967295
 800499c:	1b52      	subs	r2, r2, r5
 800499e:	6122      	str	r2, [r4, #16]
 80049a0:	f8cd a000 	str.w	sl, [sp]
 80049a4:	464b      	mov	r3, r9
 80049a6:	aa03      	add	r2, sp, #12
 80049a8:	4621      	mov	r1, r4
 80049aa:	4640      	mov	r0, r8
 80049ac:	f7ff fee2 	bl	8004774 <_printf_common>
 80049b0:	3001      	adds	r0, #1
 80049b2:	d14c      	bne.n	8004a4e <_printf_i+0x1fe>
 80049b4:	f04f 30ff 	mov.w	r0, #4294967295
 80049b8:	b004      	add	sp, #16
 80049ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049be:	4835      	ldr	r0, [pc, #212]	; (8004a94 <_printf_i+0x244>)
 80049c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80049c4:	6829      	ldr	r1, [r5, #0]
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80049cc:	6029      	str	r1, [r5, #0]
 80049ce:	061d      	lsls	r5, r3, #24
 80049d0:	d514      	bpl.n	80049fc <_printf_i+0x1ac>
 80049d2:	07df      	lsls	r7, r3, #31
 80049d4:	bf44      	itt	mi
 80049d6:	f043 0320 	orrmi.w	r3, r3, #32
 80049da:	6023      	strmi	r3, [r4, #0]
 80049dc:	b91e      	cbnz	r6, 80049e6 <_printf_i+0x196>
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	f023 0320 	bic.w	r3, r3, #32
 80049e4:	6023      	str	r3, [r4, #0]
 80049e6:	2310      	movs	r3, #16
 80049e8:	e7b0      	b.n	800494c <_printf_i+0xfc>
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	f043 0320 	orr.w	r3, r3, #32
 80049f0:	6023      	str	r3, [r4, #0]
 80049f2:	2378      	movs	r3, #120	; 0x78
 80049f4:	4828      	ldr	r0, [pc, #160]	; (8004a98 <_printf_i+0x248>)
 80049f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049fa:	e7e3      	b.n	80049c4 <_printf_i+0x174>
 80049fc:	0659      	lsls	r1, r3, #25
 80049fe:	bf48      	it	mi
 8004a00:	b2b6      	uxthmi	r6, r6
 8004a02:	e7e6      	b.n	80049d2 <_printf_i+0x182>
 8004a04:	4615      	mov	r5, r2
 8004a06:	e7bb      	b.n	8004980 <_printf_i+0x130>
 8004a08:	682b      	ldr	r3, [r5, #0]
 8004a0a:	6826      	ldr	r6, [r4, #0]
 8004a0c:	6961      	ldr	r1, [r4, #20]
 8004a0e:	1d18      	adds	r0, r3, #4
 8004a10:	6028      	str	r0, [r5, #0]
 8004a12:	0635      	lsls	r5, r6, #24
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	d501      	bpl.n	8004a1c <_printf_i+0x1cc>
 8004a18:	6019      	str	r1, [r3, #0]
 8004a1a:	e002      	b.n	8004a22 <_printf_i+0x1d2>
 8004a1c:	0670      	lsls	r0, r6, #25
 8004a1e:	d5fb      	bpl.n	8004a18 <_printf_i+0x1c8>
 8004a20:	8019      	strh	r1, [r3, #0]
 8004a22:	2300      	movs	r3, #0
 8004a24:	6123      	str	r3, [r4, #16]
 8004a26:	4615      	mov	r5, r2
 8004a28:	e7ba      	b.n	80049a0 <_printf_i+0x150>
 8004a2a:	682b      	ldr	r3, [r5, #0]
 8004a2c:	1d1a      	adds	r2, r3, #4
 8004a2e:	602a      	str	r2, [r5, #0]
 8004a30:	681d      	ldr	r5, [r3, #0]
 8004a32:	6862      	ldr	r2, [r4, #4]
 8004a34:	2100      	movs	r1, #0
 8004a36:	4628      	mov	r0, r5
 8004a38:	f7fb fbd2 	bl	80001e0 <memchr>
 8004a3c:	b108      	cbz	r0, 8004a42 <_printf_i+0x1f2>
 8004a3e:	1b40      	subs	r0, r0, r5
 8004a40:	6060      	str	r0, [r4, #4]
 8004a42:	6863      	ldr	r3, [r4, #4]
 8004a44:	6123      	str	r3, [r4, #16]
 8004a46:	2300      	movs	r3, #0
 8004a48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a4c:	e7a8      	b.n	80049a0 <_printf_i+0x150>
 8004a4e:	6923      	ldr	r3, [r4, #16]
 8004a50:	462a      	mov	r2, r5
 8004a52:	4649      	mov	r1, r9
 8004a54:	4640      	mov	r0, r8
 8004a56:	47d0      	blx	sl
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d0ab      	beq.n	80049b4 <_printf_i+0x164>
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	079b      	lsls	r3, r3, #30
 8004a60:	d413      	bmi.n	8004a8a <_printf_i+0x23a>
 8004a62:	68e0      	ldr	r0, [r4, #12]
 8004a64:	9b03      	ldr	r3, [sp, #12]
 8004a66:	4298      	cmp	r0, r3
 8004a68:	bfb8      	it	lt
 8004a6a:	4618      	movlt	r0, r3
 8004a6c:	e7a4      	b.n	80049b8 <_printf_i+0x168>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	4632      	mov	r2, r6
 8004a72:	4649      	mov	r1, r9
 8004a74:	4640      	mov	r0, r8
 8004a76:	47d0      	blx	sl
 8004a78:	3001      	adds	r0, #1
 8004a7a:	d09b      	beq.n	80049b4 <_printf_i+0x164>
 8004a7c:	3501      	adds	r5, #1
 8004a7e:	68e3      	ldr	r3, [r4, #12]
 8004a80:	9903      	ldr	r1, [sp, #12]
 8004a82:	1a5b      	subs	r3, r3, r1
 8004a84:	42ab      	cmp	r3, r5
 8004a86:	dcf2      	bgt.n	8004a6e <_printf_i+0x21e>
 8004a88:	e7eb      	b.n	8004a62 <_printf_i+0x212>
 8004a8a:	2500      	movs	r5, #0
 8004a8c:	f104 0619 	add.w	r6, r4, #25
 8004a90:	e7f5      	b.n	8004a7e <_printf_i+0x22e>
 8004a92:	bf00      	nop
 8004a94:	08004ea5 	.word	0x08004ea5
 8004a98:	08004eb6 	.word	0x08004eb6

08004a9c <memmove>:
 8004a9c:	4288      	cmp	r0, r1
 8004a9e:	b510      	push	{r4, lr}
 8004aa0:	eb01 0402 	add.w	r4, r1, r2
 8004aa4:	d902      	bls.n	8004aac <memmove+0x10>
 8004aa6:	4284      	cmp	r4, r0
 8004aa8:	4623      	mov	r3, r4
 8004aaa:	d807      	bhi.n	8004abc <memmove+0x20>
 8004aac:	1e43      	subs	r3, r0, #1
 8004aae:	42a1      	cmp	r1, r4
 8004ab0:	d008      	beq.n	8004ac4 <memmove+0x28>
 8004ab2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ab6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004aba:	e7f8      	b.n	8004aae <memmove+0x12>
 8004abc:	4402      	add	r2, r0
 8004abe:	4601      	mov	r1, r0
 8004ac0:	428a      	cmp	r2, r1
 8004ac2:	d100      	bne.n	8004ac6 <memmove+0x2a>
 8004ac4:	bd10      	pop	{r4, pc}
 8004ac6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004aca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ace:	e7f7      	b.n	8004ac0 <memmove+0x24>

08004ad0 <_free_r>:
 8004ad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ad2:	2900      	cmp	r1, #0
 8004ad4:	d044      	beq.n	8004b60 <_free_r+0x90>
 8004ad6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ada:	9001      	str	r0, [sp, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f1a1 0404 	sub.w	r4, r1, #4
 8004ae2:	bfb8      	it	lt
 8004ae4:	18e4      	addlt	r4, r4, r3
 8004ae6:	f000 f913 	bl	8004d10 <__malloc_lock>
 8004aea:	4a1e      	ldr	r2, [pc, #120]	; (8004b64 <_free_r+0x94>)
 8004aec:	9801      	ldr	r0, [sp, #4]
 8004aee:	6813      	ldr	r3, [r2, #0]
 8004af0:	b933      	cbnz	r3, 8004b00 <_free_r+0x30>
 8004af2:	6063      	str	r3, [r4, #4]
 8004af4:	6014      	str	r4, [r2, #0]
 8004af6:	b003      	add	sp, #12
 8004af8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004afc:	f000 b90e 	b.w	8004d1c <__malloc_unlock>
 8004b00:	42a3      	cmp	r3, r4
 8004b02:	d908      	bls.n	8004b16 <_free_r+0x46>
 8004b04:	6825      	ldr	r5, [r4, #0]
 8004b06:	1961      	adds	r1, r4, r5
 8004b08:	428b      	cmp	r3, r1
 8004b0a:	bf01      	itttt	eq
 8004b0c:	6819      	ldreq	r1, [r3, #0]
 8004b0e:	685b      	ldreq	r3, [r3, #4]
 8004b10:	1949      	addeq	r1, r1, r5
 8004b12:	6021      	streq	r1, [r4, #0]
 8004b14:	e7ed      	b.n	8004af2 <_free_r+0x22>
 8004b16:	461a      	mov	r2, r3
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	b10b      	cbz	r3, 8004b20 <_free_r+0x50>
 8004b1c:	42a3      	cmp	r3, r4
 8004b1e:	d9fa      	bls.n	8004b16 <_free_r+0x46>
 8004b20:	6811      	ldr	r1, [r2, #0]
 8004b22:	1855      	adds	r5, r2, r1
 8004b24:	42a5      	cmp	r5, r4
 8004b26:	d10b      	bne.n	8004b40 <_free_r+0x70>
 8004b28:	6824      	ldr	r4, [r4, #0]
 8004b2a:	4421      	add	r1, r4
 8004b2c:	1854      	adds	r4, r2, r1
 8004b2e:	42a3      	cmp	r3, r4
 8004b30:	6011      	str	r1, [r2, #0]
 8004b32:	d1e0      	bne.n	8004af6 <_free_r+0x26>
 8004b34:	681c      	ldr	r4, [r3, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	6053      	str	r3, [r2, #4]
 8004b3a:	4421      	add	r1, r4
 8004b3c:	6011      	str	r1, [r2, #0]
 8004b3e:	e7da      	b.n	8004af6 <_free_r+0x26>
 8004b40:	d902      	bls.n	8004b48 <_free_r+0x78>
 8004b42:	230c      	movs	r3, #12
 8004b44:	6003      	str	r3, [r0, #0]
 8004b46:	e7d6      	b.n	8004af6 <_free_r+0x26>
 8004b48:	6825      	ldr	r5, [r4, #0]
 8004b4a:	1961      	adds	r1, r4, r5
 8004b4c:	428b      	cmp	r3, r1
 8004b4e:	bf04      	itt	eq
 8004b50:	6819      	ldreq	r1, [r3, #0]
 8004b52:	685b      	ldreq	r3, [r3, #4]
 8004b54:	6063      	str	r3, [r4, #4]
 8004b56:	bf04      	itt	eq
 8004b58:	1949      	addeq	r1, r1, r5
 8004b5a:	6021      	streq	r1, [r4, #0]
 8004b5c:	6054      	str	r4, [r2, #4]
 8004b5e:	e7ca      	b.n	8004af6 <_free_r+0x26>
 8004b60:	b003      	add	sp, #12
 8004b62:	bd30      	pop	{r4, r5, pc}
 8004b64:	2000410c 	.word	0x2000410c

08004b68 <sbrk_aligned>:
 8004b68:	b570      	push	{r4, r5, r6, lr}
 8004b6a:	4e0e      	ldr	r6, [pc, #56]	; (8004ba4 <sbrk_aligned+0x3c>)
 8004b6c:	460c      	mov	r4, r1
 8004b6e:	6831      	ldr	r1, [r6, #0]
 8004b70:	4605      	mov	r5, r0
 8004b72:	b911      	cbnz	r1, 8004b7a <sbrk_aligned+0x12>
 8004b74:	f000 f8bc 	bl	8004cf0 <_sbrk_r>
 8004b78:	6030      	str	r0, [r6, #0]
 8004b7a:	4621      	mov	r1, r4
 8004b7c:	4628      	mov	r0, r5
 8004b7e:	f000 f8b7 	bl	8004cf0 <_sbrk_r>
 8004b82:	1c43      	adds	r3, r0, #1
 8004b84:	d00a      	beq.n	8004b9c <sbrk_aligned+0x34>
 8004b86:	1cc4      	adds	r4, r0, #3
 8004b88:	f024 0403 	bic.w	r4, r4, #3
 8004b8c:	42a0      	cmp	r0, r4
 8004b8e:	d007      	beq.n	8004ba0 <sbrk_aligned+0x38>
 8004b90:	1a21      	subs	r1, r4, r0
 8004b92:	4628      	mov	r0, r5
 8004b94:	f000 f8ac 	bl	8004cf0 <_sbrk_r>
 8004b98:	3001      	adds	r0, #1
 8004b9a:	d101      	bne.n	8004ba0 <sbrk_aligned+0x38>
 8004b9c:	f04f 34ff 	mov.w	r4, #4294967295
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	bd70      	pop	{r4, r5, r6, pc}
 8004ba4:	20004110 	.word	0x20004110

08004ba8 <_malloc_r>:
 8004ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bac:	1ccd      	adds	r5, r1, #3
 8004bae:	f025 0503 	bic.w	r5, r5, #3
 8004bb2:	3508      	adds	r5, #8
 8004bb4:	2d0c      	cmp	r5, #12
 8004bb6:	bf38      	it	cc
 8004bb8:	250c      	movcc	r5, #12
 8004bba:	2d00      	cmp	r5, #0
 8004bbc:	4607      	mov	r7, r0
 8004bbe:	db01      	blt.n	8004bc4 <_malloc_r+0x1c>
 8004bc0:	42a9      	cmp	r1, r5
 8004bc2:	d905      	bls.n	8004bd0 <_malloc_r+0x28>
 8004bc4:	230c      	movs	r3, #12
 8004bc6:	603b      	str	r3, [r7, #0]
 8004bc8:	2600      	movs	r6, #0
 8004bca:	4630      	mov	r0, r6
 8004bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bd0:	4e2e      	ldr	r6, [pc, #184]	; (8004c8c <_malloc_r+0xe4>)
 8004bd2:	f000 f89d 	bl	8004d10 <__malloc_lock>
 8004bd6:	6833      	ldr	r3, [r6, #0]
 8004bd8:	461c      	mov	r4, r3
 8004bda:	bb34      	cbnz	r4, 8004c2a <_malloc_r+0x82>
 8004bdc:	4629      	mov	r1, r5
 8004bde:	4638      	mov	r0, r7
 8004be0:	f7ff ffc2 	bl	8004b68 <sbrk_aligned>
 8004be4:	1c43      	adds	r3, r0, #1
 8004be6:	4604      	mov	r4, r0
 8004be8:	d14d      	bne.n	8004c86 <_malloc_r+0xde>
 8004bea:	6834      	ldr	r4, [r6, #0]
 8004bec:	4626      	mov	r6, r4
 8004bee:	2e00      	cmp	r6, #0
 8004bf0:	d140      	bne.n	8004c74 <_malloc_r+0xcc>
 8004bf2:	6823      	ldr	r3, [r4, #0]
 8004bf4:	4631      	mov	r1, r6
 8004bf6:	4638      	mov	r0, r7
 8004bf8:	eb04 0803 	add.w	r8, r4, r3
 8004bfc:	f000 f878 	bl	8004cf0 <_sbrk_r>
 8004c00:	4580      	cmp	r8, r0
 8004c02:	d13a      	bne.n	8004c7a <_malloc_r+0xd2>
 8004c04:	6821      	ldr	r1, [r4, #0]
 8004c06:	3503      	adds	r5, #3
 8004c08:	1a6d      	subs	r5, r5, r1
 8004c0a:	f025 0503 	bic.w	r5, r5, #3
 8004c0e:	3508      	adds	r5, #8
 8004c10:	2d0c      	cmp	r5, #12
 8004c12:	bf38      	it	cc
 8004c14:	250c      	movcc	r5, #12
 8004c16:	4629      	mov	r1, r5
 8004c18:	4638      	mov	r0, r7
 8004c1a:	f7ff ffa5 	bl	8004b68 <sbrk_aligned>
 8004c1e:	3001      	adds	r0, #1
 8004c20:	d02b      	beq.n	8004c7a <_malloc_r+0xd2>
 8004c22:	6823      	ldr	r3, [r4, #0]
 8004c24:	442b      	add	r3, r5
 8004c26:	6023      	str	r3, [r4, #0]
 8004c28:	e00e      	b.n	8004c48 <_malloc_r+0xa0>
 8004c2a:	6822      	ldr	r2, [r4, #0]
 8004c2c:	1b52      	subs	r2, r2, r5
 8004c2e:	d41e      	bmi.n	8004c6e <_malloc_r+0xc6>
 8004c30:	2a0b      	cmp	r2, #11
 8004c32:	d916      	bls.n	8004c62 <_malloc_r+0xba>
 8004c34:	1961      	adds	r1, r4, r5
 8004c36:	42a3      	cmp	r3, r4
 8004c38:	6025      	str	r5, [r4, #0]
 8004c3a:	bf18      	it	ne
 8004c3c:	6059      	strne	r1, [r3, #4]
 8004c3e:	6863      	ldr	r3, [r4, #4]
 8004c40:	bf08      	it	eq
 8004c42:	6031      	streq	r1, [r6, #0]
 8004c44:	5162      	str	r2, [r4, r5]
 8004c46:	604b      	str	r3, [r1, #4]
 8004c48:	4638      	mov	r0, r7
 8004c4a:	f104 060b 	add.w	r6, r4, #11
 8004c4e:	f000 f865 	bl	8004d1c <__malloc_unlock>
 8004c52:	f026 0607 	bic.w	r6, r6, #7
 8004c56:	1d23      	adds	r3, r4, #4
 8004c58:	1af2      	subs	r2, r6, r3
 8004c5a:	d0b6      	beq.n	8004bca <_malloc_r+0x22>
 8004c5c:	1b9b      	subs	r3, r3, r6
 8004c5e:	50a3      	str	r3, [r4, r2]
 8004c60:	e7b3      	b.n	8004bca <_malloc_r+0x22>
 8004c62:	6862      	ldr	r2, [r4, #4]
 8004c64:	42a3      	cmp	r3, r4
 8004c66:	bf0c      	ite	eq
 8004c68:	6032      	streq	r2, [r6, #0]
 8004c6a:	605a      	strne	r2, [r3, #4]
 8004c6c:	e7ec      	b.n	8004c48 <_malloc_r+0xa0>
 8004c6e:	4623      	mov	r3, r4
 8004c70:	6864      	ldr	r4, [r4, #4]
 8004c72:	e7b2      	b.n	8004bda <_malloc_r+0x32>
 8004c74:	4634      	mov	r4, r6
 8004c76:	6876      	ldr	r6, [r6, #4]
 8004c78:	e7b9      	b.n	8004bee <_malloc_r+0x46>
 8004c7a:	230c      	movs	r3, #12
 8004c7c:	603b      	str	r3, [r7, #0]
 8004c7e:	4638      	mov	r0, r7
 8004c80:	f000 f84c 	bl	8004d1c <__malloc_unlock>
 8004c84:	e7a1      	b.n	8004bca <_malloc_r+0x22>
 8004c86:	6025      	str	r5, [r4, #0]
 8004c88:	e7de      	b.n	8004c48 <_malloc_r+0xa0>
 8004c8a:	bf00      	nop
 8004c8c:	2000410c 	.word	0x2000410c

08004c90 <_realloc_r>:
 8004c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c94:	4680      	mov	r8, r0
 8004c96:	4614      	mov	r4, r2
 8004c98:	460e      	mov	r6, r1
 8004c9a:	b921      	cbnz	r1, 8004ca6 <_realloc_r+0x16>
 8004c9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ca0:	4611      	mov	r1, r2
 8004ca2:	f7ff bf81 	b.w	8004ba8 <_malloc_r>
 8004ca6:	b92a      	cbnz	r2, 8004cb4 <_realloc_r+0x24>
 8004ca8:	f7ff ff12 	bl	8004ad0 <_free_r>
 8004cac:	4625      	mov	r5, r4
 8004cae:	4628      	mov	r0, r5
 8004cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cb4:	f000 f838 	bl	8004d28 <_malloc_usable_size_r>
 8004cb8:	4284      	cmp	r4, r0
 8004cba:	4607      	mov	r7, r0
 8004cbc:	d802      	bhi.n	8004cc4 <_realloc_r+0x34>
 8004cbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004cc2:	d812      	bhi.n	8004cea <_realloc_r+0x5a>
 8004cc4:	4621      	mov	r1, r4
 8004cc6:	4640      	mov	r0, r8
 8004cc8:	f7ff ff6e 	bl	8004ba8 <_malloc_r>
 8004ccc:	4605      	mov	r5, r0
 8004cce:	2800      	cmp	r0, #0
 8004cd0:	d0ed      	beq.n	8004cae <_realloc_r+0x1e>
 8004cd2:	42bc      	cmp	r4, r7
 8004cd4:	4622      	mov	r2, r4
 8004cd6:	4631      	mov	r1, r6
 8004cd8:	bf28      	it	cs
 8004cda:	463a      	movcs	r2, r7
 8004cdc:	f7ff fbb8 	bl	8004450 <memcpy>
 8004ce0:	4631      	mov	r1, r6
 8004ce2:	4640      	mov	r0, r8
 8004ce4:	f7ff fef4 	bl	8004ad0 <_free_r>
 8004ce8:	e7e1      	b.n	8004cae <_realloc_r+0x1e>
 8004cea:	4635      	mov	r5, r6
 8004cec:	e7df      	b.n	8004cae <_realloc_r+0x1e>
	...

08004cf0 <_sbrk_r>:
 8004cf0:	b538      	push	{r3, r4, r5, lr}
 8004cf2:	4d06      	ldr	r5, [pc, #24]	; (8004d0c <_sbrk_r+0x1c>)
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	4604      	mov	r4, r0
 8004cf8:	4608      	mov	r0, r1
 8004cfa:	602b      	str	r3, [r5, #0]
 8004cfc:	f7fb ffda 	bl	8000cb4 <_sbrk>
 8004d00:	1c43      	adds	r3, r0, #1
 8004d02:	d102      	bne.n	8004d0a <_sbrk_r+0x1a>
 8004d04:	682b      	ldr	r3, [r5, #0]
 8004d06:	b103      	cbz	r3, 8004d0a <_sbrk_r+0x1a>
 8004d08:	6023      	str	r3, [r4, #0]
 8004d0a:	bd38      	pop	{r3, r4, r5, pc}
 8004d0c:	20004114 	.word	0x20004114

08004d10 <__malloc_lock>:
 8004d10:	4801      	ldr	r0, [pc, #4]	; (8004d18 <__malloc_lock+0x8>)
 8004d12:	f000 b811 	b.w	8004d38 <__retarget_lock_acquire_recursive>
 8004d16:	bf00      	nop
 8004d18:	20004118 	.word	0x20004118

08004d1c <__malloc_unlock>:
 8004d1c:	4801      	ldr	r0, [pc, #4]	; (8004d24 <__malloc_unlock+0x8>)
 8004d1e:	f000 b80c 	b.w	8004d3a <__retarget_lock_release_recursive>
 8004d22:	bf00      	nop
 8004d24:	20004118 	.word	0x20004118

08004d28 <_malloc_usable_size_r>:
 8004d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d2c:	1f18      	subs	r0, r3, #4
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	bfbc      	itt	lt
 8004d32:	580b      	ldrlt	r3, [r1, r0]
 8004d34:	18c0      	addlt	r0, r0, r3
 8004d36:	4770      	bx	lr

08004d38 <__retarget_lock_acquire_recursive>:
 8004d38:	4770      	bx	lr

08004d3a <__retarget_lock_release_recursive>:
 8004d3a:	4770      	bx	lr

08004d3c <_init>:
 8004d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3e:	bf00      	nop
 8004d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d42:	bc08      	pop	{r3}
 8004d44:	469e      	mov	lr, r3
 8004d46:	4770      	bx	lr

08004d48 <_fini>:
 8004d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4a:	bf00      	nop
 8004d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d4e:	bc08      	pop	{r3}
 8004d50:	469e      	mov	lr, r3
 8004d52:	4770      	bx	lr
