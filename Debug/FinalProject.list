
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  08007764  08007764  00017764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a9c  08007a9c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007a9c  08007a9c  00017a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007aa4  08007aa4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007aa4  08007aa4  00017aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007aa8  08007aa8  00017aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007aac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004128  20000074  08007b20  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000419c  08007b20  0002419c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015093  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f6f  00000000  00000000  00035137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  000380a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  00039310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179e1  00000000  00000000  0003a450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001427c  00000000  00000000  00051e31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009678d  00000000  00000000  000660ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fc83a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005088  00000000  00000000  000fc88c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800774c 	.word	0x0800774c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800774c 	.word	0x0800774c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000090 	.word	0x20000090
 80005e4:	200000e4 	.word	0x200000e4

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b0d4      	sub	sp, #336	; 0x150
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f000 ff4f 	bl	8001490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f941 	bl	8000878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 f9df 	bl	80009b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fa:	f000 f9b3 	bl	8000964 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80005fe:	f000 f9a5 	bl	800094c <MX_NVIC_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of PrintMtx */
  osMutexDef(PrintMtx);
 8000602:	2300      	movs	r3, #0
 8000604:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8000608:	2300      	movs	r3, #0
 800060a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  PrintMtxHandle = osMutexCreate(osMutex(PrintMtx));
 800060e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000612:	4618      	mov	r0, r3
 8000614:	f003 fbc6 	bl	8003da4 <osMutexCreate>
 8000618:	4603      	mov	r3, r0
 800061a:	4a7c      	ldr	r2, [pc, #496]	; (800080c <main+0x224>)
 800061c:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of UartQueue */
  osMessageQDef(UartQueue, 1, UartData);
 800061e:	4b7c      	ldr	r3, [pc, #496]	; (8000810 <main+0x228>)
 8000620:	f507 749c 	add.w	r4, r7, #312	; 0x138
 8000624:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000626:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UartQueueHandle = osMessageCreate(osMessageQ(UartQueue), NULL);
 800062a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800062e:	2100      	movs	r1, #0
 8000630:	4618      	mov	r0, r3
 8000632:	f003 fc53 	bl	8003edc <osMessageCreate>
 8000636:	4603      	mov	r3, r0
 8000638:	4a76      	ldr	r2, [pc, #472]	; (8000814 <main+0x22c>)
 800063a:	6013      	str	r3, [r2, #0]

  /* definition and creation of ImuQueue */
  osMessageQDef(ImuQueue, 1, ImuData);
 800063c:	4b76      	ldr	r3, [pc, #472]	; (8000818 <main+0x230>)
 800063e:	f507 7494 	add.w	r4, r7, #296	; 0x128
 8000642:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000644:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ImuQueueHandle = osMessageCreate(osMessageQ(ImuQueue), NULL);
 8000648:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f003 fc44 	bl	8003edc <osMessageCreate>
 8000654:	4603      	mov	r3, r0
 8000656:	4a71      	ldr	r2, [pc, #452]	; (800081c <main+0x234>)
 8000658:	6013      	str	r3, [r2, #0]

  /* definition and creation of GpsQueue */
  osMessageQDef(GpsQueue, 1, GpsData);
 800065a:	4b71      	ldr	r3, [pc, #452]	; (8000820 <main+0x238>)
 800065c:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8000660:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000662:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  GpsQueueHandle = osMessageCreate(osMessageQ(GpsQueue), NULL);
 8000666:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f003 fc35 	bl	8003edc <osMessageCreate>
 8000672:	4603      	mov	r3, r0
 8000674:	4a6b      	ldr	r2, [pc, #428]	; (8000824 <main+0x23c>)
 8000676:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ImuTask */
  osThreadDef(ImuTask, StartImuTask, osPriorityLow, 0, 128);
 8000678:	4b6b      	ldr	r3, [pc, #428]	; (8000828 <main+0x240>)
 800067a:	f107 04fc 	add.w	r4, r7, #252	; 0xfc
 800067e:	461d      	mov	r5, r3
 8000680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000684:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000688:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ImuTaskHandle = osThreadCreate(osThread(ImuTask), NULL);
 800068c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f003 fa99 	bl	8003bca <osThreadCreate>
 8000698:	4603      	mov	r3, r0
 800069a:	4a64      	ldr	r2, [pc, #400]	; (800082c <main+0x244>)
 800069c:	6013      	str	r3, [r2, #0]

  /* definition and creation of GpsTask */
  osThreadDef(GpsTask, StartGpsTask, osPriorityLow, 0, 128);
 800069e:	4b64      	ldr	r3, [pc, #400]	; (8000830 <main+0x248>)
 80006a0:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 80006a4:	461d      	mov	r5, r3
 80006a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GpsTaskHandle = osThreadCreate(osThread(GpsTask), NULL);
 80006b2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80006b6:	2100      	movs	r1, #0
 80006b8:	4618      	mov	r0, r3
 80006ba:	f003 fa86 	bl	8003bca <osThreadCreate>
 80006be:	4603      	mov	r3, r0
 80006c0:	4a5c      	ldr	r2, [pc, #368]	; (8000834 <main+0x24c>)
 80006c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of KFTask */
  osThreadDef(KFTask, StartKFTask, osPriorityLow, 0, 128);
 80006c4:	4b5c      	ldr	r3, [pc, #368]	; (8000838 <main+0x250>)
 80006c6:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 80006ca:	461d      	mov	r5, r3
 80006cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  KFTaskHandle = osThreadCreate(osThread(KFTask), NULL);
 80006d8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f003 fa73 	bl	8003bca <osThreadCreate>
 80006e4:	4603      	mov	r3, r0
 80006e6:	4a55      	ldr	r2, [pc, #340]	; (800083c <main+0x254>)
 80006e8:	6013      	str	r3, [r2, #0]

  /* definition and creation of RadarTask */
  osThreadDef(RadarTask, StartRadarTask, osPriorityLow, 0, 128);
 80006ea:	4b55      	ldr	r3, [pc, #340]	; (8000840 <main+0x258>)
 80006ec:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 80006f0:	461d      	mov	r5, r3
 80006f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RadarTaskHandle = osThreadCreate(osThread(RadarTask), NULL);
 80006fe:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000702:	2100      	movs	r1, #0
 8000704:	4618      	mov	r0, r3
 8000706:	f003 fa60 	bl	8003bca <osThreadCreate>
 800070a:	4603      	mov	r3, r0
 800070c:	4a4d      	ldr	r2, [pc, #308]	; (8000844 <main+0x25c>)
 800070e:	6013      	str	r3, [r2, #0]

  /* definition and creation of UartTask */
  osThreadDef(UartTask, StartUartTask, osPriorityLow, 0, 128);
 8000710:	4b4d      	ldr	r3, [pc, #308]	; (8000848 <main+0x260>)
 8000712:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000716:	461d      	mov	r5, r3
 8000718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800071a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800071c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000720:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UartTaskHandle = osThreadCreate(osThread(UartTask), NULL);
 8000724:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f003 fa4d 	bl	8003bca <osThreadCreate>
 8000730:	4603      	mov	r3, r0
 8000732:	4a46      	ldr	r2, [pc, #280]	; (800084c <main+0x264>)
 8000734:	6013      	str	r3, [r2, #0]

  /* definition and creation of ExButtonIntTask */
  osThreadDef(ExButtonIntTask, StartExButtonIntTask, osPriorityHigh, 0, 128);
 8000736:	4b46      	ldr	r3, [pc, #280]	; (8000850 <main+0x268>)
 8000738:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800073c:	461d      	mov	r5, r3
 800073e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000740:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000742:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000746:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ExButtonIntTaskHandle = osThreadCreate(osThread(ExButtonIntTask), NULL);
 800074a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800074e:	2100      	movs	r1, #0
 8000750:	4618      	mov	r0, r3
 8000752:	f003 fa3a 	bl	8003bca <osThreadCreate>
 8000756:	4603      	mov	r3, r0
 8000758:	4a3e      	ldr	r2, [pc, #248]	; (8000854 <main+0x26c>)
 800075a:	6013      	str	r3, [r2, #0]

  /* definition and creation of LcdTask */
  osThreadDef(LcdTask, StartLcdTask, osPriorityLow, 0, 128);
 800075c:	4b3e      	ldr	r3, [pc, #248]	; (8000858 <main+0x270>)
 800075e:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000762:	461d      	mov	r5, r3
 8000764:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000766:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000768:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800076c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LcdTaskHandle = osThreadCreate(osThread(LcdTask), NULL);
 8000770:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f003 fa27 	bl	8003bca <osThreadCreate>
 800077c:	4603      	mov	r3, r0
 800077e:	4a37      	ldr	r2, [pc, #220]	; (800085c <main+0x274>)
 8000780:	6013      	str	r3, [r2, #0]

  /* definition and creation of MotorTask */
  osThreadDef(MotorTask, StartMotorTask, osPriorityAboveNormal, 0, 128);
 8000782:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000786:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800078a:	4a35      	ldr	r2, [pc, #212]	; (8000860 <main+0x278>)
 800078c:	461c      	mov	r4, r3
 800078e:	4615      	mov	r5, r2
 8000790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000794:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000798:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotorTaskHandle = osThreadCreate(osThread(MotorTask), NULL);
 800079c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f003 fa11 	bl	8003bca <osThreadCreate>
 80007a8:	4603      	mov	r3, r0
 80007aa:	4a2e      	ldr	r2, [pc, #184]	; (8000864 <main+0x27c>)
 80007ac:	6013      	str	r3, [r2, #0]

  /* definition and creation of MainTask */
  osThreadDef(MainTask, StartMainTask, osPriorityNormal, 0, 128);
 80007ae:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80007b2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80007b6:	4a2c      	ldr	r2, [pc, #176]	; (8000868 <main+0x280>)
 80007b8:	461c      	mov	r4, r3
 80007ba:	4615      	mov	r5, r2
 80007bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f003 f9fb 	bl	8003bca <osThreadCreate>
 80007d4:	4603      	mov	r3, r0
 80007d6:	4a25      	ldr	r2, [pc, #148]	; (800086c <main+0x284>)
 80007d8:	6013      	str	r3, [r2, #0]

  /* definition and creation of ObjectDetectTas */
  osThreadDef(ObjectDetectTas, StartObjectDetectTask, osPriorityHigh, 0, 128);
 80007da:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80007de:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80007e2:	4a23      	ldr	r2, [pc, #140]	; (8000870 <main+0x288>)
 80007e4:	461c      	mov	r4, r3
 80007e6:	4615      	mov	r5, r2
 80007e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ObjectDetectTasHandle = osThreadCreate(osThread(ObjectDetectTas), NULL);
 80007f4:	463b      	mov	r3, r7
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f003 f9e6 	bl	8003bca <osThreadCreate>
 80007fe:	4603      	mov	r3, r0
 8000800:	4a1c      	ldr	r2, [pc, #112]	; (8000874 <main+0x28c>)
 8000802:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000804:	f003 f9ca 	bl	8003b9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000808:	e7fe      	b.n	8000808 <main+0x220>
 800080a:	bf00      	nop
 800080c:	2000035c 	.word	0x2000035c
 8000810:	080077d4 	.word	0x080077d4
 8000814:	20000350 	.word	0x20000350
 8000818:	080077e4 	.word	0x080077e4
 800081c:	20000354 	.word	0x20000354
 8000820:	080077f4 	.word	0x080077f4
 8000824:	20000358 	.word	0x20000358
 8000828:	08007804 	.word	0x08007804
 800082c:	20000328 	.word	0x20000328
 8000830:	08007820 	.word	0x08007820
 8000834:	2000032c 	.word	0x2000032c
 8000838:	0800783c 	.word	0x0800783c
 800083c:	20000330 	.word	0x20000330
 8000840:	08007858 	.word	0x08007858
 8000844:	20000334 	.word	0x20000334
 8000848:	08007874 	.word	0x08007874
 800084c:	20000338 	.word	0x20000338
 8000850:	08007890 	.word	0x08007890
 8000854:	2000033c 	.word	0x2000033c
 8000858:	080078ac 	.word	0x080078ac
 800085c:	20000340 	.word	0x20000340
 8000860:	080078c8 	.word	0x080078c8
 8000864:	20000344 	.word	0x20000344
 8000868:	080078e4 	.word	0x080078e4
 800086c:	20000348 	.word	0x20000348
 8000870:	08007900 	.word	0x08007900
 8000874:	2000034c 	.word	0x2000034c

08000878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b094      	sub	sp, #80	; 0x50
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 0320 	add.w	r3, r7, #32
 8000882:	2230      	movs	r2, #48	; 0x30
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f006 faf8 	bl	8006e7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800089c:	2300      	movs	r3, #0
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	4b28      	ldr	r3, [pc, #160]	; (8000944 <SystemClock_Config+0xcc>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a4:	4a27      	ldr	r2, [pc, #156]	; (8000944 <SystemClock_Config+0xcc>)
 80008a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008aa:	6413      	str	r3, [r2, #64]	; 0x40
 80008ac:	4b25      	ldr	r3, [pc, #148]	; (8000944 <SystemClock_Config+0xcc>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b8:	2300      	movs	r3, #0
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	4b22      	ldr	r3, [pc, #136]	; (8000948 <SystemClock_Config+0xd0>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a21      	ldr	r2, [pc, #132]	; (8000948 <SystemClock_Config+0xd0>)
 80008c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008c6:	6013      	str	r3, [r2, #0]
 80008c8:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <SystemClock_Config+0xd0>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008d4:	2302      	movs	r3, #2
 80008d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d8:	2301      	movs	r3, #1
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008dc:	2310      	movs	r3, #16
 80008de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e0:	2302      	movs	r3, #2
 80008e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008e4:	2300      	movs	r3, #0
 80008e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008e8:	2310      	movs	r3, #16
 80008ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008f2:	2304      	movs	r3, #4
 80008f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008f6:	2304      	movs	r3, #4
 80008f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fa:	f107 0320 	add.w	r3, r7, #32
 80008fe:	4618      	mov	r0, r3
 8000900:	f001 f964 	bl	8001bcc <HAL_RCC_OscConfig>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800090a:	f000 fc40 	bl	800118e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090e:	230f      	movs	r3, #15
 8000910:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000912:	2302      	movs	r3, #2
 8000914:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800091a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800091e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	2102      	movs	r1, #2
 800092a:	4618      	mov	r0, r3
 800092c:	f001 fbc6 	bl	80020bc <HAL_RCC_ClockConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000936:	f000 fc2a 	bl	800118e <Error_Handler>
  }
}
 800093a:	bf00      	nop
 800093c:	3750      	adds	r7, #80	; 0x50
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800
 8000948:	40007000 	.word	0x40007000

0800094c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000950:	2200      	movs	r2, #0
 8000952:	2105      	movs	r1, #5
 8000954:	2028      	movs	r0, #40	; 0x28
 8000956:	f000 fe95 	bl	8001684 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800095a:	2028      	movs	r0, #40	; 0x28
 800095c:	f000 feae 	bl	80016bc <HAL_NVIC_EnableIRQ>
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}

08000964 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 800096a:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <MX_USART2_UART_Init+0x50>)
 800096c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 8000970:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000974:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800099a:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 800099c:	f002 f860 	bl	8002a60 <HAL_UART_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009a6:	f000 fbf2 	bl	800118e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	200002e4 	.word	0x200002e4
 80009b4:	40004400 	.word	0x40004400

080009b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	4b3f      	ldr	r3, [pc, #252]	; (8000ad0 <MX_GPIO_Init+0x118>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a3e      	ldr	r2, [pc, #248]	; (8000ad0 <MX_GPIO_Init+0x118>)
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b3c      	ldr	r3, [pc, #240]	; (8000ad0 <MX_GPIO_Init+0x118>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0304 	and.w	r3, r3, #4
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b38      	ldr	r3, [pc, #224]	; (8000ad0 <MX_GPIO_Init+0x118>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a37      	ldr	r2, [pc, #220]	; (8000ad0 <MX_GPIO_Init+0x118>)
 80009f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b35      	ldr	r3, [pc, #212]	; (8000ad0 <MX_GPIO_Init+0x118>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	4b31      	ldr	r3, [pc, #196]	; (8000ad0 <MX_GPIO_Init+0x118>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a30      	ldr	r2, [pc, #192]	; (8000ad0 <MX_GPIO_Init+0x118>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b2e      	ldr	r3, [pc, #184]	; (8000ad0 <MX_GPIO_Init+0x118>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	4b2a      	ldr	r3, [pc, #168]	; (8000ad0 <MX_GPIO_Init+0x118>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a29      	ldr	r2, [pc, #164]	; (8000ad0 <MX_GPIO_Init+0x118>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b27      	ldr	r3, [pc, #156]	; (8000ad0 <MX_GPIO_Init+0x118>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2120      	movs	r1, #32
 8000a42:	4824      	ldr	r0, [pc, #144]	; (8000ad4 <MX_GPIO_Init+0x11c>)
 8000a44:	f001 f876 	bl	8001b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, YellowLed_Pin|RedLed_Pin|GreenLed_Pin|BlueLed_Pin, GPIO_PIN_RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f24e 0102 	movw	r1, #57346	; 0xe002
 8000a4e:	4822      	ldr	r0, [pc, #136]	; (8000ad8 <MX_GPIO_Init+0x120>)
 8000a50:	f001 f870 	bl	8001b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a5a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	481c      	ldr	r0, [pc, #112]	; (8000adc <MX_GPIO_Init+0x124>)
 8000a6c:	f000 fec6 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a70:	2320      	movs	r3, #32
 8000a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	4813      	ldr	r0, [pc, #76]	; (8000ad4 <MX_GPIO_Init+0x11c>)
 8000a88:	f000 feb8 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pins : YellowLed_Pin RedLed_Pin GreenLed_Pin BlueLed_Pin */
  GPIO_InitStruct.Pin = YellowLed_Pin|RedLed_Pin|GreenLed_Pin|BlueLed_Pin;
 8000a8c:	f24e 0302 	movw	r3, #57346	; 0xe002
 8000a90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480c      	ldr	r0, [pc, #48]	; (8000ad8 <MX_GPIO_Init+0x120>)
 8000aa6:	f000 fea9 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ExButton_Pin */
  GPIO_InitStruct.Pin = ExButton_Pin;
 8000aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ab0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ExButton_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_GPIO_Init+0x120>)
 8000ac2:	f000 fe9b 	bl	80017fc <HAL_GPIO_Init>

}
 8000ac6:	bf00      	nop
 8000ac8:	3728      	adds	r7, #40	; 0x28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020000 	.word	0x40020000
 8000ad8:	40020400 	.word	0x40020400
 8000adc:	40020800 	.word	0x40020800

08000ae0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// overwrite the HAL_GPIO_EXTI_Callback function
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == ExButton_Pin) {
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000af0:	d105      	bne.n	8000afe <HAL_GPIO_EXTI_Callback+0x1e>
  	osSignalSet(ExButtonIntTaskHandle, SIGNAL_BUTTON_PRESS);
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <HAL_GPIO_EXTI_Callback+0x3c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2101      	movs	r1, #1
 8000af8:	4618      	mov	r0, r3
 8000afa:	f003 f8c7 	bl	8003c8c <osSignalSet>
  }
  if(GPIO_Pin == B1_Pin) {
 8000afe:	88fb      	ldrh	r3, [r7, #6]
 8000b00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b04:	d105      	bne.n	8000b12 <HAL_GPIO_EXTI_Callback+0x32>
  	osSignalSet(ExButtonIntTaskHandle, SIGNAL_BUTTON_PRESS);
 8000b06:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <HAL_GPIO_EXTI_Callback+0x3c>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f003 f8bd 	bl	8003c8c <osSignalSet>
  }
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	2000033c 	.word	0x2000033c

08000b20 <HAL_UART_RxCpltCallback>:

// interrupt callback method - when the data reception is complete, this is called
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	 // current UART
	uint8_t i;

	if (huart->Instance == USART2) {
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a34      	ldr	r2, [pc, #208]	; (8000c00 <HAL_UART_RxCpltCallback+0xe0>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d162      	bne.n	8000bf8 <HAL_UART_RxCpltCallback+0xd8>
  	// Clear Rx_Buffer prior to use
  	if (Rx_indx == 0) {
 8000b32:	4b34      	ldr	r3, [pc, #208]	; (8000c04 <HAL_UART_RxCpltCallback+0xe4>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d107      	bne.n	8000b4a <HAL_UART_RxCpltCallback+0x2a>
    	// turn on the yellow led
    	HAL_GPIO_WritePin(YellowLed_GPIO_Port, YellowLed_Pin, GPIO_PIN_SET);
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	2102      	movs	r1, #2
 8000b3e:	4832      	ldr	r0, [pc, #200]	; (8000c08 <HAL_UART_RxCpltCallback+0xe8>)
 8000b40:	f000 fff8 	bl	8001b34 <HAL_GPIO_WritePin>
    	EmptyBuffer(Rx_Buffer);
 8000b44:	4831      	ldr	r0, [pc, #196]	; (8000c0c <HAL_UART_RxCpltCallback+0xec>)
 8000b46:	f000 fb05 	bl	8001154 <EmptyBuffer>
  	}

  	// check for carriage return (ASCII: 13 == \r)
  	if (Rx_byte != 13) {
 8000b4a:	4b31      	ldr	r3, [pc, #196]	; (8000c10 <HAL_UART_RxCpltCallback+0xf0>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b0d      	cmp	r3, #13
 8000b50:	d00b      	beq.n	8000b6a <HAL_UART_RxCpltCallback+0x4a>
  		Rx_Buffer[Rx_indx++] = Rx_byte; // add data to Rx_Buffer
 8000b52:	4b2c      	ldr	r3, [pc, #176]	; (8000c04 <HAL_UART_RxCpltCallback+0xe4>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	1c5a      	adds	r2, r3, #1
 8000b58:	b2d1      	uxtb	r1, r2
 8000b5a:	4a2a      	ldr	r2, [pc, #168]	; (8000c04 <HAL_UART_RxCpltCallback+0xe4>)
 8000b5c:	7011      	strb	r1, [r2, #0]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	4b2b      	ldr	r3, [pc, #172]	; (8000c10 <HAL_UART_RxCpltCallback+0xf0>)
 8000b62:	7819      	ldrb	r1, [r3, #0]
 8000b64:	4b29      	ldr	r3, [pc, #164]	; (8000c0c <HAL_UART_RxCpltCallback+0xec>)
 8000b66:	5499      	strb	r1, [r3, r2]
 8000b68:	e03b      	b.n	8000be2 <HAL_UART_RxCpltCallback+0xc2>
  	} else {
  		Rx_indx = 0;
 8000b6a:	4b26      	ldr	r3, [pc, #152]	; (8000c04 <HAL_UART_RxCpltCallback+0xe4>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]
  		Transfer_cplt = 1; // transfer complete, data is ready
 8000b70:	4b28      	ldr	r3, [pc, #160]	; (8000c14 <HAL_UART_RxCpltCallback+0xf4>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	701a      	strb	r2, [r3, #0]

  		// LED trigger phrase
  		if (strcmp(Rx_Buffer, "faster") == 0) {
 8000b76:	4928      	ldr	r1, [pc, #160]	; (8000c18 <HAL_UART_RxCpltCallback+0xf8>)
 8000b78:	4824      	ldr	r0, [pc, #144]	; (8000c0c <HAL_UART_RxCpltCallback+0xec>)
 8000b7a:	f7ff fb31 	bl	80001e0 <strcmp>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d104      	bne.n	8000b8e <HAL_UART_RxCpltCallback+0x6e>
  			sprintf(msg, "Accelerating!");
 8000b84:	4925      	ldr	r1, [pc, #148]	; (8000c1c <HAL_UART_RxCpltCallback+0xfc>)
 8000b86:	4826      	ldr	r0, [pc, #152]	; (8000c20 <HAL_UART_RxCpltCallback+0x100>)
 8000b88:	f006 f980 	bl	8006e8c <siprintf>
 8000b8c:	e00f      	b.n	8000bae <HAL_UART_RxCpltCallback+0x8e>
  		} else if (strcmp(Rx_Buffer, "slower")  == 0) {
 8000b8e:	4925      	ldr	r1, [pc, #148]	; (8000c24 <HAL_UART_RxCpltCallback+0x104>)
 8000b90:	481e      	ldr	r0, [pc, #120]	; (8000c0c <HAL_UART_RxCpltCallback+0xec>)
 8000b92:	f7ff fb25 	bl	80001e0 <strcmp>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d104      	bne.n	8000ba6 <HAL_UART_RxCpltCallback+0x86>
  			sprintf(msg, "Decelerating!");
 8000b9c:	4922      	ldr	r1, [pc, #136]	; (8000c28 <HAL_UART_RxCpltCallback+0x108>)
 8000b9e:	4820      	ldr	r0, [pc, #128]	; (8000c20 <HAL_UART_RxCpltCallback+0x100>)
 8000ba0:	f006 f974 	bl	8006e8c <siprintf>
 8000ba4:	e003      	b.n	8000bae <HAL_UART_RxCpltCallback+0x8e>
  		} else {
  			sprintf(msg, "Unknown command.");
 8000ba6:	4921      	ldr	r1, [pc, #132]	; (8000c2c <HAL_UART_RxCpltCallback+0x10c>)
 8000ba8:	481d      	ldr	r0, [pc, #116]	; (8000c20 <HAL_UART_RxCpltCallback+0x100>)
 8000baa:	f006 f96f 	bl	8006e8c <siprintf>
  		}

  		// send to UART
  		HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 8000bae:	2364      	movs	r3, #100	; 0x64
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	491f      	ldr	r1, [pc, #124]	; (8000c30 <HAL_UART_RxCpltCallback+0x110>)
 8000bb4:	481f      	ldr	r0, [pc, #124]	; (8000c34 <HAL_UART_RxCpltCallback+0x114>)
 8000bb6:	f001 ffa0 	bl	8002afa <HAL_UART_Transmit>
  		HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000bba:	2364      	movs	r3, #100	; 0x64
 8000bbc:	221e      	movs	r2, #30
 8000bbe:	4918      	ldr	r1, [pc, #96]	; (8000c20 <HAL_UART_RxCpltCallback+0x100>)
 8000bc0:	481c      	ldr	r0, [pc, #112]	; (8000c34 <HAL_UART_RxCpltCallback+0x114>)
 8000bc2:	f001 ff9a 	bl	8002afa <HAL_UART_Transmit>
  		HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 8000bc6:	2364      	movs	r3, #100	; 0x64
 8000bc8:	2202      	movs	r2, #2
 8000bca:	4919      	ldr	r1, [pc, #100]	; (8000c30 <HAL_UART_RxCpltCallback+0x110>)
 8000bcc:	4819      	ldr	r0, [pc, #100]	; (8000c34 <HAL_UART_RxCpltCallback+0x114>)
 8000bce:	f001 ff94 	bl	8002afa <HAL_UART_Transmit>
    	EmptyBuffer(msg);
 8000bd2:	4813      	ldr	r0, [pc, #76]	; (8000c20 <HAL_UART_RxCpltCallback+0x100>)
 8000bd4:	f000 fabe 	bl	8001154 <EmptyBuffer>

    	// turn off the yellow led
    	HAL_GPIO_WritePin(YellowLed_GPIO_Port, YellowLed_Pin, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2102      	movs	r1, #2
 8000bdc:	480a      	ldr	r0, [pc, #40]	; (8000c08 <HAL_UART_RxCpltCallback+0xe8>)
 8000bde:	f000 ffa9 	bl	8001b34 <HAL_GPIO_WritePin>
  	}

  	// activate UART
  	HAL_UART_Receive_IT(&huart2, &Rx_byte, 1);
 8000be2:	2201      	movs	r2, #1
 8000be4:	490a      	ldr	r1, [pc, #40]	; (8000c10 <HAL_UART_RxCpltCallback+0xf0>)
 8000be6:	4813      	ldr	r0, [pc, #76]	; (8000c34 <HAL_UART_RxCpltCallback+0x114>)
 8000be8:	f002 f819 	bl	8002c1e <HAL_UART_Receive_IT>
  	// send to UART
  	HAL_UART_Transmit(&huart2, &Rx_byte, 1, 100);
 8000bec:	2364      	movs	r3, #100	; 0x64
 8000bee:	2201      	movs	r2, #1
 8000bf0:	4907      	ldr	r1, [pc, #28]	; (8000c10 <HAL_UART_RxCpltCallback+0xf0>)
 8000bf2:	4810      	ldr	r0, [pc, #64]	; (8000c34 <HAL_UART_RxCpltCallback+0x114>)
 8000bf4:	f001 ff81 	bl	8002afa <HAL_UART_Transmit>
	}
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40004400 	.word	0x40004400
 8000c04:	20000361 	.word	0x20000361
 8000c08:	40020400 	.word	0x40020400
 8000c0c:	20000364 	.word	0x20000364
 8000c10:	20000360 	.word	0x20000360
 8000c14:	20000362 	.word	0x20000362
 8000c18:	0800791c 	.word	0x0800791c
 8000c1c:	08007924 	.word	0x08007924
 8000c20:	200003c8 	.word	0x200003c8
 8000c24:	08007934 	.word	0x08007934
 8000c28:	0800793c 	.word	0x0800793c
 8000c2c:	0800794c 	.word	0x0800794c
 8000c30:	08007960 	.word	0x08007960
 8000c34:	200002e4 	.word	0x200002e4

08000c38 <StartImuTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartImuTask */
void StartImuTask(void const * argument)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8000c40:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <StartImuTask+0x6c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f04f 31ff 	mov.w	r1, #4294967295
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f003 f8c3 	bl	8003dd4 <osMutexWait>
	sprintf(msg, "IMU GO\r\n");
 8000c4e:	4916      	ldr	r1, [pc, #88]	; (8000ca8 <StartImuTask+0x70>)
 8000c50:	4816      	ldr	r0, [pc, #88]	; (8000cac <StartImuTask+0x74>)
 8000c52:	f006 f91b 	bl	8006e8c <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000c56:	2364      	movs	r3, #100	; 0x64
 8000c58:	221e      	movs	r2, #30
 8000c5a:	4914      	ldr	r1, [pc, #80]	; (8000cac <StartImuTask+0x74>)
 8000c5c:	4814      	ldr	r0, [pc, #80]	; (8000cb0 <StartImuTask+0x78>)
 8000c5e:	f001 ff4c 	bl	8002afa <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8000c62:	4812      	ldr	r0, [pc, #72]	; (8000cac <StartImuTask+0x74>)
 8000c64:	f000 fa76 	bl	8001154 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8000c68:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <StartImuTask+0x6c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f003 f8ff 	bl	8003e70 <osMutexRelease>

  /* Infinite loop */
  for(;;)
  {
  	// Get the RTOS kernel tick count
  	uint32_t  t =  osKernelSysTick();
 8000c72:	f002 ff9a 	bl	8003baa <osKernelSysTick>
 8000c76:	61f8      	str	r0, [r7, #28]

  	// pseudo-measurements -  we assume that the the IMU gives perfect measurements that indicate that the vehicle moves in a circle with constant speeds
  	float imu_lin_acc = 0.1;
 8000c78:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <StartImuTask+0x7c>)
 8000c7a:	61bb      	str	r3, [r7, #24]
  	float imu_ang_vel = 0.2;
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <StartImuTask+0x80>)
 8000c7e:	617b      	str	r3, [r7, #20]
  	ImuData imu_readings = {t, imu_lin_acc, imu_ang_vel};
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	613b      	str	r3, [r7, #16]

  	// send the data to the queue
  	osMessagePut(ImuQueueHandle, (uint32_t) &imu_readings, 100);
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <StartImuTask+0x84>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f107 0108 	add.w	r1, r7, #8
 8000c94:	2264      	movs	r2, #100	; 0x64
 8000c96:	4618      	mov	r0, r3
 8000c98:	f003 f948 	bl	8003f2c <osMessagePut>

  	osDelay(10); // IMU signal every 0.01 sec
 8000c9c:	200a      	movs	r0, #10
 8000c9e:	f002 ffe0 	bl	8003c62 <osDelay>
  {
 8000ca2:	e7e6      	b.n	8000c72 <StartImuTask+0x3a>
 8000ca4:	2000035c 	.word	0x2000035c
 8000ca8:	08007964 	.word	0x08007964
 8000cac:	200003c8 	.word	0x200003c8
 8000cb0:	200002e4 	.word	0x200002e4
 8000cb4:	3dcccccd 	.word	0x3dcccccd
 8000cb8:	3e4ccccd 	.word	0x3e4ccccd
 8000cbc:	20000354 	.word	0x20000354

08000cc0 <StartGpsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGpsTask */
void StartGpsTask(void const * argument)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGpsTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8000cc8:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <StartGpsTask+0x74>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f003 f87f 	bl	8003dd4 <osMutexWait>
	sprintf(msg, "GPS GO\r\n");
 8000cd6:	4918      	ldr	r1, [pc, #96]	; (8000d38 <StartGpsTask+0x78>)
 8000cd8:	4818      	ldr	r0, [pc, #96]	; (8000d3c <StartGpsTask+0x7c>)
 8000cda:	f006 f8d7 	bl	8006e8c <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000cde:	2364      	movs	r3, #100	; 0x64
 8000ce0:	221e      	movs	r2, #30
 8000ce2:	4916      	ldr	r1, [pc, #88]	; (8000d3c <StartGpsTask+0x7c>)
 8000ce4:	4816      	ldr	r0, [pc, #88]	; (8000d40 <StartGpsTask+0x80>)
 8000ce6:	f001 ff08 	bl	8002afa <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8000cea:	4814      	ldr	r0, [pc, #80]	; (8000d3c <StartGpsTask+0x7c>)
 8000cec:	f000 fa32 	bl	8001154 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8000cf0:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <StartGpsTask+0x74>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f003 f8bb 	bl	8003e70 <osMutexRelease>

	/* Infinite loop */
  for(;;)
  {
  	// Get the RTOS kernel tick count
  	uint32_t  t =  osKernelSysTick();
 8000cfa:	f002 ff56 	bl	8003baa <osKernelSysTick>
 8000cfe:	6278      	str	r0, [r7, #36]	; 0x24

  	// GPS pseudo-measurements
  	float gps_x = 1.1;
 8000d00:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <StartGpsTask+0x84>)
 8000d02:	623b      	str	r3, [r7, #32]
  	float gps_y = 2.2;
 8000d04:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <StartGpsTask+0x88>)
 8000d06:	61fb      	str	r3, [r7, #28]
  	float gps_z = 3.3;
 8000d08:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <StartGpsTask+0x8c>)
 8000d0a:	61bb      	str	r3, [r7, #24]
  	GpsData gps_readings = {t, gps_x, gps_y, gps_z};
 8000d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	6a3b      	ldr	r3, [r7, #32]
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	617b      	str	r3, [r7, #20]

  	// send the data to the queue
  	osMessagePut(GpsQueueHandle, (uint32_t) &gps_readings, 100);
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <StartGpsTask+0x90>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f107 0108 	add.w	r1, r7, #8
 8000d24:	2264      	movs	r2, #100	; 0x64
 8000d26:	4618      	mov	r0, r3
 8000d28:	f003 f900 	bl	8003f2c <osMessagePut>

  	osDelay(100); // GPS signal every 0.1 sec
 8000d2c:	2064      	movs	r0, #100	; 0x64
 8000d2e:	f002 ff98 	bl	8003c62 <osDelay>
  {
 8000d32:	e7e2      	b.n	8000cfa <StartGpsTask+0x3a>
 8000d34:	2000035c 	.word	0x2000035c
 8000d38:	08007970 	.word	0x08007970
 8000d3c:	200003c8 	.word	0x200003c8
 8000d40:	200002e4 	.word	0x200002e4
 8000d44:	3f8ccccd 	.word	0x3f8ccccd
 8000d48:	400ccccd 	.word	0x400ccccd
 8000d4c:	40533333 	.word	0x40533333
 8000d50:	20000358 	.word	0x20000358

08000d54 <StartKFTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartKFTask */
void StartKFTask(void const * argument)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartKFTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8000d5c:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <StartKFTask+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f04f 31ff 	mov.w	r1, #4294967295
 8000d64:	4618      	mov	r0, r3
 8000d66:	f003 f835 	bl	8003dd4 <osMutexWait>
	sprintf(msg, "KF GO\r\n");
 8000d6a:	4914      	ldr	r1, [pc, #80]	; (8000dbc <StartKFTask+0x68>)
 8000d6c:	4814      	ldr	r0, [pc, #80]	; (8000dc0 <StartKFTask+0x6c>)
 8000d6e:	f006 f88d 	bl	8006e8c <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000d72:	2364      	movs	r3, #100	; 0x64
 8000d74:	221e      	movs	r2, #30
 8000d76:	4912      	ldr	r1, [pc, #72]	; (8000dc0 <StartKFTask+0x6c>)
 8000d78:	4812      	ldr	r0, [pc, #72]	; (8000dc4 <StartKFTask+0x70>)
 8000d7a:	f001 febe 	bl	8002afa <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8000d7e:	4810      	ldr	r0, [pc, #64]	; (8000dc0 <StartKFTask+0x6c>)
 8000d80:	f000 f9e8 	bl	8001154 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <StartKFTask+0x64>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f003 f871 	bl	8003e70 <osMutexRelease>

	/* Infinite loop */
  for(;;)
  {
  	// Get the RTOS kernel tick count
  	uint32_t  t =  osKernelSysTick();
 8000d8e:	f002 ff0c 	bl	8003baa <osKernelSysTick>
 8000d92:	6278      	str	r0, [r7, #36]	; 0x24

  	// receive GPS and IMU data from queues
  	osEvent retval_imu = osMessageGet(ImuQueueHandle, 0);
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <StartKFTask+0x74>)
 8000d96:	6819      	ldr	r1, [r3, #0]
 8000d98:	f107 0318 	add.w	r3, r7, #24
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f003 f904 	bl	8003fac <osMessageGet>
//  	((ImuData*)retval_imu.value.p)->timestamp;
//  	((ImuData*)retval_imu.value.p)->lin_acc;
//  	((ImuData*)retval_imu.value.p)->ang_vel;
  	osEvent retval_gps = osMessageGet(ImuQueueHandle, 0);
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <StartKFTask+0x74>)
 8000da6:	6819      	ldr	r1, [r3, #0]
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	2200      	movs	r2, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f003 f8fc 	bl	8003fac <osMessageGet>
  {
 8000db4:	e7eb      	b.n	8000d8e <StartKFTask+0x3a>
 8000db6:	bf00      	nop
 8000db8:	2000035c 	.word	0x2000035c
 8000dbc:	0800797c 	.word	0x0800797c
 8000dc0:	200003c8 	.word	0x200003c8
 8000dc4:	200002e4 	.word	0x200002e4
 8000dc8:	20000354 	.word	0x20000354

08000dcc <StartRadarTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRadarTask */
void StartRadarTask(void const * argument)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRadarTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8000dd4:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <StartRadarTask+0x7c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f002 fff9 	bl	8003dd4 <osMutexWait>
	sprintf(msg, "Radar GO\r\n");
 8000de2:	491a      	ldr	r1, [pc, #104]	; (8000e4c <StartRadarTask+0x80>)
 8000de4:	481a      	ldr	r0, [pc, #104]	; (8000e50 <StartRadarTask+0x84>)
 8000de6:	f006 f851 	bl	8006e8c <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000dea:	2364      	movs	r3, #100	; 0x64
 8000dec:	221e      	movs	r2, #30
 8000dee:	4918      	ldr	r1, [pc, #96]	; (8000e50 <StartRadarTask+0x84>)
 8000df0:	4818      	ldr	r0, [pc, #96]	; (8000e54 <StartRadarTask+0x88>)
 8000df2:	f001 fe82 	bl	8002afa <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8000df6:	4816      	ldr	r0, [pc, #88]	; (8000e50 <StartRadarTask+0x84>)
 8000df8:	f000 f9ac 	bl	8001154 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <StartRadarTask+0x7c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f003 f835 	bl	8003e70 <osMutexRelease>

	/* Infinite loop */
  for(;;)
  {
  	// Get the RTOS kernel tick count
  	uint32_t  t =  osKernelSysTick();
 8000e06:	f002 fed0 	bl	8003baa <osKernelSysTick>
 8000e0a:	60f8      	str	r0, [r7, #12]

  	osMutexWait(PrintMtxHandle, osWaitForever);
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <StartRadarTask+0x7c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f04f 31ff 	mov.w	r1, #4294967295
 8000e14:	4618      	mov	r0, r3
 8000e16:	f002 ffdd 	bl	8003dd4 <osMutexWait>
  	sprintf(msg, "Object detected. Time: %lu\r\n", t);
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	490e      	ldr	r1, [pc, #56]	; (8000e58 <StartRadarTask+0x8c>)
 8000e1e:	480c      	ldr	r0, [pc, #48]	; (8000e50 <StartRadarTask+0x84>)
 8000e20:	f006 f834 	bl	8006e8c <siprintf>
  	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000e24:	2364      	movs	r3, #100	; 0x64
 8000e26:	221e      	movs	r2, #30
 8000e28:	4909      	ldr	r1, [pc, #36]	; (8000e50 <StartRadarTask+0x84>)
 8000e2a:	480a      	ldr	r0, [pc, #40]	; (8000e54 <StartRadarTask+0x88>)
 8000e2c:	f001 fe65 	bl	8002afa <HAL_UART_Transmit>
  	EmptyBuffer(msg);
 8000e30:	4807      	ldr	r0, [pc, #28]	; (8000e50 <StartRadarTask+0x84>)
 8000e32:	f000 f98f 	bl	8001154 <EmptyBuffer>
  	osMutexRelease(PrintMtxHandle);
 8000e36:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <StartRadarTask+0x7c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f003 f818 	bl	8003e70 <osMutexRelease>

//  	osSignalSet(ExButtonIntTaskHandle, SIGNAL_OBJECT_DETECT);
    osDelay(50); // Radar signal every 0.05 sec
 8000e40:	2032      	movs	r0, #50	; 0x32
 8000e42:	f002 ff0e 	bl	8003c62 <osDelay>
  {
 8000e46:	e7de      	b.n	8000e06 <StartRadarTask+0x3a>
 8000e48:	2000035c 	.word	0x2000035c
 8000e4c:	08007984 	.word	0x08007984
 8000e50:	200003c8 	.word	0x200003c8
 8000e54:	200002e4 	.word	0x200002e4
 8000e58:	08007990 	.word	0x08007990

08000e5c <StartUartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUartTask */
void StartUartTask(void const * argument)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUartTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <StartUartTask+0x3c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f04f 31ff 	mov.w	r1, #4294967295
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f002 ffb1 	bl	8003dd4 <osMutexWait>
	sprintf(msg, "UART GO\r\n");
 8000e72:	490a      	ldr	r1, [pc, #40]	; (8000e9c <StartUartTask+0x40>)
 8000e74:	480a      	ldr	r0, [pc, #40]	; (8000ea0 <StartUartTask+0x44>)
 8000e76:	f006 f809 	bl	8006e8c <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000e7a:	2364      	movs	r3, #100	; 0x64
 8000e7c:	221e      	movs	r2, #30
 8000e7e:	4908      	ldr	r1, [pc, #32]	; (8000ea0 <StartUartTask+0x44>)
 8000e80:	4808      	ldr	r0, [pc, #32]	; (8000ea4 <StartUartTask+0x48>)
 8000e82:	f001 fe3a 	bl	8002afa <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8000e86:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <StartUartTask+0x44>)
 8000e88:	f000 f964 	bl	8001154 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8000e8c:	4b02      	ldr	r3, [pc, #8]	; (8000e98 <StartUartTask+0x3c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f002 ffed 	bl	8003e70 <osMutexRelease>
  /* Infinite loop */
  for(;;)
 8000e96:	e7fe      	b.n	8000e96 <StartUartTask+0x3a>
 8000e98:	2000035c 	.word	0x2000035c
 8000e9c:	080079b0 	.word	0x080079b0
 8000ea0:	200003c8 	.word	0x200003c8
 8000ea4:	200002e4 	.word	0x200002e4

08000ea8 <StartExButtonIntTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartExButtonIntTask */
void StartExButtonIntTask(void const * argument)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartExButtonIntTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8000eb0:	4b24      	ldr	r3, [pc, #144]	; (8000f44 <StartExButtonIntTask+0x9c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f002 ff8b 	bl	8003dd4 <osMutexWait>
	sprintf(msg, "ExButton GO\r\n");
 8000ebe:	4922      	ldr	r1, [pc, #136]	; (8000f48 <StartExButtonIntTask+0xa0>)
 8000ec0:	4822      	ldr	r0, [pc, #136]	; (8000f4c <StartExButtonIntTask+0xa4>)
 8000ec2:	f005 ffe3 	bl	8006e8c <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000ec6:	2364      	movs	r3, #100	; 0x64
 8000ec8:	221e      	movs	r2, #30
 8000eca:	4920      	ldr	r1, [pc, #128]	; (8000f4c <StartExButtonIntTask+0xa4>)
 8000ecc:	4820      	ldr	r0, [pc, #128]	; (8000f50 <StartExButtonIntTask+0xa8>)
 8000ece:	f001 fe14 	bl	8002afa <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8000ed2:	481e      	ldr	r0, [pc, #120]	; (8000f4c <StartExButtonIntTask+0xa4>)
 8000ed4:	f000 f93e 	bl	8001154 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8000ed8:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <StartExButtonIntTask+0x9c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f002 ffc7 	bl	8003e70 <osMutexRelease>
  /* Infinite loop */
  for(;;)
  {
  	//wait for signal
  	osSignalWait(SIGNAL_BUTTON_PRESS, osWaitForever);
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee8:	2101      	movs	r1, #1
 8000eea:	4618      	mov	r0, r3
 8000eec:	f002 ff0e 	bl	8003d0c <osSignalWait>

  	// print to uart
  	sprintf(msg, "Button pressed...\r\n");
 8000ef0:	4918      	ldr	r1, [pc, #96]	; (8000f54 <StartExButtonIntTask+0xac>)
 8000ef2:	4816      	ldr	r0, [pc, #88]	; (8000f4c <StartExButtonIntTask+0xa4>)
 8000ef4:	f005 ffca 	bl	8006e8c <siprintf>
  	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000ef8:	2364      	movs	r3, #100	; 0x64
 8000efa:	221e      	movs	r2, #30
 8000efc:	4913      	ldr	r1, [pc, #76]	; (8000f4c <StartExButtonIntTask+0xa4>)
 8000efe:	4814      	ldr	r0, [pc, #80]	; (8000f50 <StartExButtonIntTask+0xa8>)
 8000f00:	f001 fdfb 	bl	8002afa <HAL_UART_Transmit>
  	EmptyBuffer(msg);
 8000f04:	4811      	ldr	r0, [pc, #68]	; (8000f4c <StartExButtonIntTask+0xa4>)
 8000f06:	f000 f925 	bl	8001154 <EmptyBuffer>

  	// toggle led
  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000f0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f0e:	4812      	ldr	r0, [pc, #72]	; (8000f58 <StartExButtonIntTask+0xb0>)
 8000f10:	f000 fe29 	bl	8001b66 <HAL_GPIO_TogglePin>
	  GPIO_PinState red_trig = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8000f14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f18:	480f      	ldr	r0, [pc, #60]	; (8000f58 <StartExButtonIntTask+0xb0>)
 8000f1a:	f000 fdf3 	bl	8001b04 <HAL_GPIO_ReadPin>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	77fb      	strb	r3, [r7, #31]
	  if (red_trig == GPIO_PIN_SET){
 8000f22:	7ffb      	ldrb	r3, [r7, #31]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d106      	bne.n	8000f36 <StartExButtonIntTask+0x8e>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f2e:	480a      	ldr	r0, [pc, #40]	; (8000f58 <StartExButtonIntTask+0xb0>)
 8000f30:	f000 fe00 	bl	8001b34 <HAL_GPIO_WritePin>
 8000f34:	e7d5      	b.n	8000ee2 <StartExButtonIntTask+0x3a>
	  } else {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000f36:	2201      	movs	r2, #1
 8000f38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f3c:	4806      	ldr	r0, [pc, #24]	; (8000f58 <StartExButtonIntTask+0xb0>)
 8000f3e:	f000 fdf9 	bl	8001b34 <HAL_GPIO_WritePin>
  {
 8000f42:	e7ce      	b.n	8000ee2 <StartExButtonIntTask+0x3a>
 8000f44:	2000035c 	.word	0x2000035c
 8000f48:	080079bc 	.word	0x080079bc
 8000f4c:	200003c8 	.word	0x200003c8
 8000f50:	200002e4 	.word	0x200002e4
 8000f54:	080079cc 	.word	0x080079cc
 8000f58:	40020400 	.word	0x40020400

08000f5c <StartLcdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLcdTask */
void StartLcdTask(void const * argument)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLcdTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <StartLcdTask+0x44>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f04f 31ff 	mov.w	r1, #4294967295
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f002 ff31 	bl	8003dd4 <osMutexWait>
	sprintf(msg, "LCD GO\r\n");
 8000f72:	490c      	ldr	r1, [pc, #48]	; (8000fa4 <StartLcdTask+0x48>)
 8000f74:	480c      	ldr	r0, [pc, #48]	; (8000fa8 <StartLcdTask+0x4c>)
 8000f76:	f005 ff89 	bl	8006e8c <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000f7a:	2364      	movs	r3, #100	; 0x64
 8000f7c:	221e      	movs	r2, #30
 8000f7e:	490a      	ldr	r1, [pc, #40]	; (8000fa8 <StartLcdTask+0x4c>)
 8000f80:	480a      	ldr	r0, [pc, #40]	; (8000fac <StartLcdTask+0x50>)
 8000f82:	f001 fdba 	bl	8002afa <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8000f86:	4808      	ldr	r0, [pc, #32]	; (8000fa8 <StartLcdTask+0x4c>)
 8000f88:	f000 f8e4 	bl	8001154 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <StartLcdTask+0x44>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f002 ff6d 	bl	8003e70 <osMutexRelease>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f96:	2001      	movs	r0, #1
 8000f98:	f002 fe63 	bl	8003c62 <osDelay>
 8000f9c:	e7fb      	b.n	8000f96 <StartLcdTask+0x3a>
 8000f9e:	bf00      	nop
 8000fa0:	2000035c 	.word	0x2000035c
 8000fa4:	080079e0 	.word	0x080079e0
 8000fa8:	200003c8 	.word	0x200003c8
 8000fac:	200002e4 	.word	0x200002e4

08000fb0 <StartMotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void const * argument)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTask */
  /* Infinite loop */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8000fb8:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <StartMotorTask+0x4c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f002 ff07 	bl	8003dd4 <osMutexWait>
	sprintf(msg, "Motor GO\r\n");
 8000fc6:	490e      	ldr	r1, [pc, #56]	; (8001000 <StartMotorTask+0x50>)
 8000fc8:	480e      	ldr	r0, [pc, #56]	; (8001004 <StartMotorTask+0x54>)
 8000fca:	f005 ff5f 	bl	8006e8c <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	221e      	movs	r2, #30
 8000fd2:	490c      	ldr	r1, [pc, #48]	; (8001004 <StartMotorTask+0x54>)
 8000fd4:	480c      	ldr	r0, [pc, #48]	; (8001008 <StartMotorTask+0x58>)
 8000fd6:	f001 fd90 	bl	8002afa <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8000fda:	480a      	ldr	r0, [pc, #40]	; (8001004 <StartMotorTask+0x54>)
 8000fdc:	f000 f8ba 	bl	8001154 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <StartMotorTask+0x4c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f002 ff43 	bl	8003e70 <osMutexRelease>
	int lin_vel = 14; // 14 m/sec linear velocity
 8000fea:	230e      	movs	r3, #14
 8000fec:	60fb      	str	r3, [r7, #12]
	int ang_vel = 0.2; // 0.2 rad/sec angular velocity
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
  for(;;)
  {
  	// block until resumed
  	osThreadSuspend(NULL);
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f003 f84e 	bl	8004094 <osThreadSuspend>
 8000ff8:	e7fb      	b.n	8000ff2 <StartMotorTask+0x42>
 8000ffa:	bf00      	nop
 8000ffc:	2000035c 	.word	0x2000035c
 8001000:	080079ec 	.word	0x080079ec
 8001004:	200003c8 	.word	0x200003c8
 8001008:	200002e4 	.word	0x200002e4

0800100c <StartMainTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMainTask */
void StartMainTask(void const * argument)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMainTask */
  /* Infinite loop */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8001014:	4b1d      	ldr	r3, [pc, #116]	; (800108c <StartMainTask+0x80>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f04f 31ff 	mov.w	r1, #4294967295
 800101c:	4618      	mov	r0, r3
 800101e:	f002 fed9 	bl	8003dd4 <osMutexWait>
	sprintf(msg, "Main GO\r\n");
 8001022:	491b      	ldr	r1, [pc, #108]	; (8001090 <StartMainTask+0x84>)
 8001024:	481b      	ldr	r0, [pc, #108]	; (8001094 <StartMainTask+0x88>)
 8001026:	f005 ff31 	bl	8006e8c <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 200);
 800102a:	23c8      	movs	r3, #200	; 0xc8
 800102c:	221e      	movs	r2, #30
 800102e:	4919      	ldr	r1, [pc, #100]	; (8001094 <StartMainTask+0x88>)
 8001030:	4819      	ldr	r0, [pc, #100]	; (8001098 <StartMainTask+0x8c>)
 8001032:	f001 fd62 	bl	8002afa <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8001036:	4817      	ldr	r0, [pc, #92]	; (8001094 <StartMainTask+0x88>)
 8001038:	f000 f88c 	bl	8001154 <EmptyBuffer>
	sprintf(msg, "Enabling UART...\r\n");
 800103c:	4917      	ldr	r1, [pc, #92]	; (800109c <StartMainTask+0x90>)
 800103e:	4815      	ldr	r0, [pc, #84]	; (8001094 <StartMainTask+0x88>)
 8001040:	f005 ff24 	bl	8006e8c <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001044:	2364      	movs	r3, #100	; 0x64
 8001046:	221e      	movs	r2, #30
 8001048:	4912      	ldr	r1, [pc, #72]	; (8001094 <StartMainTask+0x88>)
 800104a:	4813      	ldr	r0, [pc, #76]	; (8001098 <StartMainTask+0x8c>)
 800104c:	f001 fd55 	bl	8002afa <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8001050:	4810      	ldr	r0, [pc, #64]	; (8001094 <StartMainTask+0x88>)
 8001052:	f000 f87f 	bl	8001154 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8001056:	4b0d      	ldr	r3, [pc, #52]	; (800108c <StartMainTask+0x80>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f002 ff08 	bl	8003e70 <osMutexRelease>
	// enable UART receive
	HAL_UART_Receive_IT(&huart2, &Rx_byte, 1);
 8001060:	2201      	movs	r2, #1
 8001062:	490f      	ldr	r1, [pc, #60]	; (80010a0 <StartMainTask+0x94>)
 8001064:	480c      	ldr	r0, [pc, #48]	; (8001098 <StartMainTask+0x8c>)
 8001066:	f001 fdda 	bl	8002c1e <HAL_UART_Receive_IT>
  for(;;)
  {
  	sprintf(msg, "-Main\r\n");
 800106a:	490e      	ldr	r1, [pc, #56]	; (80010a4 <StartMainTask+0x98>)
 800106c:	4809      	ldr	r0, [pc, #36]	; (8001094 <StartMainTask+0x88>)
 800106e:	f005 ff0d 	bl	8006e8c <siprintf>
  	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001072:	2364      	movs	r3, #100	; 0x64
 8001074:	221e      	movs	r2, #30
 8001076:	4907      	ldr	r1, [pc, #28]	; (8001094 <StartMainTask+0x88>)
 8001078:	4807      	ldr	r0, [pc, #28]	; (8001098 <StartMainTask+0x8c>)
 800107a:	f001 fd3e 	bl	8002afa <HAL_UART_Transmit>
  	EmptyBuffer(msg);
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <StartMainTask+0x88>)
 8001080:	f000 f868 	bl	8001154 <EmptyBuffer>

  	// suspend main until it is resumed
  	osThreadSuspend(NULL);
 8001084:	2000      	movs	r0, #0
 8001086:	f003 f805 	bl	8004094 <osThreadSuspend>
  	sprintf(msg, "-Main\r\n");
 800108a:	e7ee      	b.n	800106a <StartMainTask+0x5e>
 800108c:	2000035c 	.word	0x2000035c
 8001090:	080079f8 	.word	0x080079f8
 8001094:	200003c8 	.word	0x200003c8
 8001098:	200002e4 	.word	0x200002e4
 800109c:	08007a04 	.word	0x08007a04
 80010a0:	20000360 	.word	0x20000360
 80010a4:	08007a18 	.word	0x08007a18

080010a8 <StartObjectDetectTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartObjectDetectTask */
void StartObjectDetectTask(void const * argument)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartObjectDetectTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 80010b0:	4b19      	ldr	r3, [pc, #100]	; (8001118 <StartObjectDetectTask+0x70>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f04f 31ff 	mov.w	r1, #4294967295
 80010b8:	4618      	mov	r0, r3
 80010ba:	f002 fe8b 	bl	8003dd4 <osMutexWait>
	sprintf(msg, "ObjDetect GO\r\n");
 80010be:	4917      	ldr	r1, [pc, #92]	; (800111c <StartObjectDetectTask+0x74>)
 80010c0:	4817      	ldr	r0, [pc, #92]	; (8001120 <StartObjectDetectTask+0x78>)
 80010c2:	f005 fee3 	bl	8006e8c <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 80010c6:	2364      	movs	r3, #100	; 0x64
 80010c8:	221e      	movs	r2, #30
 80010ca:	4915      	ldr	r1, [pc, #84]	; (8001120 <StartObjectDetectTask+0x78>)
 80010cc:	4815      	ldr	r0, [pc, #84]	; (8001124 <StartObjectDetectTask+0x7c>)
 80010ce:	f001 fd14 	bl	8002afa <HAL_UART_Transmit>
	EmptyBuffer(msg);
 80010d2:	4813      	ldr	r0, [pc, #76]	; (8001120 <StartObjectDetectTask+0x78>)
 80010d4:	f000 f83e 	bl	8001154 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <StartObjectDetectTask+0x70>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f002 fec7 	bl	8003e70 <osMutexRelease>
  /* Infinite loop */
  for(;;)
  {
  	//wait for signal
  	osSignalWait(SIGNAL_OBJECT_DETECT, osWaitForever);
 80010e2:	463b      	mov	r3, r7
 80010e4:	f04f 32ff 	mov.w	r2, #4294967295
 80010e8:	2101      	movs	r1, #1
 80010ea:	4618      	mov	r0, r3
 80010ec:	f002 fe0e 	bl	8003d0c <osSignalWait>

  	// print to uart
  	sprintf(msg, "Object detected...\r\n");
 80010f0:	490d      	ldr	r1, [pc, #52]	; (8001128 <StartObjectDetectTask+0x80>)
 80010f2:	480b      	ldr	r0, [pc, #44]	; (8001120 <StartObjectDetectTask+0x78>)
 80010f4:	f005 feca 	bl	8006e8c <siprintf>
  	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 80010f8:	2364      	movs	r3, #100	; 0x64
 80010fa:	221e      	movs	r2, #30
 80010fc:	4908      	ldr	r1, [pc, #32]	; (8001120 <StartObjectDetectTask+0x78>)
 80010fe:	4809      	ldr	r0, [pc, #36]	; (8001124 <StartObjectDetectTask+0x7c>)
 8001100:	f001 fcfb 	bl	8002afa <HAL_UART_Transmit>
  	EmptyBuffer(msg);
 8001104:	4806      	ldr	r0, [pc, #24]	; (8001120 <StartObjectDetectTask+0x78>)
 8001106:	f000 f825 	bl	8001154 <EmptyBuffer>

  	// toggle led
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001110:	4806      	ldr	r0, [pc, #24]	; (800112c <StartObjectDetectTask+0x84>)
 8001112:	f000 fd0f 	bl	8001b34 <HAL_GPIO_WritePin>
  	osSignalWait(SIGNAL_OBJECT_DETECT, osWaitForever);
 8001116:	e7e4      	b.n	80010e2 <StartObjectDetectTask+0x3a>
 8001118:	2000035c 	.word	0x2000035c
 800111c:	08007a20 	.word	0x08007a20
 8001120:	200003c8 	.word	0x200003c8
 8001124:	200002e4 	.word	0x200002e4
 8001128:	08007a30 	.word	0x08007a30
 800112c:	40020400 	.word	0x40020400

08001130 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a04      	ldr	r2, [pc, #16]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d101      	bne.n	8001146 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001142:	f000 f9c7 	bl	80014d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40014400 	.word	0x40014400

08001154 <EmptyBuffer>:

// helper function to clear a string
void EmptyBuffer(char* buf){
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	int s = strlen(buf);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff f849 	bl	80001f4 <strlen>
 8001162:	4603      	mov	r3, r0
 8001164:	60bb      	str	r3, [r7, #8]

	for (i=0; i<s; i++) {
 8001166:	2300      	movs	r3, #0
 8001168:	73fb      	strb	r3, [r7, #15]
 800116a:	e007      	b.n	800117c <EmptyBuffer+0x28>
		buf[i] = 0;
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
	for (i=0; i<s; i++) {
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	3301      	adds	r3, #1
 800117a:	73fb      	strb	r3, [r7, #15]
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	429a      	cmp	r2, r3
 8001182:	dcf3      	bgt.n	800116c <EmptyBuffer+0x18>
	}
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001192:	b672      	cpsid	i
}
 8001194:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001196:	e7fe      	b.n	8001196 <Error_Handler+0x8>

08001198 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_MspInit+0x54>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	4a11      	ldr	r2, [pc, #68]	; (80011ec <HAL_MspInit+0x54>)
 80011a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ac:	6453      	str	r3, [r2, #68]	; 0x44
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <HAL_MspInit+0x54>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	603b      	str	r3, [r7, #0]
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <HAL_MspInit+0x54>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <HAL_MspInit+0x54>)
 80011c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <HAL_MspInit+0x54>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d2:	603b      	str	r3, [r7, #0]
 80011d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	210f      	movs	r1, #15
 80011da:	f06f 0001 	mvn.w	r0, #1
 80011de:	f000 fa51 	bl	8001684 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800

080011f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a1d      	ldr	r2, [pc, #116]	; (8001284 <HAL_UART_MspInit+0x94>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d133      	bne.n	800127a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <HAL_UART_MspInit+0x98>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	4a1b      	ldr	r2, [pc, #108]	; (8001288 <HAL_UART_MspInit+0x98>)
 800121c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001220:	6413      	str	r3, [r2, #64]	; 0x40
 8001222:	4b19      	ldr	r3, [pc, #100]	; (8001288 <HAL_UART_MspInit+0x98>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <HAL_UART_MspInit+0x98>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a14      	ldr	r2, [pc, #80]	; (8001288 <HAL_UART_MspInit+0x98>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_UART_MspInit+0x98>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800124a:	230c      	movs	r3, #12
 800124c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001256:	2303      	movs	r3, #3
 8001258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800125a:	2307      	movs	r3, #7
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	4809      	ldr	r0, [pc, #36]	; (800128c <HAL_UART_MspInit+0x9c>)
 8001266:	f000 fac9 	bl	80017fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2105      	movs	r1, #5
 800126e:	2026      	movs	r0, #38	; 0x26
 8001270:	f000 fa08 	bl	8001684 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001274:	2026      	movs	r0, #38	; 0x26
 8001276:	f000 fa21 	bl	80016bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800127a:	bf00      	nop
 800127c:	3728      	adds	r7, #40	; 0x28
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40004400 	.word	0x40004400
 8001288:	40023800 	.word	0x40023800
 800128c:	40020000 	.word	0x40020000

08001290 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08c      	sub	sp, #48	; 0x30
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	2019      	movs	r0, #25
 80012a6:	f000 f9ed 	bl	8001684 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80012aa:	2019      	movs	r0, #25
 80012ac:	f000 fa06 	bl	80016bc <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <HAL_InitTick+0xa0>)
 80012b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b8:	4a1d      	ldr	r2, [pc, #116]	; (8001330 <HAL_InitTick+0xa0>)
 80012ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012be:	6453      	str	r3, [r2, #68]	; 0x44
 80012c0:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <HAL_InitTick+0xa0>)
 80012c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012cc:	f107 0210 	add.w	r2, r7, #16
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	4611      	mov	r1, r2
 80012d6:	4618      	mov	r0, r3
 80012d8:	f001 f910 	bl	80024fc <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80012dc:	f001 f8fa 	bl	80024d4 <HAL_RCC_GetPCLK2Freq>
 80012e0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e4:	4a13      	ldr	r2, [pc, #76]	; (8001334 <HAL_InitTick+0xa4>)
 80012e6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ea:	0c9b      	lsrs	r3, r3, #18
 80012ec:	3b01      	subs	r3, #1
 80012ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <HAL_InitTick+0xa8>)
 80012f2:	4a12      	ldr	r2, [pc, #72]	; (800133c <HAL_InitTick+0xac>)
 80012f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <HAL_InitTick+0xa8>)
 80012f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012fc:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80012fe:	4a0e      	ldr	r2, [pc, #56]	; (8001338 <HAL_InitTick+0xa8>)
 8001300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001302:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <HAL_InitTick+0xa8>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <HAL_InitTick+0xa8>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8001310:	4809      	ldr	r0, [pc, #36]	; (8001338 <HAL_InitTick+0xa8>)
 8001312:	f001 f925 	bl	8002560 <HAL_TIM_Base_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d104      	bne.n	8001326 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 800131c:	4806      	ldr	r0, [pc, #24]	; (8001338 <HAL_InitTick+0xa8>)
 800131e:	f001 f979 	bl	8002614 <HAL_TIM_Base_Start_IT>
 8001322:	4603      	mov	r3, r0
 8001324:	e000      	b.n	8001328 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
}
 8001328:	4618      	mov	r0, r3
 800132a:	3730      	adds	r7, #48	; 0x30
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40023800 	.word	0x40023800
 8001334:	431bde83 	.word	0x431bde83
 8001338:	200003e8 	.word	0x200003e8
 800133c:	40014400 	.word	0x40014400

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <NMI_Handler+0x4>

08001346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <MemManage_Handler+0x4>

08001352 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <BusFault_Handler+0x4>

08001358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <UsageFault_Handler+0x4>

0800135e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001372:	f001 f9b1 	bl	80026d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200003e8 	.word	0x200003e8

08001380 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <USART2_IRQHandler+0x10>)
 8001386:	f001 fc7b 	bl	8002c80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200002e4 	.word	0x200002e4

08001394 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ExButton_Pin);
 8001398:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800139c:	f000 fbfe 	bl	8001b9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80013a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013a4:	f000 fbfa 	bl	8001b9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}

080013ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b4:	4a14      	ldr	r2, [pc, #80]	; (8001408 <_sbrk+0x5c>)
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <_sbrk+0x60>)
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c0:	4b13      	ldr	r3, [pc, #76]	; (8001410 <_sbrk+0x64>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d102      	bne.n	80013ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <_sbrk+0x64>)
 80013ca:	4a12      	ldr	r2, [pc, #72]	; (8001414 <_sbrk+0x68>)
 80013cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <_sbrk+0x64>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d207      	bcs.n	80013ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013dc:	f005 fd16 	bl	8006e0c <__errno>
 80013e0:	4603      	mov	r3, r0
 80013e2:	220c      	movs	r2, #12
 80013e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ea:	e009      	b.n	8001400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013f2:	4b07      	ldr	r3, [pc, #28]	; (8001410 <_sbrk+0x64>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <_sbrk+0x64>)
 80013fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013fe:	68fb      	ldr	r3, [r7, #12]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20020000 	.word	0x20020000
 800140c:	00000400 	.word	0x00000400
 8001410:	20000430 	.word	0x20000430
 8001414:	200041a0 	.word	0x200041a0

08001418 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <SystemInit+0x20>)
 800141e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001422:	4a05      	ldr	r2, [pc, #20]	; (8001438 <SystemInit+0x20>)
 8001424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800143c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001474 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001440:	480d      	ldr	r0, [pc, #52]	; (8001478 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001442:	490e      	ldr	r1, [pc, #56]	; (800147c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001444:	4a0e      	ldr	r2, [pc, #56]	; (8001480 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001448:	e002      	b.n	8001450 <LoopCopyDataInit>

0800144a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800144c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800144e:	3304      	adds	r3, #4

08001450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001454:	d3f9      	bcc.n	800144a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001456:	4a0b      	ldr	r2, [pc, #44]	; (8001484 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001458:	4c0b      	ldr	r4, [pc, #44]	; (8001488 <LoopFillZerobss+0x26>)
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800145c:	e001      	b.n	8001462 <LoopFillZerobss>

0800145e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800145e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001460:	3204      	adds	r2, #4

08001462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001464:	d3fb      	bcc.n	800145e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001466:	f7ff ffd7 	bl	8001418 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800146a:	f005 fcd5 	bl	8006e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800146e:	f7ff f8bb 	bl	80005e8 <main>
  bx  lr    
 8001472:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001474:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800147c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001480:	08007aac 	.word	0x08007aac
  ldr r2, =_sbss
 8001484:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001488:	2000419c 	.word	0x2000419c

0800148c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800148c:	e7fe      	b.n	800148c <ADC_IRQHandler>
	...

08001490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <HAL_Init+0x40>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a0d      	ldr	r2, [pc, #52]	; (80014d0 <HAL_Init+0x40>)
 800149a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800149e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <HAL_Init+0x40>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <HAL_Init+0x40>)
 80014a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <HAL_Init+0x40>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <HAL_Init+0x40>)
 80014b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b8:	2003      	movs	r0, #3
 80014ba:	f000 f8d8 	bl	800166e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014be:	200f      	movs	r0, #15
 80014c0:	f7ff fee6 	bl	8001290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c4:	f7ff fe68 	bl	8001198 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023c00 	.word	0x40023c00

080014d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_IncTick+0x20>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_IncTick+0x24>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4413      	add	r3, r2
 80014e4:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <HAL_IncTick+0x24>)
 80014e6:	6013      	str	r3, [r2, #0]
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20000008 	.word	0x20000008
 80014f8:	20000434 	.word	0x20000434

080014fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <HAL_GetTick+0x14>)
 8001502:	681b      	ldr	r3, [r3, #0]
}
 8001504:	4618      	mov	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	20000434 	.word	0x20000434

08001514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <__NVIC_SetPriorityGrouping+0x44>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001530:	4013      	ands	r3, r2
 8001532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800153c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001546:	4a04      	ldr	r2, [pc, #16]	; (8001558 <__NVIC_SetPriorityGrouping+0x44>)
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	60d3      	str	r3, [r2, #12]
}
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001560:	4b04      	ldr	r3, [pc, #16]	; (8001574 <__NVIC_GetPriorityGrouping+0x18>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	0a1b      	lsrs	r3, r3, #8
 8001566:	f003 0307 	and.w	r3, r3, #7
}
 800156a:	4618      	mov	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001586:	2b00      	cmp	r3, #0
 8001588:	db0b      	blt.n	80015a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	f003 021f 	and.w	r2, r3, #31
 8001590:	4907      	ldr	r1, [pc, #28]	; (80015b0 <__NVIC_EnableIRQ+0x38>)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	095b      	lsrs	r3, r3, #5
 8001598:	2001      	movs	r0, #1
 800159a:	fa00 f202 	lsl.w	r2, r0, r2
 800159e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000e100 	.word	0xe000e100

080015b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	6039      	str	r1, [r7, #0]
 80015be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	db0a      	blt.n	80015de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	490c      	ldr	r1, [pc, #48]	; (8001600 <__NVIC_SetPriority+0x4c>)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	0112      	lsls	r2, r2, #4
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	440b      	add	r3, r1
 80015d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015dc:	e00a      	b.n	80015f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4908      	ldr	r1, [pc, #32]	; (8001604 <__NVIC_SetPriority+0x50>)
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	3b04      	subs	r3, #4
 80015ec:	0112      	lsls	r2, r2, #4
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	440b      	add	r3, r1
 80015f2:	761a      	strb	r2, [r3, #24]
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000e100 	.word	0xe000e100
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001608:	b480      	push	{r7}
 800160a:	b089      	sub	sp, #36	; 0x24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f1c3 0307 	rsb	r3, r3, #7
 8001622:	2b04      	cmp	r3, #4
 8001624:	bf28      	it	cs
 8001626:	2304      	movcs	r3, #4
 8001628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	3304      	adds	r3, #4
 800162e:	2b06      	cmp	r3, #6
 8001630:	d902      	bls.n	8001638 <NVIC_EncodePriority+0x30>
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3b03      	subs	r3, #3
 8001636:	e000      	b.n	800163a <NVIC_EncodePriority+0x32>
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	f04f 32ff 	mov.w	r2, #4294967295
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43da      	mvns	r2, r3
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	401a      	ands	r2, r3
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001650:	f04f 31ff 	mov.w	r1, #4294967295
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	fa01 f303 	lsl.w	r3, r1, r3
 800165a:	43d9      	mvns	r1, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001660:	4313      	orrs	r3, r2
         );
}
 8001662:	4618      	mov	r0, r3
 8001664:	3724      	adds	r7, #36	; 0x24
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff ff4c 	bl	8001514 <__NVIC_SetPriorityGrouping>
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
 8001690:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001696:	f7ff ff61 	bl	800155c <__NVIC_GetPriorityGrouping>
 800169a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	68b9      	ldr	r1, [r7, #8]
 80016a0:	6978      	ldr	r0, [r7, #20]
 80016a2:	f7ff ffb1 	bl	8001608 <NVIC_EncodePriority>
 80016a6:	4602      	mov	r2, r0
 80016a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ac:	4611      	mov	r1, r2
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff ff80 	bl	80015b4 <__NVIC_SetPriority>
}
 80016b4:	bf00      	nop
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff ff54 	bl	8001578 <__NVIC_EnableIRQ>
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016e6:	f7ff ff09 	bl	80014fc <HAL_GetTick>
 80016ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d008      	beq.n	800170a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2280      	movs	r2, #128	; 0x80
 80016fc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e052      	b.n	80017b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 0216 	bic.w	r2, r2, #22
 8001718:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	695a      	ldr	r2, [r3, #20]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001728:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	2b00      	cmp	r3, #0
 8001730:	d103      	bne.n	800173a <HAL_DMA_Abort+0x62>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001736:	2b00      	cmp	r3, #0
 8001738:	d007      	beq.n	800174a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 0208 	bic.w	r2, r2, #8
 8001748:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 0201 	bic.w	r2, r2, #1
 8001758:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800175a:	e013      	b.n	8001784 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800175c:	f7ff fece 	bl	80014fc <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b05      	cmp	r3, #5
 8001768:	d90c      	bls.n	8001784 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2220      	movs	r2, #32
 800176e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2203      	movs	r2, #3
 8001774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e015      	b.n	80017b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1e4      	bne.n	800175c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001796:	223f      	movs	r2, #63	; 0x3f
 8001798:	409a      	lsls	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d004      	beq.n	80017d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2280      	movs	r2, #128	; 0x80
 80017d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e00c      	b.n	80017f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2205      	movs	r2, #5
 80017da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 0201 	bic.w	r2, r2, #1
 80017ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b089      	sub	sp, #36	; 0x24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
 8001816:	e159      	b.n	8001acc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001818:	2201      	movs	r2, #1
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	429a      	cmp	r2, r3
 8001832:	f040 8148 	bne.w	8001ac6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	2b01      	cmp	r3, #1
 8001840:	d005      	beq.n	800184e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800184a:	2b02      	cmp	r3, #2
 800184c:	d130      	bne.n	80018b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	2203      	movs	r2, #3
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	68da      	ldr	r2, [r3, #12]
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001884:	2201      	movs	r2, #1
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	091b      	lsrs	r3, r3, #4
 800189a:	f003 0201 	and.w	r2, r3, #1
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 0303 	and.w	r3, r3, #3
 80018b8:	2b03      	cmp	r3, #3
 80018ba:	d017      	beq.n	80018ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	2203      	movs	r2, #3
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d123      	bne.n	8001940 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	08da      	lsrs	r2, r3, #3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3208      	adds	r2, #8
 8001900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	220f      	movs	r2, #15
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	691a      	ldr	r2, [r3, #16]
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	08da      	lsrs	r2, r3, #3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3208      	adds	r2, #8
 800193a:	69b9      	ldr	r1, [r7, #24]
 800193c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	2203      	movs	r2, #3
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0203 	and.w	r2, r3, #3
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 80a2 	beq.w	8001ac6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	4b57      	ldr	r3, [pc, #348]	; (8001ae4 <HAL_GPIO_Init+0x2e8>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	4a56      	ldr	r2, [pc, #344]	; (8001ae4 <HAL_GPIO_Init+0x2e8>)
 800198c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001990:	6453      	str	r3, [r2, #68]	; 0x44
 8001992:	4b54      	ldr	r3, [pc, #336]	; (8001ae4 <HAL_GPIO_Init+0x2e8>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800199e:	4a52      	ldr	r2, [pc, #328]	; (8001ae8 <HAL_GPIO_Init+0x2ec>)
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	089b      	lsrs	r3, r3, #2
 80019a4:	3302      	adds	r3, #2
 80019a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	220f      	movs	r2, #15
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a49      	ldr	r2, [pc, #292]	; (8001aec <HAL_GPIO_Init+0x2f0>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d019      	beq.n	80019fe <HAL_GPIO_Init+0x202>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a48      	ldr	r2, [pc, #288]	; (8001af0 <HAL_GPIO_Init+0x2f4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d013      	beq.n	80019fa <HAL_GPIO_Init+0x1fe>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a47      	ldr	r2, [pc, #284]	; (8001af4 <HAL_GPIO_Init+0x2f8>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d00d      	beq.n	80019f6 <HAL_GPIO_Init+0x1fa>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a46      	ldr	r2, [pc, #280]	; (8001af8 <HAL_GPIO_Init+0x2fc>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d007      	beq.n	80019f2 <HAL_GPIO_Init+0x1f6>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a45      	ldr	r2, [pc, #276]	; (8001afc <HAL_GPIO_Init+0x300>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d101      	bne.n	80019ee <HAL_GPIO_Init+0x1f2>
 80019ea:	2304      	movs	r3, #4
 80019ec:	e008      	b.n	8001a00 <HAL_GPIO_Init+0x204>
 80019ee:	2307      	movs	r3, #7
 80019f0:	e006      	b.n	8001a00 <HAL_GPIO_Init+0x204>
 80019f2:	2303      	movs	r3, #3
 80019f4:	e004      	b.n	8001a00 <HAL_GPIO_Init+0x204>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e002      	b.n	8001a00 <HAL_GPIO_Init+0x204>
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <HAL_GPIO_Init+0x204>
 80019fe:	2300      	movs	r3, #0
 8001a00:	69fa      	ldr	r2, [r7, #28]
 8001a02:	f002 0203 	and.w	r2, r2, #3
 8001a06:	0092      	lsls	r2, r2, #2
 8001a08:	4093      	lsls	r3, r2
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a10:	4935      	ldr	r1, [pc, #212]	; (8001ae8 <HAL_GPIO_Init+0x2ec>)
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	089b      	lsrs	r3, r3, #2
 8001a16:	3302      	adds	r3, #2
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a1e:	4b38      	ldr	r3, [pc, #224]	; (8001b00 <HAL_GPIO_Init+0x304>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	43db      	mvns	r3, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a42:	4a2f      	ldr	r2, [pc, #188]	; (8001b00 <HAL_GPIO_Init+0x304>)
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a48:	4b2d      	ldr	r3, [pc, #180]	; (8001b00 <HAL_GPIO_Init+0x304>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a6c:	4a24      	ldr	r2, [pc, #144]	; (8001b00 <HAL_GPIO_Init+0x304>)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a72:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <HAL_GPIO_Init+0x304>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a96:	4a1a      	ldr	r2, [pc, #104]	; (8001b00 <HAL_GPIO_Init+0x304>)
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a9c:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <HAL_GPIO_Init+0x304>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ac0:	4a0f      	ldr	r2, [pc, #60]	; (8001b00 <HAL_GPIO_Init+0x304>)
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	61fb      	str	r3, [r7, #28]
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	2b0f      	cmp	r3, #15
 8001ad0:	f67f aea2 	bls.w	8001818 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
 8001ad8:	3724      	adds	r7, #36	; 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40013800 	.word	0x40013800
 8001aec:	40020000 	.word	0x40020000
 8001af0:	40020400 	.word	0x40020400
 8001af4:	40020800 	.word	0x40020800
 8001af8:	40020c00 	.word	0x40020c00
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40013c00 	.word	0x40013c00

08001b04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	691a      	ldr	r2, [r3, #16]
 8001b14:	887b      	ldrh	r3, [r7, #2]
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d002      	beq.n	8001b22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	73fb      	strb	r3, [r7, #15]
 8001b20:	e001      	b.n	8001b26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b22:	2300      	movs	r3, #0
 8001b24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	807b      	strh	r3, [r7, #2]
 8001b40:	4613      	mov	r3, r2
 8001b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b44:	787b      	ldrb	r3, [r7, #1]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b4a:	887a      	ldrh	r2, [r7, #2]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b50:	e003      	b.n	8001b5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b52:	887b      	ldrh	r3, [r7, #2]
 8001b54:	041a      	lsls	r2, r3, #16
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	619a      	str	r2, [r3, #24]
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b085      	sub	sp, #20
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b78:	887a      	ldrh	r2, [r7, #2]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	041a      	lsls	r2, r3, #16
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	43d9      	mvns	r1, r3
 8001b84:	887b      	ldrh	r3, [r7, #2]
 8001b86:	400b      	ands	r3, r1
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	619a      	str	r2, [r3, #24]
}
 8001b8e:	bf00      	nop
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
	...

08001b9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ba6:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ba8:	695a      	ldr	r2, [r3, #20]
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	4013      	ands	r3, r2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d006      	beq.n	8001bc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bb2:	4a05      	ldr	r2, [pc, #20]	; (8001bc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bb4:	88fb      	ldrh	r3, [r7, #6]
 8001bb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bb8:	88fb      	ldrh	r3, [r7, #6]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe ff90 	bl	8000ae0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40013c00 	.word	0x40013c00

08001bcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e267      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d075      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bea:	4b88      	ldr	r3, [pc, #544]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 030c 	and.w	r3, r3, #12
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d00c      	beq.n	8001c10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bf6:	4b85      	ldr	r3, [pc, #532]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d112      	bne.n	8001c28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c02:	4b82      	ldr	r3, [pc, #520]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c0e:	d10b      	bne.n	8001c28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c10:	4b7e      	ldr	r3, [pc, #504]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d05b      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x108>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d157      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e242      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c30:	d106      	bne.n	8001c40 <HAL_RCC_OscConfig+0x74>
 8001c32:	4b76      	ldr	r3, [pc, #472]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a75      	ldr	r2, [pc, #468]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	e01d      	b.n	8001c7c <HAL_RCC_OscConfig+0xb0>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c48:	d10c      	bne.n	8001c64 <HAL_RCC_OscConfig+0x98>
 8001c4a:	4b70      	ldr	r3, [pc, #448]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a6f      	ldr	r2, [pc, #444]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	4b6d      	ldr	r3, [pc, #436]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a6c      	ldr	r2, [pc, #432]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	e00b      	b.n	8001c7c <HAL_RCC_OscConfig+0xb0>
 8001c64:	4b69      	ldr	r3, [pc, #420]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a68      	ldr	r2, [pc, #416]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c6e:	6013      	str	r3, [r2, #0]
 8001c70:	4b66      	ldr	r3, [pc, #408]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a65      	ldr	r2, [pc, #404]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d013      	beq.n	8001cac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c84:	f7ff fc3a 	bl	80014fc <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c8c:	f7ff fc36 	bl	80014fc <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b64      	cmp	r3, #100	; 0x64
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e207      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9e:	4b5b      	ldr	r3, [pc, #364]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f0      	beq.n	8001c8c <HAL_RCC_OscConfig+0xc0>
 8001caa:	e014      	b.n	8001cd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cac:	f7ff fc26 	bl	80014fc <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb4:	f7ff fc22 	bl	80014fc <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b64      	cmp	r3, #100	; 0x64
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e1f3      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc6:	4b51      	ldr	r3, [pc, #324]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f0      	bne.n	8001cb4 <HAL_RCC_OscConfig+0xe8>
 8001cd2:	e000      	b.n	8001cd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d063      	beq.n	8001daa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ce2:	4b4a      	ldr	r3, [pc, #296]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00b      	beq.n	8001d06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cee:	4b47      	ldr	r3, [pc, #284]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cf6:	2b08      	cmp	r3, #8
 8001cf8:	d11c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cfa:	4b44      	ldr	r3, [pc, #272]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d116      	bne.n	8001d34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d06:	4b41      	ldr	r3, [pc, #260]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d005      	beq.n	8001d1e <HAL_RCC_OscConfig+0x152>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d001      	beq.n	8001d1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e1c7      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1e:	4b3b      	ldr	r3, [pc, #236]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	4937      	ldr	r1, [pc, #220]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d32:	e03a      	b.n	8001daa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d020      	beq.n	8001d7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d3c:	4b34      	ldr	r3, [pc, #208]	; (8001e10 <HAL_RCC_OscConfig+0x244>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d42:	f7ff fbdb 	bl	80014fc <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d4a:	f7ff fbd7 	bl	80014fc <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e1a8      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5c:	4b2b      	ldr	r3, [pc, #172]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0f0      	beq.n	8001d4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d68:	4b28      	ldr	r3, [pc, #160]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	4925      	ldr	r1, [pc, #148]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	600b      	str	r3, [r1, #0]
 8001d7c:	e015      	b.n	8001daa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d7e:	4b24      	ldr	r3, [pc, #144]	; (8001e10 <HAL_RCC_OscConfig+0x244>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d84:	f7ff fbba 	bl	80014fc <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d8c:	f7ff fbb6 	bl	80014fc <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e187      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9e:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f0      	bne.n	8001d8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d036      	beq.n	8001e24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d016      	beq.n	8001dec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dbe:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <HAL_RCC_OscConfig+0x248>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc4:	f7ff fb9a 	bl	80014fc <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dcc:	f7ff fb96 	bl	80014fc <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e167      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dde:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0f0      	beq.n	8001dcc <HAL_RCC_OscConfig+0x200>
 8001dea:	e01b      	b.n	8001e24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dec:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <HAL_RCC_OscConfig+0x248>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df2:	f7ff fb83 	bl	80014fc <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df8:	e00e      	b.n	8001e18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dfa:	f7ff fb7f 	bl	80014fc <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d907      	bls.n	8001e18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e150      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	42470000 	.word	0x42470000
 8001e14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e18:	4b88      	ldr	r3, [pc, #544]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1ea      	bne.n	8001dfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f000 8097 	beq.w	8001f60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e32:	2300      	movs	r3, #0
 8001e34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e36:	4b81      	ldr	r3, [pc, #516]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10f      	bne.n	8001e62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	4b7d      	ldr	r3, [pc, #500]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	4a7c      	ldr	r2, [pc, #496]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e50:	6413      	str	r3, [r2, #64]	; 0x40
 8001e52:	4b7a      	ldr	r3, [pc, #488]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e62:	4b77      	ldr	r3, [pc, #476]	; (8002040 <HAL_RCC_OscConfig+0x474>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d118      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e6e:	4b74      	ldr	r3, [pc, #464]	; (8002040 <HAL_RCC_OscConfig+0x474>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a73      	ldr	r2, [pc, #460]	; (8002040 <HAL_RCC_OscConfig+0x474>)
 8001e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e7a:	f7ff fb3f 	bl	80014fc <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e82:	f7ff fb3b 	bl	80014fc <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e10c      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e94:	4b6a      	ldr	r3, [pc, #424]	; (8002040 <HAL_RCC_OscConfig+0x474>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d106      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x2ea>
 8001ea8:	4b64      	ldr	r3, [pc, #400]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eac:	4a63      	ldr	r2, [pc, #396]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb4:	e01c      	b.n	8001ef0 <HAL_RCC_OscConfig+0x324>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b05      	cmp	r3, #5
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x30c>
 8001ebe:	4b5f      	ldr	r3, [pc, #380]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec2:	4a5e      	ldr	r2, [pc, #376]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001ec4:	f043 0304 	orr.w	r3, r3, #4
 8001ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eca:	4b5c      	ldr	r3, [pc, #368]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ece:	4a5b      	ldr	r2, [pc, #364]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ed6:	e00b      	b.n	8001ef0 <HAL_RCC_OscConfig+0x324>
 8001ed8:	4b58      	ldr	r3, [pc, #352]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001edc:	4a57      	ldr	r2, [pc, #348]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001ede:	f023 0301 	bic.w	r3, r3, #1
 8001ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee4:	4b55      	ldr	r3, [pc, #340]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee8:	4a54      	ldr	r2, [pc, #336]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001eea:	f023 0304 	bic.w	r3, r3, #4
 8001eee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d015      	beq.n	8001f24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef8:	f7ff fb00 	bl	80014fc <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001efe:	e00a      	b.n	8001f16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f00:	f7ff fafc 	bl	80014fc <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e0cb      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f16:	4b49      	ldr	r3, [pc, #292]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0ee      	beq.n	8001f00 <HAL_RCC_OscConfig+0x334>
 8001f22:	e014      	b.n	8001f4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f24:	f7ff faea 	bl	80014fc <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f2a:	e00a      	b.n	8001f42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f2c:	f7ff fae6 	bl	80014fc <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e0b5      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f42:	4b3e      	ldr	r3, [pc, #248]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1ee      	bne.n	8001f2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f4e:	7dfb      	ldrb	r3, [r7, #23]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d105      	bne.n	8001f60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f54:	4b39      	ldr	r3, [pc, #228]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	4a38      	ldr	r2, [pc, #224]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001f5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 80a1 	beq.w	80020ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f6a:	4b34      	ldr	r3, [pc, #208]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 030c 	and.w	r3, r3, #12
 8001f72:	2b08      	cmp	r3, #8
 8001f74:	d05c      	beq.n	8002030 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d141      	bne.n	8002002 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7e:	4b31      	ldr	r3, [pc, #196]	; (8002044 <HAL_RCC_OscConfig+0x478>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f84:	f7ff faba 	bl	80014fc <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f8c:	f7ff fab6 	bl	80014fc <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e087      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9e:	4b27      	ldr	r3, [pc, #156]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69da      	ldr	r2, [r3, #28]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	019b      	lsls	r3, r3, #6
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc0:	085b      	lsrs	r3, r3, #1
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	041b      	lsls	r3, r3, #16
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fcc:	061b      	lsls	r3, r3, #24
 8001fce:	491b      	ldr	r1, [pc, #108]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd4:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <HAL_RCC_OscConfig+0x478>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fda:	f7ff fa8f 	bl	80014fc <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe2:	f7ff fa8b 	bl	80014fc <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e05c      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff4:	4b11      	ldr	r3, [pc, #68]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0f0      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x416>
 8002000:	e054      	b.n	80020ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <HAL_RCC_OscConfig+0x478>)
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7ff fa78 	bl	80014fc <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002010:	f7ff fa74 	bl	80014fc <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e045      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002022:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x444>
 800202e:	e03d      	b.n	80020ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d107      	bne.n	8002048 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e038      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
 800203c:	40023800 	.word	0x40023800
 8002040:	40007000 	.word	0x40007000
 8002044:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002048:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <HAL_RCC_OscConfig+0x4ec>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d028      	beq.n	80020a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002060:	429a      	cmp	r2, r3
 8002062:	d121      	bne.n	80020a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800206e:	429a      	cmp	r2, r3
 8002070:	d11a      	bne.n	80020a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002078:	4013      	ands	r3, r2
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800207e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002080:	4293      	cmp	r3, r2
 8002082:	d111      	bne.n	80020a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208e:	085b      	lsrs	r3, r3, #1
 8002090:	3b01      	subs	r3, #1
 8002092:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002094:	429a      	cmp	r2, r3
 8002096:	d107      	bne.n	80020a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d001      	beq.n	80020ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e000      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40023800 	.word	0x40023800

080020bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0cc      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020d0:	4b68      	ldr	r3, [pc, #416]	; (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d90c      	bls.n	80020f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b65      	ldr	r3, [pc, #404]	; (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e6:	4b63      	ldr	r3, [pc, #396]	; (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d001      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e0b8      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d020      	beq.n	8002146 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	d005      	beq.n	800211c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002110:	4b59      	ldr	r3, [pc, #356]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	4a58      	ldr	r2, [pc, #352]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800211a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b00      	cmp	r3, #0
 8002126:	d005      	beq.n	8002134 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002128:	4b53      	ldr	r3, [pc, #332]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	4a52      	ldr	r2, [pc, #328]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800212e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002132:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002134:	4b50      	ldr	r3, [pc, #320]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	494d      	ldr	r1, [pc, #308]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002142:	4313      	orrs	r3, r2
 8002144:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d044      	beq.n	80021dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d107      	bne.n	800216a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215a:	4b47      	ldr	r3, [pc, #284]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d119      	bne.n	800219a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e07f      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d003      	beq.n	800217a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002176:	2b03      	cmp	r3, #3
 8002178:	d107      	bne.n	800218a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217a:	4b3f      	ldr	r3, [pc, #252]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d109      	bne.n	800219a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e06f      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218a:	4b3b      	ldr	r3, [pc, #236]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e067      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800219a:	4b37      	ldr	r3, [pc, #220]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f023 0203 	bic.w	r2, r3, #3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	4934      	ldr	r1, [pc, #208]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021ac:	f7ff f9a6 	bl	80014fc <HAL_GetTick>
 80021b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b2:	e00a      	b.n	80021ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b4:	f7ff f9a2 	bl	80014fc <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e04f      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ca:	4b2b      	ldr	r3, [pc, #172]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 020c 	and.w	r2, r3, #12
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	429a      	cmp	r2, r3
 80021da:	d1eb      	bne.n	80021b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021dc:	4b25      	ldr	r3, [pc, #148]	; (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d20c      	bcs.n	8002204 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ea:	4b22      	ldr	r3, [pc, #136]	; (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f2:	4b20      	ldr	r3, [pc, #128]	; (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d001      	beq.n	8002204 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e032      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b00      	cmp	r3, #0
 800220e:	d008      	beq.n	8002222 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002210:	4b19      	ldr	r3, [pc, #100]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	4916      	ldr	r1, [pc, #88]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800221e:	4313      	orrs	r3, r2
 8002220:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b00      	cmp	r3, #0
 800222c:	d009      	beq.n	8002242 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800222e:	4b12      	ldr	r3, [pc, #72]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	490e      	ldr	r1, [pc, #56]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	4313      	orrs	r3, r2
 8002240:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002242:	f000 f821 	bl	8002288 <HAL_RCC_GetSysClockFreq>
 8002246:	4602      	mov	r2, r0
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	091b      	lsrs	r3, r3, #4
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	490a      	ldr	r1, [pc, #40]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 8002254:	5ccb      	ldrb	r3, [r1, r3]
 8002256:	fa22 f303 	lsr.w	r3, r2, r3
 800225a:	4a09      	ldr	r2, [pc, #36]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800225c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800225e:	4b09      	ldr	r3, [pc, #36]	; (8002284 <HAL_RCC_ClockConfig+0x1c8>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff f814 	bl	8001290 <HAL_InitTick>

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40023c00 	.word	0x40023c00
 8002278:	40023800 	.word	0x40023800
 800227c:	08007a50 	.word	0x08007a50
 8002280:	20000000 	.word	0x20000000
 8002284:	20000004 	.word	0x20000004

08002288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800228c:	b094      	sub	sp, #80	; 0x50
 800228e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002290:	2300      	movs	r3, #0
 8002292:	647b      	str	r3, [r7, #68]	; 0x44
 8002294:	2300      	movs	r3, #0
 8002296:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002298:	2300      	movs	r3, #0
 800229a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022a0:	4b79      	ldr	r3, [pc, #484]	; (8002488 <HAL_RCC_GetSysClockFreq+0x200>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 030c 	and.w	r3, r3, #12
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d00d      	beq.n	80022c8 <HAL_RCC_GetSysClockFreq+0x40>
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	f200 80e1 	bhi.w	8002474 <HAL_RCC_GetSysClockFreq+0x1ec>
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0x34>
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d003      	beq.n	80022c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80022ba:	e0db      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022bc:	4b73      	ldr	r3, [pc, #460]	; (800248c <HAL_RCC_GetSysClockFreq+0x204>)
 80022be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80022c0:	e0db      	b.n	800247a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022c2:	4b73      	ldr	r3, [pc, #460]	; (8002490 <HAL_RCC_GetSysClockFreq+0x208>)
 80022c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022c6:	e0d8      	b.n	800247a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022c8:	4b6f      	ldr	r3, [pc, #444]	; (8002488 <HAL_RCC_GetSysClockFreq+0x200>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022d2:	4b6d      	ldr	r3, [pc, #436]	; (8002488 <HAL_RCC_GetSysClockFreq+0x200>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d063      	beq.n	80023a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022de:	4b6a      	ldr	r3, [pc, #424]	; (8002488 <HAL_RCC_GetSysClockFreq+0x200>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	099b      	lsrs	r3, r3, #6
 80022e4:	2200      	movs	r2, #0
 80022e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80022e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80022ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022f0:	633b      	str	r3, [r7, #48]	; 0x30
 80022f2:	2300      	movs	r3, #0
 80022f4:	637b      	str	r3, [r7, #52]	; 0x34
 80022f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80022fa:	4622      	mov	r2, r4
 80022fc:	462b      	mov	r3, r5
 80022fe:	f04f 0000 	mov.w	r0, #0
 8002302:	f04f 0100 	mov.w	r1, #0
 8002306:	0159      	lsls	r1, r3, #5
 8002308:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800230c:	0150      	lsls	r0, r2, #5
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4621      	mov	r1, r4
 8002314:	1a51      	subs	r1, r2, r1
 8002316:	6139      	str	r1, [r7, #16]
 8002318:	4629      	mov	r1, r5
 800231a:	eb63 0301 	sbc.w	r3, r3, r1
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800232c:	4659      	mov	r1, fp
 800232e:	018b      	lsls	r3, r1, #6
 8002330:	4651      	mov	r1, sl
 8002332:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002336:	4651      	mov	r1, sl
 8002338:	018a      	lsls	r2, r1, #6
 800233a:	4651      	mov	r1, sl
 800233c:	ebb2 0801 	subs.w	r8, r2, r1
 8002340:	4659      	mov	r1, fp
 8002342:	eb63 0901 	sbc.w	r9, r3, r1
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	f04f 0300 	mov.w	r3, #0
 800234e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002352:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002356:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800235a:	4690      	mov	r8, r2
 800235c:	4699      	mov	r9, r3
 800235e:	4623      	mov	r3, r4
 8002360:	eb18 0303 	adds.w	r3, r8, r3
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	462b      	mov	r3, r5
 8002368:	eb49 0303 	adc.w	r3, r9, r3
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	f04f 0300 	mov.w	r3, #0
 8002376:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800237a:	4629      	mov	r1, r5
 800237c:	024b      	lsls	r3, r1, #9
 800237e:	4621      	mov	r1, r4
 8002380:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002384:	4621      	mov	r1, r4
 8002386:	024a      	lsls	r2, r1, #9
 8002388:	4610      	mov	r0, r2
 800238a:	4619      	mov	r1, r3
 800238c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800238e:	2200      	movs	r2, #0
 8002390:	62bb      	str	r3, [r7, #40]	; 0x28
 8002392:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002394:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002398:	f7fd ff8a 	bl	80002b0 <__aeabi_uldivmod>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	4613      	mov	r3, r2
 80023a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023a4:	e058      	b.n	8002458 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023a6:	4b38      	ldr	r3, [pc, #224]	; (8002488 <HAL_RCC_GetSysClockFreq+0x200>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	099b      	lsrs	r3, r3, #6
 80023ac:	2200      	movs	r2, #0
 80023ae:	4618      	mov	r0, r3
 80023b0:	4611      	mov	r1, r2
 80023b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023b6:	623b      	str	r3, [r7, #32]
 80023b8:	2300      	movs	r3, #0
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
 80023bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80023c0:	4642      	mov	r2, r8
 80023c2:	464b      	mov	r3, r9
 80023c4:	f04f 0000 	mov.w	r0, #0
 80023c8:	f04f 0100 	mov.w	r1, #0
 80023cc:	0159      	lsls	r1, r3, #5
 80023ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023d2:	0150      	lsls	r0, r2, #5
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4641      	mov	r1, r8
 80023da:	ebb2 0a01 	subs.w	sl, r2, r1
 80023de:	4649      	mov	r1, r9
 80023e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	f04f 0300 	mov.w	r3, #0
 80023ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023f8:	ebb2 040a 	subs.w	r4, r2, sl
 80023fc:	eb63 050b 	sbc.w	r5, r3, fp
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	f04f 0300 	mov.w	r3, #0
 8002408:	00eb      	lsls	r3, r5, #3
 800240a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800240e:	00e2      	lsls	r2, r4, #3
 8002410:	4614      	mov	r4, r2
 8002412:	461d      	mov	r5, r3
 8002414:	4643      	mov	r3, r8
 8002416:	18e3      	adds	r3, r4, r3
 8002418:	603b      	str	r3, [r7, #0]
 800241a:	464b      	mov	r3, r9
 800241c:	eb45 0303 	adc.w	r3, r5, r3
 8002420:	607b      	str	r3, [r7, #4]
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	f04f 0300 	mov.w	r3, #0
 800242a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800242e:	4629      	mov	r1, r5
 8002430:	028b      	lsls	r3, r1, #10
 8002432:	4621      	mov	r1, r4
 8002434:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002438:	4621      	mov	r1, r4
 800243a:	028a      	lsls	r2, r1, #10
 800243c:	4610      	mov	r0, r2
 800243e:	4619      	mov	r1, r3
 8002440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002442:	2200      	movs	r2, #0
 8002444:	61bb      	str	r3, [r7, #24]
 8002446:	61fa      	str	r2, [r7, #28]
 8002448:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800244c:	f7fd ff30 	bl	80002b0 <__aeabi_uldivmod>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4613      	mov	r3, r2
 8002456:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002458:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <HAL_RCC_GetSysClockFreq+0x200>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	0c1b      	lsrs	r3, r3, #16
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	3301      	adds	r3, #1
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002468:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800246a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800246c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002470:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002472:	e002      	b.n	800247a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002474:	4b05      	ldr	r3, [pc, #20]	; (800248c <HAL_RCC_GetSysClockFreq+0x204>)
 8002476:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002478:	bf00      	nop
    }
  }
  return sysclockfreq;
 800247a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800247c:	4618      	mov	r0, r3
 800247e:	3750      	adds	r7, #80	; 0x50
 8002480:	46bd      	mov	sp, r7
 8002482:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002486:	bf00      	nop
 8002488:	40023800 	.word	0x40023800
 800248c:	00f42400 	.word	0x00f42400
 8002490:	007a1200 	.word	0x007a1200

08002494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002498:	4b03      	ldr	r3, [pc, #12]	; (80024a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800249a:	681b      	ldr	r3, [r3, #0]
}
 800249c:	4618      	mov	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	20000000 	.word	0x20000000

080024ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024b0:	f7ff fff0 	bl	8002494 <HAL_RCC_GetHCLKFreq>
 80024b4:	4602      	mov	r2, r0
 80024b6:	4b05      	ldr	r3, [pc, #20]	; (80024cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	0a9b      	lsrs	r3, r3, #10
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	4903      	ldr	r1, [pc, #12]	; (80024d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024c2:	5ccb      	ldrb	r3, [r1, r3]
 80024c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40023800 	.word	0x40023800
 80024d0:	08007a60 	.word	0x08007a60

080024d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024d8:	f7ff ffdc 	bl	8002494 <HAL_RCC_GetHCLKFreq>
 80024dc:	4602      	mov	r2, r0
 80024de:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	0b5b      	lsrs	r3, r3, #13
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	4903      	ldr	r1, [pc, #12]	; (80024f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ea:	5ccb      	ldrb	r3, [r1, r3]
 80024ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40023800 	.word	0x40023800
 80024f8:	08007a60 	.word	0x08007a60

080024fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	220f      	movs	r2, #15
 800250a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800250c:	4b12      	ldr	r3, [pc, #72]	; (8002558 <HAL_RCC_GetClockConfig+0x5c>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 0203 	and.w	r2, r3, #3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002518:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <HAL_RCC_GetClockConfig+0x5c>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002524:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <HAL_RCC_GetClockConfig+0x5c>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002530:	4b09      	ldr	r3, [pc, #36]	; (8002558 <HAL_RCC_GetClockConfig+0x5c>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	08db      	lsrs	r3, r3, #3
 8002536:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800253e:	4b07      	ldr	r3, [pc, #28]	; (800255c <HAL_RCC_GetClockConfig+0x60>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0207 	and.w	r2, r3, #7
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	601a      	str	r2, [r3, #0]
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	40023800 	.word	0x40023800
 800255c:	40023c00 	.word	0x40023c00

08002560 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e041      	b.n	80025f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d106      	bne.n	800258c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f839 	bl	80025fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3304      	adds	r3, #4
 800259c:	4619      	mov	r1, r3
 800259e:	4610      	mov	r0, r2
 80025a0:	f000 f9ca 	bl	8002938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
	...

08002614 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b01      	cmp	r3, #1
 8002626:	d001      	beq.n	800262c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e044      	b.n	80026b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2202      	movs	r2, #2
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0201 	orr.w	r2, r2, #1
 8002642:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a1e      	ldr	r2, [pc, #120]	; (80026c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d018      	beq.n	8002680 <HAL_TIM_Base_Start_IT+0x6c>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002656:	d013      	beq.n	8002680 <HAL_TIM_Base_Start_IT+0x6c>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a1a      	ldr	r2, [pc, #104]	; (80026c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d00e      	beq.n	8002680 <HAL_TIM_Base_Start_IT+0x6c>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a19      	ldr	r2, [pc, #100]	; (80026cc <HAL_TIM_Base_Start_IT+0xb8>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d009      	beq.n	8002680 <HAL_TIM_Base_Start_IT+0x6c>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a17      	ldr	r2, [pc, #92]	; (80026d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d004      	beq.n	8002680 <HAL_TIM_Base_Start_IT+0x6c>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a16      	ldr	r2, [pc, #88]	; (80026d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d111      	bne.n	80026a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2b06      	cmp	r3, #6
 8002690:	d010      	beq.n	80026b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f042 0201 	orr.w	r2, r2, #1
 80026a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026a2:	e007      	b.n	80026b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0201 	orr.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40010000 	.word	0x40010000
 80026c8:	40000400 	.word	0x40000400
 80026cc:	40000800 	.word	0x40000800
 80026d0:	40000c00 	.word	0x40000c00
 80026d4:	40014000 	.word	0x40014000

080026d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d122      	bne.n	8002734 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d11b      	bne.n	8002734 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f06f 0202 	mvn.w	r2, #2
 8002704:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f8ee 	bl	80028fc <HAL_TIM_IC_CaptureCallback>
 8002720:	e005      	b.n	800272e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f8e0 	bl	80028e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f8f1 	bl	8002910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	2b04      	cmp	r3, #4
 8002740:	d122      	bne.n	8002788 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b04      	cmp	r3, #4
 800274e:	d11b      	bne.n	8002788 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f06f 0204 	mvn.w	r2, #4
 8002758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2202      	movs	r2, #2
 800275e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f8c4 	bl	80028fc <HAL_TIM_IC_CaptureCallback>
 8002774:	e005      	b.n	8002782 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f8b6 	bl	80028e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f8c7 	bl	8002910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b08      	cmp	r3, #8
 8002794:	d122      	bne.n	80027dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	f003 0308 	and.w	r3, r3, #8
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d11b      	bne.n	80027dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f06f 0208 	mvn.w	r2, #8
 80027ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2204      	movs	r2, #4
 80027b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f89a 	bl	80028fc <HAL_TIM_IC_CaptureCallback>
 80027c8:	e005      	b.n	80027d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f88c 	bl	80028e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f89d 	bl	8002910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	f003 0310 	and.w	r3, r3, #16
 80027e6:	2b10      	cmp	r3, #16
 80027e8:	d122      	bne.n	8002830 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	2b10      	cmp	r3, #16
 80027f6:	d11b      	bne.n	8002830 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f06f 0210 	mvn.w	r2, #16
 8002800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2208      	movs	r2, #8
 8002806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f870 	bl	80028fc <HAL_TIM_IC_CaptureCallback>
 800281c:	e005      	b.n	800282a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f862 	bl	80028e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 f873 	bl	8002910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b01      	cmp	r3, #1
 800283c:	d10e      	bne.n	800285c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b01      	cmp	r3, #1
 800284a:	d107      	bne.n	800285c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f06f 0201 	mvn.w	r2, #1
 8002854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7fe fc6a 	bl	8001130 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002866:	2b80      	cmp	r3, #128	; 0x80
 8002868:	d10e      	bne.n	8002888 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002874:	2b80      	cmp	r3, #128	; 0x80
 8002876:	d107      	bne.n	8002888 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f8e2 	bl	8002a4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002892:	2b40      	cmp	r3, #64	; 0x40
 8002894:	d10e      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a0:	2b40      	cmp	r3, #64	; 0x40
 80028a2:	d107      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f838 	bl	8002924 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	f003 0320 	and.w	r3, r3, #32
 80028be:	2b20      	cmp	r3, #32
 80028c0:	d10e      	bne.n	80028e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f003 0320 	and.w	r3, r3, #32
 80028cc:	2b20      	cmp	r3, #32
 80028ce:	d107      	bne.n	80028e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f06f 0220 	mvn.w	r2, #32
 80028d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f8ac 	bl	8002a38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028e0:	bf00      	nop
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a34      	ldr	r2, [pc, #208]	; (8002a1c <TIM_Base_SetConfig+0xe4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d00f      	beq.n	8002970 <TIM_Base_SetConfig+0x38>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002956:	d00b      	beq.n	8002970 <TIM_Base_SetConfig+0x38>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a31      	ldr	r2, [pc, #196]	; (8002a20 <TIM_Base_SetConfig+0xe8>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d007      	beq.n	8002970 <TIM_Base_SetConfig+0x38>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a30      	ldr	r2, [pc, #192]	; (8002a24 <TIM_Base_SetConfig+0xec>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d003      	beq.n	8002970 <TIM_Base_SetConfig+0x38>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a2f      	ldr	r2, [pc, #188]	; (8002a28 <TIM_Base_SetConfig+0xf0>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d108      	bne.n	8002982 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	4313      	orrs	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a25      	ldr	r2, [pc, #148]	; (8002a1c <TIM_Base_SetConfig+0xe4>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d01b      	beq.n	80029c2 <TIM_Base_SetConfig+0x8a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002990:	d017      	beq.n	80029c2 <TIM_Base_SetConfig+0x8a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a22      	ldr	r2, [pc, #136]	; (8002a20 <TIM_Base_SetConfig+0xe8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d013      	beq.n	80029c2 <TIM_Base_SetConfig+0x8a>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a21      	ldr	r2, [pc, #132]	; (8002a24 <TIM_Base_SetConfig+0xec>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d00f      	beq.n	80029c2 <TIM_Base_SetConfig+0x8a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a20      	ldr	r2, [pc, #128]	; (8002a28 <TIM_Base_SetConfig+0xf0>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d00b      	beq.n	80029c2 <TIM_Base_SetConfig+0x8a>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a1f      	ldr	r2, [pc, #124]	; (8002a2c <TIM_Base_SetConfig+0xf4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d007      	beq.n	80029c2 <TIM_Base_SetConfig+0x8a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a1e      	ldr	r2, [pc, #120]	; (8002a30 <TIM_Base_SetConfig+0xf8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d003      	beq.n	80029c2 <TIM_Base_SetConfig+0x8a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a1d      	ldr	r2, [pc, #116]	; (8002a34 <TIM_Base_SetConfig+0xfc>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d108      	bne.n	80029d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	4313      	orrs	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a08      	ldr	r2, [pc, #32]	; (8002a1c <TIM_Base_SetConfig+0xe4>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d103      	bne.n	8002a08 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	691a      	ldr	r2, [r3, #16]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	615a      	str	r2, [r3, #20]
}
 8002a0e:	bf00      	nop
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40010000 	.word	0x40010000
 8002a20:	40000400 	.word	0x40000400
 8002a24:	40000800 	.word	0x40000800
 8002a28:	40000c00 	.word	0x40000c00
 8002a2c:	40014000 	.word	0x40014000
 8002a30:	40014400 	.word	0x40014400
 8002a34:	40014800 	.word	0x40014800

08002a38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e03f      	b.n	8002af2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d106      	bne.n	8002a8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7fe fbb2 	bl	80011f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2224      	movs	r2, #36	; 0x24
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002aa2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 fddb 	bl	8003660 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	691a      	ldr	r2, [r3, #16]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ab8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	695a      	ldr	r2, [r3, #20]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ac8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ad8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2220      	movs	r2, #32
 8002aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b08a      	sub	sp, #40	; 0x28
 8002afe:	af02      	add	r7, sp, #8
 8002b00:	60f8      	str	r0, [r7, #12]
 8002b02:	60b9      	str	r1, [r7, #8]
 8002b04:	603b      	str	r3, [r7, #0]
 8002b06:	4613      	mov	r3, r2
 8002b08:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b20      	cmp	r3, #32
 8002b18:	d17c      	bne.n	8002c14 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d002      	beq.n	8002b26 <HAL_UART_Transmit+0x2c>
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e075      	b.n	8002c16 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_UART_Transmit+0x3e>
 8002b34:	2302      	movs	r3, #2
 8002b36:	e06e      	b.n	8002c16 <HAL_UART_Transmit+0x11c>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2221      	movs	r2, #33	; 0x21
 8002b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b4e:	f7fe fcd5 	bl	80014fc <HAL_GetTick>
 8002b52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	88fa      	ldrh	r2, [r7, #6]
 8002b58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	88fa      	ldrh	r2, [r7, #6]
 8002b5e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b68:	d108      	bne.n	8002b7c <HAL_UART_Transmit+0x82>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d104      	bne.n	8002b7c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	61bb      	str	r3, [r7, #24]
 8002b7a:	e003      	b.n	8002b84 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002b8c:	e02a      	b.n	8002be4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	2200      	movs	r2, #0
 8002b96:	2180      	movs	r1, #128	; 0x80
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 fb1f 	bl	80031dc <UART_WaitOnFlagUntilTimeout>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e036      	b.n	8002c16 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10b      	bne.n	8002bc6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bbc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	3302      	adds	r3, #2
 8002bc2:	61bb      	str	r3, [r7, #24]
 8002bc4:	e007      	b.n	8002bd6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	781a      	ldrb	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1cf      	bne.n	8002b8e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2140      	movs	r1, #64	; 0x40
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 faef 	bl	80031dc <UART_WaitOnFlagUntilTimeout>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e006      	b.n	8002c16 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	e000      	b.n	8002c16 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c14:	2302      	movs	r3, #2
  }
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3720      	adds	r7, #32
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b084      	sub	sp, #16
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	60f8      	str	r0, [r7, #12]
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b20      	cmp	r3, #32
 8002c36:	d11d      	bne.n	8002c74 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d002      	beq.n	8002c44 <HAL_UART_Receive_IT+0x26>
 8002c3e:	88fb      	ldrh	r3, [r7, #6]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e016      	b.n	8002c76 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d101      	bne.n	8002c56 <HAL_UART_Receive_IT+0x38>
 8002c52:	2302      	movs	r3, #2
 8002c54:	e00f      	b.n	8002c76 <HAL_UART_Receive_IT+0x58>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002c64:	88fb      	ldrh	r3, [r7, #6]
 8002c66:	461a      	mov	r2, r3
 8002c68:	68b9      	ldr	r1, [r7, #8]
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 fb24 	bl	80032b8 <UART_Start_Receive_IT>
 8002c70:	4603      	mov	r3, r0
 8002c72:	e000      	b.n	8002c76 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002c74:	2302      	movs	r3, #2
  }
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b0ba      	sub	sp, #232	; 0xe8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002cbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10f      	bne.n	8002ce6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cca:	f003 0320 	and.w	r3, r3, #32
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d009      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x66>
 8002cd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cd6:	f003 0320 	and.w	r3, r3, #32
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 fc03 	bl	80034ea <UART_Receive_IT>
      return;
 8002ce4:	e256      	b.n	8003194 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ce6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 80de 	beq.w	8002eac <HAL_UART_IRQHandler+0x22c>
 8002cf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d106      	bne.n	8002d0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d00:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 80d1 	beq.w	8002eac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00b      	beq.n	8002d2e <HAL_UART_IRQHandler+0xae>
 8002d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d005      	beq.n	8002d2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f043 0201 	orr.w	r2, r3, #1
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00b      	beq.n	8002d52 <HAL_UART_IRQHandler+0xd2>
 8002d3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d005      	beq.n	8002d52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f043 0202 	orr.w	r2, r3, #2
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00b      	beq.n	8002d76 <HAL_UART_IRQHandler+0xf6>
 8002d5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d005      	beq.n	8002d76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f043 0204 	orr.w	r2, r3, #4
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d011      	beq.n	8002da6 <HAL_UART_IRQHandler+0x126>
 8002d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d86:	f003 0320 	and.w	r3, r3, #32
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d105      	bne.n	8002d9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d005      	beq.n	8002da6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f043 0208 	orr.w	r2, r3, #8
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 81ed 	beq.w	800318a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002db4:	f003 0320 	and.w	r3, r3, #32
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d008      	beq.n	8002dce <HAL_UART_IRQHandler+0x14e>
 8002dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dc0:	f003 0320 	and.w	r3, r3, #32
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 fb8e 	bl	80034ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd8:	2b40      	cmp	r3, #64	; 0x40
 8002dda:	bf0c      	ite	eq
 8002ddc:	2301      	moveq	r3, #1
 8002dde:	2300      	movne	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f003 0308 	and.w	r3, r3, #8
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d103      	bne.n	8002dfa <HAL_UART_IRQHandler+0x17a>
 8002df2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d04f      	beq.n	8002e9a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 fa96 	bl	800332c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0a:	2b40      	cmp	r3, #64	; 0x40
 8002e0c:	d141      	bne.n	8002e92 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	3314      	adds	r3, #20
 8002e14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e1c:	e853 3f00 	ldrex	r3, [r3]
 8002e20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002e24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	3314      	adds	r3, #20
 8002e36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002e3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e4a:	e841 2300 	strex	r3, r2, [r1]
 8002e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002e52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1d9      	bne.n	8002e0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d013      	beq.n	8002e8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e66:	4a7d      	ldr	r2, [pc, #500]	; (800305c <HAL_UART_IRQHandler+0x3dc>)
 8002e68:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fe fca2 	bl	80017b8 <HAL_DMA_Abort_IT>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d016      	beq.n	8002ea8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e84:	4610      	mov	r0, r2
 8002e86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e88:	e00e      	b.n	8002ea8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f990 	bl	80031b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e90:	e00a      	b.n	8002ea8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f98c 	bl	80031b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e98:	e006      	b.n	8002ea8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f988 	bl	80031b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002ea6:	e170      	b.n	800318a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ea8:	bf00      	nop
    return;
 8002eaa:	e16e      	b.n	800318a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	f040 814a 	bne.w	800314a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eba:	f003 0310 	and.w	r3, r3, #16
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 8143 	beq.w	800314a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ec8:	f003 0310 	and.w	r3, r3, #16
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 813c 	beq.w	800314a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60bb      	str	r3, [r7, #8]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	60bb      	str	r3, [r7, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	60bb      	str	r3, [r7, #8]
 8002ee6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef2:	2b40      	cmp	r3, #64	; 0x40
 8002ef4:	f040 80b4 	bne.w	8003060 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 8140 	beq.w	800318e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f16:	429a      	cmp	r2, r3
 8002f18:	f080 8139 	bcs.w	800318e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f22:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f2e:	f000 8088 	beq.w	8003042 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	330c      	adds	r3, #12
 8002f38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f40:	e853 3f00 	ldrex	r3, [r3]
 8002f44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	330c      	adds	r3, #12
 8002f5a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002f5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f6e:	e841 2300 	strex	r3, r2, [r1]
 8002f72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1d9      	bne.n	8002f32 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	3314      	adds	r3, #20
 8002f84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f88:	e853 3f00 	ldrex	r3, [r3]
 8002f8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f90:	f023 0301 	bic.w	r3, r3, #1
 8002f94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	3314      	adds	r3, #20
 8002f9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002fa2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002fa6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002faa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002fae:	e841 2300 	strex	r3, r2, [r1]
 8002fb2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002fb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1e1      	bne.n	8002f7e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	3314      	adds	r3, #20
 8002fc0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fc4:	e853 3f00 	ldrex	r3, [r3]
 8002fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002fca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	3314      	adds	r3, #20
 8002fda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002fde:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002fe0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002fe4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002fe6:	e841 2300 	strex	r3, r2, [r1]
 8002fea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002fec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1e3      	bne.n	8002fba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	330c      	adds	r3, #12
 8003006:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800300a:	e853 3f00 	ldrex	r3, [r3]
 800300e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003012:	f023 0310 	bic.w	r3, r3, #16
 8003016:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	330c      	adds	r3, #12
 8003020:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003024:	65ba      	str	r2, [r7, #88]	; 0x58
 8003026:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003028:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800302a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800302c:	e841 2300 	strex	r3, r2, [r1]
 8003030:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1e3      	bne.n	8003000 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303c:	4618      	mov	r0, r3
 800303e:	f7fe fb4b 	bl	80016d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800304a:	b29b      	uxth	r3, r3
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	b29b      	uxth	r3, r3
 8003050:	4619      	mov	r1, r3
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f8b6 	bl	80031c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003058:	e099      	b.n	800318e <HAL_UART_IRQHandler+0x50e>
 800305a:	bf00      	nop
 800305c:	080033f3 	.word	0x080033f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003068:	b29b      	uxth	r3, r3
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003074:	b29b      	uxth	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 808b 	beq.w	8003192 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800307c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 8086 	beq.w	8003192 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	330c      	adds	r3, #12
 800308c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003090:	e853 3f00 	ldrex	r3, [r3]
 8003094:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003098:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800309c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	330c      	adds	r3, #12
 80030a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80030aa:	647a      	str	r2, [r7, #68]	; 0x44
 80030ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80030b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030b2:	e841 2300 	strex	r3, r2, [r1]
 80030b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80030b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1e3      	bne.n	8003086 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	3314      	adds	r3, #20
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	e853 3f00 	ldrex	r3, [r3]
 80030cc:	623b      	str	r3, [r7, #32]
   return(result);
 80030ce:	6a3b      	ldr	r3, [r7, #32]
 80030d0:	f023 0301 	bic.w	r3, r3, #1
 80030d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	3314      	adds	r3, #20
 80030de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80030e2:	633a      	str	r2, [r7, #48]	; 0x30
 80030e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ea:	e841 2300 	strex	r3, r2, [r1]
 80030ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80030f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1e3      	bne.n	80030be <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2220      	movs	r2, #32
 80030fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	330c      	adds	r3, #12
 800310a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	e853 3f00 	ldrex	r3, [r3]
 8003112:	60fb      	str	r3, [r7, #12]
   return(result);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f023 0310 	bic.w	r3, r3, #16
 800311a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	330c      	adds	r3, #12
 8003124:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003128:	61fa      	str	r2, [r7, #28]
 800312a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312c:	69b9      	ldr	r1, [r7, #24]
 800312e:	69fa      	ldr	r2, [r7, #28]
 8003130:	e841 2300 	strex	r3, r2, [r1]
 8003134:	617b      	str	r3, [r7, #20]
   return(result);
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1e3      	bne.n	8003104 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800313c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003140:	4619      	mov	r1, r3
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f83e 	bl	80031c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003148:	e023      	b.n	8003192 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800314a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800314e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003152:	2b00      	cmp	r3, #0
 8003154:	d009      	beq.n	800316a <HAL_UART_IRQHandler+0x4ea>
 8003156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800315a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f959 	bl	800341a <UART_Transmit_IT>
    return;
 8003168:	e014      	b.n	8003194 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800316a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800316e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00e      	beq.n	8003194 <HAL_UART_IRQHandler+0x514>
 8003176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800317a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317e:	2b00      	cmp	r3, #0
 8003180:	d008      	beq.n	8003194 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f999 	bl	80034ba <UART_EndTransmit_IT>
    return;
 8003188:	e004      	b.n	8003194 <HAL_UART_IRQHandler+0x514>
    return;
 800318a:	bf00      	nop
 800318c:	e002      	b.n	8003194 <HAL_UART_IRQHandler+0x514>
      return;
 800318e:	bf00      	nop
 8003190:	e000      	b.n	8003194 <HAL_UART_IRQHandler+0x514>
      return;
 8003192:	bf00      	nop
  }
}
 8003194:	37e8      	adds	r7, #232	; 0xe8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop

0800319c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b090      	sub	sp, #64	; 0x40
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	603b      	str	r3, [r7, #0]
 80031e8:	4613      	mov	r3, r2
 80031ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ec:	e050      	b.n	8003290 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f4:	d04c      	beq.n	8003290 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d007      	beq.n	800320c <UART_WaitOnFlagUntilTimeout+0x30>
 80031fc:	f7fe f97e 	bl	80014fc <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003208:	429a      	cmp	r2, r3
 800320a:	d241      	bcs.n	8003290 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	330c      	adds	r3, #12
 8003212:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003216:	e853 3f00 	ldrex	r3, [r3]
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003222:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	330c      	adds	r3, #12
 800322a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800322c:	637a      	str	r2, [r7, #52]	; 0x34
 800322e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003230:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003232:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003234:	e841 2300 	strex	r3, r2, [r1]
 8003238:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800323a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1e5      	bne.n	800320c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	3314      	adds	r3, #20
 8003246:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	e853 3f00 	ldrex	r3, [r3]
 800324e:	613b      	str	r3, [r7, #16]
   return(result);
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	f023 0301 	bic.w	r3, r3, #1
 8003256:	63bb      	str	r3, [r7, #56]	; 0x38
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	3314      	adds	r3, #20
 800325e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003260:	623a      	str	r2, [r7, #32]
 8003262:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003264:	69f9      	ldr	r1, [r7, #28]
 8003266:	6a3a      	ldr	r2, [r7, #32]
 8003268:	e841 2300 	strex	r3, r2, [r1]
 800326c:	61bb      	str	r3, [r7, #24]
   return(result);
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1e5      	bne.n	8003240 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2220      	movs	r2, #32
 8003280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e00f      	b.n	80032b0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	4013      	ands	r3, r2
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	429a      	cmp	r2, r3
 800329e:	bf0c      	ite	eq
 80032a0:	2301      	moveq	r3, #1
 80032a2:	2300      	movne	r3, #0
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	461a      	mov	r2, r3
 80032a8:	79fb      	ldrb	r3, [r7, #7]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d09f      	beq.n	80031ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3740      	adds	r7, #64	; 0x40
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	4613      	mov	r3, r2
 80032c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	88fa      	ldrh	r2, [r7, #6]
 80032d0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	88fa      	ldrh	r2, [r7, #6]
 80032d6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2222      	movs	r2, #34	; 0x22
 80032e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68da      	ldr	r2, [r3, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032fc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695a      	ldr	r2, [r3, #20]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f042 0201 	orr.w	r2, r2, #1
 800330c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f042 0220 	orr.w	r2, r2, #32
 800331c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800332c:	b480      	push	{r7}
 800332e:	b095      	sub	sp, #84	; 0x54
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	330c      	adds	r3, #12
 800333a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800333e:	e853 3f00 	ldrex	r3, [r3]
 8003342:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003346:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800334a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	330c      	adds	r3, #12
 8003352:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003354:	643a      	str	r2, [r7, #64]	; 0x40
 8003356:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003358:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800335a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800335c:	e841 2300 	strex	r3, r2, [r1]
 8003360:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1e5      	bne.n	8003334 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	3314      	adds	r3, #20
 800336e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	e853 3f00 	ldrex	r3, [r3]
 8003376:	61fb      	str	r3, [r7, #28]
   return(result);
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	f023 0301 	bic.w	r3, r3, #1
 800337e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	3314      	adds	r3, #20
 8003386:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003388:	62fa      	str	r2, [r7, #44]	; 0x2c
 800338a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800338e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003390:	e841 2300 	strex	r3, r2, [r1]
 8003394:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1e5      	bne.n	8003368 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d119      	bne.n	80033d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	330c      	adds	r3, #12
 80033aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	e853 3f00 	ldrex	r3, [r3]
 80033b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f023 0310 	bic.w	r3, r3, #16
 80033ba:	647b      	str	r3, [r7, #68]	; 0x44
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	330c      	adds	r3, #12
 80033c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033c4:	61ba      	str	r2, [r7, #24]
 80033c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c8:	6979      	ldr	r1, [r7, #20]
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	e841 2300 	strex	r3, r2, [r1]
 80033d0:	613b      	str	r3, [r7, #16]
   return(result);
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1e5      	bne.n	80033a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80033e6:	bf00      	nop
 80033e8:	3754      	adds	r7, #84	; 0x54
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b084      	sub	sp, #16
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f7ff fecf 	bl	80031b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003412:	bf00      	nop
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800341a:	b480      	push	{r7}
 800341c:	b085      	sub	sp, #20
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b21      	cmp	r3, #33	; 0x21
 800342c:	d13e      	bne.n	80034ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003436:	d114      	bne.n	8003462 <UART_Transmit_IT+0x48>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d110      	bne.n	8003462 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	461a      	mov	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003454:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	1c9a      	adds	r2, r3, #2
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	621a      	str	r2, [r3, #32]
 8003460:	e008      	b.n	8003474 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	1c59      	adds	r1, r3, #1
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6211      	str	r1, [r2, #32]
 800346c:	781a      	ldrb	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003478:	b29b      	uxth	r3, r3
 800347a:	3b01      	subs	r3, #1
 800347c:	b29b      	uxth	r3, r3
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	4619      	mov	r1, r3
 8003482:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10f      	bne.n	80034a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003496:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	e000      	b.n	80034ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034ac:	2302      	movs	r3, #2
  }
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b082      	sub	sp, #8
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7ff fe5e 	bl	800319c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b08c      	sub	sp, #48	; 0x30
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b22      	cmp	r3, #34	; 0x22
 80034fc:	f040 80ab 	bne.w	8003656 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003508:	d117      	bne.n	800353a <UART_Receive_IT+0x50>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d113      	bne.n	800353a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003512:	2300      	movs	r3, #0
 8003514:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	b29b      	uxth	r3, r3
 8003524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003528:	b29a      	uxth	r2, r3
 800352a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003532:	1c9a      	adds	r2, r3, #2
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	629a      	str	r2, [r3, #40]	; 0x28
 8003538:	e026      	b.n	8003588 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003540:	2300      	movs	r3, #0
 8003542:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800354c:	d007      	beq.n	800355e <UART_Receive_IT+0x74>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10a      	bne.n	800356c <UART_Receive_IT+0x82>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d106      	bne.n	800356c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	b2da      	uxtb	r2, r3
 8003566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003568:	701a      	strb	r2, [r3, #0]
 800356a:	e008      	b.n	800357e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	b2db      	uxtb	r3, r3
 8003574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003578:	b2da      	uxtb	r2, r3
 800357a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800358c:	b29b      	uxth	r3, r3
 800358e:	3b01      	subs	r3, #1
 8003590:	b29b      	uxth	r3, r3
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	4619      	mov	r1, r3
 8003596:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003598:	2b00      	cmp	r3, #0
 800359a:	d15a      	bne.n	8003652 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0220 	bic.w	r2, r2, #32
 80035aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	695a      	ldr	r2, [r3, #20]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0201 	bic.w	r2, r2, #1
 80035ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d135      	bne.n	8003648 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	330c      	adds	r3, #12
 80035e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	e853 3f00 	ldrex	r3, [r3]
 80035f0:	613b      	str	r3, [r7, #16]
   return(result);
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	f023 0310 	bic.w	r3, r3, #16
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	330c      	adds	r3, #12
 8003600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003602:	623a      	str	r2, [r7, #32]
 8003604:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003606:	69f9      	ldr	r1, [r7, #28]
 8003608:	6a3a      	ldr	r2, [r7, #32]
 800360a:	e841 2300 	strex	r3, r2, [r1]
 800360e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1e5      	bne.n	80035e2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0310 	and.w	r3, r3, #16
 8003620:	2b10      	cmp	r3, #16
 8003622:	d10a      	bne.n	800363a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003624:	2300      	movs	r3, #0
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800363e:	4619      	mov	r1, r3
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7ff fdbf 	bl	80031c4 <HAL_UARTEx_RxEventCallback>
 8003646:	e002      	b.n	800364e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f7fd fa69 	bl	8000b20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	e002      	b.n	8003658 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	e000      	b.n	8003658 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003656:	2302      	movs	r3, #2
  }
}
 8003658:	4618      	mov	r0, r3
 800365a:	3730      	adds	r7, #48	; 0x30
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003664:	b0c0      	sub	sp, #256	; 0x100
 8003666:	af00      	add	r7, sp, #0
 8003668:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800366c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800367c:	68d9      	ldr	r1, [r3, #12]
 800367e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	ea40 0301 	orr.w	r3, r0, r1
 8003688:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800368a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	431a      	orrs	r2, r3
 8003698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	431a      	orrs	r2, r3
 80036a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036b8:	f021 010c 	bic.w	r1, r1, #12
 80036bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80036c6:	430b      	orrs	r3, r1
 80036c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80036d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036da:	6999      	ldr	r1, [r3, #24]
 80036dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	ea40 0301 	orr.w	r3, r0, r1
 80036e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	4b8f      	ldr	r3, [pc, #572]	; (800392c <UART_SetConfig+0x2cc>)
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d005      	beq.n	8003700 <UART_SetConfig+0xa0>
 80036f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	4b8d      	ldr	r3, [pc, #564]	; (8003930 <UART_SetConfig+0x2d0>)
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d104      	bne.n	800370a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003700:	f7fe fee8 	bl	80024d4 <HAL_RCC_GetPCLK2Freq>
 8003704:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003708:	e003      	b.n	8003712 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800370a:	f7fe fecf 	bl	80024ac <HAL_RCC_GetPCLK1Freq>
 800370e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800371c:	f040 810c 	bne.w	8003938 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003720:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003724:	2200      	movs	r2, #0
 8003726:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800372a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800372e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003732:	4622      	mov	r2, r4
 8003734:	462b      	mov	r3, r5
 8003736:	1891      	adds	r1, r2, r2
 8003738:	65b9      	str	r1, [r7, #88]	; 0x58
 800373a:	415b      	adcs	r3, r3
 800373c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800373e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003742:	4621      	mov	r1, r4
 8003744:	eb12 0801 	adds.w	r8, r2, r1
 8003748:	4629      	mov	r1, r5
 800374a:	eb43 0901 	adc.w	r9, r3, r1
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800375a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800375e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003762:	4690      	mov	r8, r2
 8003764:	4699      	mov	r9, r3
 8003766:	4623      	mov	r3, r4
 8003768:	eb18 0303 	adds.w	r3, r8, r3
 800376c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003770:	462b      	mov	r3, r5
 8003772:	eb49 0303 	adc.w	r3, r9, r3
 8003776:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800377a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003786:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800378a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800378e:	460b      	mov	r3, r1
 8003790:	18db      	adds	r3, r3, r3
 8003792:	653b      	str	r3, [r7, #80]	; 0x50
 8003794:	4613      	mov	r3, r2
 8003796:	eb42 0303 	adc.w	r3, r2, r3
 800379a:	657b      	str	r3, [r7, #84]	; 0x54
 800379c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80037a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80037a4:	f7fc fd84 	bl	80002b0 <__aeabi_uldivmod>
 80037a8:	4602      	mov	r2, r0
 80037aa:	460b      	mov	r3, r1
 80037ac:	4b61      	ldr	r3, [pc, #388]	; (8003934 <UART_SetConfig+0x2d4>)
 80037ae:	fba3 2302 	umull	r2, r3, r3, r2
 80037b2:	095b      	lsrs	r3, r3, #5
 80037b4:	011c      	lsls	r4, r3, #4
 80037b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ba:	2200      	movs	r2, #0
 80037bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80037c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80037c8:	4642      	mov	r2, r8
 80037ca:	464b      	mov	r3, r9
 80037cc:	1891      	adds	r1, r2, r2
 80037ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80037d0:	415b      	adcs	r3, r3
 80037d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80037d8:	4641      	mov	r1, r8
 80037da:	eb12 0a01 	adds.w	sl, r2, r1
 80037de:	4649      	mov	r1, r9
 80037e0:	eb43 0b01 	adc.w	fp, r3, r1
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037f8:	4692      	mov	sl, r2
 80037fa:	469b      	mov	fp, r3
 80037fc:	4643      	mov	r3, r8
 80037fe:	eb1a 0303 	adds.w	r3, sl, r3
 8003802:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003806:	464b      	mov	r3, r9
 8003808:	eb4b 0303 	adc.w	r3, fp, r3
 800380c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800381c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003820:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003824:	460b      	mov	r3, r1
 8003826:	18db      	adds	r3, r3, r3
 8003828:	643b      	str	r3, [r7, #64]	; 0x40
 800382a:	4613      	mov	r3, r2
 800382c:	eb42 0303 	adc.w	r3, r2, r3
 8003830:	647b      	str	r3, [r7, #68]	; 0x44
 8003832:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003836:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800383a:	f7fc fd39 	bl	80002b0 <__aeabi_uldivmod>
 800383e:	4602      	mov	r2, r0
 8003840:	460b      	mov	r3, r1
 8003842:	4611      	mov	r1, r2
 8003844:	4b3b      	ldr	r3, [pc, #236]	; (8003934 <UART_SetConfig+0x2d4>)
 8003846:	fba3 2301 	umull	r2, r3, r3, r1
 800384a:	095b      	lsrs	r3, r3, #5
 800384c:	2264      	movs	r2, #100	; 0x64
 800384e:	fb02 f303 	mul.w	r3, r2, r3
 8003852:	1acb      	subs	r3, r1, r3
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800385a:	4b36      	ldr	r3, [pc, #216]	; (8003934 <UART_SetConfig+0x2d4>)
 800385c:	fba3 2302 	umull	r2, r3, r3, r2
 8003860:	095b      	lsrs	r3, r3, #5
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003868:	441c      	add	r4, r3
 800386a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800386e:	2200      	movs	r2, #0
 8003870:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003874:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003878:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800387c:	4642      	mov	r2, r8
 800387e:	464b      	mov	r3, r9
 8003880:	1891      	adds	r1, r2, r2
 8003882:	63b9      	str	r1, [r7, #56]	; 0x38
 8003884:	415b      	adcs	r3, r3
 8003886:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003888:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800388c:	4641      	mov	r1, r8
 800388e:	1851      	adds	r1, r2, r1
 8003890:	6339      	str	r1, [r7, #48]	; 0x30
 8003892:	4649      	mov	r1, r9
 8003894:	414b      	adcs	r3, r1
 8003896:	637b      	str	r3, [r7, #52]	; 0x34
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	f04f 0300 	mov.w	r3, #0
 80038a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80038a4:	4659      	mov	r1, fp
 80038a6:	00cb      	lsls	r3, r1, #3
 80038a8:	4651      	mov	r1, sl
 80038aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038ae:	4651      	mov	r1, sl
 80038b0:	00ca      	lsls	r2, r1, #3
 80038b2:	4610      	mov	r0, r2
 80038b4:	4619      	mov	r1, r3
 80038b6:	4603      	mov	r3, r0
 80038b8:	4642      	mov	r2, r8
 80038ba:	189b      	adds	r3, r3, r2
 80038bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038c0:	464b      	mov	r3, r9
 80038c2:	460a      	mov	r2, r1
 80038c4:	eb42 0303 	adc.w	r3, r2, r3
 80038c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80038d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80038dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80038e0:	460b      	mov	r3, r1
 80038e2:	18db      	adds	r3, r3, r3
 80038e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80038e6:	4613      	mov	r3, r2
 80038e8:	eb42 0303 	adc.w	r3, r2, r3
 80038ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80038f6:	f7fc fcdb 	bl	80002b0 <__aeabi_uldivmod>
 80038fa:	4602      	mov	r2, r0
 80038fc:	460b      	mov	r3, r1
 80038fe:	4b0d      	ldr	r3, [pc, #52]	; (8003934 <UART_SetConfig+0x2d4>)
 8003900:	fba3 1302 	umull	r1, r3, r3, r2
 8003904:	095b      	lsrs	r3, r3, #5
 8003906:	2164      	movs	r1, #100	; 0x64
 8003908:	fb01 f303 	mul.w	r3, r1, r3
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	3332      	adds	r3, #50	; 0x32
 8003912:	4a08      	ldr	r2, [pc, #32]	; (8003934 <UART_SetConfig+0x2d4>)
 8003914:	fba2 2303 	umull	r2, r3, r2, r3
 8003918:	095b      	lsrs	r3, r3, #5
 800391a:	f003 0207 	and.w	r2, r3, #7
 800391e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4422      	add	r2, r4
 8003926:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003928:	e105      	b.n	8003b36 <UART_SetConfig+0x4d6>
 800392a:	bf00      	nop
 800392c:	40011000 	.word	0x40011000
 8003930:	40011400 	.word	0x40011400
 8003934:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003938:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800393c:	2200      	movs	r2, #0
 800393e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003942:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003946:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800394a:	4642      	mov	r2, r8
 800394c:	464b      	mov	r3, r9
 800394e:	1891      	adds	r1, r2, r2
 8003950:	6239      	str	r1, [r7, #32]
 8003952:	415b      	adcs	r3, r3
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
 8003956:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800395a:	4641      	mov	r1, r8
 800395c:	1854      	adds	r4, r2, r1
 800395e:	4649      	mov	r1, r9
 8003960:	eb43 0501 	adc.w	r5, r3, r1
 8003964:	f04f 0200 	mov.w	r2, #0
 8003968:	f04f 0300 	mov.w	r3, #0
 800396c:	00eb      	lsls	r3, r5, #3
 800396e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003972:	00e2      	lsls	r2, r4, #3
 8003974:	4614      	mov	r4, r2
 8003976:	461d      	mov	r5, r3
 8003978:	4643      	mov	r3, r8
 800397a:	18e3      	adds	r3, r4, r3
 800397c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003980:	464b      	mov	r3, r9
 8003982:	eb45 0303 	adc.w	r3, r5, r3
 8003986:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800398a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003996:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039a6:	4629      	mov	r1, r5
 80039a8:	008b      	lsls	r3, r1, #2
 80039aa:	4621      	mov	r1, r4
 80039ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039b0:	4621      	mov	r1, r4
 80039b2:	008a      	lsls	r2, r1, #2
 80039b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80039b8:	f7fc fc7a 	bl	80002b0 <__aeabi_uldivmod>
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	4b60      	ldr	r3, [pc, #384]	; (8003b44 <UART_SetConfig+0x4e4>)
 80039c2:	fba3 2302 	umull	r2, r3, r3, r2
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	011c      	lsls	r4, r3, #4
 80039ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039ce:	2200      	movs	r2, #0
 80039d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80039d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80039d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80039dc:	4642      	mov	r2, r8
 80039de:	464b      	mov	r3, r9
 80039e0:	1891      	adds	r1, r2, r2
 80039e2:	61b9      	str	r1, [r7, #24]
 80039e4:	415b      	adcs	r3, r3
 80039e6:	61fb      	str	r3, [r7, #28]
 80039e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039ec:	4641      	mov	r1, r8
 80039ee:	1851      	adds	r1, r2, r1
 80039f0:	6139      	str	r1, [r7, #16]
 80039f2:	4649      	mov	r1, r9
 80039f4:	414b      	adcs	r3, r1
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	f04f 0200 	mov.w	r2, #0
 80039fc:	f04f 0300 	mov.w	r3, #0
 8003a00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a04:	4659      	mov	r1, fp
 8003a06:	00cb      	lsls	r3, r1, #3
 8003a08:	4651      	mov	r1, sl
 8003a0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a0e:	4651      	mov	r1, sl
 8003a10:	00ca      	lsls	r2, r1, #3
 8003a12:	4610      	mov	r0, r2
 8003a14:	4619      	mov	r1, r3
 8003a16:	4603      	mov	r3, r0
 8003a18:	4642      	mov	r2, r8
 8003a1a:	189b      	adds	r3, r3, r2
 8003a1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a20:	464b      	mov	r3, r9
 8003a22:	460a      	mov	r2, r1
 8003a24:	eb42 0303 	adc.w	r3, r2, r3
 8003a28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a36:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	f04f 0300 	mov.w	r3, #0
 8003a40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a44:	4649      	mov	r1, r9
 8003a46:	008b      	lsls	r3, r1, #2
 8003a48:	4641      	mov	r1, r8
 8003a4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a4e:	4641      	mov	r1, r8
 8003a50:	008a      	lsls	r2, r1, #2
 8003a52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a56:	f7fc fc2b 	bl	80002b0 <__aeabi_uldivmod>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	4b39      	ldr	r3, [pc, #228]	; (8003b44 <UART_SetConfig+0x4e4>)
 8003a60:	fba3 1302 	umull	r1, r3, r3, r2
 8003a64:	095b      	lsrs	r3, r3, #5
 8003a66:	2164      	movs	r1, #100	; 0x64
 8003a68:	fb01 f303 	mul.w	r3, r1, r3
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	3332      	adds	r3, #50	; 0x32
 8003a72:	4a34      	ldr	r2, [pc, #208]	; (8003b44 <UART_SetConfig+0x4e4>)
 8003a74:	fba2 2303 	umull	r2, r3, r2, r3
 8003a78:	095b      	lsrs	r3, r3, #5
 8003a7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a7e:	441c      	add	r4, r3
 8003a80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a84:	2200      	movs	r2, #0
 8003a86:	673b      	str	r3, [r7, #112]	; 0x70
 8003a88:	677a      	str	r2, [r7, #116]	; 0x74
 8003a8a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003a8e:	4642      	mov	r2, r8
 8003a90:	464b      	mov	r3, r9
 8003a92:	1891      	adds	r1, r2, r2
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	415b      	adcs	r3, r3
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a9e:	4641      	mov	r1, r8
 8003aa0:	1851      	adds	r1, r2, r1
 8003aa2:	6039      	str	r1, [r7, #0]
 8003aa4:	4649      	mov	r1, r9
 8003aa6:	414b      	adcs	r3, r1
 8003aa8:	607b      	str	r3, [r7, #4]
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	f04f 0300 	mov.w	r3, #0
 8003ab2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ab6:	4659      	mov	r1, fp
 8003ab8:	00cb      	lsls	r3, r1, #3
 8003aba:	4651      	mov	r1, sl
 8003abc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ac0:	4651      	mov	r1, sl
 8003ac2:	00ca      	lsls	r2, r1, #3
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	4603      	mov	r3, r0
 8003aca:	4642      	mov	r2, r8
 8003acc:	189b      	adds	r3, r3, r2
 8003ace:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ad0:	464b      	mov	r3, r9
 8003ad2:	460a      	mov	r2, r1
 8003ad4:	eb42 0303 	adc.w	r3, r2, r3
 8003ad8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	663b      	str	r3, [r7, #96]	; 0x60
 8003ae4:	667a      	str	r2, [r7, #100]	; 0x64
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003af2:	4649      	mov	r1, r9
 8003af4:	008b      	lsls	r3, r1, #2
 8003af6:	4641      	mov	r1, r8
 8003af8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003afc:	4641      	mov	r1, r8
 8003afe:	008a      	lsls	r2, r1, #2
 8003b00:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b04:	f7fc fbd4 	bl	80002b0 <__aeabi_uldivmod>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4b0d      	ldr	r3, [pc, #52]	; (8003b44 <UART_SetConfig+0x4e4>)
 8003b0e:	fba3 1302 	umull	r1, r3, r3, r2
 8003b12:	095b      	lsrs	r3, r3, #5
 8003b14:	2164      	movs	r1, #100	; 0x64
 8003b16:	fb01 f303 	mul.w	r3, r1, r3
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	011b      	lsls	r3, r3, #4
 8003b1e:	3332      	adds	r3, #50	; 0x32
 8003b20:	4a08      	ldr	r2, [pc, #32]	; (8003b44 <UART_SetConfig+0x4e4>)
 8003b22:	fba2 2303 	umull	r2, r3, r2, r3
 8003b26:	095b      	lsrs	r3, r3, #5
 8003b28:	f003 020f 	and.w	r2, r3, #15
 8003b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4422      	add	r2, r4
 8003b34:	609a      	str	r2, [r3, #8]
}
 8003b36:	bf00      	nop
 8003b38:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b42:	bf00      	nop
 8003b44:	51eb851f 	.word	0x51eb851f

08003b48 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	4603      	mov	r3, r0
 8003b50:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003b52:	2300      	movs	r3, #0
 8003b54:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003b56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b5a:	2b84      	cmp	r3, #132	; 0x84
 8003b5c:	d005      	beq.n	8003b6a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003b5e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	4413      	add	r3, r2
 8003b66:	3303      	adds	r3, #3
 8003b68:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3714      	adds	r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b7e:	f3ef 8305 	mrs	r3, IPSR
 8003b82:	607b      	str	r3, [r7, #4]
  return(result);
 8003b84:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	bf14      	ite	ne
 8003b8a:	2301      	movne	r3, #1
 8003b8c:	2300      	moveq	r3, #0
 8003b8e:	b2db      	uxtb	r3, r3
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003ba0:	f001 fcd2 	bl	8005548 <vTaskStartScheduler>
  
  return osOK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8003bae:	f7ff ffe3 	bl	8003b78 <inHandlerMode>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8003bb8:	f001 fde0 	bl	800577c <xTaskGetTickCountFromISR>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	e002      	b.n	8003bc6 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8003bc0:	f001 fdcc 	bl	800575c <xTaskGetTickCount>
 8003bc4:	4603      	mov	r3, r0
  }
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003bca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bcc:	b089      	sub	sp, #36	; 0x24
 8003bce:	af04      	add	r7, sp, #16
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d020      	beq.n	8003c1e <osThreadCreate+0x54>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d01c      	beq.n	8003c1e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685c      	ldr	r4, [r3, #4]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681d      	ldr	r5, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691e      	ldr	r6, [r3, #16]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7ff ffa6 	bl	8003b48 <makeFreeRtosPriority>
 8003bfc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c06:	9202      	str	r2, [sp, #8]
 8003c08:	9301      	str	r3, [sp, #4]
 8003c0a:	9100      	str	r1, [sp, #0]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	4632      	mov	r2, r6
 8003c10:	4629      	mov	r1, r5
 8003c12:	4620      	mov	r0, r4
 8003c14:	f001 fa3e 	bl	8005094 <xTaskCreateStatic>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	e01c      	b.n	8003c58 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685c      	ldr	r4, [r3, #4]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c2a:	b29e      	uxth	r6, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff ff88 	bl	8003b48 <makeFreeRtosPriority>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	f107 030c 	add.w	r3, r7, #12
 8003c3e:	9301      	str	r3, [sp, #4]
 8003c40:	9200      	str	r2, [sp, #0]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	4632      	mov	r2, r6
 8003c46:	4629      	mov	r1, r5
 8003c48:	4620      	mov	r0, r4
 8003c4a:	f001 fa80 	bl	800514e <xTaskCreate>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d001      	beq.n	8003c58 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003c54:	2300      	movs	r3, #0
 8003c56:	e000      	b.n	8003c5a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003c58:	68fb      	ldr	r3, [r7, #12]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c62 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b084      	sub	sp, #16
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <osDelay+0x16>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	e000      	b.n	8003c7a <osDelay+0x18>
 8003c78:	2301      	movs	r3, #1
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f001 fb9e 	bl	80053bc <vTaskDelay>
  
  return osOK;
 8003c80:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
	...

08003c8c <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af02      	add	r7, sp, #8
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8003c9e:	f7ff ff6b 	bl	8003b78 <inHandlerMode>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d01c      	beq.n	8003ce2 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8003ca8:	6839      	ldr	r1, [r7, #0]
 8003caa:	f107 0208 	add.w	r2, r7, #8
 8003cae:	f107 030c 	add.w	r3, r7, #12
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f002 fb31 	bl	8006320 <xTaskGenericNotifyFromISR>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d002      	beq.n	8003cca <osSignalSet+0x3e>
      return 0x80000000;
 8003cc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003cc8:	e019      	b.n	8003cfe <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d015      	beq.n	8003cfc <osSignalSet+0x70>
 8003cd0:	4b0d      	ldr	r3, [pc, #52]	; (8003d08 <osSignalSet+0x7c>)
 8003cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	f3bf 8f4f 	dsb	sy
 8003cdc:	f3bf 8f6f 	isb	sy
 8003ce0:	e00c      	b.n	8003cfc <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8003ce2:	6839      	ldr	r1, [r7, #0]
 8003ce4:	f107 0308 	add.w	r3, r7, #8
 8003ce8:	2201      	movs	r2, #1
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f002 fa62 	bl	80061b4 <xTaskGenericNotify>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d002      	beq.n	8003cfc <osSignalSet+0x70>
    return 0x80000000;
 8003cf6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003cfa:	e000      	b.n	8003cfe <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8003cfc:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	e000ed04 	.word	0xe000ed04

08003d0c <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8003d0c:	b590      	push	{r4, r7, lr}
 8003d0e:	b089      	sub	sp, #36	; 0x24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8003d18:	2300      	movs	r3, #0
 8003d1a:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d26:	d103      	bne.n	8003d30 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8003d28:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2c:	61fb      	str	r3, [r7, #28]
 8003d2e:	e009      	b.n	8003d44 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d006      	beq.n	8003d44 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <osSignalWait+0x38>
      ticks = 1;
 8003d40:	2301      	movs	r3, #1
 8003d42:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8003d44:	f7ff ff18 	bl	8003b78 <inHandlerMode>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d002      	beq.n	8003d54 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8003d4e:	2382      	movs	r3, #130	; 0x82
 8003d50:	613b      	str	r3, [r7, #16]
 8003d52:	e01b      	b.n	8003d8c <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8003d54:	68b9      	ldr	r1, [r7, #8]
 8003d56:	f107 0310 	add.w	r3, r7, #16
 8003d5a:	1d1a      	adds	r2, r3, #4
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	2000      	movs	r0, #0
 8003d60:	f002 f9ce 	bl	8006100 <xTaskNotifyWait>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d008      	beq.n	8003d7c <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d102      	bne.n	8003d76 <osSignalWait+0x6a>
 8003d70:	2300      	movs	r3, #0
 8003d72:	613b      	str	r3, [r7, #16]
 8003d74:	e00a      	b.n	8003d8c <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8003d76:	2340      	movs	r3, #64	; 0x40
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	e007      	b.n	8003d8c <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	da02      	bge.n	8003d88 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8003d82:	2386      	movs	r3, #134	; 0x86
 8003d84:	613b      	str	r3, [r7, #16]
 8003d86:	e001      	b.n	8003d8c <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8003d88:	2308      	movs	r3, #8
 8003d8a:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	461c      	mov	r4, r3
 8003d90:	f107 0310 	add.w	r3, r7, #16
 8003d94:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003d98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	3724      	adds	r7, #36	; 0x24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd90      	pop	{r4, r7, pc}

08003da4 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d007      	beq.n	8003dc4 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	4619      	mov	r1, r3
 8003dba:	2001      	movs	r0, #1
 8003dbc:	f000 fb95 	bl	80044ea <xQueueCreateMutexStatic>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	e003      	b.n	8003dcc <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8003dc4:	2001      	movs	r0, #1
 8003dc6:	f000 fb78 	bl	80044ba <xQueueCreateMutex>
 8003dca:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003dde:	2300      	movs	r3, #0
 8003de0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <osMutexWait+0x18>
    return osErrorParameter;
 8003de8:	2380      	movs	r3, #128	; 0x80
 8003dea:	e03a      	b.n	8003e62 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8003dec:	2300      	movs	r3, #0
 8003dee:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df6:	d103      	bne.n	8003e00 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8003df8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	e009      	b.n	8003e14 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d006      	beq.n	8003e14 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <osMutexWait+0x40>
      ticks = 1;
 8003e10:	2301      	movs	r3, #1
 8003e12:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003e14:	f7ff feb0 	bl	8003b78 <inHandlerMode>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d017      	beq.n	8003e4e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003e1e:	f107 0308 	add.w	r3, r7, #8
 8003e22:	461a      	mov	r2, r3
 8003e24:	2100      	movs	r1, #0
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 ff8c 	bl	8004d44 <xQueueReceiveFromISR>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d001      	beq.n	8003e36 <osMutexWait+0x62>
      return osErrorOS;
 8003e32:	23ff      	movs	r3, #255	; 0xff
 8003e34:	e015      	b.n	8003e62 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d011      	beq.n	8003e60 <osMutexWait+0x8c>
 8003e3c:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <osMutexWait+0x98>)
 8003e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	f3bf 8f4f 	dsb	sy
 8003e48:	f3bf 8f6f 	isb	sy
 8003e4c:	e008      	b.n	8003e60 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8003e4e:	68f9      	ldr	r1, [r7, #12]
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 fe6b 	bl	8004b2c <xQueueSemaphoreTake>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d001      	beq.n	8003e60 <osMutexWait+0x8c>
    return osErrorOS;
 8003e5c:	23ff      	movs	r3, #255	; 0xff
 8003e5e:	e000      	b.n	8003e62 <osMutexWait+0x8e>
  }
  
  return osOK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	e000ed04 	.word	0xe000ed04

08003e70 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8003e80:	f7ff fe7a 	bl	8003b78 <inHandlerMode>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d016      	beq.n	8003eb8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003e8a:	f107 0308 	add.w	r3, r7, #8
 8003e8e:	4619      	mov	r1, r3
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 fcde 	bl	8004852 <xQueueGiveFromISR>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d001      	beq.n	8003ea0 <osMutexRelease+0x30>
      return osErrorOS;
 8003e9c:	23ff      	movs	r3, #255	; 0xff
 8003e9e:	e017      	b.n	8003ed0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d013      	beq.n	8003ece <osMutexRelease+0x5e>
 8003ea6:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <osMutexRelease+0x68>)
 8003ea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	f3bf 8f4f 	dsb	sy
 8003eb2:	f3bf 8f6f 	isb	sy
 8003eb6:	e00a      	b.n	8003ece <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8003eb8:	2300      	movs	r3, #0
 8003eba:	2200      	movs	r2, #0
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 fb2e 	bl	8004520 <xQueueGenericSend>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d001      	beq.n	8003ece <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8003eca:	23ff      	movs	r3, #255	; 0xff
 8003ecc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8003ece:	68fb      	ldr	r3, [r7, #12]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	e000ed04 	.word	0xe000ed04

08003edc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003edc:	b590      	push	{r4, r7, lr}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af02      	add	r7, sp, #8
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d011      	beq.n	8003f12 <osMessageCreate+0x36>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00d      	beq.n	8003f12 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6818      	ldr	r0, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6859      	ldr	r1, [r3, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	2400      	movs	r4, #0
 8003f08:	9400      	str	r4, [sp, #0]
 8003f0a:	f000 f9eb 	bl	80042e4 <xQueueGenericCreateStatic>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	e008      	b.n	8003f24 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6818      	ldr	r0, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	f000 fa59 	bl	80043d4 <xQueueGenericCreate>
 8003f22:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd90      	pop	{r4, r7, pc}

08003f2c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <osMessagePut+0x1e>
    ticks = 1;
 8003f46:	2301      	movs	r3, #1
 8003f48:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8003f4a:	f7ff fe15 	bl	8003b78 <inHandlerMode>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d018      	beq.n	8003f86 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8003f54:	f107 0210 	add.w	r2, r7, #16
 8003f58:	f107 0108 	add.w	r1, r7, #8
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 fbdc 	bl	800471c <xQueueGenericSendFromISR>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d001      	beq.n	8003f6e <osMessagePut+0x42>
      return osErrorOS;
 8003f6a:	23ff      	movs	r3, #255	; 0xff
 8003f6c:	e018      	b.n	8003fa0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d014      	beq.n	8003f9e <osMessagePut+0x72>
 8003f74:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <osMessagePut+0x7c>)
 8003f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	f3bf 8f4f 	dsb	sy
 8003f80:	f3bf 8f6f 	isb	sy
 8003f84:	e00b      	b.n	8003f9e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8003f86:	f107 0108 	add.w	r1, r7, #8
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 fac6 	bl	8004520 <xQueueGenericSend>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d001      	beq.n	8003f9e <osMessagePut+0x72>
      return osErrorOS;
 8003f9a:	23ff      	movs	r3, #255	; 0xff
 8003f9c:	e000      	b.n	8003fa0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	e000ed04 	.word	0xe000ed04

08003fac <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8003fac:	b590      	push	{r4, r7, lr}
 8003fae:	b08b      	sub	sp, #44	; 0x2c
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10a      	bne.n	8003fdc <osMessageGet+0x30>
    event.status = osErrorParameter;
 8003fc6:	2380      	movs	r3, #128	; 0x80
 8003fc8:	617b      	str	r3, [r7, #20]
    return event;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	461c      	mov	r4, r3
 8003fce:	f107 0314 	add.w	r3, r7, #20
 8003fd2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003fd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003fda:	e054      	b.n	8004086 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fea:	d103      	bne.n	8003ff4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8003fec:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ff2:	e009      	b.n	8004008 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d006      	beq.n	8004008 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <osMessageGet+0x5c>
      ticks = 1;
 8004004:	2301      	movs	r3, #1
 8004006:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004008:	f7ff fdb6 	bl	8003b78 <inHandlerMode>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d01c      	beq.n	800404c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004012:	f107 0220 	add.w	r2, r7, #32
 8004016:	f107 0314 	add.w	r3, r7, #20
 800401a:	3304      	adds	r3, #4
 800401c:	4619      	mov	r1, r3
 800401e:	68b8      	ldr	r0, [r7, #8]
 8004020:	f000 fe90 	bl	8004d44 <xQueueReceiveFromISR>
 8004024:	4603      	mov	r3, r0
 8004026:	2b01      	cmp	r3, #1
 8004028:	d102      	bne.n	8004030 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800402a:	2310      	movs	r3, #16
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	e001      	b.n	8004034 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004030:	2300      	movs	r3, #0
 8004032:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d01d      	beq.n	8004076 <osMessageGet+0xca>
 800403a:	4b15      	ldr	r3, [pc, #84]	; (8004090 <osMessageGet+0xe4>)
 800403c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	f3bf 8f4f 	dsb	sy
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	e014      	b.n	8004076 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800404c:	f107 0314 	add.w	r3, r7, #20
 8004050:	3304      	adds	r3, #4
 8004052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004054:	4619      	mov	r1, r3
 8004056:	68b8      	ldr	r0, [r7, #8]
 8004058:	f000 fc88 	bl	800496c <xQueueReceive>
 800405c:	4603      	mov	r3, r0
 800405e:	2b01      	cmp	r3, #1
 8004060:	d102      	bne.n	8004068 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8004062:	2310      	movs	r3, #16
 8004064:	617b      	str	r3, [r7, #20]
 8004066:	e006      	b.n	8004076 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <osMessageGet+0xc6>
 800406e:	2300      	movs	r3, #0
 8004070:	e000      	b.n	8004074 <osMessageGet+0xc8>
 8004072:	2340      	movs	r3, #64	; 0x40
 8004074:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	461c      	mov	r4, r3
 800407a:	f107 0314 	add.w	r3, r7, #20
 800407e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004082:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	372c      	adds	r7, #44	; 0x2c
 800408a:	46bd      	mov	sp, r7
 800408c:	bd90      	pop	{r4, r7, pc}
 800408e:	bf00      	nop
 8004090:	e000ed04 	.word	0xe000ed04

08004094 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f001 f9c1 	bl	8005424 <vTaskSuspend>
  
  return osOK;
 80040a2:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f103 0208 	add.w	r2, r3, #8
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f04f 32ff 	mov.w	r2, #4294967295
 80040c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f103 0208 	add.w	r2, r3, #8
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f103 0208 	add.w	r2, r3, #8
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004106:	b480      	push	{r7}
 8004108:	b085      	sub	sp, #20
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
 800410e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	1c5a      	adds	r2, r3, #1
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	601a      	str	r2, [r3, #0]
}
 8004142:	bf00      	nop
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800414e:	b480      	push	{r7}
 8004150:	b085      	sub	sp, #20
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
 8004156:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004164:	d103      	bne.n	800416e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	e00c      	b.n	8004188 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	3308      	adds	r3, #8
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	e002      	b.n	800417c <vListInsert+0x2e>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	429a      	cmp	r2, r3
 8004186:	d2f6      	bcs.n	8004176 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	1c5a      	adds	r2, r3, #1
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	601a      	str	r2, [r3, #0]
}
 80041b4:	bf00      	nop
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6892      	ldr	r2, [r2, #8]
 80041d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6852      	ldr	r2, [r2, #4]
 80041e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d103      	bne.n	80041f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	1e5a      	subs	r2, r3, #1
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10a      	bne.n	800423e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422c:	f383 8811 	msr	BASEPRI, r3
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800423a:	bf00      	nop
 800423c:	e7fe      	b.n	800423c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800423e:	f002 fad9 	bl	80067f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424a:	68f9      	ldr	r1, [r7, #12]
 800424c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800424e:	fb01 f303 	mul.w	r3, r1, r3
 8004252:	441a      	add	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426e:	3b01      	subs	r3, #1
 8004270:	68f9      	ldr	r1, [r7, #12]
 8004272:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004274:	fb01 f303 	mul.w	r3, r1, r3
 8004278:	441a      	add	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	22ff      	movs	r2, #255	; 0xff
 8004282:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	22ff      	movs	r2, #255	; 0xff
 800428a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d114      	bne.n	80042be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d01a      	beq.n	80042d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	3310      	adds	r3, #16
 80042a0:	4618      	mov	r0, r3
 80042a2:	f001 fbb5 	bl	8005a10 <xTaskRemoveFromEventList>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d012      	beq.n	80042d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80042ac:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <xQueueGenericReset+0xcc>)
 80042ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	e009      	b.n	80042d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	3310      	adds	r3, #16
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff fef2 	bl	80040ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	3324      	adds	r3, #36	; 0x24
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff feed 	bl	80040ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80042d2:	f002 fabf 	bl	8006854 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80042d6:	2301      	movs	r3, #1
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	e000ed04 	.word	0xe000ed04

080042e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b08e      	sub	sp, #56	; 0x38
 80042e8:	af02      	add	r7, sp, #8
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
 80042f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10a      	bne.n	800430e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80042f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fc:	f383 8811 	msr	BASEPRI, r3
 8004300:	f3bf 8f6f 	isb	sy
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800430a:	bf00      	nop
 800430c:	e7fe      	b.n	800430c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10a      	bne.n	800432a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004326:	bf00      	nop
 8004328:	e7fe      	b.n	8004328 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <xQueueGenericCreateStatic+0x52>
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <xQueueGenericCreateStatic+0x56>
 8004336:	2301      	movs	r3, #1
 8004338:	e000      	b.n	800433c <xQueueGenericCreateStatic+0x58>
 800433a:	2300      	movs	r3, #0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10a      	bne.n	8004356 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	623b      	str	r3, [r7, #32]
}
 8004352:	bf00      	nop
 8004354:	e7fe      	b.n	8004354 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d102      	bne.n	8004362 <xQueueGenericCreateStatic+0x7e>
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <xQueueGenericCreateStatic+0x82>
 8004362:	2301      	movs	r3, #1
 8004364:	e000      	b.n	8004368 <xQueueGenericCreateStatic+0x84>
 8004366:	2300      	movs	r3, #0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10a      	bne.n	8004382 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	61fb      	str	r3, [r7, #28]
}
 800437e:	bf00      	nop
 8004380:	e7fe      	b.n	8004380 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004382:	2348      	movs	r3, #72	; 0x48
 8004384:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2b48      	cmp	r3, #72	; 0x48
 800438a:	d00a      	beq.n	80043a2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800438c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	61bb      	str	r3, [r7, #24]
}
 800439e:	bf00      	nop
 80043a0:	e7fe      	b.n	80043a0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80043a2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80043a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00d      	beq.n	80043ca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80043ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80043ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	4613      	mov	r3, r2
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	68b9      	ldr	r1, [r7, #8]
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f000 f83f 	bl	8004448 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80043ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3730      	adds	r7, #48	; 0x30
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b08a      	sub	sp, #40	; 0x28
 80043d8:	af02      	add	r7, sp, #8
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	4613      	mov	r3, r2
 80043e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10a      	bne.n	80043fe <xQueueGenericCreate+0x2a>
	__asm volatile
 80043e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	613b      	str	r3, [r7, #16]
}
 80043fa:	bf00      	nop
 80043fc:	e7fe      	b.n	80043fc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	fb02 f303 	mul.w	r3, r2, r3
 8004406:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	3348      	adds	r3, #72	; 0x48
 800440c:	4618      	mov	r0, r3
 800440e:	f002 fb13 	bl	8006a38 <pvPortMalloc>
 8004412:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d011      	beq.n	800443e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	3348      	adds	r3, #72	; 0x48
 8004422:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800442c:	79fa      	ldrb	r2, [r7, #7]
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	4613      	mov	r3, r2
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	68b9      	ldr	r1, [r7, #8]
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 f805 	bl	8004448 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800443e:	69bb      	ldr	r3, [r7, #24]
	}
 8004440:	4618      	mov	r0, r3
 8004442:	3720      	adds	r7, #32
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
 8004454:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d103      	bne.n	8004464 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	e002      	b.n	800446a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004476:	2101      	movs	r1, #1
 8004478:	69b8      	ldr	r0, [r7, #24]
 800447a:	f7ff fecb 	bl	8004214 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800447e:	bf00      	nop
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004486:	b580      	push	{r7, lr}
 8004488:	b082      	sub	sp, #8
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00e      	beq.n	80044b2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80044a6:	2300      	movs	r3, #0
 80044a8:	2200      	movs	r2, #0
 80044aa:	2100      	movs	r1, #0
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 f837 	bl	8004520 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80044b2:	bf00      	nop
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b086      	sub	sp, #24
 80044be:	af00      	add	r7, sp, #0
 80044c0:	4603      	mov	r3, r0
 80044c2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80044c4:	2301      	movs	r3, #1
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	2300      	movs	r3, #0
 80044ca:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80044cc:	79fb      	ldrb	r3, [r7, #7]
 80044ce:	461a      	mov	r2, r3
 80044d0:	6939      	ldr	r1, [r7, #16]
 80044d2:	6978      	ldr	r0, [r7, #20]
 80044d4:	f7ff ff7e 	bl	80043d4 <xQueueGenericCreate>
 80044d8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f7ff ffd3 	bl	8004486 <prvInitialiseMutex>

		return xNewQueue;
 80044e0:	68fb      	ldr	r3, [r7, #12]
	}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3718      	adds	r7, #24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b088      	sub	sp, #32
 80044ee:	af02      	add	r7, sp, #8
 80044f0:	4603      	mov	r3, r0
 80044f2:	6039      	str	r1, [r7, #0]
 80044f4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80044f6:	2301      	movs	r3, #1
 80044f8:	617b      	str	r3, [r7, #20]
 80044fa:	2300      	movs	r3, #0
 80044fc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80044fe:	79fb      	ldrb	r3, [r7, #7]
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2200      	movs	r2, #0
 8004506:	6939      	ldr	r1, [r7, #16]
 8004508:	6978      	ldr	r0, [r7, #20]
 800450a:	f7ff feeb 	bl	80042e4 <xQueueGenericCreateStatic>
 800450e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f7ff ffb8 	bl	8004486 <prvInitialiseMutex>

		return xNewQueue;
 8004516:	68fb      	ldr	r3, [r7, #12]
	}
 8004518:	4618      	mov	r0, r3
 800451a:	3718      	adds	r7, #24
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b08e      	sub	sp, #56	; 0x38
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
 800452c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800452e:	2300      	movs	r3, #0
 8004530:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10a      	bne.n	8004552 <xQueueGenericSend+0x32>
	__asm volatile
 800453c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004540:	f383 8811 	msr	BASEPRI, r3
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800454e:	bf00      	nop
 8004550:	e7fe      	b.n	8004550 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d103      	bne.n	8004560 <xQueueGenericSend+0x40>
 8004558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <xQueueGenericSend+0x44>
 8004560:	2301      	movs	r3, #1
 8004562:	e000      	b.n	8004566 <xQueueGenericSend+0x46>
 8004564:	2300      	movs	r3, #0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10a      	bne.n	8004580 <xQueueGenericSend+0x60>
	__asm volatile
 800456a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456e:	f383 8811 	msr	BASEPRI, r3
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	f3bf 8f4f 	dsb	sy
 800457a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800457c:	bf00      	nop
 800457e:	e7fe      	b.n	800457e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2b02      	cmp	r3, #2
 8004584:	d103      	bne.n	800458e <xQueueGenericSend+0x6e>
 8004586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458a:	2b01      	cmp	r3, #1
 800458c:	d101      	bne.n	8004592 <xQueueGenericSend+0x72>
 800458e:	2301      	movs	r3, #1
 8004590:	e000      	b.n	8004594 <xQueueGenericSend+0x74>
 8004592:	2300      	movs	r3, #0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10a      	bne.n	80045ae <xQueueGenericSend+0x8e>
	__asm volatile
 8004598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	623b      	str	r3, [r7, #32]
}
 80045aa:	bf00      	nop
 80045ac:	e7fe      	b.n	80045ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045ae:	f001 fbeb 	bl	8005d88 <xTaskGetSchedulerState>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d102      	bne.n	80045be <xQueueGenericSend+0x9e>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <xQueueGenericSend+0xa2>
 80045be:	2301      	movs	r3, #1
 80045c0:	e000      	b.n	80045c4 <xQueueGenericSend+0xa4>
 80045c2:	2300      	movs	r3, #0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10a      	bne.n	80045de <xQueueGenericSend+0xbe>
	__asm volatile
 80045c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045cc:	f383 8811 	msr	BASEPRI, r3
 80045d0:	f3bf 8f6f 	isb	sy
 80045d4:	f3bf 8f4f 	dsb	sy
 80045d8:	61fb      	str	r3, [r7, #28]
}
 80045da:	bf00      	nop
 80045dc:	e7fe      	b.n	80045dc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045de:	f002 f909 	bl	80067f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d302      	bcc.n	80045f4 <xQueueGenericSend+0xd4>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d129      	bne.n	8004648 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	68b9      	ldr	r1, [r7, #8]
 80045f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045fa:	f000 fc3b 	bl	8004e74 <prvCopyDataToQueue>
 80045fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	2b00      	cmp	r3, #0
 8004606:	d010      	beq.n	800462a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460a:	3324      	adds	r3, #36	; 0x24
 800460c:	4618      	mov	r0, r3
 800460e:	f001 f9ff 	bl	8005a10 <xTaskRemoveFromEventList>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d013      	beq.n	8004640 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004618:	4b3f      	ldr	r3, [pc, #252]	; (8004718 <xQueueGenericSend+0x1f8>)
 800461a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	e00a      	b.n	8004640 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800462a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462c:	2b00      	cmp	r3, #0
 800462e:	d007      	beq.n	8004640 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004630:	4b39      	ldr	r3, [pc, #228]	; (8004718 <xQueueGenericSend+0x1f8>)
 8004632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004640:	f002 f908 	bl	8006854 <vPortExitCritical>
				return pdPASS;
 8004644:	2301      	movs	r3, #1
 8004646:	e063      	b.n	8004710 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d103      	bne.n	8004656 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800464e:	f002 f901 	bl	8006854 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004652:	2300      	movs	r3, #0
 8004654:	e05c      	b.n	8004710 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004658:	2b00      	cmp	r3, #0
 800465a:	d106      	bne.n	800466a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800465c:	f107 0314 	add.w	r3, r7, #20
 8004660:	4618      	mov	r0, r3
 8004662:	f001 fa37 	bl	8005ad4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004666:	2301      	movs	r3, #1
 8004668:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800466a:	f002 f8f3 	bl	8006854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800466e:	f000 ffcb 	bl	8005608 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004672:	f002 f8bf 	bl	80067f4 <vPortEnterCritical>
 8004676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004678:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800467c:	b25b      	sxtb	r3, r3
 800467e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004682:	d103      	bne.n	800468c <xQueueGenericSend+0x16c>
 8004684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004686:	2200      	movs	r2, #0
 8004688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800468c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004692:	b25b      	sxtb	r3, r3
 8004694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004698:	d103      	bne.n	80046a2 <xQueueGenericSend+0x182>
 800469a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469c:	2200      	movs	r2, #0
 800469e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046a2:	f002 f8d7 	bl	8006854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046a6:	1d3a      	adds	r2, r7, #4
 80046a8:	f107 0314 	add.w	r3, r7, #20
 80046ac:	4611      	mov	r1, r2
 80046ae:	4618      	mov	r0, r3
 80046b0:	f001 fa26 	bl	8005b00 <xTaskCheckForTimeOut>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d124      	bne.n	8004704 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80046ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046bc:	f000 fcd2 	bl	8005064 <prvIsQueueFull>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d018      	beq.n	80046f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80046c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c8:	3310      	adds	r3, #16
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	4611      	mov	r1, r2
 80046ce:	4618      	mov	r0, r3
 80046d0:	f001 f97a 	bl	80059c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80046d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046d6:	f000 fc5d 	bl	8004f94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80046da:	f000 ffa3 	bl	8005624 <xTaskResumeAll>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f47f af7c 	bne.w	80045de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80046e6:	4b0c      	ldr	r3, [pc, #48]	; (8004718 <xQueueGenericSend+0x1f8>)
 80046e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ec:	601a      	str	r2, [r3, #0]
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	e772      	b.n	80045de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80046f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046fa:	f000 fc4b 	bl	8004f94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046fe:	f000 ff91 	bl	8005624 <xTaskResumeAll>
 8004702:	e76c      	b.n	80045de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004704:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004706:	f000 fc45 	bl	8004f94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800470a:	f000 ff8b 	bl	8005624 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800470e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004710:	4618      	mov	r0, r3
 8004712:	3738      	adds	r7, #56	; 0x38
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	e000ed04 	.word	0xe000ed04

0800471c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b090      	sub	sp, #64	; 0x40
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
 8004728:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800472e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10a      	bne.n	800474a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004738:	f383 8811 	msr	BASEPRI, r3
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	f3bf 8f4f 	dsb	sy
 8004744:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004746:	bf00      	nop
 8004748:	e7fe      	b.n	8004748 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d103      	bne.n	8004758 <xQueueGenericSendFromISR+0x3c>
 8004750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <xQueueGenericSendFromISR+0x40>
 8004758:	2301      	movs	r3, #1
 800475a:	e000      	b.n	800475e <xQueueGenericSendFromISR+0x42>
 800475c:	2300      	movs	r3, #0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10a      	bne.n	8004778 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004766:	f383 8811 	msr	BASEPRI, r3
 800476a:	f3bf 8f6f 	isb	sy
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004774:	bf00      	nop
 8004776:	e7fe      	b.n	8004776 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	2b02      	cmp	r3, #2
 800477c:	d103      	bne.n	8004786 <xQueueGenericSendFromISR+0x6a>
 800477e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004782:	2b01      	cmp	r3, #1
 8004784:	d101      	bne.n	800478a <xQueueGenericSendFromISR+0x6e>
 8004786:	2301      	movs	r3, #1
 8004788:	e000      	b.n	800478c <xQueueGenericSendFromISR+0x70>
 800478a:	2300      	movs	r3, #0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10a      	bne.n	80047a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004794:	f383 8811 	msr	BASEPRI, r3
 8004798:	f3bf 8f6f 	isb	sy
 800479c:	f3bf 8f4f 	dsb	sy
 80047a0:	623b      	str	r3, [r7, #32]
}
 80047a2:	bf00      	nop
 80047a4:	e7fe      	b.n	80047a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047a6:	f002 f907 	bl	80069b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80047aa:	f3ef 8211 	mrs	r2, BASEPRI
 80047ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	61fa      	str	r2, [r7, #28]
 80047c0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80047c2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047c4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d302      	bcc.n	80047d8 <xQueueGenericSendFromISR+0xbc>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d12f      	bne.n	8004838 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80047d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	68b9      	ldr	r1, [r7, #8]
 80047ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80047ee:	f000 fb41 	bl	8004e74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80047f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80047f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fa:	d112      	bne.n	8004822 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	2b00      	cmp	r3, #0
 8004802:	d016      	beq.n	8004832 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004806:	3324      	adds	r3, #36	; 0x24
 8004808:	4618      	mov	r0, r3
 800480a:	f001 f901 	bl	8005a10 <xTaskRemoveFromEventList>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00e      	beq.n	8004832 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00b      	beq.n	8004832 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	601a      	str	r2, [r3, #0]
 8004820:	e007      	b.n	8004832 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004822:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004826:	3301      	adds	r3, #1
 8004828:	b2db      	uxtb	r3, r3
 800482a:	b25a      	sxtb	r2, r3
 800482c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004832:	2301      	movs	r3, #1
 8004834:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004836:	e001      	b.n	800483c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004838:	2300      	movs	r3, #0
 800483a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800483c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800483e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004846:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800484a:	4618      	mov	r0, r3
 800484c:	3740      	adds	r7, #64	; 0x40
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b08e      	sub	sp, #56	; 0x38
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
 800485a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10a      	bne.n	800487c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486a:	f383 8811 	msr	BASEPRI, r3
 800486e:	f3bf 8f6f 	isb	sy
 8004872:	f3bf 8f4f 	dsb	sy
 8004876:	623b      	str	r3, [r7, #32]
}
 8004878:	bf00      	nop
 800487a:	e7fe      	b.n	800487a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800487c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00a      	beq.n	800489a <xQueueGiveFromISR+0x48>
	__asm volatile
 8004884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004888:	f383 8811 	msr	BASEPRI, r3
 800488c:	f3bf 8f6f 	isb	sy
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	61fb      	str	r3, [r7, #28]
}
 8004896:	bf00      	nop
 8004898:	e7fe      	b.n	8004898 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800489a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d103      	bne.n	80048aa <xQueueGiveFromISR+0x58>
 80048a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <xQueueGiveFromISR+0x5c>
 80048aa:	2301      	movs	r3, #1
 80048ac:	e000      	b.n	80048b0 <xQueueGiveFromISR+0x5e>
 80048ae:	2300      	movs	r3, #0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10a      	bne.n	80048ca <xQueueGiveFromISR+0x78>
	__asm volatile
 80048b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b8:	f383 8811 	msr	BASEPRI, r3
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	61bb      	str	r3, [r7, #24]
}
 80048c6:	bf00      	nop
 80048c8:	e7fe      	b.n	80048c8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80048ca:	f002 f875 	bl	80069b8 <vPortValidateInterruptPriority>
	__asm volatile
 80048ce:	f3ef 8211 	mrs	r2, BASEPRI
 80048d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	617a      	str	r2, [r7, #20]
 80048e4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80048e6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80048f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d22b      	bcs.n	8004952 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80048fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004900:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004906:	1c5a      	adds	r2, r3, #1
 8004908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800490c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004914:	d112      	bne.n	800493c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491a:	2b00      	cmp	r3, #0
 800491c:	d016      	beq.n	800494c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800491e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004920:	3324      	adds	r3, #36	; 0x24
 8004922:	4618      	mov	r0, r3
 8004924:	f001 f874 	bl	8005a10 <xTaskRemoveFromEventList>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00e      	beq.n	800494c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00b      	beq.n	800494c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	2201      	movs	r2, #1
 8004938:	601a      	str	r2, [r3, #0]
 800493a:	e007      	b.n	800494c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800493c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004940:	3301      	adds	r3, #1
 8004942:	b2db      	uxtb	r3, r3
 8004944:	b25a      	sxtb	r2, r3
 8004946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800494c:	2301      	movs	r3, #1
 800494e:	637b      	str	r3, [r7, #52]	; 0x34
 8004950:	e001      	b.n	8004956 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004952:	2300      	movs	r3, #0
 8004954:	637b      	str	r3, [r7, #52]	; 0x34
 8004956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004958:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f383 8811 	msr	BASEPRI, r3
}
 8004960:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004964:	4618      	mov	r0, r3
 8004966:	3738      	adds	r7, #56	; 0x38
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b08c      	sub	sp, #48	; 0x30
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004978:	2300      	movs	r3, #0
 800497a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10a      	bne.n	800499c <xQueueReceive+0x30>
	__asm volatile
 8004986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498a:	f383 8811 	msr	BASEPRI, r3
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	623b      	str	r3, [r7, #32]
}
 8004998:	bf00      	nop
 800499a:	e7fe      	b.n	800499a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d103      	bne.n	80049aa <xQueueReceive+0x3e>
 80049a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <xQueueReceive+0x42>
 80049aa:	2301      	movs	r3, #1
 80049ac:	e000      	b.n	80049b0 <xQueueReceive+0x44>
 80049ae:	2300      	movs	r3, #0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10a      	bne.n	80049ca <xQueueReceive+0x5e>
	__asm volatile
 80049b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b8:	f383 8811 	msr	BASEPRI, r3
 80049bc:	f3bf 8f6f 	isb	sy
 80049c0:	f3bf 8f4f 	dsb	sy
 80049c4:	61fb      	str	r3, [r7, #28]
}
 80049c6:	bf00      	nop
 80049c8:	e7fe      	b.n	80049c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049ca:	f001 f9dd 	bl	8005d88 <xTaskGetSchedulerState>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d102      	bne.n	80049da <xQueueReceive+0x6e>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <xQueueReceive+0x72>
 80049da:	2301      	movs	r3, #1
 80049dc:	e000      	b.n	80049e0 <xQueueReceive+0x74>
 80049de:	2300      	movs	r3, #0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10a      	bne.n	80049fa <xQueueReceive+0x8e>
	__asm volatile
 80049e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e8:	f383 8811 	msr	BASEPRI, r3
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	61bb      	str	r3, [r7, #24]
}
 80049f6:	bf00      	nop
 80049f8:	e7fe      	b.n	80049f8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049fa:	f001 fefb 	bl	80067f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a02:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d01f      	beq.n	8004a4a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a0a:	68b9      	ldr	r1, [r7, #8]
 8004a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a0e:	f000 fa9b 	bl	8004f48 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	1e5a      	subs	r2, r3, #1
 8004a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a18:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00f      	beq.n	8004a42 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a24:	3310      	adds	r3, #16
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 fff2 	bl	8005a10 <xTaskRemoveFromEventList>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d007      	beq.n	8004a42 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a32:	4b3d      	ldr	r3, [pc, #244]	; (8004b28 <xQueueReceive+0x1bc>)
 8004a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a42:	f001 ff07 	bl	8006854 <vPortExitCritical>
				return pdPASS;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e069      	b.n	8004b1e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d103      	bne.n	8004a58 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a50:	f001 ff00 	bl	8006854 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a54:	2300      	movs	r3, #0
 8004a56:	e062      	b.n	8004b1e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d106      	bne.n	8004a6c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a5e:	f107 0310 	add.w	r3, r7, #16
 8004a62:	4618      	mov	r0, r3
 8004a64:	f001 f836 	bl	8005ad4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a6c:	f001 fef2 	bl	8006854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a70:	f000 fdca 	bl	8005608 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a74:	f001 febe 	bl	80067f4 <vPortEnterCritical>
 8004a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a7e:	b25b      	sxtb	r3, r3
 8004a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a84:	d103      	bne.n	8004a8e <xQueueReceive+0x122>
 8004a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a94:	b25b      	sxtb	r3, r3
 8004a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a9a:	d103      	bne.n	8004aa4 <xQueueReceive+0x138>
 8004a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004aa4:	f001 fed6 	bl	8006854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004aa8:	1d3a      	adds	r2, r7, #4
 8004aaa:	f107 0310 	add.w	r3, r7, #16
 8004aae:	4611      	mov	r1, r2
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f001 f825 	bl	8005b00 <xTaskCheckForTimeOut>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d123      	bne.n	8004b04 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004abc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004abe:	f000 fabb 	bl	8005038 <prvIsQueueEmpty>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d017      	beq.n	8004af8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aca:	3324      	adds	r3, #36	; 0x24
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	4611      	mov	r1, r2
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 ff79 	bl	80059c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ad6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ad8:	f000 fa5c 	bl	8004f94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004adc:	f000 fda2 	bl	8005624 <xTaskResumeAll>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d189      	bne.n	80049fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004ae6:	4b10      	ldr	r3, [pc, #64]	; (8004b28 <xQueueReceive+0x1bc>)
 8004ae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	e780      	b.n	80049fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004af8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004afa:	f000 fa4b 	bl	8004f94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004afe:	f000 fd91 	bl	8005624 <xTaskResumeAll>
 8004b02:	e77a      	b.n	80049fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004b04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b06:	f000 fa45 	bl	8004f94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b0a:	f000 fd8b 	bl	8005624 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b10:	f000 fa92 	bl	8005038 <prvIsQueueEmpty>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f43f af6f 	beq.w	80049fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3730      	adds	r7, #48	; 0x30
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	e000ed04 	.word	0xe000ed04

08004b2c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08e      	sub	sp, #56	; 0x38
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b36:	2300      	movs	r3, #0
 8004b38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10a      	bne.n	8004b5e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4c:	f383 8811 	msr	BASEPRI, r3
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	623b      	str	r3, [r7, #32]
}
 8004b5a:	bf00      	nop
 8004b5c:	e7fe      	b.n	8004b5c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00a      	beq.n	8004b7c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6a:	f383 8811 	msr	BASEPRI, r3
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	61fb      	str	r3, [r7, #28]
}
 8004b78:	bf00      	nop
 8004b7a:	e7fe      	b.n	8004b7a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b7c:	f001 f904 	bl	8005d88 <xTaskGetSchedulerState>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d102      	bne.n	8004b8c <xQueueSemaphoreTake+0x60>
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <xQueueSemaphoreTake+0x64>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e000      	b.n	8004b92 <xQueueSemaphoreTake+0x66>
 8004b90:	2300      	movs	r3, #0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10a      	bne.n	8004bac <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9a:	f383 8811 	msr	BASEPRI, r3
 8004b9e:	f3bf 8f6f 	isb	sy
 8004ba2:	f3bf 8f4f 	dsb	sy
 8004ba6:	61bb      	str	r3, [r7, #24]
}
 8004ba8:	bf00      	nop
 8004baa:	e7fe      	b.n	8004baa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bac:	f001 fe22 	bl	80067f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d024      	beq.n	8004c06 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbe:	1e5a      	subs	r2, r3, #1
 8004bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d104      	bne.n	8004bd6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004bcc:	f001 fa84 	bl	80060d8 <pvTaskIncrementMutexHeldCount>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00f      	beq.n	8004bfe <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be0:	3310      	adds	r3, #16
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 ff14 	bl	8005a10 <xTaskRemoveFromEventList>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d007      	beq.n	8004bfe <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004bee:	4b54      	ldr	r3, [pc, #336]	; (8004d40 <xQueueSemaphoreTake+0x214>)
 8004bf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bf4:	601a      	str	r2, [r3, #0]
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004bfe:	f001 fe29 	bl	8006854 <vPortExitCritical>
				return pdPASS;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e097      	b.n	8004d36 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d111      	bne.n	8004c30 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00a      	beq.n	8004c28 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c16:	f383 8811 	msr	BASEPRI, r3
 8004c1a:	f3bf 8f6f 	isb	sy
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	617b      	str	r3, [r7, #20]
}
 8004c24:	bf00      	nop
 8004c26:	e7fe      	b.n	8004c26 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004c28:	f001 fe14 	bl	8006854 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	e082      	b.n	8004d36 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d106      	bne.n	8004c44 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c36:	f107 030c 	add.w	r3, r7, #12
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 ff4a 	bl	8005ad4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c40:	2301      	movs	r3, #1
 8004c42:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c44:	f001 fe06 	bl	8006854 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c48:	f000 fcde 	bl	8005608 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c4c:	f001 fdd2 	bl	80067f4 <vPortEnterCritical>
 8004c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c56:	b25b      	sxtb	r3, r3
 8004c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5c:	d103      	bne.n	8004c66 <xQueueSemaphoreTake+0x13a>
 8004c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c6c:	b25b      	sxtb	r3, r3
 8004c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c72:	d103      	bne.n	8004c7c <xQueueSemaphoreTake+0x150>
 8004c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c7c:	f001 fdea 	bl	8006854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c80:	463a      	mov	r2, r7
 8004c82:	f107 030c 	add.w	r3, r7, #12
 8004c86:	4611      	mov	r1, r2
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f000 ff39 	bl	8005b00 <xTaskCheckForTimeOut>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d132      	bne.n	8004cfa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c96:	f000 f9cf 	bl	8005038 <prvIsQueueEmpty>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d026      	beq.n	8004cee <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d109      	bne.n	8004cbc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004ca8:	f001 fda4 	bl	80067f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f001 f887 	bl	8005dc4 <xTaskPriorityInherit>
 8004cb6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004cb8:	f001 fdcc 	bl	8006854 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cbe:	3324      	adds	r3, #36	; 0x24
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	4611      	mov	r1, r2
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 fe7f 	bl	80059c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004cca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ccc:	f000 f962 	bl	8004f94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004cd0:	f000 fca8 	bl	8005624 <xTaskResumeAll>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f47f af68 	bne.w	8004bac <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004cdc:	4b18      	ldr	r3, [pc, #96]	; (8004d40 <xQueueSemaphoreTake+0x214>)
 8004cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	e75e      	b.n	8004bac <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004cee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cf0:	f000 f950 	bl	8004f94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cf4:	f000 fc96 	bl	8005624 <xTaskResumeAll>
 8004cf8:	e758      	b.n	8004bac <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004cfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cfc:	f000 f94a 	bl	8004f94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d00:	f000 fc90 	bl	8005624 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d06:	f000 f997 	bl	8005038 <prvIsQueueEmpty>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f43f af4d 	beq.w	8004bac <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00d      	beq.n	8004d34 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004d18:	f001 fd6c 	bl	80067f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004d1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d1e:	f000 f891 	bl	8004e44 <prvGetDisinheritPriorityAfterTimeout>
 8004d22:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f001 f946 	bl	8005fbc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004d30:	f001 fd90 	bl	8006854 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3738      	adds	r7, #56	; 0x38
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	e000ed04 	.word	0xe000ed04

08004d44 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b08e      	sub	sp, #56	; 0x38
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10a      	bne.n	8004d70 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	623b      	str	r3, [r7, #32]
}
 8004d6c:	bf00      	nop
 8004d6e:	e7fe      	b.n	8004d6e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d103      	bne.n	8004d7e <xQueueReceiveFromISR+0x3a>
 8004d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <xQueueReceiveFromISR+0x3e>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e000      	b.n	8004d84 <xQueueReceiveFromISR+0x40>
 8004d82:	2300      	movs	r3, #0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10a      	bne.n	8004d9e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8c:	f383 8811 	msr	BASEPRI, r3
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	61fb      	str	r3, [r7, #28]
}
 8004d9a:	bf00      	nop
 8004d9c:	e7fe      	b.n	8004d9c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d9e:	f001 fe0b 	bl	80069b8 <vPortValidateInterruptPriority>
	__asm volatile
 8004da2:	f3ef 8211 	mrs	r2, BASEPRI
 8004da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004daa:	f383 8811 	msr	BASEPRI, r3
 8004dae:	f3bf 8f6f 	isb	sy
 8004db2:	f3bf 8f4f 	dsb	sy
 8004db6:	61ba      	str	r2, [r7, #24]
 8004db8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004dba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d02f      	beq.n	8004e2a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004dd4:	68b9      	ldr	r1, [r7, #8]
 8004dd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dd8:	f000 f8b6 	bl	8004f48 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dde:	1e5a      	subs	r2, r3, #1
 8004de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004de4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dec:	d112      	bne.n	8004e14 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d016      	beq.n	8004e24 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df8:	3310      	adds	r3, #16
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 fe08 	bl	8005a10 <xTaskRemoveFromEventList>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00e      	beq.n	8004e24 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00b      	beq.n	8004e24 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	601a      	str	r2, [r3, #0]
 8004e12:	e007      	b.n	8004e24 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e18:	3301      	adds	r3, #1
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	b25a      	sxtb	r2, r3
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004e24:	2301      	movs	r3, #1
 8004e26:	637b      	str	r3, [r7, #52]	; 0x34
 8004e28:	e001      	b.n	8004e2e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e30:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	f383 8811 	msr	BASEPRI, r3
}
 8004e38:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3738      	adds	r7, #56	; 0x38
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d006      	beq.n	8004e62 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f1c3 0307 	rsb	r3, r3, #7
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	e001      	b.n	8004e66 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004e62:	2300      	movs	r3, #0
 8004e64:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004e66:	68fb      	ldr	r3, [r7, #12]
	}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e80:	2300      	movs	r3, #0
 8004e82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10d      	bne.n	8004eae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d14d      	bne.n	8004f36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f001 f806 	bl	8005eb0 <xTaskPriorityDisinherit>
 8004ea4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	609a      	str	r2, [r3, #8]
 8004eac:	e043      	b.n	8004f36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d119      	bne.n	8004ee8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6858      	ldr	r0, [r3, #4]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	68b9      	ldr	r1, [r7, #8]
 8004ec0:	f001 ffce 	bl	8006e60 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ecc:	441a      	add	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d32b      	bcc.n	8004f36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	605a      	str	r2, [r3, #4]
 8004ee6:	e026      	b.n	8004f36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	68d8      	ldr	r0, [r3, #12]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	68b9      	ldr	r1, [r7, #8]
 8004ef4:	f001 ffb4 	bl	8006e60 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	68da      	ldr	r2, [r3, #12]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f00:	425b      	negs	r3, r3
 8004f02:	441a      	add	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	68da      	ldr	r2, [r3, #12]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d207      	bcs.n	8004f24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1c:	425b      	negs	r3, r3
 8004f1e:	441a      	add	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d105      	bne.n	8004f36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d002      	beq.n	8004f36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	1c5a      	adds	r2, r3, #1
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004f3e:	697b      	ldr	r3, [r7, #20]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3718      	adds	r7, #24
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d018      	beq.n	8004f8c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68da      	ldr	r2, [r3, #12]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f62:	441a      	add	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	68da      	ldr	r2, [r3, #12]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d303      	bcc.n	8004f7c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68d9      	ldr	r1, [r3, #12]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f84:	461a      	mov	r2, r3
 8004f86:	6838      	ldr	r0, [r7, #0]
 8004f88:	f001 ff6a 	bl	8006e60 <memcpy>
	}
}
 8004f8c:	bf00      	nop
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f9c:	f001 fc2a 	bl	80067f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fa6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fa8:	e011      	b.n	8004fce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d012      	beq.n	8004fd8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	3324      	adds	r3, #36	; 0x24
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 fd2a 	bl	8005a10 <xTaskRemoveFromEventList>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004fc2:	f000 fdff 	bl	8005bc4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004fc6:	7bfb      	ldrb	r3, [r7, #15]
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	dce9      	bgt.n	8004faa <prvUnlockQueue+0x16>
 8004fd6:	e000      	b.n	8004fda <prvUnlockQueue+0x46>
					break;
 8004fd8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	22ff      	movs	r2, #255	; 0xff
 8004fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004fe2:	f001 fc37 	bl	8006854 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004fe6:	f001 fc05 	bl	80067f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ff0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ff2:	e011      	b.n	8005018 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d012      	beq.n	8005022 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3310      	adds	r3, #16
 8005000:	4618      	mov	r0, r3
 8005002:	f000 fd05 	bl	8005a10 <xTaskRemoveFromEventList>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800500c:	f000 fdda 	bl	8005bc4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005010:	7bbb      	ldrb	r3, [r7, #14]
 8005012:	3b01      	subs	r3, #1
 8005014:	b2db      	uxtb	r3, r3
 8005016:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005018:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800501c:	2b00      	cmp	r3, #0
 800501e:	dce9      	bgt.n	8004ff4 <prvUnlockQueue+0x60>
 8005020:	e000      	b.n	8005024 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005022:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	22ff      	movs	r2, #255	; 0xff
 8005028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800502c:	f001 fc12 	bl	8006854 <vPortExitCritical>
}
 8005030:	bf00      	nop
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005040:	f001 fbd8 	bl	80067f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005048:	2b00      	cmp	r3, #0
 800504a:	d102      	bne.n	8005052 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800504c:	2301      	movs	r3, #1
 800504e:	60fb      	str	r3, [r7, #12]
 8005050:	e001      	b.n	8005056 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005052:	2300      	movs	r3, #0
 8005054:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005056:	f001 fbfd 	bl	8006854 <vPortExitCritical>

	return xReturn;
 800505a:	68fb      	ldr	r3, [r7, #12]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800506c:	f001 fbc2 	bl	80067f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005078:	429a      	cmp	r2, r3
 800507a:	d102      	bne.n	8005082 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800507c:	2301      	movs	r3, #1
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	e001      	b.n	8005086 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005082:	2300      	movs	r3, #0
 8005084:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005086:	f001 fbe5 	bl	8006854 <vPortExitCritical>

	return xReturn;
 800508a:	68fb      	ldr	r3, [r7, #12]
}
 800508c:	4618      	mov	r0, r3
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005094:	b580      	push	{r7, lr}
 8005096:	b08e      	sub	sp, #56	; 0x38
 8005098:	af04      	add	r7, sp, #16
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
 80050a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80050a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10a      	bne.n	80050be <xTaskCreateStatic+0x2a>
	__asm volatile
 80050a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ac:	f383 8811 	msr	BASEPRI, r3
 80050b0:	f3bf 8f6f 	isb	sy
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	623b      	str	r3, [r7, #32]
}
 80050ba:	bf00      	nop
 80050bc:	e7fe      	b.n	80050bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80050be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10a      	bne.n	80050da <xTaskCreateStatic+0x46>
	__asm volatile
 80050c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	61fb      	str	r3, [r7, #28]
}
 80050d6:	bf00      	nop
 80050d8:	e7fe      	b.n	80050d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80050da:	2354      	movs	r3, #84	; 0x54
 80050dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	2b54      	cmp	r3, #84	; 0x54
 80050e2:	d00a      	beq.n	80050fa <xTaskCreateStatic+0x66>
	__asm volatile
 80050e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e8:	f383 8811 	msr	BASEPRI, r3
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	61bb      	str	r3, [r7, #24]
}
 80050f6:	bf00      	nop
 80050f8:	e7fe      	b.n	80050f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80050fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d01e      	beq.n	8005140 <xTaskCreateStatic+0xac>
 8005102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005104:	2b00      	cmp	r3, #0
 8005106:	d01b      	beq.n	8005140 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005110:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	2202      	movs	r2, #2
 8005116:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800511a:	2300      	movs	r3, #0
 800511c:	9303      	str	r3, [sp, #12]
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	9302      	str	r3, [sp, #8]
 8005122:	f107 0314 	add.w	r3, r7, #20
 8005126:	9301      	str	r3, [sp, #4]
 8005128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	68b9      	ldr	r1, [r7, #8]
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f000 f850 	bl	80051d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005138:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800513a:	f000 f8d5 	bl	80052e8 <prvAddNewTaskToReadyList>
 800513e:	e001      	b.n	8005144 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005140:	2300      	movs	r3, #0
 8005142:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005144:	697b      	ldr	r3, [r7, #20]
	}
 8005146:	4618      	mov	r0, r3
 8005148:	3728      	adds	r7, #40	; 0x28
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800514e:	b580      	push	{r7, lr}
 8005150:	b08c      	sub	sp, #48	; 0x30
 8005152:	af04      	add	r7, sp, #16
 8005154:	60f8      	str	r0, [r7, #12]
 8005156:	60b9      	str	r1, [r7, #8]
 8005158:	603b      	str	r3, [r7, #0]
 800515a:	4613      	mov	r3, r2
 800515c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800515e:	88fb      	ldrh	r3, [r7, #6]
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4618      	mov	r0, r3
 8005164:	f001 fc68 	bl	8006a38 <pvPortMalloc>
 8005168:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00e      	beq.n	800518e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005170:	2054      	movs	r0, #84	; 0x54
 8005172:	f001 fc61 	bl	8006a38 <pvPortMalloc>
 8005176:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	631a      	str	r2, [r3, #48]	; 0x30
 8005184:	e005      	b.n	8005192 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005186:	6978      	ldr	r0, [r7, #20]
 8005188:	f001 fd22 	bl	8006bd0 <vPortFree>
 800518c:	e001      	b.n	8005192 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800518e:	2300      	movs	r3, #0
 8005190:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d017      	beq.n	80051c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80051a0:	88fa      	ldrh	r2, [r7, #6]
 80051a2:	2300      	movs	r3, #0
 80051a4:	9303      	str	r3, [sp, #12]
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	9302      	str	r3, [sp, #8]
 80051aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ac:	9301      	str	r3, [sp, #4]
 80051ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	68b9      	ldr	r1, [r7, #8]
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f000 f80e 	bl	80051d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051bc:	69f8      	ldr	r0, [r7, #28]
 80051be:	f000 f893 	bl	80052e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051c2:	2301      	movs	r3, #1
 80051c4:	61bb      	str	r3, [r7, #24]
 80051c6:	e002      	b.n	80051ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051c8:	f04f 33ff 	mov.w	r3, #4294967295
 80051cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051ce:	69bb      	ldr	r3, [r7, #24]
	}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3720      	adds	r7, #32
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b088      	sub	sp, #32
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
 80051e4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80051e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80051f0:	3b01      	subs	r3, #1
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	f023 0307 	bic.w	r3, r3, #7
 80051fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	f003 0307 	and.w	r3, r3, #7
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00a      	beq.n	8005220 <prvInitialiseNewTask+0x48>
	__asm volatile
 800520a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520e:	f383 8811 	msr	BASEPRI, r3
 8005212:	f3bf 8f6f 	isb	sy
 8005216:	f3bf 8f4f 	dsb	sy
 800521a:	617b      	str	r3, [r7, #20]
}
 800521c:	bf00      	nop
 800521e:	e7fe      	b.n	800521e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d01f      	beq.n	8005266 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005226:	2300      	movs	r3, #0
 8005228:	61fb      	str	r3, [r7, #28]
 800522a:	e012      	b.n	8005252 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	4413      	add	r3, r2
 8005232:	7819      	ldrb	r1, [r3, #0]
 8005234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	4413      	add	r3, r2
 800523a:	3334      	adds	r3, #52	; 0x34
 800523c:	460a      	mov	r2, r1
 800523e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	4413      	add	r3, r2
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d006      	beq.n	800525a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	3301      	adds	r3, #1
 8005250:	61fb      	str	r3, [r7, #28]
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	2b0f      	cmp	r3, #15
 8005256:	d9e9      	bls.n	800522c <prvInitialiseNewTask+0x54>
 8005258:	e000      	b.n	800525c <prvInitialiseNewTask+0x84>
			{
				break;
 800525a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800525c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525e:	2200      	movs	r2, #0
 8005260:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005264:	e003      	b.n	800526e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005268:	2200      	movs	r2, #0
 800526a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800526e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005270:	2b06      	cmp	r3, #6
 8005272:	d901      	bls.n	8005278 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005274:	2306      	movs	r3, #6
 8005276:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800527c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800527e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005280:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005282:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005286:	2200      	movs	r2, #0
 8005288:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800528a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528c:	3304      	adds	r3, #4
 800528e:	4618      	mov	r0, r3
 8005290:	f7fe ff2c 	bl	80040ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005296:	3318      	adds	r3, #24
 8005298:	4618      	mov	r0, r3
 800529a:	f7fe ff27 	bl	80040ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800529e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	f1c3 0207 	rsb	r2, r3, #7
 80052aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b6:	2200      	movs	r2, #0
 80052b8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	68f9      	ldr	r1, [r7, #12]
 80052c6:	69b8      	ldr	r0, [r7, #24]
 80052c8:	f001 f96a 	bl	80065a0 <pxPortInitialiseStack>
 80052cc:	4602      	mov	r2, r0
 80052ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80052d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d002      	beq.n	80052de <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052de:	bf00      	nop
 80052e0:	3720      	adds	r7, #32
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
	...

080052e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80052f0:	f001 fa80 	bl	80067f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80052f4:	4b2a      	ldr	r3, [pc, #168]	; (80053a0 <prvAddNewTaskToReadyList+0xb8>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	3301      	adds	r3, #1
 80052fa:	4a29      	ldr	r2, [pc, #164]	; (80053a0 <prvAddNewTaskToReadyList+0xb8>)
 80052fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80052fe:	4b29      	ldr	r3, [pc, #164]	; (80053a4 <prvAddNewTaskToReadyList+0xbc>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d109      	bne.n	800531a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005306:	4a27      	ldr	r2, [pc, #156]	; (80053a4 <prvAddNewTaskToReadyList+0xbc>)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800530c:	4b24      	ldr	r3, [pc, #144]	; (80053a0 <prvAddNewTaskToReadyList+0xb8>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d110      	bne.n	8005336 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005314:	f000 fc7a 	bl	8005c0c <prvInitialiseTaskLists>
 8005318:	e00d      	b.n	8005336 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800531a:	4b23      	ldr	r3, [pc, #140]	; (80053a8 <prvAddNewTaskToReadyList+0xc0>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d109      	bne.n	8005336 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005322:	4b20      	ldr	r3, [pc, #128]	; (80053a4 <prvAddNewTaskToReadyList+0xbc>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532c:	429a      	cmp	r2, r3
 800532e:	d802      	bhi.n	8005336 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005330:	4a1c      	ldr	r2, [pc, #112]	; (80053a4 <prvAddNewTaskToReadyList+0xbc>)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005336:	4b1d      	ldr	r3, [pc, #116]	; (80053ac <prvAddNewTaskToReadyList+0xc4>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	3301      	adds	r3, #1
 800533c:	4a1b      	ldr	r2, [pc, #108]	; (80053ac <prvAddNewTaskToReadyList+0xc4>)
 800533e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005344:	2201      	movs	r2, #1
 8005346:	409a      	lsls	r2, r3
 8005348:	4b19      	ldr	r3, [pc, #100]	; (80053b0 <prvAddNewTaskToReadyList+0xc8>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4313      	orrs	r3, r2
 800534e:	4a18      	ldr	r2, [pc, #96]	; (80053b0 <prvAddNewTaskToReadyList+0xc8>)
 8005350:	6013      	str	r3, [r2, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005356:	4613      	mov	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4a15      	ldr	r2, [pc, #84]	; (80053b4 <prvAddNewTaskToReadyList+0xcc>)
 8005360:	441a      	add	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	3304      	adds	r3, #4
 8005366:	4619      	mov	r1, r3
 8005368:	4610      	mov	r0, r2
 800536a:	f7fe fecc 	bl	8004106 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800536e:	f001 fa71 	bl	8006854 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005372:	4b0d      	ldr	r3, [pc, #52]	; (80053a8 <prvAddNewTaskToReadyList+0xc0>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00e      	beq.n	8005398 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800537a:	4b0a      	ldr	r3, [pc, #40]	; (80053a4 <prvAddNewTaskToReadyList+0xbc>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005384:	429a      	cmp	r2, r3
 8005386:	d207      	bcs.n	8005398 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005388:	4b0b      	ldr	r3, [pc, #44]	; (80053b8 <prvAddNewTaskToReadyList+0xd0>)
 800538a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800538e:	601a      	str	r2, [r3, #0]
 8005390:	f3bf 8f4f 	dsb	sy
 8005394:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005398:	bf00      	nop
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	20000538 	.word	0x20000538
 80053a4:	20000438 	.word	0x20000438
 80053a8:	20000544 	.word	0x20000544
 80053ac:	20000554 	.word	0x20000554
 80053b0:	20000540 	.word	0x20000540
 80053b4:	2000043c 	.word	0x2000043c
 80053b8:	e000ed04 	.word	0xe000ed04

080053bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80053c4:	2300      	movs	r3, #0
 80053c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d017      	beq.n	80053fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80053ce:	4b13      	ldr	r3, [pc, #76]	; (800541c <vTaskDelay+0x60>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00a      	beq.n	80053ec <vTaskDelay+0x30>
	__asm volatile
 80053d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053da:	f383 8811 	msr	BASEPRI, r3
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	60bb      	str	r3, [r7, #8]
}
 80053e8:	bf00      	nop
 80053ea:	e7fe      	b.n	80053ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80053ec:	f000 f90c 	bl	8005608 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80053f0:	2100      	movs	r1, #0
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f001 f86e 	bl	80064d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80053f8:	f000 f914 	bl	8005624 <xTaskResumeAll>
 80053fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d107      	bne.n	8005414 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005404:	4b06      	ldr	r3, [pc, #24]	; (8005420 <vTaskDelay+0x64>)
 8005406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005414:	bf00      	nop
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	20000560 	.word	0x20000560
 8005420:	e000ed04 	.word	0xe000ed04

08005424 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800542c:	f001 f9e2 	bl	80067f4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d102      	bne.n	800543c <vTaskSuspend+0x18>
 8005436:	4b3c      	ldr	r3, [pc, #240]	; (8005528 <vTaskSuspend+0x104>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	e000      	b.n	800543e <vTaskSuspend+0x1a>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	3304      	adds	r3, #4
 8005444:	4618      	mov	r0, r3
 8005446:	f7fe febb 	bl	80041c0 <uxListRemove>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d115      	bne.n	800547c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005454:	4935      	ldr	r1, [pc, #212]	; (800552c <vTaskSuspend+0x108>)
 8005456:	4613      	mov	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	440b      	add	r3, r1
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10a      	bne.n	800547c <vTaskSuspend+0x58>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546a:	2201      	movs	r2, #1
 800546c:	fa02 f303 	lsl.w	r3, r2, r3
 8005470:	43da      	mvns	r2, r3
 8005472:	4b2f      	ldr	r3, [pc, #188]	; (8005530 <vTaskSuspend+0x10c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4013      	ands	r3, r2
 8005478:	4a2d      	ldr	r2, [pc, #180]	; (8005530 <vTaskSuspend+0x10c>)
 800547a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005480:	2b00      	cmp	r3, #0
 8005482:	d004      	beq.n	800548e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	3318      	adds	r3, #24
 8005488:	4618      	mov	r0, r3
 800548a:	f7fe fe99 	bl	80041c0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	3304      	adds	r3, #4
 8005492:	4619      	mov	r1, r3
 8005494:	4827      	ldr	r0, [pc, #156]	; (8005534 <vTaskSuspend+0x110>)
 8005496:	f7fe fe36 	bl	8004106 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d103      	bne.n	80054ae <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80054ae:	f001 f9d1 	bl	8006854 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80054b2:	4b21      	ldr	r3, [pc, #132]	; (8005538 <vTaskSuspend+0x114>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d005      	beq.n	80054c6 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80054ba:	f001 f99b 	bl	80067f4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80054be:	f000 fc43 	bl	8005d48 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80054c2:	f001 f9c7 	bl	8006854 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80054c6:	4b18      	ldr	r3, [pc, #96]	; (8005528 <vTaskSuspend+0x104>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d127      	bne.n	8005520 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 80054d0:	4b19      	ldr	r3, [pc, #100]	; (8005538 <vTaskSuspend+0x114>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d017      	beq.n	8005508 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80054d8:	4b18      	ldr	r3, [pc, #96]	; (800553c <vTaskSuspend+0x118>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00a      	beq.n	80054f6 <vTaskSuspend+0xd2>
	__asm volatile
 80054e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	60bb      	str	r3, [r7, #8]
}
 80054f2:	bf00      	nop
 80054f4:	e7fe      	b.n	80054f4 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80054f6:	4b12      	ldr	r3, [pc, #72]	; (8005540 <vTaskSuspend+0x11c>)
 80054f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005506:	e00b      	b.n	8005520 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8005508:	4b0a      	ldr	r3, [pc, #40]	; (8005534 <vTaskSuspend+0x110>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	4b0d      	ldr	r3, [pc, #52]	; (8005544 <vTaskSuspend+0x120>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	429a      	cmp	r2, r3
 8005512:	d103      	bne.n	800551c <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8005514:	4b04      	ldr	r3, [pc, #16]	; (8005528 <vTaskSuspend+0x104>)
 8005516:	2200      	movs	r2, #0
 8005518:	601a      	str	r2, [r3, #0]
	}
 800551a:	e001      	b.n	8005520 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800551c:	f000 f9f8 	bl	8005910 <vTaskSwitchContext>
	}
 8005520:	bf00      	nop
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	20000438 	.word	0x20000438
 800552c:	2000043c 	.word	0x2000043c
 8005530:	20000540 	.word	0x20000540
 8005534:	20000524 	.word	0x20000524
 8005538:	20000544 	.word	0x20000544
 800553c:	20000560 	.word	0x20000560
 8005540:	e000ed04 	.word	0xe000ed04
 8005544:	20000538 	.word	0x20000538

08005548 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b08a      	sub	sp, #40	; 0x28
 800554c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800554e:	2300      	movs	r3, #0
 8005550:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005552:	2300      	movs	r3, #0
 8005554:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005556:	463a      	mov	r2, r7
 8005558:	1d39      	adds	r1, r7, #4
 800555a:	f107 0308 	add.w	r3, r7, #8
 800555e:	4618      	mov	r0, r3
 8005560:	f7fb f828 	bl	80005b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005564:	6839      	ldr	r1, [r7, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	9202      	str	r2, [sp, #8]
 800556c:	9301      	str	r3, [sp, #4]
 800556e:	2300      	movs	r3, #0
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	2300      	movs	r3, #0
 8005574:	460a      	mov	r2, r1
 8005576:	491e      	ldr	r1, [pc, #120]	; (80055f0 <vTaskStartScheduler+0xa8>)
 8005578:	481e      	ldr	r0, [pc, #120]	; (80055f4 <vTaskStartScheduler+0xac>)
 800557a:	f7ff fd8b 	bl	8005094 <xTaskCreateStatic>
 800557e:	4603      	mov	r3, r0
 8005580:	4a1d      	ldr	r2, [pc, #116]	; (80055f8 <vTaskStartScheduler+0xb0>)
 8005582:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005584:	4b1c      	ldr	r3, [pc, #112]	; (80055f8 <vTaskStartScheduler+0xb0>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800558c:	2301      	movs	r3, #1
 800558e:	617b      	str	r3, [r7, #20]
 8005590:	e001      	b.n	8005596 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005592:	2300      	movs	r3, #0
 8005594:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d116      	bne.n	80055ca <vTaskStartScheduler+0x82>
	__asm volatile
 800559c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a0:	f383 8811 	msr	BASEPRI, r3
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	613b      	str	r3, [r7, #16]
}
 80055ae:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80055b0:	4b12      	ldr	r3, [pc, #72]	; (80055fc <vTaskStartScheduler+0xb4>)
 80055b2:	f04f 32ff 	mov.w	r2, #4294967295
 80055b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055b8:	4b11      	ldr	r3, [pc, #68]	; (8005600 <vTaskStartScheduler+0xb8>)
 80055ba:	2201      	movs	r2, #1
 80055bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055be:	4b11      	ldr	r3, [pc, #68]	; (8005604 <vTaskStartScheduler+0xbc>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055c4:	f001 f874 	bl	80066b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055c8:	e00e      	b.n	80055e8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d0:	d10a      	bne.n	80055e8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80055d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d6:	f383 8811 	msr	BASEPRI, r3
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	60fb      	str	r3, [r7, #12]
}
 80055e4:	bf00      	nop
 80055e6:	e7fe      	b.n	80055e6 <vTaskStartScheduler+0x9e>
}
 80055e8:	bf00      	nop
 80055ea:	3718      	adds	r7, #24
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	08007a48 	.word	0x08007a48
 80055f4:	08005bdd 	.word	0x08005bdd
 80055f8:	2000055c 	.word	0x2000055c
 80055fc:	20000558 	.word	0x20000558
 8005600:	20000544 	.word	0x20000544
 8005604:	2000053c 	.word	0x2000053c

08005608 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005608:	b480      	push	{r7}
 800560a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800560c:	4b04      	ldr	r3, [pc, #16]	; (8005620 <vTaskSuspendAll+0x18>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	3301      	adds	r3, #1
 8005612:	4a03      	ldr	r2, [pc, #12]	; (8005620 <vTaskSuspendAll+0x18>)
 8005614:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005616:	bf00      	nop
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	20000560 	.word	0x20000560

08005624 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800562a:	2300      	movs	r3, #0
 800562c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800562e:	2300      	movs	r3, #0
 8005630:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005632:	4b41      	ldr	r3, [pc, #260]	; (8005738 <xTaskResumeAll+0x114>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10a      	bne.n	8005650 <xTaskResumeAll+0x2c>
	__asm volatile
 800563a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563e:	f383 8811 	msr	BASEPRI, r3
 8005642:	f3bf 8f6f 	isb	sy
 8005646:	f3bf 8f4f 	dsb	sy
 800564a:	603b      	str	r3, [r7, #0]
}
 800564c:	bf00      	nop
 800564e:	e7fe      	b.n	800564e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005650:	f001 f8d0 	bl	80067f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005654:	4b38      	ldr	r3, [pc, #224]	; (8005738 <xTaskResumeAll+0x114>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3b01      	subs	r3, #1
 800565a:	4a37      	ldr	r2, [pc, #220]	; (8005738 <xTaskResumeAll+0x114>)
 800565c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800565e:	4b36      	ldr	r3, [pc, #216]	; (8005738 <xTaskResumeAll+0x114>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d161      	bne.n	800572a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005666:	4b35      	ldr	r3, [pc, #212]	; (800573c <xTaskResumeAll+0x118>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d05d      	beq.n	800572a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800566e:	e02e      	b.n	80056ce <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005670:	4b33      	ldr	r3, [pc, #204]	; (8005740 <xTaskResumeAll+0x11c>)
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	3318      	adds	r3, #24
 800567c:	4618      	mov	r0, r3
 800567e:	f7fe fd9f 	bl	80041c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	3304      	adds	r3, #4
 8005686:	4618      	mov	r0, r3
 8005688:	f7fe fd9a 	bl	80041c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005690:	2201      	movs	r2, #1
 8005692:	409a      	lsls	r2, r3
 8005694:	4b2b      	ldr	r3, [pc, #172]	; (8005744 <xTaskResumeAll+0x120>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4313      	orrs	r3, r2
 800569a:	4a2a      	ldr	r2, [pc, #168]	; (8005744 <xTaskResumeAll+0x120>)
 800569c:	6013      	str	r3, [r2, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a2:	4613      	mov	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4a27      	ldr	r2, [pc, #156]	; (8005748 <xTaskResumeAll+0x124>)
 80056ac:	441a      	add	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	3304      	adds	r3, #4
 80056b2:	4619      	mov	r1, r3
 80056b4:	4610      	mov	r0, r2
 80056b6:	f7fe fd26 	bl	8004106 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056be:	4b23      	ldr	r3, [pc, #140]	; (800574c <xTaskResumeAll+0x128>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d302      	bcc.n	80056ce <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80056c8:	4b21      	ldr	r3, [pc, #132]	; (8005750 <xTaskResumeAll+0x12c>)
 80056ca:	2201      	movs	r2, #1
 80056cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056ce:	4b1c      	ldr	r3, [pc, #112]	; (8005740 <xTaskResumeAll+0x11c>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1cc      	bne.n	8005670 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056dc:	f000 fb34 	bl	8005d48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80056e0:	4b1c      	ldr	r3, [pc, #112]	; (8005754 <xTaskResumeAll+0x130>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d010      	beq.n	800570e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056ec:	f000 f858 	bl	80057a0 <xTaskIncrementTick>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d002      	beq.n	80056fc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80056f6:	4b16      	ldr	r3, [pc, #88]	; (8005750 <xTaskResumeAll+0x12c>)
 80056f8:	2201      	movs	r2, #1
 80056fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3b01      	subs	r3, #1
 8005700:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1f1      	bne.n	80056ec <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005708:	4b12      	ldr	r3, [pc, #72]	; (8005754 <xTaskResumeAll+0x130>)
 800570a:	2200      	movs	r2, #0
 800570c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800570e:	4b10      	ldr	r3, [pc, #64]	; (8005750 <xTaskResumeAll+0x12c>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d009      	beq.n	800572a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005716:	2301      	movs	r3, #1
 8005718:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800571a:	4b0f      	ldr	r3, [pc, #60]	; (8005758 <xTaskResumeAll+0x134>)
 800571c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800572a:	f001 f893 	bl	8006854 <vPortExitCritical>

	return xAlreadyYielded;
 800572e:	68bb      	ldr	r3, [r7, #8]
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	20000560 	.word	0x20000560
 800573c:	20000538 	.word	0x20000538
 8005740:	200004f8 	.word	0x200004f8
 8005744:	20000540 	.word	0x20000540
 8005748:	2000043c 	.word	0x2000043c
 800574c:	20000438 	.word	0x20000438
 8005750:	2000054c 	.word	0x2000054c
 8005754:	20000548 	.word	0x20000548
 8005758:	e000ed04 	.word	0xe000ed04

0800575c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005762:	4b05      	ldr	r3, [pc, #20]	; (8005778 <xTaskGetTickCount+0x1c>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005768:	687b      	ldr	r3, [r7, #4]
}
 800576a:	4618      	mov	r0, r3
 800576c:	370c      	adds	r7, #12
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	2000053c 	.word	0x2000053c

0800577c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005782:	f001 f919 	bl	80069b8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005786:	2300      	movs	r3, #0
 8005788:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800578a:	4b04      	ldr	r3, [pc, #16]	; (800579c <xTaskGetTickCountFromISR+0x20>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005790:	683b      	ldr	r3, [r7, #0]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	2000053c 	.word	0x2000053c

080057a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80057a6:	2300      	movs	r3, #0
 80057a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057aa:	4b4e      	ldr	r3, [pc, #312]	; (80058e4 <xTaskIncrementTick+0x144>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f040 808e 	bne.w	80058d0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80057b4:	4b4c      	ldr	r3, [pc, #304]	; (80058e8 <xTaskIncrementTick+0x148>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	3301      	adds	r3, #1
 80057ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80057bc:	4a4a      	ldr	r2, [pc, #296]	; (80058e8 <xTaskIncrementTick+0x148>)
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d120      	bne.n	800580a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80057c8:	4b48      	ldr	r3, [pc, #288]	; (80058ec <xTaskIncrementTick+0x14c>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <xTaskIncrementTick+0x48>
	__asm volatile
 80057d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d6:	f383 8811 	msr	BASEPRI, r3
 80057da:	f3bf 8f6f 	isb	sy
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	603b      	str	r3, [r7, #0]
}
 80057e4:	bf00      	nop
 80057e6:	e7fe      	b.n	80057e6 <xTaskIncrementTick+0x46>
 80057e8:	4b40      	ldr	r3, [pc, #256]	; (80058ec <xTaskIncrementTick+0x14c>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	60fb      	str	r3, [r7, #12]
 80057ee:	4b40      	ldr	r3, [pc, #256]	; (80058f0 <xTaskIncrementTick+0x150>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a3e      	ldr	r2, [pc, #248]	; (80058ec <xTaskIncrementTick+0x14c>)
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	4a3e      	ldr	r2, [pc, #248]	; (80058f0 <xTaskIncrementTick+0x150>)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6013      	str	r3, [r2, #0]
 80057fc:	4b3d      	ldr	r3, [pc, #244]	; (80058f4 <xTaskIncrementTick+0x154>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3301      	adds	r3, #1
 8005802:	4a3c      	ldr	r2, [pc, #240]	; (80058f4 <xTaskIncrementTick+0x154>)
 8005804:	6013      	str	r3, [r2, #0]
 8005806:	f000 fa9f 	bl	8005d48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800580a:	4b3b      	ldr	r3, [pc, #236]	; (80058f8 <xTaskIncrementTick+0x158>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	429a      	cmp	r2, r3
 8005812:	d348      	bcc.n	80058a6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005814:	4b35      	ldr	r3, [pc, #212]	; (80058ec <xTaskIncrementTick+0x14c>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d104      	bne.n	8005828 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800581e:	4b36      	ldr	r3, [pc, #216]	; (80058f8 <xTaskIncrementTick+0x158>)
 8005820:	f04f 32ff 	mov.w	r2, #4294967295
 8005824:	601a      	str	r2, [r3, #0]
					break;
 8005826:	e03e      	b.n	80058a6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005828:	4b30      	ldr	r3, [pc, #192]	; (80058ec <xTaskIncrementTick+0x14c>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	429a      	cmp	r2, r3
 800583e:	d203      	bcs.n	8005848 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005840:	4a2d      	ldr	r2, [pc, #180]	; (80058f8 <xTaskIncrementTick+0x158>)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005846:	e02e      	b.n	80058a6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	3304      	adds	r3, #4
 800584c:	4618      	mov	r0, r3
 800584e:	f7fe fcb7 	bl	80041c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005856:	2b00      	cmp	r3, #0
 8005858:	d004      	beq.n	8005864 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	3318      	adds	r3, #24
 800585e:	4618      	mov	r0, r3
 8005860:	f7fe fcae 	bl	80041c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005868:	2201      	movs	r2, #1
 800586a:	409a      	lsls	r2, r3
 800586c:	4b23      	ldr	r3, [pc, #140]	; (80058fc <xTaskIncrementTick+0x15c>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4313      	orrs	r3, r2
 8005872:	4a22      	ldr	r2, [pc, #136]	; (80058fc <xTaskIncrementTick+0x15c>)
 8005874:	6013      	str	r3, [r2, #0]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800587a:	4613      	mov	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4a1f      	ldr	r2, [pc, #124]	; (8005900 <xTaskIncrementTick+0x160>)
 8005884:	441a      	add	r2, r3
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	3304      	adds	r3, #4
 800588a:	4619      	mov	r1, r3
 800588c:	4610      	mov	r0, r2
 800588e:	f7fe fc3a 	bl	8004106 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005896:	4b1b      	ldr	r3, [pc, #108]	; (8005904 <xTaskIncrementTick+0x164>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589c:	429a      	cmp	r2, r3
 800589e:	d3b9      	bcc.n	8005814 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80058a0:	2301      	movs	r3, #1
 80058a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058a4:	e7b6      	b.n	8005814 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80058a6:	4b17      	ldr	r3, [pc, #92]	; (8005904 <xTaskIncrementTick+0x164>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ac:	4914      	ldr	r1, [pc, #80]	; (8005900 <xTaskIncrementTick+0x160>)
 80058ae:	4613      	mov	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	440b      	add	r3, r1
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d901      	bls.n	80058c2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80058be:	2301      	movs	r3, #1
 80058c0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80058c2:	4b11      	ldr	r3, [pc, #68]	; (8005908 <xTaskIncrementTick+0x168>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d007      	beq.n	80058da <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80058ca:	2301      	movs	r3, #1
 80058cc:	617b      	str	r3, [r7, #20]
 80058ce:	e004      	b.n	80058da <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80058d0:	4b0e      	ldr	r3, [pc, #56]	; (800590c <xTaskIncrementTick+0x16c>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3301      	adds	r3, #1
 80058d6:	4a0d      	ldr	r2, [pc, #52]	; (800590c <xTaskIncrementTick+0x16c>)
 80058d8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80058da:	697b      	ldr	r3, [r7, #20]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3718      	adds	r7, #24
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	20000560 	.word	0x20000560
 80058e8:	2000053c 	.word	0x2000053c
 80058ec:	200004f0 	.word	0x200004f0
 80058f0:	200004f4 	.word	0x200004f4
 80058f4:	20000550 	.word	0x20000550
 80058f8:	20000558 	.word	0x20000558
 80058fc:	20000540 	.word	0x20000540
 8005900:	2000043c 	.word	0x2000043c
 8005904:	20000438 	.word	0x20000438
 8005908:	2000054c 	.word	0x2000054c
 800590c:	20000548 	.word	0x20000548

08005910 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005916:	4b27      	ldr	r3, [pc, #156]	; (80059b4 <vTaskSwitchContext+0xa4>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800591e:	4b26      	ldr	r3, [pc, #152]	; (80059b8 <vTaskSwitchContext+0xa8>)
 8005920:	2201      	movs	r2, #1
 8005922:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005924:	e03f      	b.n	80059a6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005926:	4b24      	ldr	r3, [pc, #144]	; (80059b8 <vTaskSwitchContext+0xa8>)
 8005928:	2200      	movs	r2, #0
 800592a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800592c:	4b23      	ldr	r3, [pc, #140]	; (80059bc <vTaskSwitchContext+0xac>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	fab3 f383 	clz	r3, r3
 8005938:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800593a:	7afb      	ldrb	r3, [r7, #11]
 800593c:	f1c3 031f 	rsb	r3, r3, #31
 8005940:	617b      	str	r3, [r7, #20]
 8005942:	491f      	ldr	r1, [pc, #124]	; (80059c0 <vTaskSwitchContext+0xb0>)
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	4613      	mov	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	440b      	add	r3, r1
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10a      	bne.n	800596c <vTaskSwitchContext+0x5c>
	__asm volatile
 8005956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595a:	f383 8811 	msr	BASEPRI, r3
 800595e:	f3bf 8f6f 	isb	sy
 8005962:	f3bf 8f4f 	dsb	sy
 8005966:	607b      	str	r3, [r7, #4]
}
 8005968:	bf00      	nop
 800596a:	e7fe      	b.n	800596a <vTaskSwitchContext+0x5a>
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	4613      	mov	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	4a12      	ldr	r2, [pc, #72]	; (80059c0 <vTaskSwitchContext+0xb0>)
 8005978:	4413      	add	r3, r2
 800597a:	613b      	str	r3, [r7, #16]
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	605a      	str	r2, [r3, #4]
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	3308      	adds	r3, #8
 800598e:	429a      	cmp	r2, r3
 8005990:	d104      	bne.n	800599c <vTaskSwitchContext+0x8c>
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	605a      	str	r2, [r3, #4]
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	4a08      	ldr	r2, [pc, #32]	; (80059c4 <vTaskSwitchContext+0xb4>)
 80059a4:	6013      	str	r3, [r2, #0]
}
 80059a6:	bf00      	nop
 80059a8:	371c      	adds	r7, #28
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	20000560 	.word	0x20000560
 80059b8:	2000054c 	.word	0x2000054c
 80059bc:	20000540 	.word	0x20000540
 80059c0:	2000043c 	.word	0x2000043c
 80059c4:	20000438 	.word	0x20000438

080059c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10a      	bne.n	80059ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80059d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	60fb      	str	r3, [r7, #12]
}
 80059ea:	bf00      	nop
 80059ec:	e7fe      	b.n	80059ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059ee:	4b07      	ldr	r3, [pc, #28]	; (8005a0c <vTaskPlaceOnEventList+0x44>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	3318      	adds	r3, #24
 80059f4:	4619      	mov	r1, r3
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7fe fba9 	bl	800414e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059fc:	2101      	movs	r1, #1
 80059fe:	6838      	ldr	r0, [r7, #0]
 8005a00:	f000 fd68 	bl	80064d4 <prvAddCurrentTaskToDelayedList>
}
 8005a04:	bf00      	nop
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	20000438 	.word	0x20000438

08005a10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10a      	bne.n	8005a3c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2a:	f383 8811 	msr	BASEPRI, r3
 8005a2e:	f3bf 8f6f 	isb	sy
 8005a32:	f3bf 8f4f 	dsb	sy
 8005a36:	60fb      	str	r3, [r7, #12]
}
 8005a38:	bf00      	nop
 8005a3a:	e7fe      	b.n	8005a3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	3318      	adds	r3, #24
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7fe fbbd 	bl	80041c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a46:	4b1d      	ldr	r3, [pc, #116]	; (8005abc <xTaskRemoveFromEventList+0xac>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d11c      	bne.n	8005a88 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	3304      	adds	r3, #4
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fe fbb4 	bl	80041c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	409a      	lsls	r2, r3
 8005a60:	4b17      	ldr	r3, [pc, #92]	; (8005ac0 <xTaskRemoveFromEventList+0xb0>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	4a16      	ldr	r2, [pc, #88]	; (8005ac0 <xTaskRemoveFromEventList+0xb0>)
 8005a68:	6013      	str	r3, [r2, #0]
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a6e:	4613      	mov	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4413      	add	r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	4a13      	ldr	r2, [pc, #76]	; (8005ac4 <xTaskRemoveFromEventList+0xb4>)
 8005a78:	441a      	add	r2, r3
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	4619      	mov	r1, r3
 8005a80:	4610      	mov	r0, r2
 8005a82:	f7fe fb40 	bl	8004106 <vListInsertEnd>
 8005a86:	e005      	b.n	8005a94 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	3318      	adds	r3, #24
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	480e      	ldr	r0, [pc, #56]	; (8005ac8 <xTaskRemoveFromEventList+0xb8>)
 8005a90:	f7fe fb39 	bl	8004106 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a98:	4b0c      	ldr	r3, [pc, #48]	; (8005acc <xTaskRemoveFromEventList+0xbc>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d905      	bls.n	8005aae <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005aa6:	4b0a      	ldr	r3, [pc, #40]	; (8005ad0 <xTaskRemoveFromEventList+0xc0>)
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	601a      	str	r2, [r3, #0]
 8005aac:	e001      	b.n	8005ab2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005ab2:	697b      	ldr	r3, [r7, #20]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	20000560 	.word	0x20000560
 8005ac0:	20000540 	.word	0x20000540
 8005ac4:	2000043c 	.word	0x2000043c
 8005ac8:	200004f8 	.word	0x200004f8
 8005acc:	20000438 	.word	0x20000438
 8005ad0:	2000054c 	.word	0x2000054c

08005ad4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005adc:	4b06      	ldr	r3, [pc, #24]	; (8005af8 <vTaskInternalSetTimeOutState+0x24>)
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ae4:	4b05      	ldr	r3, [pc, #20]	; (8005afc <vTaskInternalSetTimeOutState+0x28>)
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	605a      	str	r2, [r3, #4]
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	20000550 	.word	0x20000550
 8005afc:	2000053c 	.word	0x2000053c

08005b00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b088      	sub	sp, #32
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10a      	bne.n	8005b26 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	613b      	str	r3, [r7, #16]
}
 8005b22:	bf00      	nop
 8005b24:	e7fe      	b.n	8005b24 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10a      	bne.n	8005b42 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	60fb      	str	r3, [r7, #12]
}
 8005b3e:	bf00      	nop
 8005b40:	e7fe      	b.n	8005b40 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005b42:	f000 fe57 	bl	80067f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b46:	4b1d      	ldr	r3, [pc, #116]	; (8005bbc <xTaskCheckForTimeOut+0xbc>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5e:	d102      	bne.n	8005b66 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b60:	2300      	movs	r3, #0
 8005b62:	61fb      	str	r3, [r7, #28]
 8005b64:	e023      	b.n	8005bae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	4b15      	ldr	r3, [pc, #84]	; (8005bc0 <xTaskCheckForTimeOut+0xc0>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d007      	beq.n	8005b82 <xTaskCheckForTimeOut+0x82>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	69ba      	ldr	r2, [r7, #24]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d302      	bcc.n	8005b82 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	61fb      	str	r3, [r7, #28]
 8005b80:	e015      	b.n	8005bae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d20b      	bcs.n	8005ba4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	1ad2      	subs	r2, r2, r3
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f7ff ff9b 	bl	8005ad4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	61fb      	str	r3, [r7, #28]
 8005ba2:	e004      	b.n	8005bae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005baa:	2301      	movs	r3, #1
 8005bac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005bae:	f000 fe51 	bl	8006854 <vPortExitCritical>

	return xReturn;
 8005bb2:	69fb      	ldr	r3, [r7, #28]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3720      	adds	r7, #32
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	2000053c 	.word	0x2000053c
 8005bc0:	20000550 	.word	0x20000550

08005bc4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005bc8:	4b03      	ldr	r3, [pc, #12]	; (8005bd8 <vTaskMissedYield+0x14>)
 8005bca:	2201      	movs	r2, #1
 8005bcc:	601a      	str	r2, [r3, #0]
}
 8005bce:	bf00      	nop
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	2000054c 	.word	0x2000054c

08005bdc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005be4:	f000 f852 	bl	8005c8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005be8:	4b06      	ldr	r3, [pc, #24]	; (8005c04 <prvIdleTask+0x28>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d9f9      	bls.n	8005be4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005bf0:	4b05      	ldr	r3, [pc, #20]	; (8005c08 <prvIdleTask+0x2c>)
 8005bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bf6:	601a      	str	r2, [r3, #0]
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c00:	e7f0      	b.n	8005be4 <prvIdleTask+0x8>
 8005c02:	bf00      	nop
 8005c04:	2000043c 	.word	0x2000043c
 8005c08:	e000ed04 	.word	0xe000ed04

08005c0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c12:	2300      	movs	r3, #0
 8005c14:	607b      	str	r3, [r7, #4]
 8005c16:	e00c      	b.n	8005c32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4a12      	ldr	r2, [pc, #72]	; (8005c6c <prvInitialiseTaskLists+0x60>)
 8005c24:	4413      	add	r3, r2
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7fe fa40 	bl	80040ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	607b      	str	r3, [r7, #4]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b06      	cmp	r3, #6
 8005c36:	d9ef      	bls.n	8005c18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c38:	480d      	ldr	r0, [pc, #52]	; (8005c70 <prvInitialiseTaskLists+0x64>)
 8005c3a:	f7fe fa37 	bl	80040ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c3e:	480d      	ldr	r0, [pc, #52]	; (8005c74 <prvInitialiseTaskLists+0x68>)
 8005c40:	f7fe fa34 	bl	80040ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c44:	480c      	ldr	r0, [pc, #48]	; (8005c78 <prvInitialiseTaskLists+0x6c>)
 8005c46:	f7fe fa31 	bl	80040ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c4a:	480c      	ldr	r0, [pc, #48]	; (8005c7c <prvInitialiseTaskLists+0x70>)
 8005c4c:	f7fe fa2e 	bl	80040ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c50:	480b      	ldr	r0, [pc, #44]	; (8005c80 <prvInitialiseTaskLists+0x74>)
 8005c52:	f7fe fa2b 	bl	80040ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c56:	4b0b      	ldr	r3, [pc, #44]	; (8005c84 <prvInitialiseTaskLists+0x78>)
 8005c58:	4a05      	ldr	r2, [pc, #20]	; (8005c70 <prvInitialiseTaskLists+0x64>)
 8005c5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c5c:	4b0a      	ldr	r3, [pc, #40]	; (8005c88 <prvInitialiseTaskLists+0x7c>)
 8005c5e:	4a05      	ldr	r2, [pc, #20]	; (8005c74 <prvInitialiseTaskLists+0x68>)
 8005c60:	601a      	str	r2, [r3, #0]
}
 8005c62:	bf00      	nop
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	2000043c 	.word	0x2000043c
 8005c70:	200004c8 	.word	0x200004c8
 8005c74:	200004dc 	.word	0x200004dc
 8005c78:	200004f8 	.word	0x200004f8
 8005c7c:	2000050c 	.word	0x2000050c
 8005c80:	20000524 	.word	0x20000524
 8005c84:	200004f0 	.word	0x200004f0
 8005c88:	200004f4 	.word	0x200004f4

08005c8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c92:	e019      	b.n	8005cc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c94:	f000 fdae 	bl	80067f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c98:	4b10      	ldr	r3, [pc, #64]	; (8005cdc <prvCheckTasksWaitingTermination+0x50>)
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	3304      	adds	r3, #4
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7fe fa8b 	bl	80041c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005caa:	4b0d      	ldr	r3, [pc, #52]	; (8005ce0 <prvCheckTasksWaitingTermination+0x54>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	4a0b      	ldr	r2, [pc, #44]	; (8005ce0 <prvCheckTasksWaitingTermination+0x54>)
 8005cb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005cb4:	4b0b      	ldr	r3, [pc, #44]	; (8005ce4 <prvCheckTasksWaitingTermination+0x58>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	4a0a      	ldr	r2, [pc, #40]	; (8005ce4 <prvCheckTasksWaitingTermination+0x58>)
 8005cbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005cbe:	f000 fdc9 	bl	8006854 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f810 	bl	8005ce8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cc8:	4b06      	ldr	r3, [pc, #24]	; (8005ce4 <prvCheckTasksWaitingTermination+0x58>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1e1      	bne.n	8005c94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005cd0:	bf00      	nop
 8005cd2:	bf00      	nop
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	2000050c 	.word	0x2000050c
 8005ce0:	20000538 	.word	0x20000538
 8005ce4:	20000520 	.word	0x20000520

08005ce8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d108      	bne.n	8005d0c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 ff66 	bl	8006bd0 <vPortFree>
				vPortFree( pxTCB );
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 ff63 	bl	8006bd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d0a:	e018      	b.n	8005d3e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d103      	bne.n	8005d1e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 ff5a 	bl	8006bd0 <vPortFree>
	}
 8005d1c:	e00f      	b.n	8005d3e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d00a      	beq.n	8005d3e <prvDeleteTCB+0x56>
	__asm volatile
 8005d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2c:	f383 8811 	msr	BASEPRI, r3
 8005d30:	f3bf 8f6f 	isb	sy
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	60fb      	str	r3, [r7, #12]
}
 8005d3a:	bf00      	nop
 8005d3c:	e7fe      	b.n	8005d3c <prvDeleteTCB+0x54>
	}
 8005d3e:	bf00      	nop
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
	...

08005d48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d4e:	4b0c      	ldr	r3, [pc, #48]	; (8005d80 <prvResetNextTaskUnblockTime+0x38>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d104      	bne.n	8005d62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d58:	4b0a      	ldr	r3, [pc, #40]	; (8005d84 <prvResetNextTaskUnblockTime+0x3c>)
 8005d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d60:	e008      	b.n	8005d74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d62:	4b07      	ldr	r3, [pc, #28]	; (8005d80 <prvResetNextTaskUnblockTime+0x38>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	4a04      	ldr	r2, [pc, #16]	; (8005d84 <prvResetNextTaskUnblockTime+0x3c>)
 8005d72:	6013      	str	r3, [r2, #0]
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr
 8005d80:	200004f0 	.word	0x200004f0
 8005d84:	20000558 	.word	0x20000558

08005d88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d8e:	4b0b      	ldr	r3, [pc, #44]	; (8005dbc <xTaskGetSchedulerState+0x34>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d102      	bne.n	8005d9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d96:	2301      	movs	r3, #1
 8005d98:	607b      	str	r3, [r7, #4]
 8005d9a:	e008      	b.n	8005dae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d9c:	4b08      	ldr	r3, [pc, #32]	; (8005dc0 <xTaskGetSchedulerState+0x38>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d102      	bne.n	8005daa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005da4:	2302      	movs	r3, #2
 8005da6:	607b      	str	r3, [r7, #4]
 8005da8:	e001      	b.n	8005dae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005daa:	2300      	movs	r3, #0
 8005dac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005dae:	687b      	ldr	r3, [r7, #4]
	}
 8005db0:	4618      	mov	r0, r3
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr
 8005dbc:	20000544 	.word	0x20000544
 8005dc0:	20000560 	.word	0x20000560

08005dc4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d05e      	beq.n	8005e98 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dde:	4b31      	ldr	r3, [pc, #196]	; (8005ea4 <xTaskPriorityInherit+0xe0>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d24e      	bcs.n	8005e86 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	db06      	blt.n	8005dfe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005df0:	4b2c      	ldr	r3, [pc, #176]	; (8005ea4 <xTaskPriorityInherit+0xe0>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df6:	f1c3 0207 	rsb	r2, r3, #7
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	6959      	ldr	r1, [r3, #20]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e06:	4613      	mov	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4413      	add	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4a26      	ldr	r2, [pc, #152]	; (8005ea8 <xTaskPriorityInherit+0xe4>)
 8005e10:	4413      	add	r3, r2
 8005e12:	4299      	cmp	r1, r3
 8005e14:	d12f      	bne.n	8005e76 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	3304      	adds	r3, #4
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7fe f9d0 	bl	80041c0 <uxListRemove>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10a      	bne.n	8005e3c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e30:	43da      	mvns	r2, r3
 8005e32:	4b1e      	ldr	r3, [pc, #120]	; (8005eac <xTaskPriorityInherit+0xe8>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4013      	ands	r3, r2
 8005e38:	4a1c      	ldr	r2, [pc, #112]	; (8005eac <xTaskPriorityInherit+0xe8>)
 8005e3a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005e3c:	4b19      	ldr	r3, [pc, #100]	; (8005ea4 <xTaskPriorityInherit+0xe0>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	409a      	lsls	r2, r3
 8005e4e:	4b17      	ldr	r3, [pc, #92]	; (8005eac <xTaskPriorityInherit+0xe8>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	4a15      	ldr	r2, [pc, #84]	; (8005eac <xTaskPriorityInherit+0xe8>)
 8005e56:	6013      	str	r3, [r2, #0]
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4413      	add	r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4a10      	ldr	r2, [pc, #64]	; (8005ea8 <xTaskPriorityInherit+0xe4>)
 8005e66:	441a      	add	r2, r3
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	4610      	mov	r0, r2
 8005e70:	f7fe f949 	bl	8004106 <vListInsertEnd>
 8005e74:	e004      	b.n	8005e80 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005e76:	4b0b      	ldr	r3, [pc, #44]	; (8005ea4 <xTaskPriorityInherit+0xe0>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005e80:	2301      	movs	r3, #1
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	e008      	b.n	8005e98 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e8a:	4b06      	ldr	r3, [pc, #24]	; (8005ea4 <xTaskPriorityInherit+0xe0>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d201      	bcs.n	8005e98 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005e94:	2301      	movs	r3, #1
 8005e96:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e98:	68fb      	ldr	r3, [r7, #12]
	}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	20000438 	.word	0x20000438
 8005ea8:	2000043c 	.word	0x2000043c
 8005eac:	20000540 	.word	0x20000540

08005eb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d06e      	beq.n	8005fa4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005ec6:	4b3a      	ldr	r3, [pc, #232]	; (8005fb0 <xTaskPriorityDisinherit+0x100>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d00a      	beq.n	8005ee6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed4:	f383 8811 	msr	BASEPRI, r3
 8005ed8:	f3bf 8f6f 	isb	sy
 8005edc:	f3bf 8f4f 	dsb	sy
 8005ee0:	60fb      	str	r3, [r7, #12]
}
 8005ee2:	bf00      	nop
 8005ee4:	e7fe      	b.n	8005ee4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10a      	bne.n	8005f04 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef2:	f383 8811 	msr	BASEPRI, r3
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	60bb      	str	r3, [r7, #8]
}
 8005f00:	bf00      	nop
 8005f02:	e7fe      	b.n	8005f02 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f08:	1e5a      	subs	r2, r3, #1
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d044      	beq.n	8005fa4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d140      	bne.n	8005fa4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	3304      	adds	r3, #4
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7fe f94a 	bl	80041c0 <uxListRemove>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d115      	bne.n	8005f5e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f36:	491f      	ldr	r1, [pc, #124]	; (8005fb4 <xTaskPriorityDisinherit+0x104>)
 8005f38:	4613      	mov	r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	440b      	add	r3, r1
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10a      	bne.n	8005f5e <xTaskPriorityDisinherit+0xae>
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f52:	43da      	mvns	r2, r3
 8005f54:	4b18      	ldr	r3, [pc, #96]	; (8005fb8 <xTaskPriorityDisinherit+0x108>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4013      	ands	r3, r2
 8005f5a:	4a17      	ldr	r2, [pc, #92]	; (8005fb8 <xTaskPriorityDisinherit+0x108>)
 8005f5c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6a:	f1c3 0207 	rsb	r2, r3, #7
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f76:	2201      	movs	r2, #1
 8005f78:	409a      	lsls	r2, r3
 8005f7a:	4b0f      	ldr	r3, [pc, #60]	; (8005fb8 <xTaskPriorityDisinherit+0x108>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	4a0d      	ldr	r2, [pc, #52]	; (8005fb8 <xTaskPriorityDisinherit+0x108>)
 8005f82:	6013      	str	r3, [r2, #0]
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f88:	4613      	mov	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4a08      	ldr	r2, [pc, #32]	; (8005fb4 <xTaskPriorityDisinherit+0x104>)
 8005f92:	441a      	add	r2, r3
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	3304      	adds	r3, #4
 8005f98:	4619      	mov	r1, r3
 8005f9a:	4610      	mov	r0, r2
 8005f9c:	f7fe f8b3 	bl	8004106 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005fa4:	697b      	ldr	r3, [r7, #20]
	}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3718      	adds	r7, #24
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	20000438 	.word	0x20000438
 8005fb4:	2000043c 	.word	0x2000043c
 8005fb8:	20000540 	.word	0x20000540

08005fbc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b088      	sub	sp, #32
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d077      	beq.n	80060c4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10a      	bne.n	8005ff2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe0:	f383 8811 	msr	BASEPRI, r3
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	60fb      	str	r3, [r7, #12]
}
 8005fee:	bf00      	nop
 8005ff0:	e7fe      	b.n	8005ff0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d902      	bls.n	8006002 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	61fb      	str	r3, [r7, #28]
 8006000:	e002      	b.n	8006008 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006006:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600c:	69fa      	ldr	r2, [r7, #28]
 800600e:	429a      	cmp	r2, r3
 8006010:	d058      	beq.n	80060c4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	429a      	cmp	r2, r3
 800601a:	d153      	bne.n	80060c4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800601c:	4b2b      	ldr	r3, [pc, #172]	; (80060cc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	69ba      	ldr	r2, [r7, #24]
 8006022:	429a      	cmp	r2, r3
 8006024:	d10a      	bne.n	800603c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602a:	f383 8811 	msr	BASEPRI, r3
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	60bb      	str	r3, [r7, #8]
}
 8006038:	bf00      	nop
 800603a:	e7fe      	b.n	800603a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006040:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	69fa      	ldr	r2, [r7, #28]
 8006046:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	2b00      	cmp	r3, #0
 800604e:	db04      	blt.n	800605a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	f1c3 0207 	rsb	r2, r3, #7
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	6959      	ldr	r1, [r3, #20]
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	4613      	mov	r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4413      	add	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4a19      	ldr	r2, [pc, #100]	; (80060d0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800606a:	4413      	add	r3, r2
 800606c:	4299      	cmp	r1, r3
 800606e:	d129      	bne.n	80060c4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	3304      	adds	r3, #4
 8006074:	4618      	mov	r0, r3
 8006076:	f7fe f8a3 	bl	80041c0 <uxListRemove>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10a      	bne.n	8006096 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006084:	2201      	movs	r2, #1
 8006086:	fa02 f303 	lsl.w	r3, r2, r3
 800608a:	43da      	mvns	r2, r3
 800608c:	4b11      	ldr	r3, [pc, #68]	; (80060d4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4013      	ands	r3, r2
 8006092:	4a10      	ldr	r2, [pc, #64]	; (80060d4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006094:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609a:	2201      	movs	r2, #1
 800609c:	409a      	lsls	r2, r3
 800609e:	4b0d      	ldr	r3, [pc, #52]	; (80060d4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	4a0b      	ldr	r2, [pc, #44]	; (80060d4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80060a6:	6013      	str	r3, [r2, #0]
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ac:	4613      	mov	r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4a06      	ldr	r2, [pc, #24]	; (80060d0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80060b6:	441a      	add	r2, r3
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	3304      	adds	r3, #4
 80060bc:	4619      	mov	r1, r3
 80060be:	4610      	mov	r0, r2
 80060c0:	f7fe f821 	bl	8004106 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060c4:	bf00      	nop
 80060c6:	3720      	adds	r7, #32
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	20000438 	.word	0x20000438
 80060d0:	2000043c 	.word	0x2000043c
 80060d4:	20000540 	.word	0x20000540

080060d8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80060d8:	b480      	push	{r7}
 80060da:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80060dc:	4b07      	ldr	r3, [pc, #28]	; (80060fc <pvTaskIncrementMutexHeldCount+0x24>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d004      	beq.n	80060ee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80060e4:	4b05      	ldr	r3, [pc, #20]	; (80060fc <pvTaskIncrementMutexHeldCount+0x24>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060ea:	3201      	adds	r2, #1
 80060ec:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80060ee:	4b03      	ldr	r3, [pc, #12]	; (80060fc <pvTaskIncrementMutexHeldCount+0x24>)
 80060f0:	681b      	ldr	r3, [r3, #0]
	}
 80060f2:	4618      	mov	r0, r3
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr
 80060fc:	20000438 	.word	0x20000438

08006100 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
 800610c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800610e:	f000 fb71 	bl	80067f4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006112:	4b26      	ldr	r3, [pc, #152]	; (80061ac <xTaskNotifyWait+0xac>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2b02      	cmp	r3, #2
 800611e:	d01a      	beq.n	8006156 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006120:	4b22      	ldr	r3, [pc, #136]	; (80061ac <xTaskNotifyWait+0xac>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	43d2      	mvns	r2, r2
 800612a:	400a      	ands	r2, r1
 800612c:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800612e:	4b1f      	ldr	r3, [pc, #124]	; (80061ac <xTaskNotifyWait+0xac>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00b      	beq.n	8006156 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800613e:	2101      	movs	r1, #1
 8006140:	6838      	ldr	r0, [r7, #0]
 8006142:	f000 f9c7 	bl	80064d4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006146:	4b1a      	ldr	r3, [pc, #104]	; (80061b0 <xTaskNotifyWait+0xb0>)
 8006148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800614c:	601a      	str	r2, [r3, #0]
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006156:	f000 fb7d 	bl	8006854 <vPortExitCritical>

		taskENTER_CRITICAL();
 800615a:	f000 fb4b 	bl	80067f4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d004      	beq.n	800616e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8006164:	4b11      	ldr	r3, [pc, #68]	; (80061ac <xTaskNotifyWait+0xac>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800616e:	4b0f      	ldr	r3, [pc, #60]	; (80061ac <xTaskNotifyWait+0xac>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006176:	b2db      	uxtb	r3, r3
 8006178:	2b02      	cmp	r3, #2
 800617a:	d002      	beq.n	8006182 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800617c:	2300      	movs	r3, #0
 800617e:	617b      	str	r3, [r7, #20]
 8006180:	e008      	b.n	8006194 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8006182:	4b0a      	ldr	r3, [pc, #40]	; (80061ac <xTaskNotifyWait+0xac>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	43d2      	mvns	r2, r2
 800618c:	400a      	ands	r2, r1
 800618e:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8006190:	2301      	movs	r3, #1
 8006192:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006194:	4b05      	ldr	r3, [pc, #20]	; (80061ac <xTaskNotifyWait+0xac>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 800619e:	f000 fb59 	bl	8006854 <vPortExitCritical>

		return xReturn;
 80061a2:	697b      	ldr	r3, [r7, #20]
	}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3718      	adds	r7, #24
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	20000438 	.word	0x20000438
 80061b0:	e000ed04 	.word	0xe000ed04

080061b4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b08a      	sub	sp, #40	; 0x28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	603b      	str	r3, [r7, #0]
 80061c0:	4613      	mov	r3, r2
 80061c2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80061c4:	2301      	movs	r3, #1
 80061c6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10a      	bne.n	80061e4 <xTaskGenericNotify+0x30>
	__asm volatile
 80061ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	61bb      	str	r3, [r7, #24]
}
 80061e0:	bf00      	nop
 80061e2:	e7fe      	b.n	80061e2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80061e8:	f000 fb04 	bl	80067f4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d003      	beq.n	80061fa <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80061f2:	6a3b      	ldr	r3, [r7, #32]
 80061f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80061fa:	6a3b      	ldr	r3, [r7, #32]
 80061fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006200:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	2202      	movs	r2, #2
 8006206:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 800620a:	79fb      	ldrb	r3, [r7, #7]
 800620c:	2b04      	cmp	r3, #4
 800620e:	d828      	bhi.n	8006262 <xTaskGenericNotify+0xae>
 8006210:	a201      	add	r2, pc, #4	; (adr r2, 8006218 <xTaskGenericNotify+0x64>)
 8006212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006216:	bf00      	nop
 8006218:	08006283 	.word	0x08006283
 800621c:	0800622d 	.word	0x0800622d
 8006220:	0800623b 	.word	0x0800623b
 8006224:	08006247 	.word	0x08006247
 8006228:	0800624f 	.word	0x0800624f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	431a      	orrs	r2, r3
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8006238:	e026      	b.n	8006288 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800623a:	6a3b      	ldr	r3, [r7, #32]
 800623c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800623e:	1c5a      	adds	r2, r3, #1
 8006240:	6a3b      	ldr	r3, [r7, #32]
 8006242:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8006244:	e020      	b.n	8006288 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006246:	6a3b      	ldr	r3, [r7, #32]
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800624c:	e01c      	b.n	8006288 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800624e:	7ffb      	ldrb	r3, [r7, #31]
 8006250:	2b02      	cmp	r3, #2
 8006252:	d003      	beq.n	800625c <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006254:	6a3b      	ldr	r3, [r7, #32]
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800625a:	e015      	b.n	8006288 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800625c:	2300      	movs	r3, #0
 800625e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8006260:	e012      	b.n	8006288 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006262:	6a3b      	ldr	r3, [r7, #32]
 8006264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626a:	d00c      	beq.n	8006286 <xTaskGenericNotify+0xd2>
	__asm volatile
 800626c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006270:	f383 8811 	msr	BASEPRI, r3
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	617b      	str	r3, [r7, #20]
}
 800627e:	bf00      	nop
 8006280:	e7fe      	b.n	8006280 <xTaskGenericNotify+0xcc>
					break;
 8006282:	bf00      	nop
 8006284:	e000      	b.n	8006288 <xTaskGenericNotify+0xd4>

					break;
 8006286:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006288:	7ffb      	ldrb	r3, [r7, #31]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d139      	bne.n	8006302 <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800628e:	6a3b      	ldr	r3, [r7, #32]
 8006290:	3304      	adds	r3, #4
 8006292:	4618      	mov	r0, r3
 8006294:	f7fd ff94 	bl	80041c0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8006298:	6a3b      	ldr	r3, [r7, #32]
 800629a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629c:	2201      	movs	r2, #1
 800629e:	409a      	lsls	r2, r3
 80062a0:	4b1b      	ldr	r3, [pc, #108]	; (8006310 <xTaskGenericNotify+0x15c>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	4a1a      	ldr	r2, [pc, #104]	; (8006310 <xTaskGenericNotify+0x15c>)
 80062a8:	6013      	str	r3, [r2, #0]
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ae:	4613      	mov	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4a17      	ldr	r2, [pc, #92]	; (8006314 <xTaskGenericNotify+0x160>)
 80062b8:	441a      	add	r2, r3
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	3304      	adds	r3, #4
 80062be:	4619      	mov	r1, r3
 80062c0:	4610      	mov	r0, r2
 80062c2:	f7fd ff20 	bl	8004106 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00a      	beq.n	80062e4 <xTaskGenericNotify+0x130>
	__asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	613b      	str	r3, [r7, #16]
}
 80062e0:	bf00      	nop
 80062e2:	e7fe      	b.n	80062e2 <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80062e4:	6a3b      	ldr	r3, [r7, #32]
 80062e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e8:	4b0b      	ldr	r3, [pc, #44]	; (8006318 <xTaskGenericNotify+0x164>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d907      	bls.n	8006302 <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80062f2:	4b0a      	ldr	r3, [pc, #40]	; (800631c <xTaskGenericNotify+0x168>)
 80062f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062f8:	601a      	str	r2, [r3, #0]
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006302:	f000 faa7 	bl	8006854 <vPortExitCritical>

		return xReturn;
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006308:	4618      	mov	r0, r3
 800630a:	3728      	adds	r7, #40	; 0x28
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	20000540 	.word	0x20000540
 8006314:	2000043c 	.word	0x2000043c
 8006318:	20000438 	.word	0x20000438
 800631c:	e000ed04 	.word	0xe000ed04

08006320 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006320:	b580      	push	{r7, lr}
 8006322:	b08e      	sub	sp, #56	; 0x38
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	603b      	str	r3, [r7, #0]
 800632c:	4613      	mov	r3, r2
 800632e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8006330:	2301      	movs	r3, #1
 8006332:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10a      	bne.n	8006350 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800633a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633e:	f383 8811 	msr	BASEPRI, r3
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	f3bf 8f4f 	dsb	sy
 800634a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800634c:	bf00      	nop
 800634e:	e7fe      	b.n	800634e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006350:	f000 fb32 	bl	80069b8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8006358:	f3ef 8211 	mrs	r2, BASEPRI
 800635c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006360:	f383 8811 	msr	BASEPRI, r3
 8006364:	f3bf 8f6f 	isb	sy
 8006368:	f3bf 8f4f 	dsb	sy
 800636c:	623a      	str	r2, [r7, #32]
 800636e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8006370:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006372:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d003      	beq.n	8006382 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800637a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006384:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800638c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638e:	2202      	movs	r2, #2
 8006390:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8006394:	79fb      	ldrb	r3, [r7, #7]
 8006396:	2b04      	cmp	r3, #4
 8006398:	d828      	bhi.n	80063ec <xTaskGenericNotifyFromISR+0xcc>
 800639a:	a201      	add	r2, pc, #4	; (adr r2, 80063a0 <xTaskGenericNotifyFromISR+0x80>)
 800639c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a0:	0800640d 	.word	0x0800640d
 80063a4:	080063b5 	.word	0x080063b5
 80063a8:	080063c3 	.word	0x080063c3
 80063ac:	080063cf 	.word	0x080063cf
 80063b0:	080063d7 	.word	0x080063d7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80063b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	431a      	orrs	r2, r3
 80063bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063be:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80063c0:	e027      	b.n	8006412 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80063c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063c6:	1c5a      	adds	r2, r3, #1
 80063c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ca:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80063cc:	e021      	b.n	8006412 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80063ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80063d4:	e01d      	b.n	8006412 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80063d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d003      	beq.n	80063e6 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80063de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80063e4:	e015      	b.n	8006412 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 80063e6:	2300      	movs	r3, #0
 80063e8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80063ea:	e012      	b.n	8006412 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80063ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f4:	d00c      	beq.n	8006410 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 80063f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	61bb      	str	r3, [r7, #24]
}
 8006408:	bf00      	nop
 800640a:	e7fe      	b.n	800640a <xTaskGenericNotifyFromISR+0xea>
					break;
 800640c:	bf00      	nop
 800640e:	e000      	b.n	8006412 <xTaskGenericNotifyFromISR+0xf2>
					break;
 8006410:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006412:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006416:	2b01      	cmp	r3, #1
 8006418:	d145      	bne.n	80064a6 <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800641a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00a      	beq.n	8006438 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8006422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006426:	f383 8811 	msr	BASEPRI, r3
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	617b      	str	r3, [r7, #20]
}
 8006434:	bf00      	nop
 8006436:	e7fe      	b.n	8006436 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006438:	4b20      	ldr	r3, [pc, #128]	; (80064bc <xTaskGenericNotifyFromISR+0x19c>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d11c      	bne.n	800647a <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006442:	3304      	adds	r3, #4
 8006444:	4618      	mov	r0, r3
 8006446:	f7fd febb 	bl	80041c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644e:	2201      	movs	r2, #1
 8006450:	409a      	lsls	r2, r3
 8006452:	4b1b      	ldr	r3, [pc, #108]	; (80064c0 <xTaskGenericNotifyFromISR+0x1a0>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4313      	orrs	r3, r2
 8006458:	4a19      	ldr	r2, [pc, #100]	; (80064c0 <xTaskGenericNotifyFromISR+0x1a0>)
 800645a:	6013      	str	r3, [r2, #0]
 800645c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006460:	4613      	mov	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	4a16      	ldr	r2, [pc, #88]	; (80064c4 <xTaskGenericNotifyFromISR+0x1a4>)
 800646a:	441a      	add	r2, r3
 800646c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646e:	3304      	adds	r3, #4
 8006470:	4619      	mov	r1, r3
 8006472:	4610      	mov	r0, r2
 8006474:	f7fd fe47 	bl	8004106 <vListInsertEnd>
 8006478:	e005      	b.n	8006486 <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800647a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647c:	3318      	adds	r3, #24
 800647e:	4619      	mov	r1, r3
 8006480:	4811      	ldr	r0, [pc, #68]	; (80064c8 <xTaskGenericNotifyFromISR+0x1a8>)
 8006482:	f7fd fe40 	bl	8004106 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648a:	4b10      	ldr	r3, [pc, #64]	; (80064cc <xTaskGenericNotifyFromISR+0x1ac>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006490:	429a      	cmp	r2, r3
 8006492:	d908      	bls.n	80064a6 <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006496:	2b00      	cmp	r3, #0
 8006498:	d002      	beq.n	80064a0 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800649a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800649c:	2201      	movs	r2, #1
 800649e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80064a0:	4b0b      	ldr	r3, [pc, #44]	; (80064d0 <xTaskGenericNotifyFromISR+0x1b0>)
 80064a2:	2201      	movs	r2, #1
 80064a4:	601a      	str	r2, [r3, #0]
 80064a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	f383 8811 	msr	BASEPRI, r3
}
 80064b0:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80064b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3738      	adds	r7, #56	; 0x38
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	20000560 	.word	0x20000560
 80064c0:	20000540 	.word	0x20000540
 80064c4:	2000043c 	.word	0x2000043c
 80064c8:	200004f8 	.word	0x200004f8
 80064cc:	20000438 	.word	0x20000438
 80064d0:	2000054c 	.word	0x2000054c

080064d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80064de:	4b29      	ldr	r3, [pc, #164]	; (8006584 <prvAddCurrentTaskToDelayedList+0xb0>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064e4:	4b28      	ldr	r3, [pc, #160]	; (8006588 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	3304      	adds	r3, #4
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7fd fe68 	bl	80041c0 <uxListRemove>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10b      	bne.n	800650e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80064f6:	4b24      	ldr	r3, [pc, #144]	; (8006588 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fc:	2201      	movs	r2, #1
 80064fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006502:	43da      	mvns	r2, r3
 8006504:	4b21      	ldr	r3, [pc, #132]	; (800658c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4013      	ands	r3, r2
 800650a:	4a20      	ldr	r2, [pc, #128]	; (800658c <prvAddCurrentTaskToDelayedList+0xb8>)
 800650c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006514:	d10a      	bne.n	800652c <prvAddCurrentTaskToDelayedList+0x58>
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d007      	beq.n	800652c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800651c:	4b1a      	ldr	r3, [pc, #104]	; (8006588 <prvAddCurrentTaskToDelayedList+0xb4>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	3304      	adds	r3, #4
 8006522:	4619      	mov	r1, r3
 8006524:	481a      	ldr	r0, [pc, #104]	; (8006590 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006526:	f7fd fdee 	bl	8004106 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800652a:	e026      	b.n	800657a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4413      	add	r3, r2
 8006532:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006534:	4b14      	ldr	r3, [pc, #80]	; (8006588 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	429a      	cmp	r2, r3
 8006542:	d209      	bcs.n	8006558 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006544:	4b13      	ldr	r3, [pc, #76]	; (8006594 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	4b0f      	ldr	r3, [pc, #60]	; (8006588 <prvAddCurrentTaskToDelayedList+0xb4>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	3304      	adds	r3, #4
 800654e:	4619      	mov	r1, r3
 8006550:	4610      	mov	r0, r2
 8006552:	f7fd fdfc 	bl	800414e <vListInsert>
}
 8006556:	e010      	b.n	800657a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006558:	4b0f      	ldr	r3, [pc, #60]	; (8006598 <prvAddCurrentTaskToDelayedList+0xc4>)
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	4b0a      	ldr	r3, [pc, #40]	; (8006588 <prvAddCurrentTaskToDelayedList+0xb4>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	3304      	adds	r3, #4
 8006562:	4619      	mov	r1, r3
 8006564:	4610      	mov	r0, r2
 8006566:	f7fd fdf2 	bl	800414e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800656a:	4b0c      	ldr	r3, [pc, #48]	; (800659c <prvAddCurrentTaskToDelayedList+0xc8>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	429a      	cmp	r2, r3
 8006572:	d202      	bcs.n	800657a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006574:	4a09      	ldr	r2, [pc, #36]	; (800659c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	6013      	str	r3, [r2, #0]
}
 800657a:	bf00      	nop
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	2000053c 	.word	0x2000053c
 8006588:	20000438 	.word	0x20000438
 800658c:	20000540 	.word	0x20000540
 8006590:	20000524 	.word	0x20000524
 8006594:	200004f4 	.word	0x200004f4
 8006598:	200004f0 	.word	0x200004f0
 800659c:	20000558 	.word	0x20000558

080065a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	3b04      	subs	r3, #4
 80065b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80065b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	3b04      	subs	r3, #4
 80065be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	f023 0201 	bic.w	r2, r3, #1
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	3b04      	subs	r3, #4
 80065ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80065d0:	4a0c      	ldr	r2, [pc, #48]	; (8006604 <pxPortInitialiseStack+0x64>)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	3b14      	subs	r3, #20
 80065da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	3b04      	subs	r3, #4
 80065e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f06f 0202 	mvn.w	r2, #2
 80065ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	3b20      	subs	r3, #32
 80065f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80065f6:	68fb      	ldr	r3, [r7, #12]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3714      	adds	r7, #20
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr
 8006604:	08006609 	.word	0x08006609

08006608 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800660e:	2300      	movs	r3, #0
 8006610:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006612:	4b12      	ldr	r3, [pc, #72]	; (800665c <prvTaskExitError+0x54>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800661a:	d00a      	beq.n	8006632 <prvTaskExitError+0x2a>
	__asm volatile
 800661c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006620:	f383 8811 	msr	BASEPRI, r3
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	60fb      	str	r3, [r7, #12]
}
 800662e:	bf00      	nop
 8006630:	e7fe      	b.n	8006630 <prvTaskExitError+0x28>
	__asm volatile
 8006632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006636:	f383 8811 	msr	BASEPRI, r3
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	60bb      	str	r3, [r7, #8]
}
 8006644:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006646:	bf00      	nop
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d0fc      	beq.n	8006648 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800664e:	bf00      	nop
 8006650:	bf00      	nop
 8006652:	3714      	adds	r7, #20
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr
 800665c:	2000000c 	.word	0x2000000c

08006660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006660:	4b07      	ldr	r3, [pc, #28]	; (8006680 <pxCurrentTCBConst2>)
 8006662:	6819      	ldr	r1, [r3, #0]
 8006664:	6808      	ldr	r0, [r1, #0]
 8006666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800666a:	f380 8809 	msr	PSP, r0
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f04f 0000 	mov.w	r0, #0
 8006676:	f380 8811 	msr	BASEPRI, r0
 800667a:	4770      	bx	lr
 800667c:	f3af 8000 	nop.w

08006680 <pxCurrentTCBConst2>:
 8006680:	20000438 	.word	0x20000438
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006684:	bf00      	nop
 8006686:	bf00      	nop

08006688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006688:	4808      	ldr	r0, [pc, #32]	; (80066ac <prvPortStartFirstTask+0x24>)
 800668a:	6800      	ldr	r0, [r0, #0]
 800668c:	6800      	ldr	r0, [r0, #0]
 800668e:	f380 8808 	msr	MSP, r0
 8006692:	f04f 0000 	mov.w	r0, #0
 8006696:	f380 8814 	msr	CONTROL, r0
 800669a:	b662      	cpsie	i
 800669c:	b661      	cpsie	f
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	df00      	svc	0
 80066a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80066aa:	bf00      	nop
 80066ac:	e000ed08 	.word	0xe000ed08

080066b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80066b6:	4b46      	ldr	r3, [pc, #280]	; (80067d0 <xPortStartScheduler+0x120>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a46      	ldr	r2, [pc, #280]	; (80067d4 <xPortStartScheduler+0x124>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d10a      	bne.n	80066d6 <xPortStartScheduler+0x26>
	__asm volatile
 80066c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c4:	f383 8811 	msr	BASEPRI, r3
 80066c8:	f3bf 8f6f 	isb	sy
 80066cc:	f3bf 8f4f 	dsb	sy
 80066d0:	613b      	str	r3, [r7, #16]
}
 80066d2:	bf00      	nop
 80066d4:	e7fe      	b.n	80066d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80066d6:	4b3e      	ldr	r3, [pc, #248]	; (80067d0 <xPortStartScheduler+0x120>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a3f      	ldr	r2, [pc, #252]	; (80067d8 <xPortStartScheduler+0x128>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d10a      	bne.n	80066f6 <xPortStartScheduler+0x46>
	__asm volatile
 80066e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	60fb      	str	r3, [r7, #12]
}
 80066f2:	bf00      	nop
 80066f4:	e7fe      	b.n	80066f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80066f6:	4b39      	ldr	r3, [pc, #228]	; (80067dc <xPortStartScheduler+0x12c>)
 80066f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	22ff      	movs	r2, #255	; 0xff
 8006706:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	b2db      	uxtb	r3, r3
 800670e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006710:	78fb      	ldrb	r3, [r7, #3]
 8006712:	b2db      	uxtb	r3, r3
 8006714:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006718:	b2da      	uxtb	r2, r3
 800671a:	4b31      	ldr	r3, [pc, #196]	; (80067e0 <xPortStartScheduler+0x130>)
 800671c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800671e:	4b31      	ldr	r3, [pc, #196]	; (80067e4 <xPortStartScheduler+0x134>)
 8006720:	2207      	movs	r2, #7
 8006722:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006724:	e009      	b.n	800673a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006726:	4b2f      	ldr	r3, [pc, #188]	; (80067e4 <xPortStartScheduler+0x134>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	3b01      	subs	r3, #1
 800672c:	4a2d      	ldr	r2, [pc, #180]	; (80067e4 <xPortStartScheduler+0x134>)
 800672e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006730:	78fb      	ldrb	r3, [r7, #3]
 8006732:	b2db      	uxtb	r3, r3
 8006734:	005b      	lsls	r3, r3, #1
 8006736:	b2db      	uxtb	r3, r3
 8006738:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800673a:	78fb      	ldrb	r3, [r7, #3]
 800673c:	b2db      	uxtb	r3, r3
 800673e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006742:	2b80      	cmp	r3, #128	; 0x80
 8006744:	d0ef      	beq.n	8006726 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006746:	4b27      	ldr	r3, [pc, #156]	; (80067e4 <xPortStartScheduler+0x134>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f1c3 0307 	rsb	r3, r3, #7
 800674e:	2b04      	cmp	r3, #4
 8006750:	d00a      	beq.n	8006768 <xPortStartScheduler+0xb8>
	__asm volatile
 8006752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006756:	f383 8811 	msr	BASEPRI, r3
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	60bb      	str	r3, [r7, #8]
}
 8006764:	bf00      	nop
 8006766:	e7fe      	b.n	8006766 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006768:	4b1e      	ldr	r3, [pc, #120]	; (80067e4 <xPortStartScheduler+0x134>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	021b      	lsls	r3, r3, #8
 800676e:	4a1d      	ldr	r2, [pc, #116]	; (80067e4 <xPortStartScheduler+0x134>)
 8006770:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006772:	4b1c      	ldr	r3, [pc, #112]	; (80067e4 <xPortStartScheduler+0x134>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800677a:	4a1a      	ldr	r2, [pc, #104]	; (80067e4 <xPortStartScheduler+0x134>)
 800677c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	b2da      	uxtb	r2, r3
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006786:	4b18      	ldr	r3, [pc, #96]	; (80067e8 <xPortStartScheduler+0x138>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a17      	ldr	r2, [pc, #92]	; (80067e8 <xPortStartScheduler+0x138>)
 800678c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006790:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006792:	4b15      	ldr	r3, [pc, #84]	; (80067e8 <xPortStartScheduler+0x138>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a14      	ldr	r2, [pc, #80]	; (80067e8 <xPortStartScheduler+0x138>)
 8006798:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800679c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800679e:	f000 f8dd 	bl	800695c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80067a2:	4b12      	ldr	r3, [pc, #72]	; (80067ec <xPortStartScheduler+0x13c>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80067a8:	f000 f8fc 	bl	80069a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80067ac:	4b10      	ldr	r3, [pc, #64]	; (80067f0 <xPortStartScheduler+0x140>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a0f      	ldr	r2, [pc, #60]	; (80067f0 <xPortStartScheduler+0x140>)
 80067b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80067b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80067b8:	f7ff ff66 	bl	8006688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80067bc:	f7ff f8a8 	bl	8005910 <vTaskSwitchContext>
	prvTaskExitError();
 80067c0:	f7ff ff22 	bl	8006608 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3718      	adds	r7, #24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	e000ed00 	.word	0xe000ed00
 80067d4:	410fc271 	.word	0x410fc271
 80067d8:	410fc270 	.word	0x410fc270
 80067dc:	e000e400 	.word	0xe000e400
 80067e0:	20000564 	.word	0x20000564
 80067e4:	20000568 	.word	0x20000568
 80067e8:	e000ed20 	.word	0xe000ed20
 80067ec:	2000000c 	.word	0x2000000c
 80067f0:	e000ef34 	.word	0xe000ef34

080067f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
	__asm volatile
 80067fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fe:	f383 8811 	msr	BASEPRI, r3
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	607b      	str	r3, [r7, #4]
}
 800680c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800680e:	4b0f      	ldr	r3, [pc, #60]	; (800684c <vPortEnterCritical+0x58>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3301      	adds	r3, #1
 8006814:	4a0d      	ldr	r2, [pc, #52]	; (800684c <vPortEnterCritical+0x58>)
 8006816:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006818:	4b0c      	ldr	r3, [pc, #48]	; (800684c <vPortEnterCritical+0x58>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d10f      	bne.n	8006840 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006820:	4b0b      	ldr	r3, [pc, #44]	; (8006850 <vPortEnterCritical+0x5c>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00a      	beq.n	8006840 <vPortEnterCritical+0x4c>
	__asm volatile
 800682a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682e:	f383 8811 	msr	BASEPRI, r3
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	f3bf 8f4f 	dsb	sy
 800683a:	603b      	str	r3, [r7, #0]
}
 800683c:	bf00      	nop
 800683e:	e7fe      	b.n	800683e <vPortEnterCritical+0x4a>
	}
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr
 800684c:	2000000c 	.word	0x2000000c
 8006850:	e000ed04 	.word	0xe000ed04

08006854 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800685a:	4b12      	ldr	r3, [pc, #72]	; (80068a4 <vPortExitCritical+0x50>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10a      	bne.n	8006878 <vPortExitCritical+0x24>
	__asm volatile
 8006862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006866:	f383 8811 	msr	BASEPRI, r3
 800686a:	f3bf 8f6f 	isb	sy
 800686e:	f3bf 8f4f 	dsb	sy
 8006872:	607b      	str	r3, [r7, #4]
}
 8006874:	bf00      	nop
 8006876:	e7fe      	b.n	8006876 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006878:	4b0a      	ldr	r3, [pc, #40]	; (80068a4 <vPortExitCritical+0x50>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	3b01      	subs	r3, #1
 800687e:	4a09      	ldr	r2, [pc, #36]	; (80068a4 <vPortExitCritical+0x50>)
 8006880:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006882:	4b08      	ldr	r3, [pc, #32]	; (80068a4 <vPortExitCritical+0x50>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d105      	bne.n	8006896 <vPortExitCritical+0x42>
 800688a:	2300      	movs	r3, #0
 800688c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	f383 8811 	msr	BASEPRI, r3
}
 8006894:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006896:	bf00      	nop
 8006898:	370c      	adds	r7, #12
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	2000000c 	.word	0x2000000c
	...

080068b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80068b0:	f3ef 8009 	mrs	r0, PSP
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	4b15      	ldr	r3, [pc, #84]	; (8006910 <pxCurrentTCBConst>)
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	f01e 0f10 	tst.w	lr, #16
 80068c0:	bf08      	it	eq
 80068c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80068c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ca:	6010      	str	r0, [r2, #0]
 80068cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80068d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80068d4:	f380 8811 	msr	BASEPRI, r0
 80068d8:	f3bf 8f4f 	dsb	sy
 80068dc:	f3bf 8f6f 	isb	sy
 80068e0:	f7ff f816 	bl	8005910 <vTaskSwitchContext>
 80068e4:	f04f 0000 	mov.w	r0, #0
 80068e8:	f380 8811 	msr	BASEPRI, r0
 80068ec:	bc09      	pop	{r0, r3}
 80068ee:	6819      	ldr	r1, [r3, #0]
 80068f0:	6808      	ldr	r0, [r1, #0]
 80068f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f6:	f01e 0f10 	tst.w	lr, #16
 80068fa:	bf08      	it	eq
 80068fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006900:	f380 8809 	msr	PSP, r0
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	f3af 8000 	nop.w

08006910 <pxCurrentTCBConst>:
 8006910:	20000438 	.word	0x20000438
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006914:	bf00      	nop
 8006916:	bf00      	nop

08006918 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
	__asm volatile
 800691e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	607b      	str	r3, [r7, #4]
}
 8006930:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006932:	f7fe ff35 	bl	80057a0 <xTaskIncrementTick>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d003      	beq.n	8006944 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800693c:	4b06      	ldr	r3, [pc, #24]	; (8006958 <SysTick_Handler+0x40>)
 800693e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006942:	601a      	str	r2, [r3, #0]
 8006944:	2300      	movs	r3, #0
 8006946:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	f383 8811 	msr	BASEPRI, r3
}
 800694e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006950:	bf00      	nop
 8006952:	3708      	adds	r7, #8
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	e000ed04 	.word	0xe000ed04

0800695c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800695c:	b480      	push	{r7}
 800695e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006960:	4b0b      	ldr	r3, [pc, #44]	; (8006990 <vPortSetupTimerInterrupt+0x34>)
 8006962:	2200      	movs	r2, #0
 8006964:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006966:	4b0b      	ldr	r3, [pc, #44]	; (8006994 <vPortSetupTimerInterrupt+0x38>)
 8006968:	2200      	movs	r2, #0
 800696a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800696c:	4b0a      	ldr	r3, [pc, #40]	; (8006998 <vPortSetupTimerInterrupt+0x3c>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a0a      	ldr	r2, [pc, #40]	; (800699c <vPortSetupTimerInterrupt+0x40>)
 8006972:	fba2 2303 	umull	r2, r3, r2, r3
 8006976:	099b      	lsrs	r3, r3, #6
 8006978:	4a09      	ldr	r2, [pc, #36]	; (80069a0 <vPortSetupTimerInterrupt+0x44>)
 800697a:	3b01      	subs	r3, #1
 800697c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800697e:	4b04      	ldr	r3, [pc, #16]	; (8006990 <vPortSetupTimerInterrupt+0x34>)
 8006980:	2207      	movs	r2, #7
 8006982:	601a      	str	r2, [r3, #0]
}
 8006984:	bf00      	nop
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	e000e010 	.word	0xe000e010
 8006994:	e000e018 	.word	0xe000e018
 8006998:	20000000 	.word	0x20000000
 800699c:	10624dd3 	.word	0x10624dd3
 80069a0:	e000e014 	.word	0xe000e014

080069a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80069a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80069b4 <vPortEnableVFP+0x10>
 80069a8:	6801      	ldr	r1, [r0, #0]
 80069aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80069ae:	6001      	str	r1, [r0, #0]
 80069b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80069b2:	bf00      	nop
 80069b4:	e000ed88 	.word	0xe000ed88

080069b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80069be:	f3ef 8305 	mrs	r3, IPSR
 80069c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2b0f      	cmp	r3, #15
 80069c8:	d914      	bls.n	80069f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80069ca:	4a17      	ldr	r2, [pc, #92]	; (8006a28 <vPortValidateInterruptPriority+0x70>)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4413      	add	r3, r2
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80069d4:	4b15      	ldr	r3, [pc, #84]	; (8006a2c <vPortValidateInterruptPriority+0x74>)
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	7afa      	ldrb	r2, [r7, #11]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d20a      	bcs.n	80069f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80069de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	607b      	str	r3, [r7, #4]
}
 80069f0:	bf00      	nop
 80069f2:	e7fe      	b.n	80069f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80069f4:	4b0e      	ldr	r3, [pc, #56]	; (8006a30 <vPortValidateInterruptPriority+0x78>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80069fc:	4b0d      	ldr	r3, [pc, #52]	; (8006a34 <vPortValidateInterruptPriority+0x7c>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d90a      	bls.n	8006a1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a08:	f383 8811 	msr	BASEPRI, r3
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	603b      	str	r3, [r7, #0]
}
 8006a16:	bf00      	nop
 8006a18:	e7fe      	b.n	8006a18 <vPortValidateInterruptPriority+0x60>
	}
 8006a1a:	bf00      	nop
 8006a1c:	3714      	adds	r7, #20
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	e000e3f0 	.word	0xe000e3f0
 8006a2c:	20000564 	.word	0x20000564
 8006a30:	e000ed0c 	.word	0xe000ed0c
 8006a34:	20000568 	.word	0x20000568

08006a38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b08a      	sub	sp, #40	; 0x28
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a40:	2300      	movs	r3, #0
 8006a42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a44:	f7fe fde0 	bl	8005608 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a48:	4b5b      	ldr	r3, [pc, #364]	; (8006bb8 <pvPortMalloc+0x180>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d101      	bne.n	8006a54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a50:	f000 f920 	bl	8006c94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a54:	4b59      	ldr	r3, [pc, #356]	; (8006bbc <pvPortMalloc+0x184>)
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f040 8093 	bne.w	8006b88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d01d      	beq.n	8006aa4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006a68:	2208      	movs	r2, #8
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f003 0307 	and.w	r3, r3, #7
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d014      	beq.n	8006aa4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f023 0307 	bic.w	r3, r3, #7
 8006a80:	3308      	adds	r3, #8
 8006a82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f003 0307 	and.w	r3, r3, #7
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00a      	beq.n	8006aa4 <pvPortMalloc+0x6c>
	__asm volatile
 8006a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	617b      	str	r3, [r7, #20]
}
 8006aa0:	bf00      	nop
 8006aa2:	e7fe      	b.n	8006aa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d06e      	beq.n	8006b88 <pvPortMalloc+0x150>
 8006aaa:	4b45      	ldr	r3, [pc, #276]	; (8006bc0 <pvPortMalloc+0x188>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d869      	bhi.n	8006b88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ab4:	4b43      	ldr	r3, [pc, #268]	; (8006bc4 <pvPortMalloc+0x18c>)
 8006ab6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ab8:	4b42      	ldr	r3, [pc, #264]	; (8006bc4 <pvPortMalloc+0x18c>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006abe:	e004      	b.n	8006aca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d903      	bls.n	8006adc <pvPortMalloc+0xa4>
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1f1      	bne.n	8006ac0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006adc:	4b36      	ldr	r3, [pc, #216]	; (8006bb8 <pvPortMalloc+0x180>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d050      	beq.n	8006b88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ae6:	6a3b      	ldr	r3, [r7, #32]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2208      	movs	r2, #8
 8006aec:	4413      	add	r3, r2
 8006aee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	1ad2      	subs	r2, r2, r3
 8006b00:	2308      	movs	r3, #8
 8006b02:	005b      	lsls	r3, r3, #1
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d91f      	bls.n	8006b48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	f003 0307 	and.w	r3, r3, #7
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00a      	beq.n	8006b30 <pvPortMalloc+0xf8>
	__asm volatile
 8006b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1e:	f383 8811 	msr	BASEPRI, r3
 8006b22:	f3bf 8f6f 	isb	sy
 8006b26:	f3bf 8f4f 	dsb	sy
 8006b2a:	613b      	str	r3, [r7, #16]
}
 8006b2c:	bf00      	nop
 8006b2e:	e7fe      	b.n	8006b2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b32:	685a      	ldr	r2, [r3, #4]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	1ad2      	subs	r2, r2, r3
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b42:	69b8      	ldr	r0, [r7, #24]
 8006b44:	f000 f908 	bl	8006d58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b48:	4b1d      	ldr	r3, [pc, #116]	; (8006bc0 <pvPortMalloc+0x188>)
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	4a1b      	ldr	r2, [pc, #108]	; (8006bc0 <pvPortMalloc+0x188>)
 8006b54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b56:	4b1a      	ldr	r3, [pc, #104]	; (8006bc0 <pvPortMalloc+0x188>)
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	4b1b      	ldr	r3, [pc, #108]	; (8006bc8 <pvPortMalloc+0x190>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d203      	bcs.n	8006b6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b62:	4b17      	ldr	r3, [pc, #92]	; (8006bc0 <pvPortMalloc+0x188>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a18      	ldr	r2, [pc, #96]	; (8006bc8 <pvPortMalloc+0x190>)
 8006b68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6c:	685a      	ldr	r2, [r3, #4]
 8006b6e:	4b13      	ldr	r3, [pc, #76]	; (8006bbc <pvPortMalloc+0x184>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	431a      	orrs	r2, r3
 8006b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006b7e:	4b13      	ldr	r3, [pc, #76]	; (8006bcc <pvPortMalloc+0x194>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	3301      	adds	r3, #1
 8006b84:	4a11      	ldr	r2, [pc, #68]	; (8006bcc <pvPortMalloc+0x194>)
 8006b86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b88:	f7fe fd4c 	bl	8005624 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	f003 0307 	and.w	r3, r3, #7
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00a      	beq.n	8006bac <pvPortMalloc+0x174>
	__asm volatile
 8006b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	60fb      	str	r3, [r7, #12]
}
 8006ba8:	bf00      	nop
 8006baa:	e7fe      	b.n	8006baa <pvPortMalloc+0x172>
	return pvReturn;
 8006bac:	69fb      	ldr	r3, [r7, #28]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3728      	adds	r7, #40	; 0x28
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	20004174 	.word	0x20004174
 8006bbc:	20004188 	.word	0x20004188
 8006bc0:	20004178 	.word	0x20004178
 8006bc4:	2000416c 	.word	0x2000416c
 8006bc8:	2000417c 	.word	0x2000417c
 8006bcc:	20004180 	.word	0x20004180

08006bd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b086      	sub	sp, #24
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d04d      	beq.n	8006c7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006be2:	2308      	movs	r3, #8
 8006be4:	425b      	negs	r3, r3
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	4413      	add	r3, r2
 8006bea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	4b24      	ldr	r3, [pc, #144]	; (8006c88 <vPortFree+0xb8>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10a      	bne.n	8006c14 <vPortFree+0x44>
	__asm volatile
 8006bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c02:	f383 8811 	msr	BASEPRI, r3
 8006c06:	f3bf 8f6f 	isb	sy
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	60fb      	str	r3, [r7, #12]
}
 8006c10:	bf00      	nop
 8006c12:	e7fe      	b.n	8006c12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00a      	beq.n	8006c32 <vPortFree+0x62>
	__asm volatile
 8006c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c20:	f383 8811 	msr	BASEPRI, r3
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	60bb      	str	r3, [r7, #8]
}
 8006c2e:	bf00      	nop
 8006c30:	e7fe      	b.n	8006c30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	685a      	ldr	r2, [r3, #4]
 8006c36:	4b14      	ldr	r3, [pc, #80]	; (8006c88 <vPortFree+0xb8>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d01e      	beq.n	8006c7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d11a      	bne.n	8006c7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	685a      	ldr	r2, [r3, #4]
 8006c4c:	4b0e      	ldr	r3, [pc, #56]	; (8006c88 <vPortFree+0xb8>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	43db      	mvns	r3, r3
 8006c52:	401a      	ands	r2, r3
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c58:	f7fe fcd6 	bl	8005608 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	685a      	ldr	r2, [r3, #4]
 8006c60:	4b0a      	ldr	r3, [pc, #40]	; (8006c8c <vPortFree+0xbc>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4413      	add	r3, r2
 8006c66:	4a09      	ldr	r2, [pc, #36]	; (8006c8c <vPortFree+0xbc>)
 8006c68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c6a:	6938      	ldr	r0, [r7, #16]
 8006c6c:	f000 f874 	bl	8006d58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006c70:	4b07      	ldr	r3, [pc, #28]	; (8006c90 <vPortFree+0xc0>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	3301      	adds	r3, #1
 8006c76:	4a06      	ldr	r2, [pc, #24]	; (8006c90 <vPortFree+0xc0>)
 8006c78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006c7a:	f7fe fcd3 	bl	8005624 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c7e:	bf00      	nop
 8006c80:	3718      	adds	r7, #24
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	20004188 	.word	0x20004188
 8006c8c:	20004178 	.word	0x20004178
 8006c90:	20004184 	.word	0x20004184

08006c94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006c9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ca0:	4b27      	ldr	r3, [pc, #156]	; (8006d40 <prvHeapInit+0xac>)
 8006ca2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f003 0307 	and.w	r3, r3, #7
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00c      	beq.n	8006cc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	3307      	adds	r3, #7
 8006cb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f023 0307 	bic.w	r3, r3, #7
 8006cba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	4a1f      	ldr	r2, [pc, #124]	; (8006d40 <prvHeapInit+0xac>)
 8006cc4:	4413      	add	r3, r2
 8006cc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ccc:	4a1d      	ldr	r2, [pc, #116]	; (8006d44 <prvHeapInit+0xb0>)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006cd2:	4b1c      	ldr	r3, [pc, #112]	; (8006d44 <prvHeapInit+0xb0>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	68ba      	ldr	r2, [r7, #8]
 8006cdc:	4413      	add	r3, r2
 8006cde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ce0:	2208      	movs	r2, #8
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	1a9b      	subs	r3, r3, r2
 8006ce6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f023 0307 	bic.w	r3, r3, #7
 8006cee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	4a15      	ldr	r2, [pc, #84]	; (8006d48 <prvHeapInit+0xb4>)
 8006cf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006cf6:	4b14      	ldr	r3, [pc, #80]	; (8006d48 <prvHeapInit+0xb4>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006cfe:	4b12      	ldr	r3, [pc, #72]	; (8006d48 <prvHeapInit+0xb4>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2200      	movs	r2, #0
 8006d04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	1ad2      	subs	r2, r2, r3
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d14:	4b0c      	ldr	r3, [pc, #48]	; (8006d48 <prvHeapInit+0xb4>)
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	4a0a      	ldr	r2, [pc, #40]	; (8006d4c <prvHeapInit+0xb8>)
 8006d22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	4a09      	ldr	r2, [pc, #36]	; (8006d50 <prvHeapInit+0xbc>)
 8006d2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d2c:	4b09      	ldr	r3, [pc, #36]	; (8006d54 <prvHeapInit+0xc0>)
 8006d2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006d32:	601a      	str	r2, [r3, #0]
}
 8006d34:	bf00      	nop
 8006d36:	3714      	adds	r7, #20
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr
 8006d40:	2000056c 	.word	0x2000056c
 8006d44:	2000416c 	.word	0x2000416c
 8006d48:	20004174 	.word	0x20004174
 8006d4c:	2000417c 	.word	0x2000417c
 8006d50:	20004178 	.word	0x20004178
 8006d54:	20004188 	.word	0x20004188

08006d58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d60:	4b28      	ldr	r3, [pc, #160]	; (8006e04 <prvInsertBlockIntoFreeList+0xac>)
 8006d62:	60fb      	str	r3, [r7, #12]
 8006d64:	e002      	b.n	8006d6c <prvInsertBlockIntoFreeList+0x14>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	60fb      	str	r3, [r7, #12]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d8f7      	bhi.n	8006d66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	4413      	add	r3, r2
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d108      	bne.n	8006d9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	685a      	ldr	r2, [r3, #4]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	441a      	add	r2, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	441a      	add	r2, r3
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d118      	bne.n	8006de0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	4b15      	ldr	r3, [pc, #84]	; (8006e08 <prvInsertBlockIntoFreeList+0xb0>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d00d      	beq.n	8006dd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	685a      	ldr	r2, [r3, #4]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	441a      	add	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	601a      	str	r2, [r3, #0]
 8006dd4:	e008      	b.n	8006de8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006dd6:	4b0c      	ldr	r3, [pc, #48]	; (8006e08 <prvInsertBlockIntoFreeList+0xb0>)
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	e003      	b.n	8006de8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d002      	beq.n	8006df6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006df6:	bf00      	nop
 8006df8:	3714      	adds	r7, #20
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	2000416c 	.word	0x2000416c
 8006e08:	20004174 	.word	0x20004174

08006e0c <__errno>:
 8006e0c:	4b01      	ldr	r3, [pc, #4]	; (8006e14 <__errno+0x8>)
 8006e0e:	6818      	ldr	r0, [r3, #0]
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	20000010 	.word	0x20000010

08006e18 <__libc_init_array>:
 8006e18:	b570      	push	{r4, r5, r6, lr}
 8006e1a:	4d0d      	ldr	r5, [pc, #52]	; (8006e50 <__libc_init_array+0x38>)
 8006e1c:	4c0d      	ldr	r4, [pc, #52]	; (8006e54 <__libc_init_array+0x3c>)
 8006e1e:	1b64      	subs	r4, r4, r5
 8006e20:	10a4      	asrs	r4, r4, #2
 8006e22:	2600      	movs	r6, #0
 8006e24:	42a6      	cmp	r6, r4
 8006e26:	d109      	bne.n	8006e3c <__libc_init_array+0x24>
 8006e28:	4d0b      	ldr	r5, [pc, #44]	; (8006e58 <__libc_init_array+0x40>)
 8006e2a:	4c0c      	ldr	r4, [pc, #48]	; (8006e5c <__libc_init_array+0x44>)
 8006e2c:	f000 fc8e 	bl	800774c <_init>
 8006e30:	1b64      	subs	r4, r4, r5
 8006e32:	10a4      	asrs	r4, r4, #2
 8006e34:	2600      	movs	r6, #0
 8006e36:	42a6      	cmp	r6, r4
 8006e38:	d105      	bne.n	8006e46 <__libc_init_array+0x2e>
 8006e3a:	bd70      	pop	{r4, r5, r6, pc}
 8006e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e40:	4798      	blx	r3
 8006e42:	3601      	adds	r6, #1
 8006e44:	e7ee      	b.n	8006e24 <__libc_init_array+0xc>
 8006e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e4a:	4798      	blx	r3
 8006e4c:	3601      	adds	r6, #1
 8006e4e:	e7f2      	b.n	8006e36 <__libc_init_array+0x1e>
 8006e50:	08007aa4 	.word	0x08007aa4
 8006e54:	08007aa4 	.word	0x08007aa4
 8006e58:	08007aa4 	.word	0x08007aa4
 8006e5c:	08007aa8 	.word	0x08007aa8

08006e60 <memcpy>:
 8006e60:	440a      	add	r2, r1
 8006e62:	4291      	cmp	r1, r2
 8006e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e68:	d100      	bne.n	8006e6c <memcpy+0xc>
 8006e6a:	4770      	bx	lr
 8006e6c:	b510      	push	{r4, lr}
 8006e6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e76:	4291      	cmp	r1, r2
 8006e78:	d1f9      	bne.n	8006e6e <memcpy+0xe>
 8006e7a:	bd10      	pop	{r4, pc}

08006e7c <memset>:
 8006e7c:	4402      	add	r2, r0
 8006e7e:	4603      	mov	r3, r0
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d100      	bne.n	8006e86 <memset+0xa>
 8006e84:	4770      	bx	lr
 8006e86:	f803 1b01 	strb.w	r1, [r3], #1
 8006e8a:	e7f9      	b.n	8006e80 <memset+0x4>

08006e8c <siprintf>:
 8006e8c:	b40e      	push	{r1, r2, r3}
 8006e8e:	b500      	push	{lr}
 8006e90:	b09c      	sub	sp, #112	; 0x70
 8006e92:	ab1d      	add	r3, sp, #116	; 0x74
 8006e94:	9002      	str	r0, [sp, #8]
 8006e96:	9006      	str	r0, [sp, #24]
 8006e98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e9c:	4809      	ldr	r0, [pc, #36]	; (8006ec4 <siprintf+0x38>)
 8006e9e:	9107      	str	r1, [sp, #28]
 8006ea0:	9104      	str	r1, [sp, #16]
 8006ea2:	4909      	ldr	r1, [pc, #36]	; (8006ec8 <siprintf+0x3c>)
 8006ea4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ea8:	9105      	str	r1, [sp, #20]
 8006eaa:	6800      	ldr	r0, [r0, #0]
 8006eac:	9301      	str	r3, [sp, #4]
 8006eae:	a902      	add	r1, sp, #8
 8006eb0:	f000 f868 	bl	8006f84 <_svfiprintf_r>
 8006eb4:	9b02      	ldr	r3, [sp, #8]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	701a      	strb	r2, [r3, #0]
 8006eba:	b01c      	add	sp, #112	; 0x70
 8006ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ec0:	b003      	add	sp, #12
 8006ec2:	4770      	bx	lr
 8006ec4:	20000010 	.word	0x20000010
 8006ec8:	ffff0208 	.word	0xffff0208

08006ecc <__ssputs_r>:
 8006ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ed0:	688e      	ldr	r6, [r1, #8]
 8006ed2:	429e      	cmp	r6, r3
 8006ed4:	4682      	mov	sl, r0
 8006ed6:	460c      	mov	r4, r1
 8006ed8:	4690      	mov	r8, r2
 8006eda:	461f      	mov	r7, r3
 8006edc:	d838      	bhi.n	8006f50 <__ssputs_r+0x84>
 8006ede:	898a      	ldrh	r2, [r1, #12]
 8006ee0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ee4:	d032      	beq.n	8006f4c <__ssputs_r+0x80>
 8006ee6:	6825      	ldr	r5, [r4, #0]
 8006ee8:	6909      	ldr	r1, [r1, #16]
 8006eea:	eba5 0901 	sub.w	r9, r5, r1
 8006eee:	6965      	ldr	r5, [r4, #20]
 8006ef0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ef4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ef8:	3301      	adds	r3, #1
 8006efa:	444b      	add	r3, r9
 8006efc:	106d      	asrs	r5, r5, #1
 8006efe:	429d      	cmp	r5, r3
 8006f00:	bf38      	it	cc
 8006f02:	461d      	movcc	r5, r3
 8006f04:	0553      	lsls	r3, r2, #21
 8006f06:	d531      	bpl.n	8006f6c <__ssputs_r+0xa0>
 8006f08:	4629      	mov	r1, r5
 8006f0a:	f000 fb55 	bl	80075b8 <_malloc_r>
 8006f0e:	4606      	mov	r6, r0
 8006f10:	b950      	cbnz	r0, 8006f28 <__ssputs_r+0x5c>
 8006f12:	230c      	movs	r3, #12
 8006f14:	f8ca 3000 	str.w	r3, [sl]
 8006f18:	89a3      	ldrh	r3, [r4, #12]
 8006f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f1e:	81a3      	strh	r3, [r4, #12]
 8006f20:	f04f 30ff 	mov.w	r0, #4294967295
 8006f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f28:	6921      	ldr	r1, [r4, #16]
 8006f2a:	464a      	mov	r2, r9
 8006f2c:	f7ff ff98 	bl	8006e60 <memcpy>
 8006f30:	89a3      	ldrh	r3, [r4, #12]
 8006f32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f3a:	81a3      	strh	r3, [r4, #12]
 8006f3c:	6126      	str	r6, [r4, #16]
 8006f3e:	6165      	str	r5, [r4, #20]
 8006f40:	444e      	add	r6, r9
 8006f42:	eba5 0509 	sub.w	r5, r5, r9
 8006f46:	6026      	str	r6, [r4, #0]
 8006f48:	60a5      	str	r5, [r4, #8]
 8006f4a:	463e      	mov	r6, r7
 8006f4c:	42be      	cmp	r6, r7
 8006f4e:	d900      	bls.n	8006f52 <__ssputs_r+0x86>
 8006f50:	463e      	mov	r6, r7
 8006f52:	6820      	ldr	r0, [r4, #0]
 8006f54:	4632      	mov	r2, r6
 8006f56:	4641      	mov	r1, r8
 8006f58:	f000 faa8 	bl	80074ac <memmove>
 8006f5c:	68a3      	ldr	r3, [r4, #8]
 8006f5e:	1b9b      	subs	r3, r3, r6
 8006f60:	60a3      	str	r3, [r4, #8]
 8006f62:	6823      	ldr	r3, [r4, #0]
 8006f64:	4433      	add	r3, r6
 8006f66:	6023      	str	r3, [r4, #0]
 8006f68:	2000      	movs	r0, #0
 8006f6a:	e7db      	b.n	8006f24 <__ssputs_r+0x58>
 8006f6c:	462a      	mov	r2, r5
 8006f6e:	f000 fb97 	bl	80076a0 <_realloc_r>
 8006f72:	4606      	mov	r6, r0
 8006f74:	2800      	cmp	r0, #0
 8006f76:	d1e1      	bne.n	8006f3c <__ssputs_r+0x70>
 8006f78:	6921      	ldr	r1, [r4, #16]
 8006f7a:	4650      	mov	r0, sl
 8006f7c:	f000 fab0 	bl	80074e0 <_free_r>
 8006f80:	e7c7      	b.n	8006f12 <__ssputs_r+0x46>
	...

08006f84 <_svfiprintf_r>:
 8006f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f88:	4698      	mov	r8, r3
 8006f8a:	898b      	ldrh	r3, [r1, #12]
 8006f8c:	061b      	lsls	r3, r3, #24
 8006f8e:	b09d      	sub	sp, #116	; 0x74
 8006f90:	4607      	mov	r7, r0
 8006f92:	460d      	mov	r5, r1
 8006f94:	4614      	mov	r4, r2
 8006f96:	d50e      	bpl.n	8006fb6 <_svfiprintf_r+0x32>
 8006f98:	690b      	ldr	r3, [r1, #16]
 8006f9a:	b963      	cbnz	r3, 8006fb6 <_svfiprintf_r+0x32>
 8006f9c:	2140      	movs	r1, #64	; 0x40
 8006f9e:	f000 fb0b 	bl	80075b8 <_malloc_r>
 8006fa2:	6028      	str	r0, [r5, #0]
 8006fa4:	6128      	str	r0, [r5, #16]
 8006fa6:	b920      	cbnz	r0, 8006fb2 <_svfiprintf_r+0x2e>
 8006fa8:	230c      	movs	r3, #12
 8006faa:	603b      	str	r3, [r7, #0]
 8006fac:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb0:	e0d1      	b.n	8007156 <_svfiprintf_r+0x1d2>
 8006fb2:	2340      	movs	r3, #64	; 0x40
 8006fb4:	616b      	str	r3, [r5, #20]
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8006fba:	2320      	movs	r3, #32
 8006fbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fc4:	2330      	movs	r3, #48	; 0x30
 8006fc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007170 <_svfiprintf_r+0x1ec>
 8006fca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006fce:	f04f 0901 	mov.w	r9, #1
 8006fd2:	4623      	mov	r3, r4
 8006fd4:	469a      	mov	sl, r3
 8006fd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fda:	b10a      	cbz	r2, 8006fe0 <_svfiprintf_r+0x5c>
 8006fdc:	2a25      	cmp	r2, #37	; 0x25
 8006fde:	d1f9      	bne.n	8006fd4 <_svfiprintf_r+0x50>
 8006fe0:	ebba 0b04 	subs.w	fp, sl, r4
 8006fe4:	d00b      	beq.n	8006ffe <_svfiprintf_r+0x7a>
 8006fe6:	465b      	mov	r3, fp
 8006fe8:	4622      	mov	r2, r4
 8006fea:	4629      	mov	r1, r5
 8006fec:	4638      	mov	r0, r7
 8006fee:	f7ff ff6d 	bl	8006ecc <__ssputs_r>
 8006ff2:	3001      	adds	r0, #1
 8006ff4:	f000 80aa 	beq.w	800714c <_svfiprintf_r+0x1c8>
 8006ff8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ffa:	445a      	add	r2, fp
 8006ffc:	9209      	str	r2, [sp, #36]	; 0x24
 8006ffe:	f89a 3000 	ldrb.w	r3, [sl]
 8007002:	2b00      	cmp	r3, #0
 8007004:	f000 80a2 	beq.w	800714c <_svfiprintf_r+0x1c8>
 8007008:	2300      	movs	r3, #0
 800700a:	f04f 32ff 	mov.w	r2, #4294967295
 800700e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007012:	f10a 0a01 	add.w	sl, sl, #1
 8007016:	9304      	str	r3, [sp, #16]
 8007018:	9307      	str	r3, [sp, #28]
 800701a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800701e:	931a      	str	r3, [sp, #104]	; 0x68
 8007020:	4654      	mov	r4, sl
 8007022:	2205      	movs	r2, #5
 8007024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007028:	4851      	ldr	r0, [pc, #324]	; (8007170 <_svfiprintf_r+0x1ec>)
 800702a:	f7f9 f8f1 	bl	8000210 <memchr>
 800702e:	9a04      	ldr	r2, [sp, #16]
 8007030:	b9d8      	cbnz	r0, 800706a <_svfiprintf_r+0xe6>
 8007032:	06d0      	lsls	r0, r2, #27
 8007034:	bf44      	itt	mi
 8007036:	2320      	movmi	r3, #32
 8007038:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800703c:	0711      	lsls	r1, r2, #28
 800703e:	bf44      	itt	mi
 8007040:	232b      	movmi	r3, #43	; 0x2b
 8007042:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007046:	f89a 3000 	ldrb.w	r3, [sl]
 800704a:	2b2a      	cmp	r3, #42	; 0x2a
 800704c:	d015      	beq.n	800707a <_svfiprintf_r+0xf6>
 800704e:	9a07      	ldr	r2, [sp, #28]
 8007050:	4654      	mov	r4, sl
 8007052:	2000      	movs	r0, #0
 8007054:	f04f 0c0a 	mov.w	ip, #10
 8007058:	4621      	mov	r1, r4
 800705a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800705e:	3b30      	subs	r3, #48	; 0x30
 8007060:	2b09      	cmp	r3, #9
 8007062:	d94e      	bls.n	8007102 <_svfiprintf_r+0x17e>
 8007064:	b1b0      	cbz	r0, 8007094 <_svfiprintf_r+0x110>
 8007066:	9207      	str	r2, [sp, #28]
 8007068:	e014      	b.n	8007094 <_svfiprintf_r+0x110>
 800706a:	eba0 0308 	sub.w	r3, r0, r8
 800706e:	fa09 f303 	lsl.w	r3, r9, r3
 8007072:	4313      	orrs	r3, r2
 8007074:	9304      	str	r3, [sp, #16]
 8007076:	46a2      	mov	sl, r4
 8007078:	e7d2      	b.n	8007020 <_svfiprintf_r+0x9c>
 800707a:	9b03      	ldr	r3, [sp, #12]
 800707c:	1d19      	adds	r1, r3, #4
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	9103      	str	r1, [sp, #12]
 8007082:	2b00      	cmp	r3, #0
 8007084:	bfbb      	ittet	lt
 8007086:	425b      	neglt	r3, r3
 8007088:	f042 0202 	orrlt.w	r2, r2, #2
 800708c:	9307      	strge	r3, [sp, #28]
 800708e:	9307      	strlt	r3, [sp, #28]
 8007090:	bfb8      	it	lt
 8007092:	9204      	strlt	r2, [sp, #16]
 8007094:	7823      	ldrb	r3, [r4, #0]
 8007096:	2b2e      	cmp	r3, #46	; 0x2e
 8007098:	d10c      	bne.n	80070b4 <_svfiprintf_r+0x130>
 800709a:	7863      	ldrb	r3, [r4, #1]
 800709c:	2b2a      	cmp	r3, #42	; 0x2a
 800709e:	d135      	bne.n	800710c <_svfiprintf_r+0x188>
 80070a0:	9b03      	ldr	r3, [sp, #12]
 80070a2:	1d1a      	adds	r2, r3, #4
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	9203      	str	r2, [sp, #12]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	bfb8      	it	lt
 80070ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80070b0:	3402      	adds	r4, #2
 80070b2:	9305      	str	r3, [sp, #20]
 80070b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007180 <_svfiprintf_r+0x1fc>
 80070b8:	7821      	ldrb	r1, [r4, #0]
 80070ba:	2203      	movs	r2, #3
 80070bc:	4650      	mov	r0, sl
 80070be:	f7f9 f8a7 	bl	8000210 <memchr>
 80070c2:	b140      	cbz	r0, 80070d6 <_svfiprintf_r+0x152>
 80070c4:	2340      	movs	r3, #64	; 0x40
 80070c6:	eba0 000a 	sub.w	r0, r0, sl
 80070ca:	fa03 f000 	lsl.w	r0, r3, r0
 80070ce:	9b04      	ldr	r3, [sp, #16]
 80070d0:	4303      	orrs	r3, r0
 80070d2:	3401      	adds	r4, #1
 80070d4:	9304      	str	r3, [sp, #16]
 80070d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070da:	4826      	ldr	r0, [pc, #152]	; (8007174 <_svfiprintf_r+0x1f0>)
 80070dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070e0:	2206      	movs	r2, #6
 80070e2:	f7f9 f895 	bl	8000210 <memchr>
 80070e6:	2800      	cmp	r0, #0
 80070e8:	d038      	beq.n	800715c <_svfiprintf_r+0x1d8>
 80070ea:	4b23      	ldr	r3, [pc, #140]	; (8007178 <_svfiprintf_r+0x1f4>)
 80070ec:	bb1b      	cbnz	r3, 8007136 <_svfiprintf_r+0x1b2>
 80070ee:	9b03      	ldr	r3, [sp, #12]
 80070f0:	3307      	adds	r3, #7
 80070f2:	f023 0307 	bic.w	r3, r3, #7
 80070f6:	3308      	adds	r3, #8
 80070f8:	9303      	str	r3, [sp, #12]
 80070fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070fc:	4433      	add	r3, r6
 80070fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007100:	e767      	b.n	8006fd2 <_svfiprintf_r+0x4e>
 8007102:	fb0c 3202 	mla	r2, ip, r2, r3
 8007106:	460c      	mov	r4, r1
 8007108:	2001      	movs	r0, #1
 800710a:	e7a5      	b.n	8007058 <_svfiprintf_r+0xd4>
 800710c:	2300      	movs	r3, #0
 800710e:	3401      	adds	r4, #1
 8007110:	9305      	str	r3, [sp, #20]
 8007112:	4619      	mov	r1, r3
 8007114:	f04f 0c0a 	mov.w	ip, #10
 8007118:	4620      	mov	r0, r4
 800711a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800711e:	3a30      	subs	r2, #48	; 0x30
 8007120:	2a09      	cmp	r2, #9
 8007122:	d903      	bls.n	800712c <_svfiprintf_r+0x1a8>
 8007124:	2b00      	cmp	r3, #0
 8007126:	d0c5      	beq.n	80070b4 <_svfiprintf_r+0x130>
 8007128:	9105      	str	r1, [sp, #20]
 800712a:	e7c3      	b.n	80070b4 <_svfiprintf_r+0x130>
 800712c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007130:	4604      	mov	r4, r0
 8007132:	2301      	movs	r3, #1
 8007134:	e7f0      	b.n	8007118 <_svfiprintf_r+0x194>
 8007136:	ab03      	add	r3, sp, #12
 8007138:	9300      	str	r3, [sp, #0]
 800713a:	462a      	mov	r2, r5
 800713c:	4b0f      	ldr	r3, [pc, #60]	; (800717c <_svfiprintf_r+0x1f8>)
 800713e:	a904      	add	r1, sp, #16
 8007140:	4638      	mov	r0, r7
 8007142:	f3af 8000 	nop.w
 8007146:	1c42      	adds	r2, r0, #1
 8007148:	4606      	mov	r6, r0
 800714a:	d1d6      	bne.n	80070fa <_svfiprintf_r+0x176>
 800714c:	89ab      	ldrh	r3, [r5, #12]
 800714e:	065b      	lsls	r3, r3, #25
 8007150:	f53f af2c 	bmi.w	8006fac <_svfiprintf_r+0x28>
 8007154:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007156:	b01d      	add	sp, #116	; 0x74
 8007158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800715c:	ab03      	add	r3, sp, #12
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	462a      	mov	r2, r5
 8007162:	4b06      	ldr	r3, [pc, #24]	; (800717c <_svfiprintf_r+0x1f8>)
 8007164:	a904      	add	r1, sp, #16
 8007166:	4638      	mov	r0, r7
 8007168:	f000 f87a 	bl	8007260 <_printf_i>
 800716c:	e7eb      	b.n	8007146 <_svfiprintf_r+0x1c2>
 800716e:	bf00      	nop
 8007170:	08007a68 	.word	0x08007a68
 8007174:	08007a72 	.word	0x08007a72
 8007178:	00000000 	.word	0x00000000
 800717c:	08006ecd 	.word	0x08006ecd
 8007180:	08007a6e 	.word	0x08007a6e

08007184 <_printf_common>:
 8007184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007188:	4616      	mov	r6, r2
 800718a:	4699      	mov	r9, r3
 800718c:	688a      	ldr	r2, [r1, #8]
 800718e:	690b      	ldr	r3, [r1, #16]
 8007190:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007194:	4293      	cmp	r3, r2
 8007196:	bfb8      	it	lt
 8007198:	4613      	movlt	r3, r2
 800719a:	6033      	str	r3, [r6, #0]
 800719c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071a0:	4607      	mov	r7, r0
 80071a2:	460c      	mov	r4, r1
 80071a4:	b10a      	cbz	r2, 80071aa <_printf_common+0x26>
 80071a6:	3301      	adds	r3, #1
 80071a8:	6033      	str	r3, [r6, #0]
 80071aa:	6823      	ldr	r3, [r4, #0]
 80071ac:	0699      	lsls	r1, r3, #26
 80071ae:	bf42      	ittt	mi
 80071b0:	6833      	ldrmi	r3, [r6, #0]
 80071b2:	3302      	addmi	r3, #2
 80071b4:	6033      	strmi	r3, [r6, #0]
 80071b6:	6825      	ldr	r5, [r4, #0]
 80071b8:	f015 0506 	ands.w	r5, r5, #6
 80071bc:	d106      	bne.n	80071cc <_printf_common+0x48>
 80071be:	f104 0a19 	add.w	sl, r4, #25
 80071c2:	68e3      	ldr	r3, [r4, #12]
 80071c4:	6832      	ldr	r2, [r6, #0]
 80071c6:	1a9b      	subs	r3, r3, r2
 80071c8:	42ab      	cmp	r3, r5
 80071ca:	dc26      	bgt.n	800721a <_printf_common+0x96>
 80071cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80071d0:	1e13      	subs	r3, r2, #0
 80071d2:	6822      	ldr	r2, [r4, #0]
 80071d4:	bf18      	it	ne
 80071d6:	2301      	movne	r3, #1
 80071d8:	0692      	lsls	r2, r2, #26
 80071da:	d42b      	bmi.n	8007234 <_printf_common+0xb0>
 80071dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071e0:	4649      	mov	r1, r9
 80071e2:	4638      	mov	r0, r7
 80071e4:	47c0      	blx	r8
 80071e6:	3001      	adds	r0, #1
 80071e8:	d01e      	beq.n	8007228 <_printf_common+0xa4>
 80071ea:	6823      	ldr	r3, [r4, #0]
 80071ec:	68e5      	ldr	r5, [r4, #12]
 80071ee:	6832      	ldr	r2, [r6, #0]
 80071f0:	f003 0306 	and.w	r3, r3, #6
 80071f4:	2b04      	cmp	r3, #4
 80071f6:	bf08      	it	eq
 80071f8:	1aad      	subeq	r5, r5, r2
 80071fa:	68a3      	ldr	r3, [r4, #8]
 80071fc:	6922      	ldr	r2, [r4, #16]
 80071fe:	bf0c      	ite	eq
 8007200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007204:	2500      	movne	r5, #0
 8007206:	4293      	cmp	r3, r2
 8007208:	bfc4      	itt	gt
 800720a:	1a9b      	subgt	r3, r3, r2
 800720c:	18ed      	addgt	r5, r5, r3
 800720e:	2600      	movs	r6, #0
 8007210:	341a      	adds	r4, #26
 8007212:	42b5      	cmp	r5, r6
 8007214:	d11a      	bne.n	800724c <_printf_common+0xc8>
 8007216:	2000      	movs	r0, #0
 8007218:	e008      	b.n	800722c <_printf_common+0xa8>
 800721a:	2301      	movs	r3, #1
 800721c:	4652      	mov	r2, sl
 800721e:	4649      	mov	r1, r9
 8007220:	4638      	mov	r0, r7
 8007222:	47c0      	blx	r8
 8007224:	3001      	adds	r0, #1
 8007226:	d103      	bne.n	8007230 <_printf_common+0xac>
 8007228:	f04f 30ff 	mov.w	r0, #4294967295
 800722c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007230:	3501      	adds	r5, #1
 8007232:	e7c6      	b.n	80071c2 <_printf_common+0x3e>
 8007234:	18e1      	adds	r1, r4, r3
 8007236:	1c5a      	adds	r2, r3, #1
 8007238:	2030      	movs	r0, #48	; 0x30
 800723a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800723e:	4422      	add	r2, r4
 8007240:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007244:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007248:	3302      	adds	r3, #2
 800724a:	e7c7      	b.n	80071dc <_printf_common+0x58>
 800724c:	2301      	movs	r3, #1
 800724e:	4622      	mov	r2, r4
 8007250:	4649      	mov	r1, r9
 8007252:	4638      	mov	r0, r7
 8007254:	47c0      	blx	r8
 8007256:	3001      	adds	r0, #1
 8007258:	d0e6      	beq.n	8007228 <_printf_common+0xa4>
 800725a:	3601      	adds	r6, #1
 800725c:	e7d9      	b.n	8007212 <_printf_common+0x8e>
	...

08007260 <_printf_i>:
 8007260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007264:	7e0f      	ldrb	r7, [r1, #24]
 8007266:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007268:	2f78      	cmp	r7, #120	; 0x78
 800726a:	4691      	mov	r9, r2
 800726c:	4680      	mov	r8, r0
 800726e:	460c      	mov	r4, r1
 8007270:	469a      	mov	sl, r3
 8007272:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007276:	d807      	bhi.n	8007288 <_printf_i+0x28>
 8007278:	2f62      	cmp	r7, #98	; 0x62
 800727a:	d80a      	bhi.n	8007292 <_printf_i+0x32>
 800727c:	2f00      	cmp	r7, #0
 800727e:	f000 80d8 	beq.w	8007432 <_printf_i+0x1d2>
 8007282:	2f58      	cmp	r7, #88	; 0x58
 8007284:	f000 80a3 	beq.w	80073ce <_printf_i+0x16e>
 8007288:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800728c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007290:	e03a      	b.n	8007308 <_printf_i+0xa8>
 8007292:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007296:	2b15      	cmp	r3, #21
 8007298:	d8f6      	bhi.n	8007288 <_printf_i+0x28>
 800729a:	a101      	add	r1, pc, #4	; (adr r1, 80072a0 <_printf_i+0x40>)
 800729c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072a0:	080072f9 	.word	0x080072f9
 80072a4:	0800730d 	.word	0x0800730d
 80072a8:	08007289 	.word	0x08007289
 80072ac:	08007289 	.word	0x08007289
 80072b0:	08007289 	.word	0x08007289
 80072b4:	08007289 	.word	0x08007289
 80072b8:	0800730d 	.word	0x0800730d
 80072bc:	08007289 	.word	0x08007289
 80072c0:	08007289 	.word	0x08007289
 80072c4:	08007289 	.word	0x08007289
 80072c8:	08007289 	.word	0x08007289
 80072cc:	08007419 	.word	0x08007419
 80072d0:	0800733d 	.word	0x0800733d
 80072d4:	080073fb 	.word	0x080073fb
 80072d8:	08007289 	.word	0x08007289
 80072dc:	08007289 	.word	0x08007289
 80072e0:	0800743b 	.word	0x0800743b
 80072e4:	08007289 	.word	0x08007289
 80072e8:	0800733d 	.word	0x0800733d
 80072ec:	08007289 	.word	0x08007289
 80072f0:	08007289 	.word	0x08007289
 80072f4:	08007403 	.word	0x08007403
 80072f8:	682b      	ldr	r3, [r5, #0]
 80072fa:	1d1a      	adds	r2, r3, #4
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	602a      	str	r2, [r5, #0]
 8007300:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007304:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007308:	2301      	movs	r3, #1
 800730a:	e0a3      	b.n	8007454 <_printf_i+0x1f4>
 800730c:	6820      	ldr	r0, [r4, #0]
 800730e:	6829      	ldr	r1, [r5, #0]
 8007310:	0606      	lsls	r6, r0, #24
 8007312:	f101 0304 	add.w	r3, r1, #4
 8007316:	d50a      	bpl.n	800732e <_printf_i+0xce>
 8007318:	680e      	ldr	r6, [r1, #0]
 800731a:	602b      	str	r3, [r5, #0]
 800731c:	2e00      	cmp	r6, #0
 800731e:	da03      	bge.n	8007328 <_printf_i+0xc8>
 8007320:	232d      	movs	r3, #45	; 0x2d
 8007322:	4276      	negs	r6, r6
 8007324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007328:	485e      	ldr	r0, [pc, #376]	; (80074a4 <_printf_i+0x244>)
 800732a:	230a      	movs	r3, #10
 800732c:	e019      	b.n	8007362 <_printf_i+0x102>
 800732e:	680e      	ldr	r6, [r1, #0]
 8007330:	602b      	str	r3, [r5, #0]
 8007332:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007336:	bf18      	it	ne
 8007338:	b236      	sxthne	r6, r6
 800733a:	e7ef      	b.n	800731c <_printf_i+0xbc>
 800733c:	682b      	ldr	r3, [r5, #0]
 800733e:	6820      	ldr	r0, [r4, #0]
 8007340:	1d19      	adds	r1, r3, #4
 8007342:	6029      	str	r1, [r5, #0]
 8007344:	0601      	lsls	r1, r0, #24
 8007346:	d501      	bpl.n	800734c <_printf_i+0xec>
 8007348:	681e      	ldr	r6, [r3, #0]
 800734a:	e002      	b.n	8007352 <_printf_i+0xf2>
 800734c:	0646      	lsls	r6, r0, #25
 800734e:	d5fb      	bpl.n	8007348 <_printf_i+0xe8>
 8007350:	881e      	ldrh	r6, [r3, #0]
 8007352:	4854      	ldr	r0, [pc, #336]	; (80074a4 <_printf_i+0x244>)
 8007354:	2f6f      	cmp	r7, #111	; 0x6f
 8007356:	bf0c      	ite	eq
 8007358:	2308      	moveq	r3, #8
 800735a:	230a      	movne	r3, #10
 800735c:	2100      	movs	r1, #0
 800735e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007362:	6865      	ldr	r5, [r4, #4]
 8007364:	60a5      	str	r5, [r4, #8]
 8007366:	2d00      	cmp	r5, #0
 8007368:	bfa2      	ittt	ge
 800736a:	6821      	ldrge	r1, [r4, #0]
 800736c:	f021 0104 	bicge.w	r1, r1, #4
 8007370:	6021      	strge	r1, [r4, #0]
 8007372:	b90e      	cbnz	r6, 8007378 <_printf_i+0x118>
 8007374:	2d00      	cmp	r5, #0
 8007376:	d04d      	beq.n	8007414 <_printf_i+0x1b4>
 8007378:	4615      	mov	r5, r2
 800737a:	fbb6 f1f3 	udiv	r1, r6, r3
 800737e:	fb03 6711 	mls	r7, r3, r1, r6
 8007382:	5dc7      	ldrb	r7, [r0, r7]
 8007384:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007388:	4637      	mov	r7, r6
 800738a:	42bb      	cmp	r3, r7
 800738c:	460e      	mov	r6, r1
 800738e:	d9f4      	bls.n	800737a <_printf_i+0x11a>
 8007390:	2b08      	cmp	r3, #8
 8007392:	d10b      	bne.n	80073ac <_printf_i+0x14c>
 8007394:	6823      	ldr	r3, [r4, #0]
 8007396:	07de      	lsls	r6, r3, #31
 8007398:	d508      	bpl.n	80073ac <_printf_i+0x14c>
 800739a:	6923      	ldr	r3, [r4, #16]
 800739c:	6861      	ldr	r1, [r4, #4]
 800739e:	4299      	cmp	r1, r3
 80073a0:	bfde      	ittt	le
 80073a2:	2330      	movle	r3, #48	; 0x30
 80073a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80073a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80073ac:	1b52      	subs	r2, r2, r5
 80073ae:	6122      	str	r2, [r4, #16]
 80073b0:	f8cd a000 	str.w	sl, [sp]
 80073b4:	464b      	mov	r3, r9
 80073b6:	aa03      	add	r2, sp, #12
 80073b8:	4621      	mov	r1, r4
 80073ba:	4640      	mov	r0, r8
 80073bc:	f7ff fee2 	bl	8007184 <_printf_common>
 80073c0:	3001      	adds	r0, #1
 80073c2:	d14c      	bne.n	800745e <_printf_i+0x1fe>
 80073c4:	f04f 30ff 	mov.w	r0, #4294967295
 80073c8:	b004      	add	sp, #16
 80073ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ce:	4835      	ldr	r0, [pc, #212]	; (80074a4 <_printf_i+0x244>)
 80073d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80073d4:	6829      	ldr	r1, [r5, #0]
 80073d6:	6823      	ldr	r3, [r4, #0]
 80073d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80073dc:	6029      	str	r1, [r5, #0]
 80073de:	061d      	lsls	r5, r3, #24
 80073e0:	d514      	bpl.n	800740c <_printf_i+0x1ac>
 80073e2:	07df      	lsls	r7, r3, #31
 80073e4:	bf44      	itt	mi
 80073e6:	f043 0320 	orrmi.w	r3, r3, #32
 80073ea:	6023      	strmi	r3, [r4, #0]
 80073ec:	b91e      	cbnz	r6, 80073f6 <_printf_i+0x196>
 80073ee:	6823      	ldr	r3, [r4, #0]
 80073f0:	f023 0320 	bic.w	r3, r3, #32
 80073f4:	6023      	str	r3, [r4, #0]
 80073f6:	2310      	movs	r3, #16
 80073f8:	e7b0      	b.n	800735c <_printf_i+0xfc>
 80073fa:	6823      	ldr	r3, [r4, #0]
 80073fc:	f043 0320 	orr.w	r3, r3, #32
 8007400:	6023      	str	r3, [r4, #0]
 8007402:	2378      	movs	r3, #120	; 0x78
 8007404:	4828      	ldr	r0, [pc, #160]	; (80074a8 <_printf_i+0x248>)
 8007406:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800740a:	e7e3      	b.n	80073d4 <_printf_i+0x174>
 800740c:	0659      	lsls	r1, r3, #25
 800740e:	bf48      	it	mi
 8007410:	b2b6      	uxthmi	r6, r6
 8007412:	e7e6      	b.n	80073e2 <_printf_i+0x182>
 8007414:	4615      	mov	r5, r2
 8007416:	e7bb      	b.n	8007390 <_printf_i+0x130>
 8007418:	682b      	ldr	r3, [r5, #0]
 800741a:	6826      	ldr	r6, [r4, #0]
 800741c:	6961      	ldr	r1, [r4, #20]
 800741e:	1d18      	adds	r0, r3, #4
 8007420:	6028      	str	r0, [r5, #0]
 8007422:	0635      	lsls	r5, r6, #24
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	d501      	bpl.n	800742c <_printf_i+0x1cc>
 8007428:	6019      	str	r1, [r3, #0]
 800742a:	e002      	b.n	8007432 <_printf_i+0x1d2>
 800742c:	0670      	lsls	r0, r6, #25
 800742e:	d5fb      	bpl.n	8007428 <_printf_i+0x1c8>
 8007430:	8019      	strh	r1, [r3, #0]
 8007432:	2300      	movs	r3, #0
 8007434:	6123      	str	r3, [r4, #16]
 8007436:	4615      	mov	r5, r2
 8007438:	e7ba      	b.n	80073b0 <_printf_i+0x150>
 800743a:	682b      	ldr	r3, [r5, #0]
 800743c:	1d1a      	adds	r2, r3, #4
 800743e:	602a      	str	r2, [r5, #0]
 8007440:	681d      	ldr	r5, [r3, #0]
 8007442:	6862      	ldr	r2, [r4, #4]
 8007444:	2100      	movs	r1, #0
 8007446:	4628      	mov	r0, r5
 8007448:	f7f8 fee2 	bl	8000210 <memchr>
 800744c:	b108      	cbz	r0, 8007452 <_printf_i+0x1f2>
 800744e:	1b40      	subs	r0, r0, r5
 8007450:	6060      	str	r0, [r4, #4]
 8007452:	6863      	ldr	r3, [r4, #4]
 8007454:	6123      	str	r3, [r4, #16]
 8007456:	2300      	movs	r3, #0
 8007458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800745c:	e7a8      	b.n	80073b0 <_printf_i+0x150>
 800745e:	6923      	ldr	r3, [r4, #16]
 8007460:	462a      	mov	r2, r5
 8007462:	4649      	mov	r1, r9
 8007464:	4640      	mov	r0, r8
 8007466:	47d0      	blx	sl
 8007468:	3001      	adds	r0, #1
 800746a:	d0ab      	beq.n	80073c4 <_printf_i+0x164>
 800746c:	6823      	ldr	r3, [r4, #0]
 800746e:	079b      	lsls	r3, r3, #30
 8007470:	d413      	bmi.n	800749a <_printf_i+0x23a>
 8007472:	68e0      	ldr	r0, [r4, #12]
 8007474:	9b03      	ldr	r3, [sp, #12]
 8007476:	4298      	cmp	r0, r3
 8007478:	bfb8      	it	lt
 800747a:	4618      	movlt	r0, r3
 800747c:	e7a4      	b.n	80073c8 <_printf_i+0x168>
 800747e:	2301      	movs	r3, #1
 8007480:	4632      	mov	r2, r6
 8007482:	4649      	mov	r1, r9
 8007484:	4640      	mov	r0, r8
 8007486:	47d0      	blx	sl
 8007488:	3001      	adds	r0, #1
 800748a:	d09b      	beq.n	80073c4 <_printf_i+0x164>
 800748c:	3501      	adds	r5, #1
 800748e:	68e3      	ldr	r3, [r4, #12]
 8007490:	9903      	ldr	r1, [sp, #12]
 8007492:	1a5b      	subs	r3, r3, r1
 8007494:	42ab      	cmp	r3, r5
 8007496:	dcf2      	bgt.n	800747e <_printf_i+0x21e>
 8007498:	e7eb      	b.n	8007472 <_printf_i+0x212>
 800749a:	2500      	movs	r5, #0
 800749c:	f104 0619 	add.w	r6, r4, #25
 80074a0:	e7f5      	b.n	800748e <_printf_i+0x22e>
 80074a2:	bf00      	nop
 80074a4:	08007a79 	.word	0x08007a79
 80074a8:	08007a8a 	.word	0x08007a8a

080074ac <memmove>:
 80074ac:	4288      	cmp	r0, r1
 80074ae:	b510      	push	{r4, lr}
 80074b0:	eb01 0402 	add.w	r4, r1, r2
 80074b4:	d902      	bls.n	80074bc <memmove+0x10>
 80074b6:	4284      	cmp	r4, r0
 80074b8:	4623      	mov	r3, r4
 80074ba:	d807      	bhi.n	80074cc <memmove+0x20>
 80074bc:	1e43      	subs	r3, r0, #1
 80074be:	42a1      	cmp	r1, r4
 80074c0:	d008      	beq.n	80074d4 <memmove+0x28>
 80074c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074ca:	e7f8      	b.n	80074be <memmove+0x12>
 80074cc:	4402      	add	r2, r0
 80074ce:	4601      	mov	r1, r0
 80074d0:	428a      	cmp	r2, r1
 80074d2:	d100      	bne.n	80074d6 <memmove+0x2a>
 80074d4:	bd10      	pop	{r4, pc}
 80074d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80074da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80074de:	e7f7      	b.n	80074d0 <memmove+0x24>

080074e0 <_free_r>:
 80074e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074e2:	2900      	cmp	r1, #0
 80074e4:	d044      	beq.n	8007570 <_free_r+0x90>
 80074e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074ea:	9001      	str	r0, [sp, #4]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f1a1 0404 	sub.w	r4, r1, #4
 80074f2:	bfb8      	it	lt
 80074f4:	18e4      	addlt	r4, r4, r3
 80074f6:	f000 f913 	bl	8007720 <__malloc_lock>
 80074fa:	4a1e      	ldr	r2, [pc, #120]	; (8007574 <_free_r+0x94>)
 80074fc:	9801      	ldr	r0, [sp, #4]
 80074fe:	6813      	ldr	r3, [r2, #0]
 8007500:	b933      	cbnz	r3, 8007510 <_free_r+0x30>
 8007502:	6063      	str	r3, [r4, #4]
 8007504:	6014      	str	r4, [r2, #0]
 8007506:	b003      	add	sp, #12
 8007508:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800750c:	f000 b90e 	b.w	800772c <__malloc_unlock>
 8007510:	42a3      	cmp	r3, r4
 8007512:	d908      	bls.n	8007526 <_free_r+0x46>
 8007514:	6825      	ldr	r5, [r4, #0]
 8007516:	1961      	adds	r1, r4, r5
 8007518:	428b      	cmp	r3, r1
 800751a:	bf01      	itttt	eq
 800751c:	6819      	ldreq	r1, [r3, #0]
 800751e:	685b      	ldreq	r3, [r3, #4]
 8007520:	1949      	addeq	r1, r1, r5
 8007522:	6021      	streq	r1, [r4, #0]
 8007524:	e7ed      	b.n	8007502 <_free_r+0x22>
 8007526:	461a      	mov	r2, r3
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	b10b      	cbz	r3, 8007530 <_free_r+0x50>
 800752c:	42a3      	cmp	r3, r4
 800752e:	d9fa      	bls.n	8007526 <_free_r+0x46>
 8007530:	6811      	ldr	r1, [r2, #0]
 8007532:	1855      	adds	r5, r2, r1
 8007534:	42a5      	cmp	r5, r4
 8007536:	d10b      	bne.n	8007550 <_free_r+0x70>
 8007538:	6824      	ldr	r4, [r4, #0]
 800753a:	4421      	add	r1, r4
 800753c:	1854      	adds	r4, r2, r1
 800753e:	42a3      	cmp	r3, r4
 8007540:	6011      	str	r1, [r2, #0]
 8007542:	d1e0      	bne.n	8007506 <_free_r+0x26>
 8007544:	681c      	ldr	r4, [r3, #0]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	6053      	str	r3, [r2, #4]
 800754a:	4421      	add	r1, r4
 800754c:	6011      	str	r1, [r2, #0]
 800754e:	e7da      	b.n	8007506 <_free_r+0x26>
 8007550:	d902      	bls.n	8007558 <_free_r+0x78>
 8007552:	230c      	movs	r3, #12
 8007554:	6003      	str	r3, [r0, #0]
 8007556:	e7d6      	b.n	8007506 <_free_r+0x26>
 8007558:	6825      	ldr	r5, [r4, #0]
 800755a:	1961      	adds	r1, r4, r5
 800755c:	428b      	cmp	r3, r1
 800755e:	bf04      	itt	eq
 8007560:	6819      	ldreq	r1, [r3, #0]
 8007562:	685b      	ldreq	r3, [r3, #4]
 8007564:	6063      	str	r3, [r4, #4]
 8007566:	bf04      	itt	eq
 8007568:	1949      	addeq	r1, r1, r5
 800756a:	6021      	streq	r1, [r4, #0]
 800756c:	6054      	str	r4, [r2, #4]
 800756e:	e7ca      	b.n	8007506 <_free_r+0x26>
 8007570:	b003      	add	sp, #12
 8007572:	bd30      	pop	{r4, r5, pc}
 8007574:	2000418c 	.word	0x2000418c

08007578 <sbrk_aligned>:
 8007578:	b570      	push	{r4, r5, r6, lr}
 800757a:	4e0e      	ldr	r6, [pc, #56]	; (80075b4 <sbrk_aligned+0x3c>)
 800757c:	460c      	mov	r4, r1
 800757e:	6831      	ldr	r1, [r6, #0]
 8007580:	4605      	mov	r5, r0
 8007582:	b911      	cbnz	r1, 800758a <sbrk_aligned+0x12>
 8007584:	f000 f8bc 	bl	8007700 <_sbrk_r>
 8007588:	6030      	str	r0, [r6, #0]
 800758a:	4621      	mov	r1, r4
 800758c:	4628      	mov	r0, r5
 800758e:	f000 f8b7 	bl	8007700 <_sbrk_r>
 8007592:	1c43      	adds	r3, r0, #1
 8007594:	d00a      	beq.n	80075ac <sbrk_aligned+0x34>
 8007596:	1cc4      	adds	r4, r0, #3
 8007598:	f024 0403 	bic.w	r4, r4, #3
 800759c:	42a0      	cmp	r0, r4
 800759e:	d007      	beq.n	80075b0 <sbrk_aligned+0x38>
 80075a0:	1a21      	subs	r1, r4, r0
 80075a2:	4628      	mov	r0, r5
 80075a4:	f000 f8ac 	bl	8007700 <_sbrk_r>
 80075a8:	3001      	adds	r0, #1
 80075aa:	d101      	bne.n	80075b0 <sbrk_aligned+0x38>
 80075ac:	f04f 34ff 	mov.w	r4, #4294967295
 80075b0:	4620      	mov	r0, r4
 80075b2:	bd70      	pop	{r4, r5, r6, pc}
 80075b4:	20004190 	.word	0x20004190

080075b8 <_malloc_r>:
 80075b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075bc:	1ccd      	adds	r5, r1, #3
 80075be:	f025 0503 	bic.w	r5, r5, #3
 80075c2:	3508      	adds	r5, #8
 80075c4:	2d0c      	cmp	r5, #12
 80075c6:	bf38      	it	cc
 80075c8:	250c      	movcc	r5, #12
 80075ca:	2d00      	cmp	r5, #0
 80075cc:	4607      	mov	r7, r0
 80075ce:	db01      	blt.n	80075d4 <_malloc_r+0x1c>
 80075d0:	42a9      	cmp	r1, r5
 80075d2:	d905      	bls.n	80075e0 <_malloc_r+0x28>
 80075d4:	230c      	movs	r3, #12
 80075d6:	603b      	str	r3, [r7, #0]
 80075d8:	2600      	movs	r6, #0
 80075da:	4630      	mov	r0, r6
 80075dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075e0:	4e2e      	ldr	r6, [pc, #184]	; (800769c <_malloc_r+0xe4>)
 80075e2:	f000 f89d 	bl	8007720 <__malloc_lock>
 80075e6:	6833      	ldr	r3, [r6, #0]
 80075e8:	461c      	mov	r4, r3
 80075ea:	bb34      	cbnz	r4, 800763a <_malloc_r+0x82>
 80075ec:	4629      	mov	r1, r5
 80075ee:	4638      	mov	r0, r7
 80075f0:	f7ff ffc2 	bl	8007578 <sbrk_aligned>
 80075f4:	1c43      	adds	r3, r0, #1
 80075f6:	4604      	mov	r4, r0
 80075f8:	d14d      	bne.n	8007696 <_malloc_r+0xde>
 80075fa:	6834      	ldr	r4, [r6, #0]
 80075fc:	4626      	mov	r6, r4
 80075fe:	2e00      	cmp	r6, #0
 8007600:	d140      	bne.n	8007684 <_malloc_r+0xcc>
 8007602:	6823      	ldr	r3, [r4, #0]
 8007604:	4631      	mov	r1, r6
 8007606:	4638      	mov	r0, r7
 8007608:	eb04 0803 	add.w	r8, r4, r3
 800760c:	f000 f878 	bl	8007700 <_sbrk_r>
 8007610:	4580      	cmp	r8, r0
 8007612:	d13a      	bne.n	800768a <_malloc_r+0xd2>
 8007614:	6821      	ldr	r1, [r4, #0]
 8007616:	3503      	adds	r5, #3
 8007618:	1a6d      	subs	r5, r5, r1
 800761a:	f025 0503 	bic.w	r5, r5, #3
 800761e:	3508      	adds	r5, #8
 8007620:	2d0c      	cmp	r5, #12
 8007622:	bf38      	it	cc
 8007624:	250c      	movcc	r5, #12
 8007626:	4629      	mov	r1, r5
 8007628:	4638      	mov	r0, r7
 800762a:	f7ff ffa5 	bl	8007578 <sbrk_aligned>
 800762e:	3001      	adds	r0, #1
 8007630:	d02b      	beq.n	800768a <_malloc_r+0xd2>
 8007632:	6823      	ldr	r3, [r4, #0]
 8007634:	442b      	add	r3, r5
 8007636:	6023      	str	r3, [r4, #0]
 8007638:	e00e      	b.n	8007658 <_malloc_r+0xa0>
 800763a:	6822      	ldr	r2, [r4, #0]
 800763c:	1b52      	subs	r2, r2, r5
 800763e:	d41e      	bmi.n	800767e <_malloc_r+0xc6>
 8007640:	2a0b      	cmp	r2, #11
 8007642:	d916      	bls.n	8007672 <_malloc_r+0xba>
 8007644:	1961      	adds	r1, r4, r5
 8007646:	42a3      	cmp	r3, r4
 8007648:	6025      	str	r5, [r4, #0]
 800764a:	bf18      	it	ne
 800764c:	6059      	strne	r1, [r3, #4]
 800764e:	6863      	ldr	r3, [r4, #4]
 8007650:	bf08      	it	eq
 8007652:	6031      	streq	r1, [r6, #0]
 8007654:	5162      	str	r2, [r4, r5]
 8007656:	604b      	str	r3, [r1, #4]
 8007658:	4638      	mov	r0, r7
 800765a:	f104 060b 	add.w	r6, r4, #11
 800765e:	f000 f865 	bl	800772c <__malloc_unlock>
 8007662:	f026 0607 	bic.w	r6, r6, #7
 8007666:	1d23      	adds	r3, r4, #4
 8007668:	1af2      	subs	r2, r6, r3
 800766a:	d0b6      	beq.n	80075da <_malloc_r+0x22>
 800766c:	1b9b      	subs	r3, r3, r6
 800766e:	50a3      	str	r3, [r4, r2]
 8007670:	e7b3      	b.n	80075da <_malloc_r+0x22>
 8007672:	6862      	ldr	r2, [r4, #4]
 8007674:	42a3      	cmp	r3, r4
 8007676:	bf0c      	ite	eq
 8007678:	6032      	streq	r2, [r6, #0]
 800767a:	605a      	strne	r2, [r3, #4]
 800767c:	e7ec      	b.n	8007658 <_malloc_r+0xa0>
 800767e:	4623      	mov	r3, r4
 8007680:	6864      	ldr	r4, [r4, #4]
 8007682:	e7b2      	b.n	80075ea <_malloc_r+0x32>
 8007684:	4634      	mov	r4, r6
 8007686:	6876      	ldr	r6, [r6, #4]
 8007688:	e7b9      	b.n	80075fe <_malloc_r+0x46>
 800768a:	230c      	movs	r3, #12
 800768c:	603b      	str	r3, [r7, #0]
 800768e:	4638      	mov	r0, r7
 8007690:	f000 f84c 	bl	800772c <__malloc_unlock>
 8007694:	e7a1      	b.n	80075da <_malloc_r+0x22>
 8007696:	6025      	str	r5, [r4, #0]
 8007698:	e7de      	b.n	8007658 <_malloc_r+0xa0>
 800769a:	bf00      	nop
 800769c:	2000418c 	.word	0x2000418c

080076a0 <_realloc_r>:
 80076a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076a4:	4680      	mov	r8, r0
 80076a6:	4614      	mov	r4, r2
 80076a8:	460e      	mov	r6, r1
 80076aa:	b921      	cbnz	r1, 80076b6 <_realloc_r+0x16>
 80076ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076b0:	4611      	mov	r1, r2
 80076b2:	f7ff bf81 	b.w	80075b8 <_malloc_r>
 80076b6:	b92a      	cbnz	r2, 80076c4 <_realloc_r+0x24>
 80076b8:	f7ff ff12 	bl	80074e0 <_free_r>
 80076bc:	4625      	mov	r5, r4
 80076be:	4628      	mov	r0, r5
 80076c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076c4:	f000 f838 	bl	8007738 <_malloc_usable_size_r>
 80076c8:	4284      	cmp	r4, r0
 80076ca:	4607      	mov	r7, r0
 80076cc:	d802      	bhi.n	80076d4 <_realloc_r+0x34>
 80076ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80076d2:	d812      	bhi.n	80076fa <_realloc_r+0x5a>
 80076d4:	4621      	mov	r1, r4
 80076d6:	4640      	mov	r0, r8
 80076d8:	f7ff ff6e 	bl	80075b8 <_malloc_r>
 80076dc:	4605      	mov	r5, r0
 80076de:	2800      	cmp	r0, #0
 80076e0:	d0ed      	beq.n	80076be <_realloc_r+0x1e>
 80076e2:	42bc      	cmp	r4, r7
 80076e4:	4622      	mov	r2, r4
 80076e6:	4631      	mov	r1, r6
 80076e8:	bf28      	it	cs
 80076ea:	463a      	movcs	r2, r7
 80076ec:	f7ff fbb8 	bl	8006e60 <memcpy>
 80076f0:	4631      	mov	r1, r6
 80076f2:	4640      	mov	r0, r8
 80076f4:	f7ff fef4 	bl	80074e0 <_free_r>
 80076f8:	e7e1      	b.n	80076be <_realloc_r+0x1e>
 80076fa:	4635      	mov	r5, r6
 80076fc:	e7df      	b.n	80076be <_realloc_r+0x1e>
	...

08007700 <_sbrk_r>:
 8007700:	b538      	push	{r3, r4, r5, lr}
 8007702:	4d06      	ldr	r5, [pc, #24]	; (800771c <_sbrk_r+0x1c>)
 8007704:	2300      	movs	r3, #0
 8007706:	4604      	mov	r4, r0
 8007708:	4608      	mov	r0, r1
 800770a:	602b      	str	r3, [r5, #0]
 800770c:	f7f9 fe4e 	bl	80013ac <_sbrk>
 8007710:	1c43      	adds	r3, r0, #1
 8007712:	d102      	bne.n	800771a <_sbrk_r+0x1a>
 8007714:	682b      	ldr	r3, [r5, #0]
 8007716:	b103      	cbz	r3, 800771a <_sbrk_r+0x1a>
 8007718:	6023      	str	r3, [r4, #0]
 800771a:	bd38      	pop	{r3, r4, r5, pc}
 800771c:	20004194 	.word	0x20004194

08007720 <__malloc_lock>:
 8007720:	4801      	ldr	r0, [pc, #4]	; (8007728 <__malloc_lock+0x8>)
 8007722:	f000 b811 	b.w	8007748 <__retarget_lock_acquire_recursive>
 8007726:	bf00      	nop
 8007728:	20004198 	.word	0x20004198

0800772c <__malloc_unlock>:
 800772c:	4801      	ldr	r0, [pc, #4]	; (8007734 <__malloc_unlock+0x8>)
 800772e:	f000 b80c 	b.w	800774a <__retarget_lock_release_recursive>
 8007732:	bf00      	nop
 8007734:	20004198 	.word	0x20004198

08007738 <_malloc_usable_size_r>:
 8007738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800773c:	1f18      	subs	r0, r3, #4
 800773e:	2b00      	cmp	r3, #0
 8007740:	bfbc      	itt	lt
 8007742:	580b      	ldrlt	r3, [r1, r0]
 8007744:	18c0      	addlt	r0, r0, r3
 8007746:	4770      	bx	lr

08007748 <__retarget_lock_acquire_recursive>:
 8007748:	4770      	bx	lr

0800774a <__retarget_lock_release_recursive>:
 800774a:	4770      	bx	lr

0800774c <_init>:
 800774c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774e:	bf00      	nop
 8007750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007752:	bc08      	pop	{r3}
 8007754:	469e      	mov	lr, r3
 8007756:	4770      	bx	lr

08007758 <_fini>:
 8007758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800775a:	bf00      	nop
 800775c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800775e:	bc08      	pop	{r3}
 8007760:	469e      	mov	lr, r3
 8007762:	4770      	bx	lr
