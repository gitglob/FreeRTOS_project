
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e4  0800b680  0800b680  0001b680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd64  0800bd64  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd64  0800bd64  0001bd64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd6c  0800bd6c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd6c  0800bd6c  0001bd6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd70  0800bd70  0001bd70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800bd74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004190  200001e0  0800bf54  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004370  0800bf54  00024370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e71  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000314f  00000000  00000000  00036081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  000391d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001208  00000000  00000000  0003a510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e97  00000000  00000000  0003b718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c6a  00000000  00000000  000545af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098a67  00000000  00000000  00069219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00101c80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061f0  00000000  00000000  00101cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b664 	.word	0x0800b664

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800b664 	.word	0x0800b664

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b974 	b.w	8000f18 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	4604      	mov	r4, r0
 8000c50:	468e      	mov	lr, r1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d14d      	bne.n	8000cf2 <__udivmoddi4+0xaa>
 8000c56:	428a      	cmp	r2, r1
 8000c58:	4694      	mov	ip, r2
 8000c5a:	d969      	bls.n	8000d30 <__udivmoddi4+0xe8>
 8000c5c:	fab2 f282 	clz	r2, r2
 8000c60:	b152      	cbz	r2, 8000c78 <__udivmoddi4+0x30>
 8000c62:	fa01 f302 	lsl.w	r3, r1, r2
 8000c66:	f1c2 0120 	rsb	r1, r2, #32
 8000c6a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c6e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c72:	ea41 0e03 	orr.w	lr, r1, r3
 8000c76:	4094      	lsls	r4, r2
 8000c78:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c7c:	0c21      	lsrs	r1, r4, #16
 8000c7e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c82:	fa1f f78c 	uxth.w	r7, ip
 8000c86:	fb08 e316 	mls	r3, r8, r6, lr
 8000c8a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c8e:	fb06 f107 	mul.w	r1, r6, r7
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x64>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c9e:	f080 811f 	bcs.w	8000ee0 <__udivmoddi4+0x298>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 811c 	bls.w	8000ee0 <__udivmoddi4+0x298>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 f707 	mul.w	r7, r0, r7
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x92>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ccc:	f080 810a 	bcs.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	f240 8107 	bls.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd6:	4464      	add	r4, ip
 8000cd8:	3802      	subs	r0, #2
 8000cda:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cde:	1be4      	subs	r4, r4, r7
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	b11d      	cbz	r5, 8000cec <__udivmoddi4+0xa4>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0xc2>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	f000 80ef 	beq.w	8000eda <__udivmoddi4+0x292>
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000d02:	4630      	mov	r0, r6
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f683 	clz	r6, r3
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d14a      	bne.n	8000da8 <__udivmoddi4+0x160>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0xd4>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80f9 	bhi.w	8000f0e <__udivmoddi4+0x2c6>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	469e      	mov	lr, r3
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d0e0      	beq.n	8000cec <__udivmoddi4+0xa4>
 8000d2a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d2e:	e7dd      	b.n	8000cec <__udivmoddi4+0xa4>
 8000d30:	b902      	cbnz	r2, 8000d34 <__udivmoddi4+0xec>
 8000d32:	deff      	udf	#255	; 0xff
 8000d34:	fab2 f282 	clz	r2, r2
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	f040 8092 	bne.w	8000e62 <__udivmoddi4+0x21a>
 8000d3e:	eba1 010c 	sub.w	r1, r1, ip
 8000d42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d46:	fa1f fe8c 	uxth.w	lr, ip
 8000d4a:	2601      	movs	r6, #1
 8000d4c:	0c20      	lsrs	r0, r4, #16
 8000d4e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d52:	fb07 1113 	mls	r1, r7, r3, r1
 8000d56:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5a:	fb0e f003 	mul.w	r0, lr, r3
 8000d5e:	4288      	cmp	r0, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x12c>
 8000d62:	eb1c 0101 	adds.w	r1, ip, r1
 8000d66:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x12a>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f200 80cb 	bhi.w	8000f08 <__udivmoddi4+0x2c0>
 8000d72:	4643      	mov	r3, r8
 8000d74:	1a09      	subs	r1, r1, r0
 8000d76:	b2a4      	uxth	r4, r4
 8000d78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d7c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d80:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d84:	fb0e fe00 	mul.w	lr, lr, r0
 8000d88:	45a6      	cmp	lr, r4
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x156>
 8000d8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d94:	d202      	bcs.n	8000d9c <__udivmoddi4+0x154>
 8000d96:	45a6      	cmp	lr, r4
 8000d98:	f200 80bb 	bhi.w	8000f12 <__udivmoddi4+0x2ca>
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000da6:	e79c      	b.n	8000ce2 <__udivmoddi4+0x9a>
 8000da8:	f1c6 0720 	rsb	r7, r6, #32
 8000dac:	40b3      	lsls	r3, r6
 8000dae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000db2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000db6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dba:	fa01 f306 	lsl.w	r3, r1, r6
 8000dbe:	431c      	orrs	r4, r3
 8000dc0:	40f9      	lsrs	r1, r7
 8000dc2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dc6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dca:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dce:	0c20      	lsrs	r0, r4, #16
 8000dd0:	fa1f fe8c 	uxth.w	lr, ip
 8000dd4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ddc:	fb08 f00e 	mul.w	r0, r8, lr
 8000de0:	4288      	cmp	r0, r1
 8000de2:	fa02 f206 	lsl.w	r2, r2, r6
 8000de6:	d90b      	bls.n	8000e00 <__udivmoddi4+0x1b8>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f108 3aff 	add.w	sl, r8, #4294967295
 8000df0:	f080 8088 	bcs.w	8000f04 <__udivmoddi4+0x2bc>
 8000df4:	4288      	cmp	r0, r1
 8000df6:	f240 8085 	bls.w	8000f04 <__udivmoddi4+0x2bc>
 8000dfa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e08:	fb09 1110 	mls	r1, r9, r0, r1
 8000e0c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e10:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e14:	458e      	cmp	lr, r1
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x1e2>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e20:	d26c      	bcs.n	8000efc <__udivmoddi4+0x2b4>
 8000e22:	458e      	cmp	lr, r1
 8000e24:	d96a      	bls.n	8000efc <__udivmoddi4+0x2b4>
 8000e26:	3802      	subs	r0, #2
 8000e28:	4461      	add	r1, ip
 8000e2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e2e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e32:	eba1 010e 	sub.w	r1, r1, lr
 8000e36:	42a1      	cmp	r1, r4
 8000e38:	46c8      	mov	r8, r9
 8000e3a:	46a6      	mov	lr, r4
 8000e3c:	d356      	bcc.n	8000eec <__udivmoddi4+0x2a4>
 8000e3e:	d053      	beq.n	8000ee8 <__udivmoddi4+0x2a0>
 8000e40:	b15d      	cbz	r5, 8000e5a <__udivmoddi4+0x212>
 8000e42:	ebb3 0208 	subs.w	r2, r3, r8
 8000e46:	eb61 010e 	sbc.w	r1, r1, lr
 8000e4a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e4e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e52:	40f1      	lsrs	r1, r6
 8000e54:	431f      	orrs	r7, r3
 8000e56:	e9c5 7100 	strd	r7, r1, [r5]
 8000e5a:	2600      	movs	r6, #0
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	f1c2 0320 	rsb	r3, r2, #32
 8000e66:	40d8      	lsrs	r0, r3
 8000e68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e6c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e70:	4091      	lsls	r1, r2
 8000e72:	4301      	orrs	r1, r0
 8000e74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e78:	fa1f fe8c 	uxth.w	lr, ip
 8000e7c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e80:	fb07 3610 	mls	r6, r7, r0, r3
 8000e84:	0c0b      	lsrs	r3, r1, #16
 8000e86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e8a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	fa04 f402 	lsl.w	r4, r4, r2
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x260>
 8000e96:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e9e:	d22f      	bcs.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea0:	429e      	cmp	r6, r3
 8000ea2:	d92d      	bls.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	1b9b      	subs	r3, r3, r6
 8000eaa:	b289      	uxth	r1, r1
 8000eac:	fbb3 f6f7 	udiv	r6, r3, r7
 8000eb0:	fb07 3316 	mls	r3, r7, r6, r3
 8000eb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ebc:	428b      	cmp	r3, r1
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x28a>
 8000ec0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ec8:	d216      	bcs.n	8000ef8 <__udivmoddi4+0x2b0>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d914      	bls.n	8000ef8 <__udivmoddi4+0x2b0>
 8000ece:	3e02      	subs	r6, #2
 8000ed0:	4461      	add	r1, ip
 8000ed2:	1ac9      	subs	r1, r1, r3
 8000ed4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ed8:	e738      	b.n	8000d4c <__udivmoddi4+0x104>
 8000eda:	462e      	mov	r6, r5
 8000edc:	4628      	mov	r0, r5
 8000ede:	e705      	b.n	8000cec <__udivmoddi4+0xa4>
 8000ee0:	4606      	mov	r6, r0
 8000ee2:	e6e3      	b.n	8000cac <__udivmoddi4+0x64>
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	e6f8      	b.n	8000cda <__udivmoddi4+0x92>
 8000ee8:	454b      	cmp	r3, r9
 8000eea:	d2a9      	bcs.n	8000e40 <__udivmoddi4+0x1f8>
 8000eec:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ef4:	3801      	subs	r0, #1
 8000ef6:	e7a3      	b.n	8000e40 <__udivmoddi4+0x1f8>
 8000ef8:	4646      	mov	r6, r8
 8000efa:	e7ea      	b.n	8000ed2 <__udivmoddi4+0x28a>
 8000efc:	4620      	mov	r0, r4
 8000efe:	e794      	b.n	8000e2a <__udivmoddi4+0x1e2>
 8000f00:	4640      	mov	r0, r8
 8000f02:	e7d1      	b.n	8000ea8 <__udivmoddi4+0x260>
 8000f04:	46d0      	mov	r8, sl
 8000f06:	e77b      	b.n	8000e00 <__udivmoddi4+0x1b8>
 8000f08:	3b02      	subs	r3, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	e732      	b.n	8000d74 <__udivmoddi4+0x12c>
 8000f0e:	4630      	mov	r0, r6
 8000f10:	e709      	b.n	8000d26 <__udivmoddi4+0xde>
 8000f12:	4464      	add	r4, ip
 8000f14:	3802      	subs	r0, #2
 8000f16:	e742      	b.n	8000d9e <__udivmoddi4+0x156>

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4a07      	ldr	r2, [pc, #28]	; (8000f48 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	4a06      	ldr	r2, [pc, #24]	; (8000f4c <vApplicationGetIdleTaskMemory+0x30>)
 8000f32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2280      	movs	r2, #128	; 0x80
 8000f38:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f3a:	bf00      	nop
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	200001fc 	.word	0x200001fc
 8000f4c:	20000250 	.word	0x20000250

08000f50 <EmptyBuffer>:
// UART callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim);

// empty a string buffer
void EmptyBuffer(uint8_t* buf){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	uint8_t i;
	int s = strlen(buf);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff f94b 	bl	80001f4 <strlen>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	60bb      	str	r3, [r7, #8]

	for (i=0; i<s; i++) {
 8000f62:	2300      	movs	r3, #0
 8000f64:	73fb      	strb	r3, [r7, #15]
 8000f66:	e007      	b.n	8000f78 <EmptyBuffer+0x28>
		buf[i] = 0;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
	for (i=0; i<s; i++) {
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	3301      	adds	r3, #1
 8000f76:	73fb      	strb	r3, [r7, #15]
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	dcf3      	bgt.n	8000f68 <EmptyBuffer+0x18>
	}
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <delay>:
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
}

// delay function for the supersonic sensor
void delay(uint16_t time)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <delay+0x30>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 8000f9e:	bf00      	nop
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <delay+0x30>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fa6:	88fb      	ldrh	r3, [r7, #6]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d3f9      	bcc.n	8000fa0 <delay+0x14>
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000450 	.word	0x20000450

08000fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc0:	b5b0      	push	{r4, r5, r7, lr}
 8000fc2:	b0d4      	sub	sp, #336	; 0x150
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc6:	f001 fae7 	bl	8002598 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fca:	f000 f957 	bl	800127c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fce:	f000 fa49 	bl	8001464 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fd2:	f000 fa1d 	bl	8001410 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000fd6:	f000 f9c5 	bl	8001364 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000fda:	f000 f9b7 	bl	800134c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000fde:	488b      	ldr	r0, [pc, #556]	; (800120c <main+0x24c>)
 8000fe0:	f002 fb82 	bl	80036e8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); // to get IC_CaptureCallback
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4889      	ldr	r0, [pc, #548]	; (800120c <main+0x24c>)
 8000fe8:	f002 fc30 	bl	800384c <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of PrintMtx */
  osMutexDef(PrintMtx);
 8000fec:	2300      	movs	r3, #0
 8000fee:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  PrintMtxHandle = osMutexCreate(osMutex(PrintMtx));
 8000ff8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f004 fb2d 	bl	800565c <osMutexCreate>
 8001002:	4603      	mov	r3, r0
 8001004:	4a82      	ldr	r2, [pc, #520]	; (8001210 <main+0x250>)
 8001006:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of VelSemaphore */
  osSemaphoreDef(VelSemaphore);
 8001008:	2300      	movs	r3, #0
 800100a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800100e:	2300      	movs	r3, #0
 8001010:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  VelSemaphoreHandle = osSemaphoreCreate(osSemaphore(VelSemaphore), 1);
 8001014:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001018:	2101      	movs	r1, #1
 800101a:	4618      	mov	r0, r3
 800101c:	f004 fbba 	bl	8005794 <osSemaphoreCreate>
 8001020:	4603      	mov	r3, r0
 8001022:	4a7c      	ldr	r2, [pc, #496]	; (8001214 <main+0x254>)
 8001024:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of UartQueue */
  osMessageQDef(UartQueue, 1, int8_t);
 8001026:	4b7c      	ldr	r3, [pc, #496]	; (8001218 <main+0x258>)
 8001028:	f507 7498 	add.w	r4, r7, #304	; 0x130
 800102c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800102e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UartQueueHandle = osMessageCreate(osMessageQ(UartQueue), NULL);
 8001032:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f004 fc61 	bl	8005900 <osMessageCreate>
 800103e:	4603      	mov	r3, r0
 8001040:	4a76      	ldr	r2, [pc, #472]	; (800121c <main+0x25c>)
 8001042:	6013      	str	r3, [r2, #0]

  /* definition and creation of ImuQueue */
  osMessageQDef(ImuQueue, 1, ImuData);
 8001044:	4b76      	ldr	r3, [pc, #472]	; (8001220 <main+0x260>)
 8001046:	f507 7490 	add.w	r4, r7, #288	; 0x120
 800104a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800104c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ImuQueueHandle = osMessageCreate(osMessageQ(ImuQueue), NULL);
 8001050:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f004 fc52 	bl	8005900 <osMessageCreate>
 800105c:	4603      	mov	r3, r0
 800105e:	4a71      	ldr	r2, [pc, #452]	; (8001224 <main+0x264>)
 8001060:	6013      	str	r3, [r2, #0]

  /* definition and creation of GpsQueue */
  osMessageQDef(GpsQueue, 1, GpsData);
 8001062:	4b71      	ldr	r3, [pc, #452]	; (8001228 <main+0x268>)
 8001064:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8001068:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800106a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  GpsQueueHandle = osMessageCreate(osMessageQ(GpsQueue), NULL);
 800106e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f004 fc43 	bl	8005900 <osMessageCreate>
 800107a:	4603      	mov	r3, r0
 800107c:	4a6b      	ldr	r2, [pc, #428]	; (800122c <main+0x26c>)
 800107e:	6013      	str	r3, [r2, #0]

  /* definition and creation of ButtonQueue */
  osMessageQDef(ButtonQueue, 1, uint8_t);
 8001080:	4b65      	ldr	r3, [pc, #404]	; (8001218 <main+0x258>)
 8001082:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8001086:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001088:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ButtonQueueHandle = osMessageCreate(osMessageQ(ButtonQueue), NULL);
 800108c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f004 fc34 	bl	8005900 <osMessageCreate>
 8001098:	4603      	mov	r3, r0
 800109a:	4a65      	ldr	r2, [pc, #404]	; (8001230 <main+0x270>)
 800109c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ImuTask */
  osThreadDef(ImuTask, StartImuTask, osPriorityLow, 0, 128);
 800109e:	4b65      	ldr	r3, [pc, #404]	; (8001234 <main+0x274>)
 80010a0:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 80010a4:	461d      	mov	r5, r3
 80010a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ImuTaskHandle = osThreadCreate(osThread(ImuTask), NULL);
 80010b2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f004 f9e2 	bl	8005482 <osThreadCreate>
 80010be:	4603      	mov	r3, r0
 80010c0:	4a5d      	ldr	r2, [pc, #372]	; (8001238 <main+0x278>)
 80010c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of GpsTask */
  osThreadDef(GpsTask, StartGpsTask, osPriorityLow, 0, 128);
 80010c4:	4b5d      	ldr	r3, [pc, #372]	; (800123c <main+0x27c>)
 80010c6:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 80010ca:	461d      	mov	r5, r3
 80010cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GpsTaskHandle = osThreadCreate(osThread(GpsTask), NULL);
 80010d8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f004 f9cf 	bl	8005482 <osThreadCreate>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4a56      	ldr	r2, [pc, #344]	; (8001240 <main+0x280>)
 80010e8:	6013      	str	r3, [r2, #0]

  /* definition and creation of KFTask */
  osThreadDef(KFTask, StartKFTask, osPriorityLow, 0, 128);
 80010ea:	4b56      	ldr	r3, [pc, #344]	; (8001244 <main+0x284>)
 80010ec:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 80010f0:	461d      	mov	r5, r3
 80010f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  KFTaskHandle = osThreadCreate(osThread(KFTask), NULL);
 80010fe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f004 f9bc 	bl	8005482 <osThreadCreate>
 800110a:	4603      	mov	r3, r0
 800110c:	4a4e      	ldr	r2, [pc, #312]	; (8001248 <main+0x288>)
 800110e:	6013      	str	r3, [r2, #0]

  /* definition and creation of RadarTask */
  osThreadDef(RadarTask, StartRadarTask, osPriorityLow, 0, 128);
 8001110:	4b4e      	ldr	r3, [pc, #312]	; (800124c <main+0x28c>)
 8001112:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001116:	461d      	mov	r5, r3
 8001118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800111a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800111c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001120:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RadarTaskHandle = osThreadCreate(osThread(RadarTask), NULL);
 8001124:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f004 f9a9 	bl	8005482 <osThreadCreate>
 8001130:	4603      	mov	r3, r0
 8001132:	4a47      	ldr	r2, [pc, #284]	; (8001250 <main+0x290>)
 8001134:	6013      	str	r3, [r2, #0]

  /* definition and creation of ExButtonIntTask */
  osThreadDef(ExButtonIntTask, StartExButtonIntTask, osPriorityAboveNormal, 0, 128);
 8001136:	4b47      	ldr	r3, [pc, #284]	; (8001254 <main+0x294>)
 8001138:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800113c:	461d      	mov	r5, r3
 800113e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001140:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001142:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001146:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ExButtonIntTaskHandle = osThreadCreate(osThread(ExButtonIntTask), NULL);
 800114a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f004 f996 	bl	8005482 <osThreadCreate>
 8001156:	4603      	mov	r3, r0
 8001158:	4a3f      	ldr	r2, [pc, #252]	; (8001258 <main+0x298>)
 800115a:	6013      	str	r3, [r2, #0]

  /* definition and creation of MotorTask */
  osThreadDef(MotorTask, StartMotorTask, osPriorityNormal, 0, 128);
 800115c:	4b3f      	ldr	r3, [pc, #252]	; (800125c <main+0x29c>)
 800115e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001162:	461d      	mov	r5, r3
 8001164:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001168:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800116c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotorTaskHandle = osThreadCreate(osThread(MotorTask), NULL);
 8001170:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f004 f983 	bl	8005482 <osThreadCreate>
 800117c:	4603      	mov	r3, r0
 800117e:	4a38      	ldr	r2, [pc, #224]	; (8001260 <main+0x2a0>)
 8001180:	6013      	str	r3, [r2, #0]

  /* definition and creation of MainTask */
  osThreadDef(MainTask, StartMainTask, osPriorityHigh, 0, 128);
 8001182:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001186:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800118a:	4a36      	ldr	r2, [pc, #216]	; (8001264 <main+0x2a4>)
 800118c:	461c      	mov	r4, r3
 800118e:	4615      	mov	r5, r2
 8001190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001192:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001194:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001198:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 800119c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f004 f96d 	bl	8005482 <osThreadCreate>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4a2f      	ldr	r2, [pc, #188]	; (8001268 <main+0x2a8>)
 80011ac:	6013      	str	r3, [r2, #0]

  /* definition and creation of ObjectDetectTas */
  osThreadDef(ObjectDetectTas, StartObjectDetectTask, osPriorityAboveNormal, 0, 128);
 80011ae:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80011b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80011b6:	4a2d      	ldr	r2, [pc, #180]	; (800126c <main+0x2ac>)
 80011b8:	461c      	mov	r4, r3
 80011ba:	4615      	mov	r5, r2
 80011bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ObjectDetectTasHandle = osThreadCreate(osThread(ObjectDetectTas), NULL);
 80011c8:	f107 0320 	add.w	r3, r7, #32
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f004 f957 	bl	8005482 <osThreadCreate>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a26      	ldr	r2, [pc, #152]	; (8001270 <main+0x2b0>)
 80011d8:	6013      	str	r3, [r2, #0]

  /* definition and creation of UartTask */
  osThreadDef(UartTask, StartUartTask, osPriorityNormal, 0, 128);
 80011da:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80011de:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80011e2:	4a24      	ldr	r2, [pc, #144]	; (8001274 <main+0x2b4>)
 80011e4:	461c      	mov	r4, r3
 80011e6:	4615      	mov	r5, r2
 80011e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UartTaskHandle = osThreadCreate(osThread(UartTask), NULL);
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f004 f942 	bl	8005482 <osThreadCreate>
 80011fe:	4603      	mov	r3, r0
 8001200:	4a1d      	ldr	r2, [pc, #116]	; (8001278 <main+0x2b8>)
 8001202:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001204:	f004 f926 	bl	8005454 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001208:	e7fe      	b.n	8001208 <main+0x248>
 800120a:	bf00      	nop
 800120c:	20000450 	.word	0x20000450
 8001210:	20000510 	.word	0x20000510
 8001214:	20000514 	.word	0x20000514
 8001218:	0800b6e8 	.word	0x0800b6e8
 800121c:	20000500 	.word	0x20000500
 8001220:	0800b6f8 	.word	0x0800b6f8
 8001224:	20000504 	.word	0x20000504
 8001228:	0800b708 	.word	0x0800b708
 800122c:	20000508 	.word	0x20000508
 8001230:	2000050c 	.word	0x2000050c
 8001234:	0800b718 	.word	0x0800b718
 8001238:	200004dc 	.word	0x200004dc
 800123c:	0800b734 	.word	0x0800b734
 8001240:	200004e0 	.word	0x200004e0
 8001244:	0800b750 	.word	0x0800b750
 8001248:	200004e4 	.word	0x200004e4
 800124c:	0800b76c 	.word	0x0800b76c
 8001250:	200004e8 	.word	0x200004e8
 8001254:	0800b788 	.word	0x0800b788
 8001258:	200004ec 	.word	0x200004ec
 800125c:	0800b7a4 	.word	0x0800b7a4
 8001260:	200004f0 	.word	0x200004f0
 8001264:	0800b7c0 	.word	0x0800b7c0
 8001268:	200004f4 	.word	0x200004f4
 800126c:	0800b7dc 	.word	0x0800b7dc
 8001270:	200004f8 	.word	0x200004f8
 8001274:	0800b7f8 	.word	0x0800b7f8
 8001278:	200004fc 	.word	0x200004fc

0800127c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b094      	sub	sp, #80	; 0x50
 8001280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001282:	f107 0320 	add.w	r3, r7, #32
 8001286:	2230      	movs	r2, #48	; 0x30
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f007 fb0e 	bl	80088ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a0:	2300      	movs	r3, #0
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	4b27      	ldr	r3, [pc, #156]	; (8001344 <SystemClock_Config+0xc8>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	4a26      	ldr	r2, [pc, #152]	; (8001344 <SystemClock_Config+0xc8>)
 80012aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ae:	6413      	str	r3, [r2, #64]	; 0x40
 80012b0:	4b24      	ldr	r3, [pc, #144]	; (8001344 <SystemClock_Config+0xc8>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012bc:	2300      	movs	r3, #0
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	4b21      	ldr	r3, [pc, #132]	; (8001348 <SystemClock_Config+0xcc>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a20      	ldr	r2, [pc, #128]	; (8001348 <SystemClock_Config+0xcc>)
 80012c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <SystemClock_Config+0xcc>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d8:	2302      	movs	r3, #2
 80012da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012dc:	2301      	movs	r3, #1
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e0:	2310      	movs	r3, #16
 80012e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e4:	2302      	movs	r3, #2
 80012e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012e8:	2300      	movs	r3, #0
 80012ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012ec:	2308      	movs	r3, #8
 80012ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80012f0:	2354      	movs	r3, #84	; 0x54
 80012f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012f4:	2302      	movs	r3, #2
 80012f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012f8:	2304      	movs	r3, #4
 80012fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fc:	f107 0320 	add.w	r3, r7, #32
 8001300:	4618      	mov	r0, r3
 8001302:	f001 fccd 	bl	8002ca0 <HAL_RCC_OscConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800130c:	f000 fecc 	bl	80020a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001310:	230f      	movs	r3, #15
 8001312:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001314:	2302      	movs	r3, #2
 8001316:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800131c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001320:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001326:	f107 030c 	add.w	r3, r7, #12
 800132a:	2102      	movs	r1, #2
 800132c:	4618      	mov	r0, r3
 800132e:	f001 ff2f 	bl	8003190 <HAL_RCC_ClockConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001338:	f000 feb6 	bl	80020a8 <Error_Handler>
  }
}
 800133c:	bf00      	nop
 800133e:	3750      	adds	r7, #80	; 0x50
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40023800 	.word	0x40023800
 8001348:	40007000 	.word	0x40007000

0800134c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001350:	2200      	movs	r2, #0
 8001352:	2105      	movs	r1, #5
 8001354:	2028      	movs	r0, #40	; 0x28
 8001356:	f001 fa19 	bl	800278c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800135a:	2028      	movs	r0, #40	; 0x28
 800135c:	f001 fa32 	bl	80027c4 <HAL_NVIC_EnableIRQ>
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}

08001364 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136a:	f107 0310 	add.w	r3, r7, #16
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001374:	463b      	mov	r3, r7
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001380:	4b21      	ldr	r3, [pc, #132]	; (8001408 <MX_TIM1_Init+0xa4>)
 8001382:	4a22      	ldr	r2, [pc, #136]	; (800140c <MX_TIM1_Init+0xa8>)
 8001384:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8001386:	4b20      	ldr	r3, [pc, #128]	; (8001408 <MX_TIM1_Init+0xa4>)
 8001388:	2263      	movs	r2, #99	; 0x63
 800138a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138c:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <MX_TIM1_Init+0xa4>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65536-1;
 8001392:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <MX_TIM1_Init+0xa4>)
 8001394:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001398:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139a:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <MX_TIM1_Init+0xa4>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013a0:	4b19      	ldr	r3, [pc, #100]	; (8001408 <MX_TIM1_Init+0xa4>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a6:	4b18      	ldr	r3, [pc, #96]	; (8001408 <MX_TIM1_Init+0xa4>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80013ac:	4816      	ldr	r0, [pc, #88]	; (8001408 <MX_TIM1_Init+0xa4>)
 80013ae:	f002 f9fd 	bl	80037ac <HAL_TIM_IC_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80013b8:	f000 fe76 	bl	80020a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013c4:	f107 0310 	add.w	r3, r7, #16
 80013c8:	4619      	mov	r1, r3
 80013ca:	480f      	ldr	r0, [pc, #60]	; (8001408 <MX_TIM1_Init+0xa4>)
 80013cc:	f002 ff22 	bl	8004214 <HAL_TIMEx_MasterConfigSynchronization>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80013d6:	f000 fe67 	bl	80020a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013da:	2300      	movs	r3, #0
 80013dc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013de:	2301      	movs	r3, #1
 80013e0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013ea:	463b      	mov	r3, r7
 80013ec:	2200      	movs	r2, #0
 80013ee:	4619      	mov	r1, r3
 80013f0:	4805      	ldr	r0, [pc, #20]	; (8001408 <MX_TIM1_Init+0xa4>)
 80013f2:	f002 fc4d 	bl	8003c90 <HAL_TIM_IC_ConfigChannel>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80013fc:	f000 fe54 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001400:	bf00      	nop
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000450 	.word	0x20000450
 800140c:	40010000 	.word	0x40010000

08001410 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <MX_USART2_UART_Init+0x4c>)
 8001416:	4a12      	ldr	r2, [pc, #72]	; (8001460 <MX_USART2_UART_Init+0x50>)
 8001418:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <MX_USART2_UART_Init+0x4c>)
 800141c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001420:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <MX_USART2_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <MX_USART2_UART_Init+0x4c>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <MX_USART2_UART_Init+0x4c>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_USART2_UART_Init+0x4c>)
 8001436:	220c      	movs	r2, #12
 8001438:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <MX_USART2_UART_Init+0x4c>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <MX_USART2_UART_Init+0x4c>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_USART2_UART_Init+0x4c>)
 8001448:	f002 ff66 	bl	8004318 <HAL_UART_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001452:	f000 fe29 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000498 	.word	0x20000498
 8001460:	40004400 	.word	0x40004400

08001464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	4b40      	ldr	r3, [pc, #256]	; (8001580 <MX_GPIO_Init+0x11c>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a3f      	ldr	r2, [pc, #252]	; (8001580 <MX_GPIO_Init+0x11c>)
 8001484:	f043 0304 	orr.w	r3, r3, #4
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b3d      	ldr	r3, [pc, #244]	; (8001580 <MX_GPIO_Init+0x11c>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0304 	and.w	r3, r3, #4
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	4b39      	ldr	r3, [pc, #228]	; (8001580 <MX_GPIO_Init+0x11c>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a38      	ldr	r2, [pc, #224]	; (8001580 <MX_GPIO_Init+0x11c>)
 80014a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b36      	ldr	r3, [pc, #216]	; (8001580 <MX_GPIO_Init+0x11c>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	4b32      	ldr	r3, [pc, #200]	; (8001580 <MX_GPIO_Init+0x11c>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a31      	ldr	r2, [pc, #196]	; (8001580 <MX_GPIO_Init+0x11c>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <MX_GPIO_Init+0x11c>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	4b2b      	ldr	r3, [pc, #172]	; (8001580 <MX_GPIO_Init+0x11c>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a2a      	ldr	r2, [pc, #168]	; (8001580 <MX_GPIO_Init+0x11c>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b28      	ldr	r3, [pc, #160]	; (8001580 <MX_GPIO_Init+0x11c>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Trig_Pin, GPIO_PIN_RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	f44f 7108 	mov.w	r1, #544	; 0x220
 80014f0:	4824      	ldr	r0, [pc, #144]	; (8001584 <MX_GPIO_Init+0x120>)
 80014f2:	f001 fba3 	bl	8002c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, YellowLed_Pin|RedLed_Pin|GreenLed_Pin|BlueLed_Pin, GPIO_PIN_RESET);
 80014f6:	2200      	movs	r2, #0
 80014f8:	f24e 0102 	movw	r1, #57346	; 0xe002
 80014fc:	4822      	ldr	r0, [pc, #136]	; (8001588 <MX_GPIO_Init+0x124>)
 80014fe:	f001 fb9d 	bl	8002c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001502:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001508:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800150c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	4619      	mov	r1, r3
 8001518:	481c      	ldr	r0, [pc, #112]	; (800158c <MX_GPIO_Init+0x128>)
 800151a:	f001 f9f3 	bl	8002904 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Trig_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Trig_Pin;
 800151e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001524:	2301      	movs	r3, #1
 8001526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2300      	movs	r3, #0
 800152e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	4619      	mov	r1, r3
 8001536:	4813      	ldr	r0, [pc, #76]	; (8001584 <MX_GPIO_Init+0x120>)
 8001538:	f001 f9e4 	bl	8002904 <HAL_GPIO_Init>

  /*Configure GPIO pins : YellowLed_Pin RedLed_Pin GreenLed_Pin BlueLed_Pin */
  GPIO_InitStruct.Pin = YellowLed_Pin|RedLed_Pin|GreenLed_Pin|BlueLed_Pin;
 800153c:	f24e 0302 	movw	r3, #57346	; 0xe002
 8001540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001542:	2301      	movs	r3, #1
 8001544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4619      	mov	r1, r3
 8001554:	480c      	ldr	r0, [pc, #48]	; (8001588 <MX_GPIO_Init+0x124>)
 8001556:	f001 f9d5 	bl	8002904 <HAL_GPIO_Init>

  /*Configure GPIO pin : ExButton_Pin */
  GPIO_InitStruct.Pin = ExButton_Pin;
 800155a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800155e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001560:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ExButton_GPIO_Port, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	4805      	ldr	r0, [pc, #20]	; (8001588 <MX_GPIO_Init+0x124>)
 8001572:	f001 f9c7 	bl	8002904 <HAL_GPIO_Init>

}
 8001576:	bf00      	nop
 8001578:	3728      	adds	r7, #40	; 0x28
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800
 8001584:	40020000 	.word	0x40020000
 8001588:	40020400 	.word	0x40020400
 800158c:	40020800 	.word	0x40020800

08001590 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// overwrite the HAL_GPIO_EXTI_Callback function
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == ExButton_Pin) {
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015a0:	d105      	bne.n	80015ae <HAL_GPIO_EXTI_Callback+0x1e>
  	osSignalSet(ExButtonIntTaskHandle, SIGNAL_BUTTON_PRESS);
 80015a2:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <HAL_GPIO_EXTI_Callback+0x3c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2101      	movs	r1, #1
 80015a8:	4618      	mov	r0, r3
 80015aa:	f003 ffcb 	bl	8005544 <osSignalSet>
  }
  if(GPIO_Pin == B1_Pin) {
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015b4:	d105      	bne.n	80015c2 <HAL_GPIO_EXTI_Callback+0x32>
  	osSignalSet(ExButtonIntTaskHandle, SIGNAL_BUTTON_PRESS);
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <HAL_GPIO_EXTI_Callback+0x3c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2101      	movs	r1, #1
 80015bc:	4618      	mov	r0, r3
 80015be:	f003 ffc1 	bl	8005544 <osSignalSet>
  }
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200004ec 	.word	0x200004ec

080015d0 <HAL_UART_RxCpltCallback>:

// interrupt callback method - when the data reception is complete, this is called
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	uint8_t flag; // accelerate -> 1, decelerate -> 0, else -> don't do anything

	 // current UART
	if (huart->Instance == USART2) {
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a3b      	ldr	r2, [pc, #236]	; (80016cc <HAL_UART_RxCpltCallback+0xfc>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d16f      	bne.n	80016c2 <HAL_UART_RxCpltCallback+0xf2>
  	// Clear Rx_Buffer prior to use
  	if (Rx_indx == 0) {
 80015e2:	4b3b      	ldr	r3, [pc, #236]	; (80016d0 <HAL_UART_RxCpltCallback+0x100>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d107      	bne.n	80015fa <HAL_UART_RxCpltCallback+0x2a>
    	// turn on the yellow led
    	HAL_GPIO_WritePin(YellowLed_GPIO_Port, YellowLed_Pin, GPIO_PIN_SET);
 80015ea:	2201      	movs	r2, #1
 80015ec:	2102      	movs	r1, #2
 80015ee:	4839      	ldr	r0, [pc, #228]	; (80016d4 <HAL_UART_RxCpltCallback+0x104>)
 80015f0:	f001 fb24 	bl	8002c3c <HAL_GPIO_WritePin>
    	EmptyBuffer(Rx_Buffer);
 80015f4:	4838      	ldr	r0, [pc, #224]	; (80016d8 <HAL_UART_RxCpltCallback+0x108>)
 80015f6:	f7ff fcab 	bl	8000f50 <EmptyBuffer>
  	}

  	// check for carriage return (ASCII: 13 == \r)
  	if (Rx_byte != 13) {
 80015fa:	4b38      	ldr	r3, [pc, #224]	; (80016dc <HAL_UART_RxCpltCallback+0x10c>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b0d      	cmp	r3, #13
 8001600:	d00b      	beq.n	800161a <HAL_UART_RxCpltCallback+0x4a>
  		Rx_Buffer[Rx_indx++] = Rx_byte; // add data to Rx_Buffer
 8001602:	4b33      	ldr	r3, [pc, #204]	; (80016d0 <HAL_UART_RxCpltCallback+0x100>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	b2d1      	uxtb	r1, r2
 800160a:	4a31      	ldr	r2, [pc, #196]	; (80016d0 <HAL_UART_RxCpltCallback+0x100>)
 800160c:	7011      	strb	r1, [r2, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	4b32      	ldr	r3, [pc, #200]	; (80016dc <HAL_UART_RxCpltCallback+0x10c>)
 8001612:	7819      	ldrb	r1, [r3, #0]
 8001614:	4b30      	ldr	r3, [pc, #192]	; (80016d8 <HAL_UART_RxCpltCallback+0x108>)
 8001616:	5499      	strb	r1, [r3, r2]
 8001618:	e048      	b.n	80016ac <HAL_UART_RxCpltCallback+0xdc>
  	} else {
  		Rx_indx = 0;
 800161a:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <HAL_UART_RxCpltCallback+0x100>)
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
  		Transfer_cplt = 1; // transfer complete, data is ready
 8001620:	4b2f      	ldr	r3, [pc, #188]	; (80016e0 <HAL_UART_RxCpltCallback+0x110>)
 8001622:	2201      	movs	r2, #1
 8001624:	701a      	strb	r2, [r3, #0]

  		// LED trigger phrase
  		if (strcmp(Rx_Buffer, "faster") == 0) {
 8001626:	492f      	ldr	r1, [pc, #188]	; (80016e4 <HAL_UART_RxCpltCallback+0x114>)
 8001628:	482b      	ldr	r0, [pc, #172]	; (80016d8 <HAL_UART_RxCpltCallback+0x108>)
 800162a:	f7fe fdd9 	bl	80001e0 <strcmp>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d106      	bne.n	8001642 <HAL_UART_RxCpltCallback+0x72>
  			sprintf(msg, "Accelerating!");
 8001634:	492c      	ldr	r1, [pc, #176]	; (80016e8 <HAL_UART_RxCpltCallback+0x118>)
 8001636:	482d      	ldr	r0, [pc, #180]	; (80016ec <HAL_UART_RxCpltCallback+0x11c>)
 8001638:	f007 fdaa 	bl	8009190 <siprintf>
  			flag = 1;
 800163c:	2301      	movs	r3, #1
 800163e:	73fb      	strb	r3, [r7, #15]
 8001640:	e013      	b.n	800166a <HAL_UART_RxCpltCallback+0x9a>
  		} else if (strcmp(Rx_Buffer, "slower")  == 0) {
 8001642:	492b      	ldr	r1, [pc, #172]	; (80016f0 <HAL_UART_RxCpltCallback+0x120>)
 8001644:	4824      	ldr	r0, [pc, #144]	; (80016d8 <HAL_UART_RxCpltCallback+0x108>)
 8001646:	f7fe fdcb 	bl	80001e0 <strcmp>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d106      	bne.n	800165e <HAL_UART_RxCpltCallback+0x8e>
  			sprintf(msg, "Decelerating!");
 8001650:	4928      	ldr	r1, [pc, #160]	; (80016f4 <HAL_UART_RxCpltCallback+0x124>)
 8001652:	4826      	ldr	r0, [pc, #152]	; (80016ec <HAL_UART_RxCpltCallback+0x11c>)
 8001654:	f007 fd9c 	bl	8009190 <siprintf>
  			flag = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	73fb      	strb	r3, [r7, #15]
 800165c:	e005      	b.n	800166a <HAL_UART_RxCpltCallback+0x9a>
  		} else {
  			sprintf(msg, "Unknown command.");
 800165e:	4926      	ldr	r1, [pc, #152]	; (80016f8 <HAL_UART_RxCpltCallback+0x128>)
 8001660:	4822      	ldr	r0, [pc, #136]	; (80016ec <HAL_UART_RxCpltCallback+0x11c>)
 8001662:	f007 fd95 	bl	8009190 <siprintf>
  			flag = 2;
 8001666:	2302      	movs	r3, #2
 8001668:	73fb      	strb	r3, [r7, #15]
  		}

  		// send to UART
  		HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 800166a:	2364      	movs	r3, #100	; 0x64
 800166c:	2202      	movs	r2, #2
 800166e:	4923      	ldr	r1, [pc, #140]	; (80016fc <HAL_UART_RxCpltCallback+0x12c>)
 8001670:	4823      	ldr	r0, [pc, #140]	; (8001700 <HAL_UART_RxCpltCallback+0x130>)
 8001672:	f002 fe9e 	bl	80043b2 <HAL_UART_Transmit>
  		HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001676:	2364      	movs	r3, #100	; 0x64
 8001678:	2228      	movs	r2, #40	; 0x28
 800167a:	491c      	ldr	r1, [pc, #112]	; (80016ec <HAL_UART_RxCpltCallback+0x11c>)
 800167c:	4820      	ldr	r0, [pc, #128]	; (8001700 <HAL_UART_RxCpltCallback+0x130>)
 800167e:	f002 fe98 	bl	80043b2 <HAL_UART_Transmit>
  		HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 8001682:	2364      	movs	r3, #100	; 0x64
 8001684:	2202      	movs	r2, #2
 8001686:	491d      	ldr	r1, [pc, #116]	; (80016fc <HAL_UART_RxCpltCallback+0x12c>)
 8001688:	481d      	ldr	r0, [pc, #116]	; (8001700 <HAL_UART_RxCpltCallback+0x130>)
 800168a:	f002 fe92 	bl	80043b2 <HAL_UART_Transmit>
    	EmptyBuffer(msg);
 800168e:	4817      	ldr	r0, [pc, #92]	; (80016ec <HAL_UART_RxCpltCallback+0x11c>)
 8001690:	f7ff fc5e 	bl	8000f50 <EmptyBuffer>

    	// send flag to the UartThread via a queue
	  	osMessagePut(UartQueueHandle, flag, 100);
 8001694:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <HAL_UART_RxCpltCallback+0x134>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	7bf9      	ldrb	r1, [r7, #15]
 800169a:	2264      	movs	r2, #100	; 0x64
 800169c:	4618      	mov	r0, r3
 800169e:	f004 f957 	bl	8005950 <osMessagePut>

    	// turn off the yellow led
    	HAL_GPIO_WritePin(YellowLed_GPIO_Port, YellowLed_Pin, GPIO_PIN_RESET);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2102      	movs	r1, #2
 80016a6:	480b      	ldr	r0, [pc, #44]	; (80016d4 <HAL_UART_RxCpltCallback+0x104>)
 80016a8:	f001 fac8 	bl	8002c3c <HAL_GPIO_WritePin>
  	}

  	// activate UART
  	HAL_UART_Receive_IT(&huart2, &Rx_byte, 1);
 80016ac:	2201      	movs	r2, #1
 80016ae:	490b      	ldr	r1, [pc, #44]	; (80016dc <HAL_UART_RxCpltCallback+0x10c>)
 80016b0:	4813      	ldr	r0, [pc, #76]	; (8001700 <HAL_UART_RxCpltCallback+0x130>)
 80016b2:	f002 ff10 	bl	80044d6 <HAL_UART_Receive_IT>
  	// send to UART
  	HAL_UART_Transmit(&huart2, &Rx_byte, 1, 100);
 80016b6:	2364      	movs	r3, #100	; 0x64
 80016b8:	2201      	movs	r2, #1
 80016ba:	4908      	ldr	r1, [pc, #32]	; (80016dc <HAL_UART_RxCpltCallback+0x10c>)
 80016bc:	4810      	ldr	r0, [pc, #64]	; (8001700 <HAL_UART_RxCpltCallback+0x130>)
 80016be:	f002 fe78 	bl	80043b2 <HAL_UART_Transmit>
	}
}
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40004400 	.word	0x40004400
 80016d0:	20000519 	.word	0x20000519
 80016d4:	40020400 	.word	0x40020400
 80016d8:	2000051c 	.word	0x2000051c
 80016dc:	20000518 	.word	0x20000518
 80016e0:	2000051a 	.word	0x2000051a
 80016e4:	0800b814 	.word	0x0800b814
 80016e8:	0800b81c 	.word	0x0800b81c
 80016ec:	20000580 	.word	0x20000580
 80016f0:	0800b82c 	.word	0x0800b82c
 80016f4:	0800b834 	.word	0x0800b834
 80016f8:	0800b844 	.word	0x0800b844
 80016fc:	0800b858 	.word	0x0800b858
 8001700:	20000498 	.word	0x20000498
 8001704:	20000500 	.word	0x20000500

08001708 <HAL_TIM_IC_CaptureCallback>:
// Second Timestamp will be captured on the falling edge
// Difference between the Timestamps will be calculated. This Difference will be microseconds, as the timer is running at 1 MHz
// Based on the Difference value, the distance is calculated using the formula given in the datasheet
// Finally, the Interrupt will be disabled, so that we don’t capture any unwanted signals.
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	7f1b      	ldrb	r3, [r3, #28]
 8001714:	2b01      	cmp	r3, #1
 8001716:	f040 809d 	bne.w	8001854 <HAL_TIM_IC_CaptureCallback+0x14c>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 800171a:	4b53      	ldr	r3, [pc, #332]	; (8001868 <HAL_TIM_IC_CaptureCallback+0x160>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d11a      	bne.n	8001758 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001722:	2100      	movs	r1, #0
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f002 fb4f 	bl	8003dc8 <HAL_TIM_ReadCapturedValue>
 800172a:	4603      	mov	r3, r0
 800172c:	4a4f      	ldr	r2, [pc, #316]	; (800186c <HAL_TIM_IC_CaptureCallback+0x164>)
 800172e:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001730:	4b4d      	ldr	r3, [pc, #308]	; (8001868 <HAL_TIM_IC_CaptureCallback+0x160>)
 8001732:	2201      	movs	r2, #1
 8001734:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6a1a      	ldr	r2, [r3, #32]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 020a 	bic.w	r2, r2, #10
 8001744:	621a      	str	r2, [r3, #32]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6a1a      	ldr	r2, [r3, #32]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f042 0202 	orr.w	r2, r2, #2
 8001754:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8001756:	e07d      	b.n	8001854 <HAL_TIM_IC_CaptureCallback+0x14c>
		else if (Is_First_Captured==1)   // if the first is already captured
 8001758:	4b43      	ldr	r3, [pc, #268]	; (8001868 <HAL_TIM_IC_CaptureCallback+0x160>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d179      	bne.n	8001854 <HAL_TIM_IC_CaptureCallback+0x14c>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001760:	2100      	movs	r1, #0
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f002 fb30 	bl	8003dc8 <HAL_TIM_ReadCapturedValue>
 8001768:	4603      	mov	r3, r0
 800176a:	4a41      	ldr	r2, [pc, #260]	; (8001870 <HAL_TIM_IC_CaptureCallback+0x168>)
 800176c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2200      	movs	r2, #0
 8001774:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8001776:	4b3e      	ldr	r3, [pc, #248]	; (8001870 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	4b3c      	ldr	r3, [pc, #240]	; (800186c <HAL_TIM_IC_CaptureCallback+0x164>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d907      	bls.n	8001792 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8001782:	4b3b      	ldr	r3, [pc, #236]	; (8001870 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	4b39      	ldr	r3, [pc, #228]	; (800186c <HAL_TIM_IC_CaptureCallback+0x164>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	4a39      	ldr	r2, [pc, #228]	; (8001874 <HAL_TIM_IC_CaptureCallback+0x16c>)
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	e00f      	b.n	80017b2 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8001792:	4b36      	ldr	r3, [pc, #216]	; (800186c <HAL_TIM_IC_CaptureCallback+0x164>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	4b36      	ldr	r3, [pc, #216]	; (8001870 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	d909      	bls.n	80017b2 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 800179e:	4b34      	ldr	r3, [pc, #208]	; (8001870 <HAL_TIM_IC_CaptureCallback+0x168>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	4b32      	ldr	r3, [pc, #200]	; (800186c <HAL_TIM_IC_CaptureCallback+0x164>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80017ac:	33ff      	adds	r3, #255	; 0xff
 80017ae:	4a31      	ldr	r2, [pc, #196]	; (8001874 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80017b0:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 80017b2:	4b30      	ldr	r3, [pc, #192]	; (8001874 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe febc 	bl	8000534 <__aeabi_ui2d>
 80017bc:	a328      	add	r3, pc, #160	; (adr r3, 8001860 <HAL_TIM_IC_CaptureCallback+0x158>)
 80017be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c2:	f7fe ff31 	bl	8000628 <__aeabi_dmul>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4610      	mov	r0, r2
 80017cc:	4619      	mov	r1, r3
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017d6:	f7ff f851 	bl	800087c <__aeabi_ddiv>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	f7ff f9f9 	bl	8000bd8 <__aeabi_d2uiz>
 80017e6:	4603      	mov	r3, r0
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4b23      	ldr	r3, [pc, #140]	; (8001878 <HAL_TIM_IC_CaptureCallback+0x170>)
 80017ec:	701a      	strb	r2, [r3, #0]
	  	if (Distance < 20){
 80017ee:	4b22      	ldr	r3, [pc, #136]	; (8001878 <HAL_TIM_IC_CaptureCallback+0x170>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b13      	cmp	r3, #19
 80017f4:	d808      	bhi.n	8001808 <HAL_TIM_IC_CaptureCallback+0x100>
				detect = 1;
 80017f6:	4b21      	ldr	r3, [pc, #132]	; (800187c <HAL_TIM_IC_CaptureCallback+0x174>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	701a      	strb	r2, [r3, #0]
	    	osSignalSet(ObjectDetectTasHandle, SIGNAL_OBJECT_DETECT);
 80017fc:	4b20      	ldr	r3, [pc, #128]	; (8001880 <HAL_TIM_IC_CaptureCallback+0x178>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2101      	movs	r1, #1
 8001802:	4618      	mov	r0, r3
 8001804:	f003 fe9e 	bl	8005544 <osSignalSet>
	  	if (Distance >=20){
 8001808:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <HAL_TIM_IC_CaptureCallback+0x170>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b13      	cmp	r3, #19
 800180e:	d908      	bls.n	8001822 <HAL_TIM_IC_CaptureCallback+0x11a>
				detect = 0;
 8001810:	4b1a      	ldr	r3, [pc, #104]	; (800187c <HAL_TIM_IC_CaptureCallback+0x174>)
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
				osSignalSet(ObjectDetectTasHandle, SIGNAL_OBJECT_DETECT);
 8001816:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2101      	movs	r1, #1
 800181c:	4618      	mov	r0, r3
 800181e:	f003 fe91 	bl	8005544 <osSignalSet>
			Is_First_Captured = 0; // set it back to false
 8001822:	4b11      	ldr	r3, [pc, #68]	; (8001868 <HAL_TIM_IC_CaptureCallback+0x160>)
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6a1a      	ldr	r2, [r3, #32]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 020a 	bic.w	r2, r2, #10
 8001836:	621a      	str	r2, [r3, #32]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6a12      	ldr	r2, [r2, #32]
 8001842:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8001844:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68da      	ldr	r2, [r3, #12]
 800184a:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <HAL_TIM_IC_CaptureCallback+0x17c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f022 0202 	bic.w	r2, r2, #2
 8001852:	60da      	str	r2, [r3, #12]
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	f3af 8000 	nop.w
 8001860:	b020c49c 	.word	0xb020c49c
 8001864:	3fa16872 	.word	0x3fa16872
 8001868:	200005b8 	.word	0x200005b8
 800186c:	200005ac 	.word	0x200005ac
 8001870:	200005b0 	.word	0x200005b0
 8001874:	200005b4 	.word	0x200005b4
 8001878:	200005b9 	.word	0x200005b9
 800187c:	200005ba 	.word	0x200005ba
 8001880:	200004f8 	.word	0x200004f8
 8001884:	20000450 	.word	0x20000450

08001888 <StartImuTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartImuTask */
void StartImuTask(void const * argument)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b090      	sub	sp, #64	; 0x40
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8001890:	4b23      	ldr	r3, [pc, #140]	; (8001920 <StartImuTask+0x98>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f04f 31ff 	mov.w	r1, #4294967295
 8001898:	4618      	mov	r0, r3
 800189a:	f003 fef7 	bl	800568c <osMutexWait>
	sprintf(msg, "IMU GO\r\n");
 800189e:	4921      	ldr	r1, [pc, #132]	; (8001924 <StartImuTask+0x9c>)
 80018a0:	4821      	ldr	r0, [pc, #132]	; (8001928 <StartImuTask+0xa0>)
 80018a2:	f007 fc75 	bl	8009190 <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 80018a6:	2364      	movs	r3, #100	; 0x64
 80018a8:	2228      	movs	r2, #40	; 0x28
 80018aa:	491f      	ldr	r1, [pc, #124]	; (8001928 <StartImuTask+0xa0>)
 80018ac:	481f      	ldr	r0, [pc, #124]	; (800192c <StartImuTask+0xa4>)
 80018ae:	f002 fd80 	bl	80043b2 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 80018b2:	481d      	ldr	r0, [pc, #116]	; (8001928 <StartImuTask+0xa0>)
 80018b4:	f7ff fb4c 	bl	8000f50 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 80018b8:	4b19      	ldr	r3, [pc, #100]	; (8001920 <StartImuTask+0x98>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f003 ff33 	bl	8005728 <osMutexRelease>

  /* Infinite loop */
  for(;;)
  {
  	// Get the RTOS kernel tick count
  	uint32_t  t =  osKernelSysTick();
 80018c2:	f003 fdce 	bl	8005462 <osKernelSysTick>
 80018c6:	63f8      	str	r0, [r7, #60]	; 0x3c

  	// pseudo-measurements -  we assume that the the IMU gives perfect measurements that indicate that the vehicle moves in a circle with constant speeds
  	LinAcc imu_lin_acc = {0.1, 0.0, 0.0};
 80018c8:	4b19      	ldr	r3, [pc, #100]	; (8001930 <StartImuTask+0xa8>)
 80018ca:	633b      	str	r3, [r7, #48]	; 0x30
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	637b      	str	r3, [r7, #52]	; 0x34
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	63bb      	str	r3, [r7, #56]	; 0x38
  	AngVel imu_ang_vel = {0.0, 0.0, 0.2};
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80018e4:	4b13      	ldr	r3, [pc, #76]	; (8001934 <StartImuTask+0xac>)
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  	ImuData imu_readings = {t, imu_lin_acc, imu_ang_vel};
 80018e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80018f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80018f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80018fa:	f107 0318 	add.w	r3, r7, #24
 80018fe:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001902:	ca07      	ldmia	r2, {r0, r1, r2}
 8001904:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  	// send the data to the queue
  	osMessagePut(ImuQueueHandle, (uint32_t) &imu_readings, 100);
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <StartImuTask+0xb0>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f107 0108 	add.w	r1, r7, #8
 8001910:	2264      	movs	r2, #100	; 0x64
 8001912:	4618      	mov	r0, r3
 8001914:	f004 f81c 	bl	8005950 <osMessagePut>

  	osDelay(10); // IMU signal every 0.01 sec
 8001918:	200a      	movs	r0, #10
 800191a:	f003 fdfe 	bl	800551a <osDelay>
  {
 800191e:	e7d0      	b.n	80018c2 <StartImuTask+0x3a>
 8001920:	20000510 	.word	0x20000510
 8001924:	0800b85c 	.word	0x0800b85c
 8001928:	20000580 	.word	0x20000580
 800192c:	20000498 	.word	0x20000498
 8001930:	3dcccccd 	.word	0x3dcccccd
 8001934:	3e4ccccd 	.word	0x3e4ccccd
 8001938:	20000504 	.word	0x20000504

0800193c <StartGpsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGpsTask */
void StartGpsTask(void const * argument)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	; 0x28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGpsTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8001944:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <StartGpsTask+0x74>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f04f 31ff 	mov.w	r1, #4294967295
 800194c:	4618      	mov	r0, r3
 800194e:	f003 fe9d 	bl	800568c <osMutexWait>
	sprintf(msg, "GPS GO\r\n");
 8001952:	4918      	ldr	r1, [pc, #96]	; (80019b4 <StartGpsTask+0x78>)
 8001954:	4818      	ldr	r0, [pc, #96]	; (80019b8 <StartGpsTask+0x7c>)
 8001956:	f007 fc1b 	bl	8009190 <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 800195a:	2364      	movs	r3, #100	; 0x64
 800195c:	2228      	movs	r2, #40	; 0x28
 800195e:	4916      	ldr	r1, [pc, #88]	; (80019b8 <StartGpsTask+0x7c>)
 8001960:	4816      	ldr	r0, [pc, #88]	; (80019bc <StartGpsTask+0x80>)
 8001962:	f002 fd26 	bl	80043b2 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8001966:	4814      	ldr	r0, [pc, #80]	; (80019b8 <StartGpsTask+0x7c>)
 8001968:	f7ff faf2 	bl	8000f50 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 800196c:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <StartGpsTask+0x74>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f003 fed9 	bl	8005728 <osMutexRelease>

	/* Infinite loop */
  for(;;)
  {
  	// Get the RTOS kernel tick count
  	uint32_t  t =  osKernelSysTick();
 8001976:	f003 fd74 	bl	8005462 <osKernelSysTick>
 800197a:	6278      	str	r0, [r7, #36]	; 0x24

  	// GPS pseudo-measurements
  	float gps_x = 1.1;
 800197c:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <StartGpsTask+0x84>)
 800197e:	623b      	str	r3, [r7, #32]
  	float gps_y = 2.2;
 8001980:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <StartGpsTask+0x88>)
 8001982:	61fb      	str	r3, [r7, #28]
  	float gps_z = 3.3;
 8001984:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <StartGpsTask+0x8c>)
 8001986:	61bb      	str	r3, [r7, #24]
  	GpsData gps_readings = {t, gps_x, gps_y, gps_z};
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	6a3b      	ldr	r3, [r7, #32]
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	617b      	str	r3, [r7, #20]

  	// send the data to the queue
  	osMessagePut(GpsQueueHandle, (uint32_t) &gps_readings, 100);
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <StartGpsTask+0x90>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f107 0108 	add.w	r1, r7, #8
 80019a0:	2264      	movs	r2, #100	; 0x64
 80019a2:	4618      	mov	r0, r3
 80019a4:	f003 ffd4 	bl	8005950 <osMessagePut>

  	osDelay(100); // GPS signal every 0.1 sec
 80019a8:	2064      	movs	r0, #100	; 0x64
 80019aa:	f003 fdb6 	bl	800551a <osDelay>
  {
 80019ae:	e7e2      	b.n	8001976 <StartGpsTask+0x3a>
 80019b0:	20000510 	.word	0x20000510
 80019b4:	0800b868 	.word	0x0800b868
 80019b8:	20000580 	.word	0x20000580
 80019bc:	20000498 	.word	0x20000498
 80019c0:	3f8ccccd 	.word	0x3f8ccccd
 80019c4:	400ccccd 	.word	0x400ccccd
 80019c8:	40533333 	.word	0x40533333
 80019cc:	20000508 	.word	0x20000508

080019d0 <StartKFTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartKFTask */
void StartKFTask(void const * argument)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08a      	sub	sp, #40	; 0x28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartKFTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 80019d8:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <StartKFTask+0x64>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f04f 31ff 	mov.w	r1, #4294967295
 80019e0:	4618      	mov	r0, r3
 80019e2:	f003 fe53 	bl	800568c <osMutexWait>
	sprintf(msg, "KF GO\r\n");
 80019e6:	4914      	ldr	r1, [pc, #80]	; (8001a38 <StartKFTask+0x68>)
 80019e8:	4814      	ldr	r0, [pc, #80]	; (8001a3c <StartKFTask+0x6c>)
 80019ea:	f007 fbd1 	bl	8009190 <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 80019ee:	2364      	movs	r3, #100	; 0x64
 80019f0:	2228      	movs	r2, #40	; 0x28
 80019f2:	4912      	ldr	r1, [pc, #72]	; (8001a3c <StartKFTask+0x6c>)
 80019f4:	4812      	ldr	r0, [pc, #72]	; (8001a40 <StartKFTask+0x70>)
 80019f6:	f002 fcdc 	bl	80043b2 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 80019fa:	4810      	ldr	r0, [pc, #64]	; (8001a3c <StartKFTask+0x6c>)
 80019fc:	f7ff faa8 	bl	8000f50 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <StartKFTask+0x64>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f003 fe8f 	bl	8005728 <osMutexRelease>

	/* Infinite loop */
  for(;;)
  {
  	// Get the RTOS kernel tick count
  	uint32_t  t =  osKernelSysTick();
 8001a0a:	f003 fd2a 	bl	8005462 <osKernelSysTick>
 8001a0e:	6278      	str	r0, [r7, #36]	; 0x24

  	// receive GPS and IMU data from queues
  	osEvent retval_imu = osMessageGet(ImuQueueHandle, 0);
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <StartKFTask+0x74>)
 8001a12:	6819      	ldr	r1, [r3, #0]
 8001a14:	f107 0318 	add.w	r3, r7, #24
 8001a18:	2200      	movs	r2, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f003 ffd8 	bl	80059d0 <osMessageGet>
//  	((ImuData*)retval_imu.value.p)->timestamp;
//  	((ImuData*)retval_imu.value.p)->lin_acc;
//  	((ImuData*)retval_imu.value.p)->ang_vel;
  	osEvent retval_gps = osMessageGet(GpsQueueHandle, 0);
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <StartKFTask+0x78>)
 8001a22:	6819      	ldr	r1, [r3, #0]
 8001a24:	f107 030c 	add.w	r3, r7, #12
 8001a28:	2200      	movs	r2, #0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f003 ffd0 	bl	80059d0 <osMessageGet>
  {
 8001a30:	e7eb      	b.n	8001a0a <StartKFTask+0x3a>
 8001a32:	bf00      	nop
 8001a34:	20000510 	.word	0x20000510
 8001a38:	0800b874 	.word	0x0800b874
 8001a3c:	20000580 	.word	0x20000580
 8001a40:	20000498 	.word	0x20000498
 8001a44:	20000504 	.word	0x20000504
 8001a48:	20000508 	.word	0x20000508

08001a4c <StartRadarTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRadarTask */
void StartRadarTask(void const * argument)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRadarTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8001a54:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <StartRadarTask+0x74>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f04f 31ff 	mov.w	r1, #4294967295
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f003 fe15 	bl	800568c <osMutexWait>
	sprintf(msg, "Radar GO\r\n");
 8001a62:	4918      	ldr	r1, [pc, #96]	; (8001ac4 <StartRadarTask+0x78>)
 8001a64:	4818      	ldr	r0, [pc, #96]	; (8001ac8 <StartRadarTask+0x7c>)
 8001a66:	f007 fb93 	bl	8009190 <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001a6a:	2364      	movs	r3, #100	; 0x64
 8001a6c:	2228      	movs	r2, #40	; 0x28
 8001a6e:	4916      	ldr	r1, [pc, #88]	; (8001ac8 <StartRadarTask+0x7c>)
 8001a70:	4816      	ldr	r0, [pc, #88]	; (8001acc <StartRadarTask+0x80>)
 8001a72:	f002 fc9e 	bl	80043b2 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8001a76:	4814      	ldr	r0, [pc, #80]	; (8001ac8 <StartRadarTask+0x7c>)
 8001a78:	f7ff fa6a 	bl	8000f50 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8001a7c:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <StartRadarTask+0x74>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f003 fe51 	bl	8005728 <osMutexRelease>

	// counter to periodically pseudo-detect an object
	uint8_t i = 0; // 8 bits means that after 256 it goes back to 0
 8001a86:	2300      	movs	r3, #0
 8001a88:	73fb      	strb	r3, [r7, #15]
  for(;;)
  {
  	// read from the supersonic sensor
  	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a90:	480f      	ldr	r0, [pc, #60]	; (8001ad0 <StartRadarTask+0x84>)
 8001a92:	f001 f8d3 	bl	8002c3c <HAL_GPIO_WritePin>
  	delay(10);  // wait for 10 us
 8001a96:	200a      	movs	r0, #10
 8001a98:	f7ff fa78 	bl	8000f8c <delay>
  	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001aa2:	480b      	ldr	r0, [pc, #44]	; (8001ad0 <StartRadarTask+0x84>)
 8001aa4:	f001 f8ca 	bl	8002c3c <HAL_GPIO_WritePin>

  	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <StartRadarTask+0x88>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <StartRadarTask+0x88>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 0202 	orr.w	r2, r2, #2
 8001ab6:	60da      	str	r2, [r3, #12]
  	// delay for 0.05 sec -> pretty normal radar frequency
  	osDelay(50);
 8001ab8:	2032      	movs	r0, #50	; 0x32
 8001aba:	f003 fd2e 	bl	800551a <osDelay>
  	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001abe:	e7e4      	b.n	8001a8a <StartRadarTask+0x3e>
 8001ac0:	20000510 	.word	0x20000510
 8001ac4:	0800b87c 	.word	0x0800b87c
 8001ac8:	20000580 	.word	0x20000580
 8001acc:	20000498 	.word	0x20000498
 8001ad0:	40020000 	.word	0x40020000
 8001ad4:	20000450 	.word	0x20000450

08001ad8 <StartExButtonIntTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartExButtonIntTask */
void StartExButtonIntTask(void const * argument)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartExButtonIntTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8001ae0:	4b50      	ldr	r3, [pc, #320]	; (8001c24 <StartExButtonIntTask+0x14c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f003 fdcf 	bl	800568c <osMutexWait>
	sprintf(msg, "ExButton GO\r\n");
 8001aee:	494e      	ldr	r1, [pc, #312]	; (8001c28 <StartExButtonIntTask+0x150>)
 8001af0:	484e      	ldr	r0, [pc, #312]	; (8001c2c <StartExButtonIntTask+0x154>)
 8001af2:	f007 fb4d 	bl	8009190 <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001af6:	2364      	movs	r3, #100	; 0x64
 8001af8:	2228      	movs	r2, #40	; 0x28
 8001afa:	494c      	ldr	r1, [pc, #304]	; (8001c2c <StartExButtonIntTask+0x154>)
 8001afc:	484c      	ldr	r0, [pc, #304]	; (8001c30 <StartExButtonIntTask+0x158>)
 8001afe:	f002 fc58 	bl	80043b2 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8001b02:	484a      	ldr	r0, [pc, #296]	; (8001c2c <StartExButtonIntTask+0x154>)
 8001b04:	f7ff fa24 	bl	8000f50 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8001b08:	4b46      	ldr	r3, [pc, #280]	; (8001c24 <StartExButtonIntTask+0x14c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f003 fe0b 	bl	8005728 <osMutexRelease>
  /* Infinite loop */
  for(;;)
  {
  	//wait for signal
  	osSignalWait(SIGNAL_BUTTON_PRESS, osWaitForever);
 8001b12:	463b      	mov	r3, r7
 8001b14:	f04f 32ff 	mov.w	r2, #4294967295
 8001b18:	2101      	movs	r1, #1
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f003 fd52 	bl	80055c4 <osSignalWait>

  	// print to uart
  	sprintf(msg, "Button pressed...\r\n");
 8001b20:	4944      	ldr	r1, [pc, #272]	; (8001c34 <StartExButtonIntTask+0x15c>)
 8001b22:	4842      	ldr	r0, [pc, #264]	; (8001c2c <StartExButtonIntTask+0x154>)
 8001b24:	f007 fb34 	bl	8009190 <siprintf>
  	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001b28:	2364      	movs	r3, #100	; 0x64
 8001b2a:	2228      	movs	r2, #40	; 0x28
 8001b2c:	493f      	ldr	r1, [pc, #252]	; (8001c2c <StartExButtonIntTask+0x154>)
 8001b2e:	4840      	ldr	r0, [pc, #256]	; (8001c30 <StartExButtonIntTask+0x158>)
 8001b30:	f002 fc3f 	bl	80043b2 <HAL_UART_Transmit>
  	EmptyBuffer(msg);
 8001b34:	483d      	ldr	r0, [pc, #244]	; (8001c2c <StartExButtonIntTask+0x154>)
 8001b36:	f7ff fa0b 	bl	8000f50 <EmptyBuffer>

  	// only if there are no detected objects the emergency button should do something
  	if (detect == 0) {
 8001b3a:	4b3f      	ldr	r3, [pc, #252]	; (8001c38 <StartExButtonIntTask+0x160>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1e7      	bne.n	8001b12 <StartExButtonIntTask+0x3a>
    	// read redled state
  	  GPIO_PinState red_trig = HAL_GPIO_ReadPin(RedLed_GPIO_Port, RedLed_Pin);
 8001b42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b46:	483d      	ldr	r0, [pc, #244]	; (8001c3c <StartExButtonIntTask+0x164>)
 8001b48:	f001 f860 	bl	8002c0c <HAL_GPIO_ReadPin>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	77fb      	strb	r3, [r7, #31]
  	  if (red_trig == GPIO_PIN_RESET){
 8001b50:	7ffb      	ldrb	r3, [r7, #31]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d132      	bne.n	8001bbc <StartExButtonIntTask+0xe4>
  	  	// stop the vehicle!!
  	  	osSemaphoreWait(VelSemaphoreHandle, osWaitForever);
 8001b56:	4b3a      	ldr	r3, [pc, #232]	; (8001c40 <StartExButtonIntTask+0x168>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f04f 31ff 	mov.w	r1, #4294967295
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f003 fe4a 	bl	80057f8 <osSemaphoreWait>
  	  	v = 0; // update the velocity references
 8001b64:	4b37      	ldr	r3, [pc, #220]	; (8001c44 <StartExButtonIntTask+0x16c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]
  	  	w = 0;
 8001b6a:	4b37      	ldr	r3, [pc, #220]	; (8001c48 <StartExButtonIntTask+0x170>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
  	  	sprintf(msg, "Lin. vel: %d Ang vel: %d\r\n", v, w);
 8001b70:	4b34      	ldr	r3, [pc, #208]	; (8001c44 <StartExButtonIntTask+0x16c>)
 8001b72:	f993 3000 	ldrsb.w	r3, [r3]
 8001b76:	461a      	mov	r2, r3
 8001b78:	4b33      	ldr	r3, [pc, #204]	; (8001c48 <StartExButtonIntTask+0x170>)
 8001b7a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b7e:	4933      	ldr	r1, [pc, #204]	; (8001c4c <StartExButtonIntTask+0x174>)
 8001b80:	482a      	ldr	r0, [pc, #168]	; (8001c2c <StartExButtonIntTask+0x154>)
 8001b82:	f007 fb05 	bl	8009190 <siprintf>
  	  	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001b86:	2364      	movs	r3, #100	; 0x64
 8001b88:	2228      	movs	r2, #40	; 0x28
 8001b8a:	4928      	ldr	r1, [pc, #160]	; (8001c2c <StartExButtonIntTask+0x154>)
 8001b8c:	4828      	ldr	r0, [pc, #160]	; (8001c30 <StartExButtonIntTask+0x158>)
 8001b8e:	f002 fc10 	bl	80043b2 <HAL_UART_Transmit>
  	  	EmptyBuffer(msg);
 8001b92:	4826      	ldr	r0, [pc, #152]	; (8001c2c <StartExButtonIntTask+0x154>)
 8001b94:	f7ff f9dc 	bl	8000f50 <EmptyBuffer>
  	  	osSemaphoreRelease(VelSemaphoreHandle);
 8001b98:	4b29      	ldr	r3, [pc, #164]	; (8001c40 <StartExButtonIntTask+0x168>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f003 fe79 	bl	8005894 <osSemaphoreRelease>

  	  	// turn on red light
  		  HAL_GPIO_WritePin(RedLed_GPIO_Port, RedLed_Pin, GPIO_PIN_SET);
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ba8:	4824      	ldr	r0, [pc, #144]	; (8001c3c <StartExButtonIntTask+0x164>)
 8001baa:	f001 f847 	bl	8002c3c <HAL_GPIO_WritePin>
  	  	// turn off green light
  		  HAL_GPIO_WritePin(GreenLed_GPIO_Port, GreenLed_Pin, GPIO_PIN_RESET);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bb4:	4821      	ldr	r0, [pc, #132]	; (8001c3c <StartExButtonIntTask+0x164>)
 8001bb6:	f001 f841 	bl	8002c3c <HAL_GPIO_WritePin>
 8001bba:	e7aa      	b.n	8001b12 <StartExButtonIntTask+0x3a>
  	  } else {
  	  	// start the vehicle
  	  	osSemaphoreWait(VelSemaphoreHandle, osWaitForever);
 8001bbc:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <StartExButtonIntTask+0x168>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f003 fe17 	bl	80057f8 <osSemaphoreWait>
  	  	v = 10; // update the velocity references
 8001bca:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <StartExButtonIntTask+0x16c>)
 8001bcc:	220a      	movs	r2, #10
 8001bce:	701a      	strb	r2, [r3, #0]
  	  	w = 0;
 8001bd0:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <StartExButtonIntTask+0x170>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	701a      	strb	r2, [r3, #0]
  	  	sprintf(msg, "Lin. vel: %d Ang vel: %d\r\n", v, w);
 8001bd6:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <StartExButtonIntTask+0x16c>)
 8001bd8:	f993 3000 	ldrsb.w	r3, [r3]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4b1a      	ldr	r3, [pc, #104]	; (8001c48 <StartExButtonIntTask+0x170>)
 8001be0:	f993 3000 	ldrsb.w	r3, [r3]
 8001be4:	4919      	ldr	r1, [pc, #100]	; (8001c4c <StartExButtonIntTask+0x174>)
 8001be6:	4811      	ldr	r0, [pc, #68]	; (8001c2c <StartExButtonIntTask+0x154>)
 8001be8:	f007 fad2 	bl	8009190 <siprintf>
  	  	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001bec:	2364      	movs	r3, #100	; 0x64
 8001bee:	2228      	movs	r2, #40	; 0x28
 8001bf0:	490e      	ldr	r1, [pc, #56]	; (8001c2c <StartExButtonIntTask+0x154>)
 8001bf2:	480f      	ldr	r0, [pc, #60]	; (8001c30 <StartExButtonIntTask+0x158>)
 8001bf4:	f002 fbdd 	bl	80043b2 <HAL_UART_Transmit>
  	  	EmptyBuffer(msg);
 8001bf8:	480c      	ldr	r0, [pc, #48]	; (8001c2c <StartExButtonIntTask+0x154>)
 8001bfa:	f7ff f9a9 	bl	8000f50 <EmptyBuffer>
  	  	osSemaphoreRelease(VelSemaphoreHandle);
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <StartExButtonIntTask+0x168>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f003 fe46 	bl	8005894 <osSemaphoreRelease>

  	  	// turn on the green light
  		  HAL_GPIO_WritePin(GreenLed_GPIO_Port, GreenLed_Pin, GPIO_PIN_SET);
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c0e:	480b      	ldr	r0, [pc, #44]	; (8001c3c <StartExButtonIntTask+0x164>)
 8001c10:	f001 f814 	bl	8002c3c <HAL_GPIO_WritePin>
  	  	// turn off the red light
  		  HAL_GPIO_WritePin(RedLed_GPIO_Port, RedLed_Pin, GPIO_PIN_RESET);
 8001c14:	2200      	movs	r2, #0
 8001c16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c1a:	4808      	ldr	r0, [pc, #32]	; (8001c3c <StartExButtonIntTask+0x164>)
 8001c1c:	f001 f80e 	bl	8002c3c <HAL_GPIO_WritePin>
  	osSignalWait(SIGNAL_BUTTON_PRESS, osWaitForever);
 8001c20:	e777      	b.n	8001b12 <StartExButtonIntTask+0x3a>
 8001c22:	bf00      	nop
 8001c24:	20000510 	.word	0x20000510
 8001c28:	0800b888 	.word	0x0800b888
 8001c2c:	20000580 	.word	0x20000580
 8001c30:	20000498 	.word	0x20000498
 8001c34:	0800b898 	.word	0x0800b898
 8001c38:	200005ba 	.word	0x200005ba
 8001c3c:	40020400 	.word	0x40020400
 8001c40:	20000514 	.word	0x20000514
 8001c44:	200005a8 	.word	0x200005a8
 8001c48:	200005a9 	.word	0x200005a9
 8001c4c:	0800b8ac 	.word	0x0800b8ac

08001c50 <StartMotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void const * argument)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTask */
  /* Infinite loop */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8001c58:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <StartMotorTask+0x50>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c60:	4618      	mov	r0, r3
 8001c62:	f003 fd13 	bl	800568c <osMutexWait>
	sprintf(msg, "Motor GO\r\n");
 8001c66:	490f      	ldr	r1, [pc, #60]	; (8001ca4 <StartMotorTask+0x54>)
 8001c68:	480f      	ldr	r0, [pc, #60]	; (8001ca8 <StartMotorTask+0x58>)
 8001c6a:	f007 fa91 	bl	8009190 <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001c6e:	2364      	movs	r3, #100	; 0x64
 8001c70:	2228      	movs	r2, #40	; 0x28
 8001c72:	490d      	ldr	r1, [pc, #52]	; (8001ca8 <StartMotorTask+0x58>)
 8001c74:	480d      	ldr	r0, [pc, #52]	; (8001cac <StartMotorTask+0x5c>)
 8001c76:	f002 fb9c 	bl	80043b2 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8001c7a:	480b      	ldr	r0, [pc, #44]	; (8001ca8 <StartMotorTask+0x58>)
 8001c7c:	f7ff f968 	bl	8000f50 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8001c80:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <StartMotorTask+0x50>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f003 fd4f 	bl	8005728 <osMutexRelease>
	v = 0; // 14 m/sec linear velocity
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <StartMotorTask+0x60>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]
	w = 0; // 0.2 rad/sec angular velocity
 8001c90:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <StartMotorTask+0x64>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	701a      	strb	r2, [r3, #0]
  for(;;)
  {
  	// block until resumed
  	osThreadSuspend(NULL);
 8001c96:	2000      	movs	r0, #0
 8001c98:	f003 ff0e 	bl	8005ab8 <osThreadSuspend>
 8001c9c:	e7fb      	b.n	8001c96 <StartMotorTask+0x46>
 8001c9e:	bf00      	nop
 8001ca0:	20000510 	.word	0x20000510
 8001ca4:	0800b8c8 	.word	0x0800b8c8
 8001ca8:	20000580 	.word	0x20000580
 8001cac:	20000498 	.word	0x20000498
 8001cb0:	200005a8 	.word	0x200005a8
 8001cb4:	200005a9 	.word	0x200005a9

08001cb8 <StartMainTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMainTask */
void StartMainTask(void const * argument)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMainTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8001cc0:	4b1f      	ldr	r3, [pc, #124]	; (8001d40 <StartMainTask+0x88>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f003 fcdf 	bl	800568c <osMutexWait>
	sprintf(msg, "Main GO\r\n");
 8001cce:	491d      	ldr	r1, [pc, #116]	; (8001d44 <StartMainTask+0x8c>)
 8001cd0:	481d      	ldr	r0, [pc, #116]	; (8001d48 <StartMainTask+0x90>)
 8001cd2:	f007 fa5d 	bl	8009190 <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 200);
 8001cd6:	23c8      	movs	r3, #200	; 0xc8
 8001cd8:	2228      	movs	r2, #40	; 0x28
 8001cda:	491b      	ldr	r1, [pc, #108]	; (8001d48 <StartMainTask+0x90>)
 8001cdc:	481b      	ldr	r0, [pc, #108]	; (8001d4c <StartMainTask+0x94>)
 8001cde:	f002 fb68 	bl	80043b2 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8001ce2:	4819      	ldr	r0, [pc, #100]	; (8001d48 <StartMainTask+0x90>)
 8001ce4:	f7ff f934 	bl	8000f50 <EmptyBuffer>
	sprintf(msg, "Enabling UART...\r\n");
 8001ce8:	4919      	ldr	r1, [pc, #100]	; (8001d50 <StartMainTask+0x98>)
 8001cea:	4817      	ldr	r0, [pc, #92]	; (8001d48 <StartMainTask+0x90>)
 8001cec:	f007 fa50 	bl	8009190 <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001cf0:	2364      	movs	r3, #100	; 0x64
 8001cf2:	2228      	movs	r2, #40	; 0x28
 8001cf4:	4914      	ldr	r1, [pc, #80]	; (8001d48 <StartMainTask+0x90>)
 8001cf6:	4815      	ldr	r0, [pc, #84]	; (8001d4c <StartMainTask+0x94>)
 8001cf8:	f002 fb5b 	bl	80043b2 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8001cfc:	4812      	ldr	r0, [pc, #72]	; (8001d48 <StartMainTask+0x90>)
 8001cfe:	f7ff f927 	bl	8000f50 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8001d02:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <StartMainTask+0x88>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f003 fd0e 	bl	8005728 <osMutexRelease>

	// enable UART receive
	HAL_UART_Receive_IT(&huart2, &Rx_byte, 1);
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	4911      	ldr	r1, [pc, #68]	; (8001d54 <StartMainTask+0x9c>)
 8001d10:	480e      	ldr	r0, [pc, #56]	; (8001d4c <StartMainTask+0x94>)
 8001d12:	f002 fbe0 	bl	80044d6 <HAL_UART_Receive_IT>
	// enable tim1 IT for radar object detection
  HAL_TIM_Base_Start_IT(&htim1);
 8001d16:	4810      	ldr	r0, [pc, #64]	; (8001d58 <StartMainTask+0xa0>)
 8001d18:	f001 fce6 	bl	80036e8 <HAL_TIM_Base_Start_IT>
//  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); // to get IC_CaptureCallback

  /* Infinite loop */
  for(;;)
  {
  	sprintf(msg, "-Main\r\n");
 8001d1c:	490f      	ldr	r1, [pc, #60]	; (8001d5c <StartMainTask+0xa4>)
 8001d1e:	480a      	ldr	r0, [pc, #40]	; (8001d48 <StartMainTask+0x90>)
 8001d20:	f007 fa36 	bl	8009190 <siprintf>
  	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001d24:	2364      	movs	r3, #100	; 0x64
 8001d26:	2228      	movs	r2, #40	; 0x28
 8001d28:	4907      	ldr	r1, [pc, #28]	; (8001d48 <StartMainTask+0x90>)
 8001d2a:	4808      	ldr	r0, [pc, #32]	; (8001d4c <StartMainTask+0x94>)
 8001d2c:	f002 fb41 	bl	80043b2 <HAL_UART_Transmit>
  	EmptyBuffer(msg);
 8001d30:	4805      	ldr	r0, [pc, #20]	; (8001d48 <StartMainTask+0x90>)
 8001d32:	f7ff f90d 	bl	8000f50 <EmptyBuffer>

  	// suspend main until it is resumed
  	osThreadSuspend(NULL);
 8001d36:	2000      	movs	r0, #0
 8001d38:	f003 febe 	bl	8005ab8 <osThreadSuspend>
  	sprintf(msg, "-Main\r\n");
 8001d3c:	e7ee      	b.n	8001d1c <StartMainTask+0x64>
 8001d3e:	bf00      	nop
 8001d40:	20000510 	.word	0x20000510
 8001d44:	0800b8d4 	.word	0x0800b8d4
 8001d48:	20000580 	.word	0x20000580
 8001d4c:	20000498 	.word	0x20000498
 8001d50:	0800b8e0 	.word	0x0800b8e0
 8001d54:	20000518 	.word	0x20000518
 8001d58:	20000450 	.word	0x20000450
 8001d5c:	0800b8f4 	.word	0x0800b8f4

08001d60 <StartObjectDetectTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartObjectDetectTask */
void StartObjectDetectTask(void const * argument)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b088      	sub	sp, #32
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartObjectDetectTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8001d68:	4b47      	ldr	r3, [pc, #284]	; (8001e88 <StartObjectDetectTask+0x128>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d70:	4618      	mov	r0, r3
 8001d72:	f003 fc8b 	bl	800568c <osMutexWait>
	sprintf(msg, "ObjDetect GO\r\n");
 8001d76:	4945      	ldr	r1, [pc, #276]	; (8001e8c <StartObjectDetectTask+0x12c>)
 8001d78:	4845      	ldr	r0, [pc, #276]	; (8001e90 <StartObjectDetectTask+0x130>)
 8001d7a:	f007 fa09 	bl	8009190 <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001d7e:	2364      	movs	r3, #100	; 0x64
 8001d80:	2228      	movs	r2, #40	; 0x28
 8001d82:	4943      	ldr	r1, [pc, #268]	; (8001e90 <StartObjectDetectTask+0x130>)
 8001d84:	4843      	ldr	r0, [pc, #268]	; (8001e94 <StartObjectDetectTask+0x134>)
 8001d86:	f002 fb14 	bl	80043b2 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8001d8a:	4841      	ldr	r0, [pc, #260]	; (8001e90 <StartObjectDetectTask+0x130>)
 8001d8c:	f7ff f8e0 	bl	8000f50 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8001d90:	4b3d      	ldr	r3, [pc, #244]	; (8001e88 <StartObjectDetectTask+0x128>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f003 fcc7 	bl	8005728 <osMutexRelease>

	// previous detections flag
	uint8_t prev_detect = 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	77fb      	strb	r3, [r7, #31]
  /* Infinite loop */
  for(;;)
  {
  	//wait for signal
  	osSignalWait(SIGNAL_OBJECT_DETECT, osWaitForever);
 8001d9e:	463b      	mov	r3, r7
 8001da0:	f04f 32ff 	mov.w	r2, #4294967295
 8001da4:	2101      	movs	r1, #1
 8001da6:	4618      	mov	r0, r3
 8001da8:	f003 fc0c 	bl	80055c4 <osSignalWait>

  	// print to uart if something changed
  	if (detect != prev_detect) {
 8001dac:	4b3a      	ldr	r3, [pc, #232]	; (8001e98 <StartObjectDetectTask+0x138>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	7ffa      	ldrb	r2, [r7, #31]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d0f3      	beq.n	8001d9e <StartObjectDetectTask+0x3e>
    	if (detect == 1) {
 8001db6:	4b38      	ldr	r3, [pc, #224]	; (8001e98 <StartObjectDetectTask+0x138>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d149      	bne.n	8001e52 <StartObjectDetectTask+0xf2>
      	sprintf(msg, "~~ DANGER! Object! ~~\r\n");
 8001dbe:	4937      	ldr	r1, [pc, #220]	; (8001e9c <StartObjectDetectTask+0x13c>)
 8001dc0:	4833      	ldr	r0, [pc, #204]	; (8001e90 <StartObjectDetectTask+0x130>)
 8001dc2:	f007 f9e5 	bl	8009190 <siprintf>
      	HAL_UART_Transmit(&huart2, msg, strlen(msg), 100);
 8001dc6:	4832      	ldr	r0, [pc, #200]	; (8001e90 <StartObjectDetectTask+0x130>)
 8001dc8:	f7fe fa14 	bl	80001f4 <strlen>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	2364      	movs	r3, #100	; 0x64
 8001dd2:	492f      	ldr	r1, [pc, #188]	; (8001e90 <StartObjectDetectTask+0x130>)
 8001dd4:	482f      	ldr	r0, [pc, #188]	; (8001e94 <StartObjectDetectTask+0x134>)
 8001dd6:	f002 faec 	bl	80043b2 <HAL_UART_Transmit>
      	EmptyBuffer(msg);
 8001dda:	482d      	ldr	r0, [pc, #180]	; (8001e90 <StartObjectDetectTask+0x130>)
 8001ddc:	f7ff f8b8 	bl	8000f50 <EmptyBuffer>

      	// turn on blue light
      	HAL_GPIO_WritePin(BlueLed_GPIO_Port, BlueLed_Pin, GPIO_PIN_SET);
 8001de0:	2201      	movs	r2, #1
 8001de2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001de6:	482e      	ldr	r0, [pc, #184]	; (8001ea0 <StartObjectDetectTask+0x140>)
 8001de8:	f000 ff28 	bl	8002c3c <HAL_GPIO_WritePin>

      	// stop the vehicle!!
      	osSemaphoreWait(VelSemaphoreHandle, osWaitForever);
 8001dec:	4b2d      	ldr	r3, [pc, #180]	; (8001ea4 <StartObjectDetectTask+0x144>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f04f 31ff 	mov.w	r1, #4294967295
 8001df4:	4618      	mov	r0, r3
 8001df6:	f003 fcff 	bl	80057f8 <osSemaphoreWait>
      	v = 0; // update the velocity references
 8001dfa:	4b2b      	ldr	r3, [pc, #172]	; (8001ea8 <StartObjectDetectTask+0x148>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	701a      	strb	r2, [r3, #0]
      	w = 0;
 8001e00:	4b2a      	ldr	r3, [pc, #168]	; (8001eac <StartObjectDetectTask+0x14c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	701a      	strb	r2, [r3, #0]
      	// turn on red light
      	HAL_GPIO_WritePin(RedLed_GPIO_Port, RedLed_Pin, GPIO_PIN_SET);
 8001e06:	2201      	movs	r2, #1
 8001e08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e0c:	4824      	ldr	r0, [pc, #144]	; (8001ea0 <StartObjectDetectTask+0x140>)
 8001e0e:	f000 ff15 	bl	8002c3c <HAL_GPIO_WritePin>
      	// turn off green light
      	HAL_GPIO_WritePin(GreenLed_GPIO_Port, GreenLed_Pin, GPIO_PIN_RESET);
 8001e12:	2200      	movs	r2, #0
 8001e14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e18:	4821      	ldr	r0, [pc, #132]	; (8001ea0 <StartObjectDetectTask+0x140>)
 8001e1a:	f000 ff0f 	bl	8002c3c <HAL_GPIO_WritePin>
      	sprintf(msg, "Lin. vel: %d Ang vel: %d\r\n", v, w);
 8001e1e:	4b22      	ldr	r3, [pc, #136]	; (8001ea8 <StartObjectDetectTask+0x148>)
 8001e20:	f993 3000 	ldrsb.w	r3, [r3]
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b21      	ldr	r3, [pc, #132]	; (8001eac <StartObjectDetectTask+0x14c>)
 8001e28:	f993 3000 	ldrsb.w	r3, [r3]
 8001e2c:	4920      	ldr	r1, [pc, #128]	; (8001eb0 <StartObjectDetectTask+0x150>)
 8001e2e:	4818      	ldr	r0, [pc, #96]	; (8001e90 <StartObjectDetectTask+0x130>)
 8001e30:	f007 f9ae 	bl	8009190 <siprintf>
      	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 200);
 8001e34:	23c8      	movs	r3, #200	; 0xc8
 8001e36:	2228      	movs	r2, #40	; 0x28
 8001e38:	4915      	ldr	r1, [pc, #84]	; (8001e90 <StartObjectDetectTask+0x130>)
 8001e3a:	4816      	ldr	r0, [pc, #88]	; (8001e94 <StartObjectDetectTask+0x134>)
 8001e3c:	f002 fab9 	bl	80043b2 <HAL_UART_Transmit>
      	EmptyBuffer(msg);
 8001e40:	4813      	ldr	r0, [pc, #76]	; (8001e90 <StartObjectDetectTask+0x130>)
 8001e42:	f7ff f885 	bl	8000f50 <EmptyBuffer>
      	osSemaphoreRelease(VelSemaphoreHandle);
 8001e46:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <StartObjectDetectTask+0x144>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f003 fd22 	bl	8005894 <osSemaphoreRelease>
 8001e50:	e016      	b.n	8001e80 <StartObjectDetectTask+0x120>
    	} else {
      	sprintf(msg, "~~ Clear path. No objects. ~~\r\n");
 8001e52:	4918      	ldr	r1, [pc, #96]	; (8001eb4 <StartObjectDetectTask+0x154>)
 8001e54:	480e      	ldr	r0, [pc, #56]	; (8001e90 <StartObjectDetectTask+0x130>)
 8001e56:	f007 f99b 	bl	8009190 <siprintf>
      	HAL_UART_Transmit(&huart2, msg, strlen(msg), 100);
 8001e5a:	480d      	ldr	r0, [pc, #52]	; (8001e90 <StartObjectDetectTask+0x130>)
 8001e5c:	f7fe f9ca 	bl	80001f4 <strlen>
 8001e60:	4603      	mov	r3, r0
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	2364      	movs	r3, #100	; 0x64
 8001e66:	490a      	ldr	r1, [pc, #40]	; (8001e90 <StartObjectDetectTask+0x130>)
 8001e68:	480a      	ldr	r0, [pc, #40]	; (8001e94 <StartObjectDetectTask+0x134>)
 8001e6a:	f002 faa2 	bl	80043b2 <HAL_UART_Transmit>
      	EmptyBuffer(msg);
 8001e6e:	4808      	ldr	r0, [pc, #32]	; (8001e90 <StartObjectDetectTask+0x130>)
 8001e70:	f7ff f86e 	bl	8000f50 <EmptyBuffer>

      	// turn off blue light
      	HAL_GPIO_WritePin(BlueLed_GPIO_Port, BlueLed_Pin, GPIO_PIN_RESET);
 8001e74:	2200      	movs	r2, #0
 8001e76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e7a:	4809      	ldr	r0, [pc, #36]	; (8001ea0 <StartObjectDetectTask+0x140>)
 8001e7c:	f000 fede 	bl	8002c3c <HAL_GPIO_WritePin>
    	}

    	// update previous detection
    	prev_detect = detect;
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <StartObjectDetectTask+0x138>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	77fb      	strb	r3, [r7, #31]
  	osSignalWait(SIGNAL_OBJECT_DETECT, osWaitForever);
 8001e86:	e78a      	b.n	8001d9e <StartObjectDetectTask+0x3e>
 8001e88:	20000510 	.word	0x20000510
 8001e8c:	0800b8fc 	.word	0x0800b8fc
 8001e90:	20000580 	.word	0x20000580
 8001e94:	20000498 	.word	0x20000498
 8001e98:	200005ba 	.word	0x200005ba
 8001e9c:	0800b90c 	.word	0x0800b90c
 8001ea0:	40020400 	.word	0x40020400
 8001ea4:	20000514 	.word	0x20000514
 8001ea8:	200005a8 	.word	0x200005a8
 8001eac:	200005a9 	.word	0x200005a9
 8001eb0:	0800b8ac 	.word	0x0800b8ac
 8001eb4:	0800b924 	.word	0x0800b924

08001eb8 <StartUartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUartTask */
void StartUartTask(void const * argument)
{
 8001eb8:	b5b0      	push	{r4, r5, r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af02      	add	r7, sp, #8
 8001ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUartTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8001ec0:	4b65      	ldr	r3, [pc, #404]	; (8002058 <StartUartTask+0x1a0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f003 fbdf 	bl	800568c <osMutexWait>
	sprintf(msg, "ObjDetect GO\r\n");
 8001ece:	4963      	ldr	r1, [pc, #396]	; (800205c <StartUartTask+0x1a4>)
 8001ed0:	4863      	ldr	r0, [pc, #396]	; (8002060 <StartUartTask+0x1a8>)
 8001ed2:	f007 f95d 	bl	8009190 <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001ed6:	2364      	movs	r3, #100	; 0x64
 8001ed8:	2228      	movs	r2, #40	; 0x28
 8001eda:	4961      	ldr	r1, [pc, #388]	; (8002060 <StartUartTask+0x1a8>)
 8001edc:	4861      	ldr	r0, [pc, #388]	; (8002064 <StartUartTask+0x1ac>)
 8001ede:	f002 fa68 	bl	80043b2 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8001ee2:	485f      	ldr	r0, [pc, #380]	; (8002060 <StartUartTask+0x1a8>)
 8001ee4:	f7ff f834 	bl	8000f50 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8001ee8:	4b5b      	ldr	r3, [pc, #364]	; (8002058 <StartUartTask+0x1a0>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f003 fc1b 	bl	8005728 <osMutexRelease>
  /* Infinite loop */
  for(;;)
  {
  	//wait for signal
  	osEvent retval_uart = osMessageGet(UartQueueHandle, osWaitForever);
 8001ef2:	4b5d      	ldr	r3, [pc, #372]	; (8002068 <StartUartTask+0x1b0>)
 8001ef4:	6819      	ldr	r1, [r3, #0]
 8001ef6:	f107 0308 	add.w	r3, r7, #8
 8001efa:	f04f 32ff 	mov.w	r2, #4294967295
 8001efe:	4618      	mov	r0, r3
 8001f00:	f003 fd66 	bl	80059d0 <osMessageGet>
  	uint8_t accel_flag = retval_uart.value.p;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	75fb      	strb	r3, [r7, #23]

  	// if the passed flag is 1, we accelerate by 10%, otherwise, we decelerate by 10%
  	osSemaphoreWait(VelSemaphoreHandle, osWaitForever);
 8001f08:	4b58      	ldr	r3, [pc, #352]	; (800206c <StartUartTask+0x1b4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f10:	4618      	mov	r0, r3
 8001f12:	f003 fc71 	bl	80057f8 <osSemaphoreWait>
  	if (accel_flag == 1) {
 8001f16:	7dfb      	ldrb	r3, [r7, #23]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d12a      	bne.n	8001f72 <StartUartTask+0xba>
  		if ( v == 0 ) {
 8001f1c:	4b54      	ldr	r3, [pc, #336]	; (8002070 <StartUartTask+0x1b8>)
 8001f1e:	f993 3000 	ldrsb.w	r3, [r3]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10f      	bne.n	8001f46 <StartUartTask+0x8e>
  			v = 10;
 8001f26:	4b52      	ldr	r3, [pc, #328]	; (8002070 <StartUartTask+0x1b8>)
 8001f28:	220a      	movs	r2, #10
 8001f2a:	701a      	strb	r2, [r3, #0]
      	// turn off red light
      	HAL_GPIO_WritePin(RedLed_GPIO_Port, RedLed_Pin, GPIO_PIN_RESET);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f32:	4850      	ldr	r0, [pc, #320]	; (8002074 <StartUartTask+0x1bc>)
 8001f34:	f000 fe82 	bl	8002c3c <HAL_GPIO_WritePin>
      	// turn on green light
      	HAL_GPIO_WritePin(GreenLed_GPIO_Port, GreenLed_Pin, GPIO_PIN_SET);
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f3e:	484d      	ldr	r0, [pc, #308]	; (8002074 <StartUartTask+0x1bc>)
 8001f40:	f000 fe7c 	bl	8002c3c <HAL_GPIO_WritePin>
 8001f44:	e032      	b.n	8001fac <StartUartTask+0xf4>
  		} else {
    		v = v*1.1;
 8001f46:	4b4a      	ldr	r3, [pc, #296]	; (8002070 <StartUartTask+0x1b8>)
 8001f48:	f993 3000 	ldrsb.w	r3, [r3]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe fb01 	bl	8000554 <__aeabi_i2d>
 8001f52:	a33d      	add	r3, pc, #244	; (adr r3, 8002048 <StartUartTask+0x190>)
 8001f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f58:	f7fe fb66 	bl	8000628 <__aeabi_dmul>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4610      	mov	r0, r2
 8001f62:	4619      	mov	r1, r3
 8001f64:	f7fe fe10 	bl	8000b88 <__aeabi_d2iz>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	b25a      	sxtb	r2, r3
 8001f6c:	4b40      	ldr	r3, [pc, #256]	; (8002070 <StartUartTask+0x1b8>)
 8001f6e:	701a      	strb	r2, [r3, #0]
 8001f70:	e01c      	b.n	8001fac <StartUartTask+0xf4>
  		}
  	} else if (accel_flag == 0){
 8001f72:	7dfb      	ldrb	r3, [r7, #23]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d119      	bne.n	8001fac <StartUartTask+0xf4>
			if ( v != 0 ) {
 8001f78:	4b3d      	ldr	r3, [pc, #244]	; (8002070 <StartUartTask+0x1b8>)
 8001f7a:	f993 3000 	ldrsb.w	r3, [r3]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d014      	beq.n	8001fac <StartUartTask+0xf4>
				v = v*0.9;
 8001f82:	4b3b      	ldr	r3, [pc, #236]	; (8002070 <StartUartTask+0x1b8>)
 8001f84:	f993 3000 	ldrsb.w	r3, [r3]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe fae3 	bl	8000554 <__aeabi_i2d>
 8001f8e:	a330      	add	r3, pc, #192	; (adr r3, 8002050 <StartUartTask+0x198>)
 8001f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f94:	f7fe fb48 	bl	8000628 <__aeabi_dmul>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	f7fe fdf2 	bl	8000b88 <__aeabi_d2iz>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	b25a      	sxtb	r2, r3
 8001fa8:	4b31      	ldr	r3, [pc, #196]	; (8002070 <StartUartTask+0x1b8>)
 8001faa:	701a      	strb	r2, [r3, #0]
			}
  	}
  	sprintf(msg, "Lin. vel: %d.%d Ang vel: %d.%d\r\n", v/10, v%10, w/10, w%10);
 8001fac:	4b30      	ldr	r3, [pc, #192]	; (8002070 <StartUartTask+0x1b8>)
 8001fae:	f993 3000 	ldrsb.w	r3, [r3]
 8001fb2:	4a31      	ldr	r2, [pc, #196]	; (8002078 <StartUartTask+0x1c0>)
 8001fb4:	fb82 1203 	smull	r1, r2, r2, r3
 8001fb8:	1092      	asrs	r2, r2, #2
 8001fba:	17db      	asrs	r3, r3, #31
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	b25b      	sxtb	r3, r3
 8001fc0:	461c      	mov	r4, r3
 8001fc2:	4b2b      	ldr	r3, [pc, #172]	; (8002070 <StartUartTask+0x1b8>)
 8001fc4:	f993 2000 	ldrsb.w	r2, [r3]
 8001fc8:	4b2b      	ldr	r3, [pc, #172]	; (8002078 <StartUartTask+0x1c0>)
 8001fca:	fb83 1302 	smull	r1, r3, r3, r2
 8001fce:	1099      	asrs	r1, r3, #2
 8001fd0:	17d3      	asrs	r3, r2, #31
 8001fd2:	1ac9      	subs	r1, r1, r3
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	b25b      	sxtb	r3, r3
 8001fe0:	461d      	mov	r5, r3
 8001fe2:	4b26      	ldr	r3, [pc, #152]	; (800207c <StartUartTask+0x1c4>)
 8001fe4:	f993 3000 	ldrsb.w	r3, [r3]
 8001fe8:	4a23      	ldr	r2, [pc, #140]	; (8002078 <StartUartTask+0x1c0>)
 8001fea:	fb82 1203 	smull	r1, r2, r2, r3
 8001fee:	1092      	asrs	r2, r2, #2
 8001ff0:	17db      	asrs	r3, r3, #31
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	b25b      	sxtb	r3, r3
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	4b20      	ldr	r3, [pc, #128]	; (800207c <StartUartTask+0x1c4>)
 8001ffa:	f993 2000 	ldrsb.w	r2, [r3]
 8001ffe:	4b1e      	ldr	r3, [pc, #120]	; (8002078 <StartUartTask+0x1c0>)
 8002000:	fb83 1302 	smull	r1, r3, r3, r2
 8002004:	1099      	asrs	r1, r3, #2
 8002006:	17d3      	asrs	r3, r2, #31
 8002008:	1ac9      	subs	r1, r1, r3
 800200a:	460b      	mov	r3, r1
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	440b      	add	r3, r1
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	b25b      	sxtb	r3, r3
 8002016:	9301      	str	r3, [sp, #4]
 8002018:	9000      	str	r0, [sp, #0]
 800201a:	462b      	mov	r3, r5
 800201c:	4622      	mov	r2, r4
 800201e:	4918      	ldr	r1, [pc, #96]	; (8002080 <StartUartTask+0x1c8>)
 8002020:	480f      	ldr	r0, [pc, #60]	; (8002060 <StartUartTask+0x1a8>)
 8002022:	f007 f8b5 	bl	8009190 <siprintf>
  	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8002026:	2364      	movs	r3, #100	; 0x64
 8002028:	2228      	movs	r2, #40	; 0x28
 800202a:	490d      	ldr	r1, [pc, #52]	; (8002060 <StartUartTask+0x1a8>)
 800202c:	480d      	ldr	r0, [pc, #52]	; (8002064 <StartUartTask+0x1ac>)
 800202e:	f002 f9c0 	bl	80043b2 <HAL_UART_Transmit>
  	EmptyBuffer(msg);
 8002032:	480b      	ldr	r0, [pc, #44]	; (8002060 <StartUartTask+0x1a8>)
 8002034:	f7fe ff8c 	bl	8000f50 <EmptyBuffer>
  	osSemaphoreRelease(VelSemaphoreHandle);
 8002038:	4b0c      	ldr	r3, [pc, #48]	; (800206c <StartUartTask+0x1b4>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f003 fc29 	bl	8005894 <osSemaphoreRelease>
  {
 8002042:	e756      	b.n	8001ef2 <StartUartTask+0x3a>
 8002044:	f3af 8000 	nop.w
 8002048:	9999999a 	.word	0x9999999a
 800204c:	3ff19999 	.word	0x3ff19999
 8002050:	cccccccd 	.word	0xcccccccd
 8002054:	3feccccc 	.word	0x3feccccc
 8002058:	20000510 	.word	0x20000510
 800205c:	0800b8fc 	.word	0x0800b8fc
 8002060:	20000580 	.word	0x20000580
 8002064:	20000498 	.word	0x20000498
 8002068:	20000500 	.word	0x20000500
 800206c:	20000514 	.word	0x20000514
 8002070:	200005a8 	.word	0x200005a8
 8002074:	40020400 	.word	0x40020400
 8002078:	66666667 	.word	0x66666667
 800207c:	200005a9 	.word	0x200005a9
 8002080:	0800b944 	.word	0x0800b944

08002084 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a04      	ldr	r2, [pc, #16]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d101      	bne.n	800209a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002096:	f000 faa1 	bl	80025dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40014400 	.word	0x40014400

080020a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020ac:	b672      	cpsid	i
}
 80020ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020b0:	e7fe      	b.n	80020b0 <Error_Handler+0x8>
	...

080020b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	607b      	str	r3, [r7, #4]
 80020be:	4b12      	ldr	r3, [pc, #72]	; (8002108 <HAL_MspInit+0x54>)
 80020c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c2:	4a11      	ldr	r2, [pc, #68]	; (8002108 <HAL_MspInit+0x54>)
 80020c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020c8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ca:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <HAL_MspInit+0x54>)
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d2:	607b      	str	r3, [r7, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	603b      	str	r3, [r7, #0]
 80020da:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_MspInit+0x54>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	4a0a      	ldr	r2, [pc, #40]	; (8002108 <HAL_MspInit+0x54>)
 80020e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e4:	6413      	str	r3, [r2, #64]	; 0x40
 80020e6:	4b08      	ldr	r3, [pc, #32]	; (8002108 <HAL_MspInit+0x54>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ee:	603b      	str	r3, [r7, #0]
 80020f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020f2:	2200      	movs	r2, #0
 80020f4:	210f      	movs	r1, #15
 80020f6:	f06f 0001 	mvn.w	r0, #1
 80020fa:	f000 fb47 	bl	800278c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800

0800210c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	; 0x28
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a21      	ldr	r2, [pc, #132]	; (80021b0 <HAL_TIM_IC_MspInit+0xa4>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d13c      	bne.n	80021a8 <HAL_TIM_IC_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <HAL_TIM_IC_MspInit+0xa8>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	4a1f      	ldr	r2, [pc, #124]	; (80021b4 <HAL_TIM_IC_MspInit+0xa8>)
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	6453      	str	r3, [r2, #68]	; 0x44
 800213e:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <HAL_TIM_IC_MspInit+0xa8>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <HAL_TIM_IC_MspInit+0xa8>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	4a18      	ldr	r2, [pc, #96]	; (80021b4 <HAL_TIM_IC_MspInit+0xa8>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6313      	str	r3, [r2, #48]	; 0x30
 800215a:	4b16      	ldr	r3, [pc, #88]	; (80021b4 <HAL_TIM_IC_MspInit+0xa8>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 8002166:	f44f 7380 	mov.w	r3, #256	; 0x100
 800216a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216c:	2302      	movs	r3, #2
 800216e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002174:	2300      	movs	r3, #0
 8002176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002178:	2301      	movs	r3, #1
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	4619      	mov	r1, r3
 8002182:	480d      	ldr	r0, [pc, #52]	; (80021b8 <HAL_TIM_IC_MspInit+0xac>)
 8002184:	f000 fbbe 	bl	8002904 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8002188:	2200      	movs	r2, #0
 800218a:	2105      	movs	r1, #5
 800218c:	2019      	movs	r0, #25
 800218e:	f000 fafd 	bl	800278c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002192:	2019      	movs	r0, #25
 8002194:	f000 fb16 	bl	80027c4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002198:	2200      	movs	r2, #0
 800219a:	2105      	movs	r1, #5
 800219c:	201b      	movs	r0, #27
 800219e:	f000 faf5 	bl	800278c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80021a2:	201b      	movs	r0, #27
 80021a4:	f000 fb0e 	bl	80027c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80021a8:	bf00      	nop
 80021aa:	3728      	adds	r7, #40	; 0x28
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40010000 	.word	0x40010000
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40020000 	.word	0x40020000

080021bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08a      	sub	sp, #40	; 0x28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a1d      	ldr	r2, [pc, #116]	; (8002250 <HAL_UART_MspInit+0x94>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d133      	bne.n	8002246 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	4b1c      	ldr	r3, [pc, #112]	; (8002254 <HAL_UART_MspInit+0x98>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	4a1b      	ldr	r2, [pc, #108]	; (8002254 <HAL_UART_MspInit+0x98>)
 80021e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ec:	6413      	str	r3, [r2, #64]	; 0x40
 80021ee:	4b19      	ldr	r3, [pc, #100]	; (8002254 <HAL_UART_MspInit+0x98>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	4b15      	ldr	r3, [pc, #84]	; (8002254 <HAL_UART_MspInit+0x98>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	4a14      	ldr	r2, [pc, #80]	; (8002254 <HAL_UART_MspInit+0x98>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6313      	str	r3, [r2, #48]	; 0x30
 800220a:	4b12      	ldr	r3, [pc, #72]	; (8002254 <HAL_UART_MspInit+0x98>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002216:	230c      	movs	r3, #12
 8002218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221a:	2302      	movs	r3, #2
 800221c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002222:	2303      	movs	r3, #3
 8002224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002226:	2307      	movs	r3, #7
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222a:	f107 0314 	add.w	r3, r7, #20
 800222e:	4619      	mov	r1, r3
 8002230:	4809      	ldr	r0, [pc, #36]	; (8002258 <HAL_UART_MspInit+0x9c>)
 8002232:	f000 fb67 	bl	8002904 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002236:	2200      	movs	r2, #0
 8002238:	2105      	movs	r1, #5
 800223a:	2026      	movs	r0, #38	; 0x26
 800223c:	f000 faa6 	bl	800278c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002240:	2026      	movs	r0, #38	; 0x26
 8002242:	f000 fabf 	bl	80027c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002246:	bf00      	nop
 8002248:	3728      	adds	r7, #40	; 0x28
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40004400 	.word	0x40004400
 8002254:	40023800 	.word	0x40023800
 8002258:	40020000 	.word	0x40020000

0800225c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08c      	sub	sp, #48	; 0x30
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800226c:	2200      	movs	r2, #0
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	2019      	movs	r0, #25
 8002272:	f000 fa8b 	bl	800278c <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002276:	2019      	movs	r0, #25
 8002278:	f000 faa4 	bl	80027c4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 800227c:	2300      	movs	r3, #0
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	4b1e      	ldr	r3, [pc, #120]	; (80022fc <HAL_InitTick+0xa0>)
 8002282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002284:	4a1d      	ldr	r2, [pc, #116]	; (80022fc <HAL_InitTick+0xa0>)
 8002286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800228a:	6453      	str	r3, [r2, #68]	; 0x44
 800228c:	4b1b      	ldr	r3, [pc, #108]	; (80022fc <HAL_InitTick+0xa0>)
 800228e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002298:	f107 0210 	add.w	r2, r7, #16
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	4611      	mov	r1, r2
 80022a2:	4618      	mov	r0, r3
 80022a4:	f001 f994 	bl	80035d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80022a8:	f001 f97e 	bl	80035a8 <HAL_RCC_GetPCLK2Freq>
 80022ac:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b0:	4a13      	ldr	r2, [pc, #76]	; (8002300 <HAL_InitTick+0xa4>)
 80022b2:	fba2 2303 	umull	r2, r3, r2, r3
 80022b6:	0c9b      	lsrs	r3, r3, #18
 80022b8:	3b01      	subs	r3, #1
 80022ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80022bc:	4b11      	ldr	r3, [pc, #68]	; (8002304 <HAL_InitTick+0xa8>)
 80022be:	4a12      	ldr	r2, [pc, #72]	; (8002308 <HAL_InitTick+0xac>)
 80022c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80022c2:	4b10      	ldr	r3, [pc, #64]	; (8002304 <HAL_InitTick+0xa8>)
 80022c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022c8:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80022ca:	4a0e      	ldr	r2, [pc, #56]	; (8002304 <HAL_InitTick+0xa8>)
 80022cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ce:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80022d0:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <HAL_InitTick+0xa8>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d6:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_InitTick+0xa8>)
 80022d8:	2200      	movs	r2, #0
 80022da:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 80022dc:	4809      	ldr	r0, [pc, #36]	; (8002304 <HAL_InitTick+0xa8>)
 80022de:	f001 f9a9 	bl	8003634 <HAL_TIM_Base_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d104      	bne.n	80022f2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 80022e8:	4806      	ldr	r0, [pc, #24]	; (8002304 <HAL_InitTick+0xa8>)
 80022ea:	f001 f9fd 	bl	80036e8 <HAL_TIM_Base_Start_IT>
 80022ee:	4603      	mov	r3, r0
 80022f0:	e000      	b.n	80022f4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3730      	adds	r7, #48	; 0x30
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40023800 	.word	0x40023800
 8002300:	431bde83 	.word	0x431bde83
 8002304:	200005bc 	.word	0x200005bc
 8002308:	40014400 	.word	0x40014400

0800230c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002310:	e7fe      	b.n	8002310 <NMI_Handler+0x4>

08002312 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002312:	b480      	push	{r7}
 8002314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002316:	e7fe      	b.n	8002316 <HardFault_Handler+0x4>

08002318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800231c:	e7fe      	b.n	800231c <MemManage_Handler+0x4>

0800231e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002322:	e7fe      	b.n	8002322 <BusFault_Handler+0x4>

08002324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002328:	e7fe      	b.n	8002328 <UsageFault_Handler+0x4>

0800232a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800233c:	4803      	ldr	r0, [pc, #12]	; (800234c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800233e:	f001 fb9f 	bl	8003a80 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002342:	4803      	ldr	r0, [pc, #12]	; (8002350 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002344:	f001 fb9c 	bl	8003a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20000450 	.word	0x20000450
 8002350:	200005bc 	.word	0x200005bc

08002354 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002358:	4802      	ldr	r0, [pc, #8]	; (8002364 <TIM1_CC_IRQHandler+0x10>)
 800235a:	f001 fb91 	bl	8003a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20000450 	.word	0x20000450

08002368 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800236c:	4802      	ldr	r0, [pc, #8]	; (8002378 <USART2_IRQHandler+0x10>)
 800236e:	f002 f8e3 	bl	8004538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000498 	.word	0x20000498

0800237c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ExButton_Pin);
 8002380:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002384:	f000 fc74 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002388:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800238c:	f000 fc70 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002390:	bf00      	nop
 8002392:	bd80      	pop	{r7, pc}

08002394 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
	return 1;
 8002398:	2301      	movs	r3, #1
}
 800239a:	4618      	mov	r0, r3
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <_kill>:

int _kill(int pid, int sig)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80023ae:	f006 fa45 	bl	800883c <__errno>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2216      	movs	r2, #22
 80023b6:	601a      	str	r2, [r3, #0]
	return -1;
 80023b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <_exit>:

void _exit (int status)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80023cc:	f04f 31ff 	mov.w	r1, #4294967295
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f7ff ffe7 	bl	80023a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80023d6:	e7fe      	b.n	80023d6 <_exit+0x12>

080023d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]
 80023e8:	e00a      	b.n	8002400 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023ea:	f3af 8000 	nop.w
 80023ee:	4601      	mov	r1, r0
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	60ba      	str	r2, [r7, #8]
 80023f6:	b2ca      	uxtb	r2, r1
 80023f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	3301      	adds	r3, #1
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	429a      	cmp	r2, r3
 8002406:	dbf0      	blt.n	80023ea <_read+0x12>
	}

return len;
 8002408:	687b      	ldr	r3, [r7, #4]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b086      	sub	sp, #24
 8002416:	af00      	add	r7, sp, #0
 8002418:	60f8      	str	r0, [r7, #12]
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	e009      	b.n	8002438 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	60ba      	str	r2, [r7, #8]
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	3301      	adds	r3, #1
 8002436:	617b      	str	r3, [r7, #20]
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	429a      	cmp	r2, r3
 800243e:	dbf1      	blt.n	8002424 <_write+0x12>
	}
	return len;
 8002440:	687b      	ldr	r3, [r7, #4]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <_close>:

int _close(int file)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
	return -1;
 8002452:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002456:	4618      	mov	r0, r3
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002472:	605a      	str	r2, [r3, #4]
	return 0;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <_isatty>:

int _isatty(int file)
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
	return 1;
 800248a:	2301      	movs	r3, #1
}
 800248c:	4618      	mov	r0, r3
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
	return 0;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
	...

080024b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024bc:	4a14      	ldr	r2, [pc, #80]	; (8002510 <_sbrk+0x5c>)
 80024be:	4b15      	ldr	r3, [pc, #84]	; (8002514 <_sbrk+0x60>)
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024c8:	4b13      	ldr	r3, [pc, #76]	; (8002518 <_sbrk+0x64>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d102      	bne.n	80024d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024d0:	4b11      	ldr	r3, [pc, #68]	; (8002518 <_sbrk+0x64>)
 80024d2:	4a12      	ldr	r2, [pc, #72]	; (800251c <_sbrk+0x68>)
 80024d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024d6:	4b10      	ldr	r3, [pc, #64]	; (8002518 <_sbrk+0x64>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4413      	add	r3, r2
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d207      	bcs.n	80024f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024e4:	f006 f9aa 	bl	800883c <__errno>
 80024e8:	4603      	mov	r3, r0
 80024ea:	220c      	movs	r2, #12
 80024ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ee:	f04f 33ff 	mov.w	r3, #4294967295
 80024f2:	e009      	b.n	8002508 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024f4:	4b08      	ldr	r3, [pc, #32]	; (8002518 <_sbrk+0x64>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024fa:	4b07      	ldr	r3, [pc, #28]	; (8002518 <_sbrk+0x64>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4413      	add	r3, r2
 8002502:	4a05      	ldr	r2, [pc, #20]	; (8002518 <_sbrk+0x64>)
 8002504:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002506:	68fb      	ldr	r3, [r7, #12]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20020000 	.word	0x20020000
 8002514:	00000400 	.word	0x00000400
 8002518:	20000604 	.word	0x20000604
 800251c:	20004370 	.word	0x20004370

08002520 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002524:	4b06      	ldr	r3, [pc, #24]	; (8002540 <SystemInit+0x20>)
 8002526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252a:	4a05      	ldr	r2, [pc, #20]	; (8002540 <SystemInit+0x20>)
 800252c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002530:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002544:	f8df d034 	ldr.w	sp, [pc, #52]	; 800257c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002548:	480d      	ldr	r0, [pc, #52]	; (8002580 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800254a:	490e      	ldr	r1, [pc, #56]	; (8002584 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800254c:	4a0e      	ldr	r2, [pc, #56]	; (8002588 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800254e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002550:	e002      	b.n	8002558 <LoopCopyDataInit>

08002552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002556:	3304      	adds	r3, #4

08002558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800255a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800255c:	d3f9      	bcc.n	8002552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800255e:	4a0b      	ldr	r2, [pc, #44]	; (800258c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002560:	4c0b      	ldr	r4, [pc, #44]	; (8002590 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002564:	e001      	b.n	800256a <LoopFillZerobss>

08002566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002568:	3204      	adds	r2, #4

0800256a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800256a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800256c:	d3fb      	bcc.n	8002566 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800256e:	f7ff ffd7 	bl	8002520 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002572:	f006 f969 	bl	8008848 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002576:	f7fe fd23 	bl	8000fc0 <main>
  bx  lr    
 800257a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800257c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002584:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002588:	0800bd74 	.word	0x0800bd74
  ldr r2, =_sbss
 800258c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002590:	20004370 	.word	0x20004370

08002594 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002594:	e7fe      	b.n	8002594 <ADC_IRQHandler>
	...

08002598 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800259c:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <HAL_Init+0x40>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a0d      	ldr	r2, [pc, #52]	; (80025d8 <HAL_Init+0x40>)
 80025a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025a8:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <HAL_Init+0x40>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <HAL_Init+0x40>)
 80025ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025b4:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <HAL_Init+0x40>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a07      	ldr	r2, [pc, #28]	; (80025d8 <HAL_Init+0x40>)
 80025ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025c0:	2003      	movs	r0, #3
 80025c2:	f000 f8d8 	bl	8002776 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025c6:	2005      	movs	r0, #5
 80025c8:	f7ff fe48 	bl	800225c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025cc:	f7ff fd72 	bl	80020b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40023c00 	.word	0x40023c00

080025dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <HAL_IncTick+0x20>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	4b06      	ldr	r3, [pc, #24]	; (8002600 <HAL_IncTick+0x24>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4413      	add	r3, r2
 80025ec:	4a04      	ldr	r2, [pc, #16]	; (8002600 <HAL_IncTick+0x24>)
 80025ee:	6013      	str	r3, [r2, #0]
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	20000008 	.word	0x20000008
 8002600:	20000608 	.word	0x20000608

08002604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return uwTick;
 8002608:	4b03      	ldr	r3, [pc, #12]	; (8002618 <HAL_GetTick+0x14>)
 800260a:	681b      	ldr	r3, [r3, #0]
}
 800260c:	4618      	mov	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20000608 	.word	0x20000608

0800261c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800262c:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <__NVIC_SetPriorityGrouping+0x44>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002638:	4013      	ands	r3, r2
 800263a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800264c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800264e:	4a04      	ldr	r2, [pc, #16]	; (8002660 <__NVIC_SetPriorityGrouping+0x44>)
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	60d3      	str	r3, [r2, #12]
}
 8002654:	bf00      	nop
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002668:	4b04      	ldr	r3, [pc, #16]	; (800267c <__NVIC_GetPriorityGrouping+0x18>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	0a1b      	lsrs	r3, r3, #8
 800266e:	f003 0307 	and.w	r3, r3, #7
}
 8002672:	4618      	mov	r0, r3
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	2b00      	cmp	r3, #0
 8002690:	db0b      	blt.n	80026aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	f003 021f 	and.w	r2, r3, #31
 8002698:	4907      	ldr	r1, [pc, #28]	; (80026b8 <__NVIC_EnableIRQ+0x38>)
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	2001      	movs	r0, #1
 80026a2:	fa00 f202 	lsl.w	r2, r0, r2
 80026a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	e000e100 	.word	0xe000e100

080026bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	6039      	str	r1, [r7, #0]
 80026c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	db0a      	blt.n	80026e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	490c      	ldr	r1, [pc, #48]	; (8002708 <__NVIC_SetPriority+0x4c>)
 80026d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026da:	0112      	lsls	r2, r2, #4
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	440b      	add	r3, r1
 80026e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026e4:	e00a      	b.n	80026fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	4908      	ldr	r1, [pc, #32]	; (800270c <__NVIC_SetPriority+0x50>)
 80026ec:	79fb      	ldrb	r3, [r7, #7]
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	3b04      	subs	r3, #4
 80026f4:	0112      	lsls	r2, r2, #4
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	440b      	add	r3, r1
 80026fa:	761a      	strb	r2, [r3, #24]
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	e000e100 	.word	0xe000e100
 800270c:	e000ed00 	.word	0xe000ed00

08002710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002710:	b480      	push	{r7}
 8002712:	b089      	sub	sp, #36	; 0x24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f1c3 0307 	rsb	r3, r3, #7
 800272a:	2b04      	cmp	r3, #4
 800272c:	bf28      	it	cs
 800272e:	2304      	movcs	r3, #4
 8002730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3304      	adds	r3, #4
 8002736:	2b06      	cmp	r3, #6
 8002738:	d902      	bls.n	8002740 <NVIC_EncodePriority+0x30>
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3b03      	subs	r3, #3
 800273e:	e000      	b.n	8002742 <NVIC_EncodePriority+0x32>
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002744:	f04f 32ff 	mov.w	r2, #4294967295
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43da      	mvns	r2, r3
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	401a      	ands	r2, r3
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002758:	f04f 31ff 	mov.w	r1, #4294967295
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	fa01 f303 	lsl.w	r3, r1, r3
 8002762:	43d9      	mvns	r1, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002768:	4313      	orrs	r3, r2
         );
}
 800276a:	4618      	mov	r0, r3
 800276c:	3724      	adds	r7, #36	; 0x24
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff ff4c 	bl	800261c <__NVIC_SetPriorityGrouping>
}
 8002784:	bf00      	nop
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
 8002798:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800279e:	f7ff ff61 	bl	8002664 <__NVIC_GetPriorityGrouping>
 80027a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	68b9      	ldr	r1, [r7, #8]
 80027a8:	6978      	ldr	r0, [r7, #20]
 80027aa:	f7ff ffb1 	bl	8002710 <NVIC_EncodePriority>
 80027ae:	4602      	mov	r2, r0
 80027b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b4:	4611      	mov	r1, r2
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff ff80 	bl	80026bc <__NVIC_SetPriority>
}
 80027bc:	bf00      	nop
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff ff54 	bl	8002680 <__NVIC_EnableIRQ>
}
 80027d8:	bf00      	nop
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80027ee:	f7ff ff09 	bl	8002604 <HAL_GetTick>
 80027f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d008      	beq.n	8002812 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2280      	movs	r2, #128	; 0x80
 8002804:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e052      	b.n	80028b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0216 	bic.w	r2, r2, #22
 8002820:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	695a      	ldr	r2, [r3, #20]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002830:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	2b00      	cmp	r3, #0
 8002838:	d103      	bne.n	8002842 <HAL_DMA_Abort+0x62>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800283e:	2b00      	cmp	r3, #0
 8002840:	d007      	beq.n	8002852 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0208 	bic.w	r2, r2, #8
 8002850:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0201 	bic.w	r2, r2, #1
 8002860:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002862:	e013      	b.n	800288c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002864:	f7ff fece 	bl	8002604 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b05      	cmp	r3, #5
 8002870:	d90c      	bls.n	800288c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2220      	movs	r2, #32
 8002876:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2203      	movs	r2, #3
 800287c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e015      	b.n	80028b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1e4      	bne.n	8002864 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289e:	223f      	movs	r2, #63	; 0x3f
 80028a0:	409a      	lsls	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d004      	beq.n	80028de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2280      	movs	r2, #128	; 0x80
 80028d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e00c      	b.n	80028f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2205      	movs	r2, #5
 80028e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0201 	bic.w	r2, r2, #1
 80028f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002904:	b480      	push	{r7}
 8002906:	b089      	sub	sp, #36	; 0x24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002912:	2300      	movs	r3, #0
 8002914:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002916:	2300      	movs	r3, #0
 8002918:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
 800291e:	e159      	b.n	8002bd4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002920:	2201      	movs	r2, #1
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	4013      	ands	r3, r2
 8002932:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	429a      	cmp	r2, r3
 800293a:	f040 8148 	bne.w	8002bce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	2b01      	cmp	r3, #1
 8002948:	d005      	beq.n	8002956 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002952:	2b02      	cmp	r3, #2
 8002954:	d130      	bne.n	80029b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	2203      	movs	r2, #3
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4013      	ands	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4313      	orrs	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800298c:	2201      	movs	r2, #1
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4013      	ands	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	091b      	lsrs	r3, r3, #4
 80029a2:	f003 0201 	and.w	r2, r3, #1
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	d017      	beq.n	80029f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	2203      	movs	r2, #3
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d123      	bne.n	8002a48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	08da      	lsrs	r2, r3, #3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3208      	adds	r2, #8
 8002a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	220f      	movs	r2, #15
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	08da      	lsrs	r2, r3, #3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3208      	adds	r2, #8
 8002a42:	69b9      	ldr	r1, [r7, #24]
 8002a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	2203      	movs	r2, #3
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f003 0203 	and.w	r2, r3, #3
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 80a2 	beq.w	8002bce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	4b57      	ldr	r3, [pc, #348]	; (8002bec <HAL_GPIO_Init+0x2e8>)
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	4a56      	ldr	r2, [pc, #344]	; (8002bec <HAL_GPIO_Init+0x2e8>)
 8002a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a98:	6453      	str	r3, [r2, #68]	; 0x44
 8002a9a:	4b54      	ldr	r3, [pc, #336]	; (8002bec <HAL_GPIO_Init+0x2e8>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aa6:	4a52      	ldr	r2, [pc, #328]	; (8002bf0 <HAL_GPIO_Init+0x2ec>)
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	089b      	lsrs	r3, r3, #2
 8002aac:	3302      	adds	r3, #2
 8002aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	220f      	movs	r2, #15
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a49      	ldr	r2, [pc, #292]	; (8002bf4 <HAL_GPIO_Init+0x2f0>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d019      	beq.n	8002b06 <HAL_GPIO_Init+0x202>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a48      	ldr	r2, [pc, #288]	; (8002bf8 <HAL_GPIO_Init+0x2f4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d013      	beq.n	8002b02 <HAL_GPIO_Init+0x1fe>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a47      	ldr	r2, [pc, #284]	; (8002bfc <HAL_GPIO_Init+0x2f8>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00d      	beq.n	8002afe <HAL_GPIO_Init+0x1fa>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a46      	ldr	r2, [pc, #280]	; (8002c00 <HAL_GPIO_Init+0x2fc>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d007      	beq.n	8002afa <HAL_GPIO_Init+0x1f6>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a45      	ldr	r2, [pc, #276]	; (8002c04 <HAL_GPIO_Init+0x300>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d101      	bne.n	8002af6 <HAL_GPIO_Init+0x1f2>
 8002af2:	2304      	movs	r3, #4
 8002af4:	e008      	b.n	8002b08 <HAL_GPIO_Init+0x204>
 8002af6:	2307      	movs	r3, #7
 8002af8:	e006      	b.n	8002b08 <HAL_GPIO_Init+0x204>
 8002afa:	2303      	movs	r3, #3
 8002afc:	e004      	b.n	8002b08 <HAL_GPIO_Init+0x204>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e002      	b.n	8002b08 <HAL_GPIO_Init+0x204>
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <HAL_GPIO_Init+0x204>
 8002b06:	2300      	movs	r3, #0
 8002b08:	69fa      	ldr	r2, [r7, #28]
 8002b0a:	f002 0203 	and.w	r2, r2, #3
 8002b0e:	0092      	lsls	r2, r2, #2
 8002b10:	4093      	lsls	r3, r2
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b18:	4935      	ldr	r1, [pc, #212]	; (8002bf0 <HAL_GPIO_Init+0x2ec>)
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	089b      	lsrs	r3, r3, #2
 8002b1e:	3302      	adds	r3, #2
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b26:	4b38      	ldr	r3, [pc, #224]	; (8002c08 <HAL_GPIO_Init+0x304>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4013      	ands	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b4a:	4a2f      	ldr	r2, [pc, #188]	; (8002c08 <HAL_GPIO_Init+0x304>)
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b50:	4b2d      	ldr	r3, [pc, #180]	; (8002c08 <HAL_GPIO_Init+0x304>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b74:	4a24      	ldr	r2, [pc, #144]	; (8002c08 <HAL_GPIO_Init+0x304>)
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b7a:	4b23      	ldr	r3, [pc, #140]	; (8002c08 <HAL_GPIO_Init+0x304>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	43db      	mvns	r3, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4013      	ands	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b9e:	4a1a      	ldr	r2, [pc, #104]	; (8002c08 <HAL_GPIO_Init+0x304>)
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ba4:	4b18      	ldr	r3, [pc, #96]	; (8002c08 <HAL_GPIO_Init+0x304>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bc8:	4a0f      	ldr	r2, [pc, #60]	; (8002c08 <HAL_GPIO_Init+0x304>)
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	61fb      	str	r3, [r7, #28]
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	2b0f      	cmp	r3, #15
 8002bd8:	f67f aea2 	bls.w	8002920 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bdc:	bf00      	nop
 8002bde:	bf00      	nop
 8002be0:	3724      	adds	r7, #36	; 0x24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	40013800 	.word	0x40013800
 8002bf4:	40020000 	.word	0x40020000
 8002bf8:	40020400 	.word	0x40020400
 8002bfc:	40020800 	.word	0x40020800
 8002c00:	40020c00 	.word	0x40020c00
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40013c00 	.word	0x40013c00

08002c0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691a      	ldr	r2, [r3, #16]
 8002c1c:	887b      	ldrh	r3, [r7, #2]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
 8002c28:	e001      	b.n	8002c2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	807b      	strh	r3, [r7, #2]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c4c:	787b      	ldrb	r3, [r7, #1]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c52:	887a      	ldrh	r2, [r7, #2]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c58:	e003      	b.n	8002c62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c5a:	887b      	ldrh	r3, [r7, #2]
 8002c5c:	041a      	lsls	r2, r3, #16
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	619a      	str	r2, [r3, #24]
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
	...

08002c70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c7a:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c7c:	695a      	ldr	r2, [r3, #20]
 8002c7e:	88fb      	ldrh	r3, [r7, #6]
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d006      	beq.n	8002c94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c86:	4a05      	ldr	r2, [pc, #20]	; (8002c9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c88:	88fb      	ldrh	r3, [r7, #6]
 8002c8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c8c:	88fb      	ldrh	r3, [r7, #6]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe fc7e 	bl	8001590 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40013c00 	.word	0x40013c00

08002ca0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e267      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d075      	beq.n	8002daa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cbe:	4b88      	ldr	r3, [pc, #544]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d00c      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cca:	4b85      	ldr	r3, [pc, #532]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	d112      	bne.n	8002cfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cd6:	4b82      	ldr	r3, [pc, #520]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ce2:	d10b      	bne.n	8002cfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce4:	4b7e      	ldr	r3, [pc, #504]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d05b      	beq.n	8002da8 <HAL_RCC_OscConfig+0x108>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d157      	bne.n	8002da8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e242      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d04:	d106      	bne.n	8002d14 <HAL_RCC_OscConfig+0x74>
 8002d06:	4b76      	ldr	r3, [pc, #472]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a75      	ldr	r2, [pc, #468]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	e01d      	b.n	8002d50 <HAL_RCC_OscConfig+0xb0>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d1c:	d10c      	bne.n	8002d38 <HAL_RCC_OscConfig+0x98>
 8002d1e:	4b70      	ldr	r3, [pc, #448]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a6f      	ldr	r2, [pc, #444]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	4b6d      	ldr	r3, [pc, #436]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a6c      	ldr	r2, [pc, #432]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	e00b      	b.n	8002d50 <HAL_RCC_OscConfig+0xb0>
 8002d38:	4b69      	ldr	r3, [pc, #420]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a68      	ldr	r2, [pc, #416]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d42:	6013      	str	r3, [r2, #0]
 8002d44:	4b66      	ldr	r3, [pc, #408]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a65      	ldr	r2, [pc, #404]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d013      	beq.n	8002d80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d58:	f7ff fc54 	bl	8002604 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d60:	f7ff fc50 	bl	8002604 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b64      	cmp	r3, #100	; 0x64
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e207      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d72:	4b5b      	ldr	r3, [pc, #364]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCC_OscConfig+0xc0>
 8002d7e:	e014      	b.n	8002daa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d80:	f7ff fc40 	bl	8002604 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d88:	f7ff fc3c 	bl	8002604 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b64      	cmp	r3, #100	; 0x64
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e1f3      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d9a:	4b51      	ldr	r3, [pc, #324]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0xe8>
 8002da6:	e000      	b.n	8002daa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d063      	beq.n	8002e7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002db6:	4b4a      	ldr	r3, [pc, #296]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 030c 	and.w	r3, r3, #12
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00b      	beq.n	8002dda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dc2:	4b47      	ldr	r3, [pc, #284]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d11c      	bne.n	8002e08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dce:	4b44      	ldr	r3, [pc, #272]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d116      	bne.n	8002e08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dda:	4b41      	ldr	r3, [pc, #260]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d005      	beq.n	8002df2 <HAL_RCC_OscConfig+0x152>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d001      	beq.n	8002df2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e1c7      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df2:	4b3b      	ldr	r3, [pc, #236]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4937      	ldr	r1, [pc, #220]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e06:	e03a      	b.n	8002e7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d020      	beq.n	8002e52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e10:	4b34      	ldr	r3, [pc, #208]	; (8002ee4 <HAL_RCC_OscConfig+0x244>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e16:	f7ff fbf5 	bl	8002604 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e1e:	f7ff fbf1 	bl	8002604 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e1a8      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e30:	4b2b      	ldr	r3, [pc, #172]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0f0      	beq.n	8002e1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3c:	4b28      	ldr	r3, [pc, #160]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	4925      	ldr	r1, [pc, #148]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	600b      	str	r3, [r1, #0]
 8002e50:	e015      	b.n	8002e7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e52:	4b24      	ldr	r3, [pc, #144]	; (8002ee4 <HAL_RCC_OscConfig+0x244>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e58:	f7ff fbd4 	bl	8002604 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e60:	f7ff fbd0 	bl	8002604 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e187      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e72:	4b1b      	ldr	r3, [pc, #108]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d036      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d016      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e92:	4b15      	ldr	r3, [pc, #84]	; (8002ee8 <HAL_RCC_OscConfig+0x248>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e98:	f7ff fbb4 	bl	8002604 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ea0:	f7ff fbb0 	bl	8002604 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e167      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb2:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x200>
 8002ebe:	e01b      	b.n	8002ef8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ec0:	4b09      	ldr	r3, [pc, #36]	; (8002ee8 <HAL_RCC_OscConfig+0x248>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec6:	f7ff fb9d 	bl	8002604 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ecc:	e00e      	b.n	8002eec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ece:	f7ff fb99 	bl	8002604 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d907      	bls.n	8002eec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e150      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	42470000 	.word	0x42470000
 8002ee8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eec:	4b88      	ldr	r3, [pc, #544]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1ea      	bne.n	8002ece <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 8097 	beq.w	8003034 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f06:	2300      	movs	r3, #0
 8002f08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f0a:	4b81      	ldr	r3, [pc, #516]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10f      	bne.n	8002f36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	60bb      	str	r3, [r7, #8]
 8002f1a:	4b7d      	ldr	r3, [pc, #500]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	4a7c      	ldr	r2, [pc, #496]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f24:	6413      	str	r3, [r2, #64]	; 0x40
 8002f26:	4b7a      	ldr	r3, [pc, #488]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2e:	60bb      	str	r3, [r7, #8]
 8002f30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f32:	2301      	movs	r3, #1
 8002f34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f36:	4b77      	ldr	r3, [pc, #476]	; (8003114 <HAL_RCC_OscConfig+0x474>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d118      	bne.n	8002f74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f42:	4b74      	ldr	r3, [pc, #464]	; (8003114 <HAL_RCC_OscConfig+0x474>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a73      	ldr	r2, [pc, #460]	; (8003114 <HAL_RCC_OscConfig+0x474>)
 8002f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f4e:	f7ff fb59 	bl	8002604 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f56:	f7ff fb55 	bl	8002604 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e10c      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f68:	4b6a      	ldr	r3, [pc, #424]	; (8003114 <HAL_RCC_OscConfig+0x474>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0f0      	beq.n	8002f56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d106      	bne.n	8002f8a <HAL_RCC_OscConfig+0x2ea>
 8002f7c:	4b64      	ldr	r3, [pc, #400]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f80:	4a63      	ldr	r2, [pc, #396]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002f82:	f043 0301 	orr.w	r3, r3, #1
 8002f86:	6713      	str	r3, [r2, #112]	; 0x70
 8002f88:	e01c      	b.n	8002fc4 <HAL_RCC_OscConfig+0x324>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b05      	cmp	r3, #5
 8002f90:	d10c      	bne.n	8002fac <HAL_RCC_OscConfig+0x30c>
 8002f92:	4b5f      	ldr	r3, [pc, #380]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f96:	4a5e      	ldr	r2, [pc, #376]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002f98:	f043 0304 	orr.w	r3, r3, #4
 8002f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f9e:	4b5c      	ldr	r3, [pc, #368]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa2:	4a5b      	ldr	r2, [pc, #364]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8002faa:	e00b      	b.n	8002fc4 <HAL_RCC_OscConfig+0x324>
 8002fac:	4b58      	ldr	r3, [pc, #352]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb0:	4a57      	ldr	r2, [pc, #348]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002fb2:	f023 0301 	bic.w	r3, r3, #1
 8002fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb8:	4b55      	ldr	r3, [pc, #340]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbc:	4a54      	ldr	r2, [pc, #336]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002fbe:	f023 0304 	bic.w	r3, r3, #4
 8002fc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d015      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fcc:	f7ff fb1a 	bl	8002604 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd2:	e00a      	b.n	8002fea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd4:	f7ff fb16 	bl	8002604 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e0cb      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fea:	4b49      	ldr	r3, [pc, #292]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0ee      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x334>
 8002ff6:	e014      	b.n	8003022 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff8:	f7ff fb04 	bl	8002604 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ffe:	e00a      	b.n	8003016 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003000:	f7ff fb00 	bl	8002604 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	f241 3288 	movw	r2, #5000	; 0x1388
 800300e:	4293      	cmp	r3, r2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e0b5      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003016:	4b3e      	ldr	r3, [pc, #248]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8003018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1ee      	bne.n	8003000 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003022:	7dfb      	ldrb	r3, [r7, #23]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d105      	bne.n	8003034 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003028:	4b39      	ldr	r3, [pc, #228]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	4a38      	ldr	r2, [pc, #224]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 800302e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003032:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 80a1 	beq.w	8003180 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800303e:	4b34      	ldr	r3, [pc, #208]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	2b08      	cmp	r3, #8
 8003048:	d05c      	beq.n	8003104 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d141      	bne.n	80030d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003052:	4b31      	ldr	r3, [pc, #196]	; (8003118 <HAL_RCC_OscConfig+0x478>)
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003058:	f7ff fad4 	bl	8002604 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003060:	f7ff fad0 	bl	8002604 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e087      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003072:	4b27      	ldr	r3, [pc, #156]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f0      	bne.n	8003060 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69da      	ldr	r2, [r3, #28]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	019b      	lsls	r3, r3, #6
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003094:	085b      	lsrs	r3, r3, #1
 8003096:	3b01      	subs	r3, #1
 8003098:	041b      	lsls	r3, r3, #16
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	061b      	lsls	r3, r3, #24
 80030a2:	491b      	ldr	r1, [pc, #108]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030a8:	4b1b      	ldr	r3, [pc, #108]	; (8003118 <HAL_RCC_OscConfig+0x478>)
 80030aa:	2201      	movs	r2, #1
 80030ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ae:	f7ff faa9 	bl	8002604 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b6:	f7ff faa5 	bl	8002604 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e05c      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c8:	4b11      	ldr	r3, [pc, #68]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0f0      	beq.n	80030b6 <HAL_RCC_OscConfig+0x416>
 80030d4:	e054      	b.n	8003180 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d6:	4b10      	ldr	r3, [pc, #64]	; (8003118 <HAL_RCC_OscConfig+0x478>)
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030dc:	f7ff fa92 	bl	8002604 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e4:	f7ff fa8e 	bl	8002604 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e045      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f6:	4b06      	ldr	r3, [pc, #24]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f0      	bne.n	80030e4 <HAL_RCC_OscConfig+0x444>
 8003102:	e03d      	b.n	8003180 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d107      	bne.n	800311c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e038      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
 8003110:	40023800 	.word	0x40023800
 8003114:	40007000 	.word	0x40007000
 8003118:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800311c:	4b1b      	ldr	r3, [pc, #108]	; (800318c <HAL_RCC_OscConfig+0x4ec>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d028      	beq.n	800317c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003134:	429a      	cmp	r2, r3
 8003136:	d121      	bne.n	800317c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003142:	429a      	cmp	r2, r3
 8003144:	d11a      	bne.n	800317c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800314c:	4013      	ands	r3, r2
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003152:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003154:	4293      	cmp	r3, r2
 8003156:	d111      	bne.n	800317c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003162:	085b      	lsrs	r3, r3, #1
 8003164:	3b01      	subs	r3, #1
 8003166:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003168:	429a      	cmp	r2, r3
 800316a:	d107      	bne.n	800317c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003176:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003178:	429a      	cmp	r2, r3
 800317a:	d001      	beq.n	8003180 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e000      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3718      	adds	r7, #24
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	40023800 	.word	0x40023800

08003190 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e0cc      	b.n	800333e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031a4:	4b68      	ldr	r3, [pc, #416]	; (8003348 <HAL_RCC_ClockConfig+0x1b8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d90c      	bls.n	80031cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b2:	4b65      	ldr	r3, [pc, #404]	; (8003348 <HAL_RCC_ClockConfig+0x1b8>)
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ba:	4b63      	ldr	r3, [pc, #396]	; (8003348 <HAL_RCC_ClockConfig+0x1b8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d001      	beq.n	80031cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e0b8      	b.n	800333e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d020      	beq.n	800321a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031e4:	4b59      	ldr	r3, [pc, #356]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	4a58      	ldr	r2, [pc, #352]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d005      	beq.n	8003208 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031fc:	4b53      	ldr	r3, [pc, #332]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	4a52      	ldr	r2, [pc, #328]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003206:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003208:	4b50      	ldr	r3, [pc, #320]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	494d      	ldr	r1, [pc, #308]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	4313      	orrs	r3, r2
 8003218:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d044      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d107      	bne.n	800323e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322e:	4b47      	ldr	r3, [pc, #284]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d119      	bne.n	800326e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e07f      	b.n	800333e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2b02      	cmp	r3, #2
 8003244:	d003      	beq.n	800324e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800324a:	2b03      	cmp	r3, #3
 800324c:	d107      	bne.n	800325e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324e:	4b3f      	ldr	r3, [pc, #252]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d109      	bne.n	800326e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e06f      	b.n	800333e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325e:	4b3b      	ldr	r3, [pc, #236]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e067      	b.n	800333e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800326e:	4b37      	ldr	r3, [pc, #220]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f023 0203 	bic.w	r2, r3, #3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	4934      	ldr	r1, [pc, #208]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 800327c:	4313      	orrs	r3, r2
 800327e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003280:	f7ff f9c0 	bl	8002604 <HAL_GetTick>
 8003284:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003286:	e00a      	b.n	800329e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003288:	f7ff f9bc 	bl	8002604 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	f241 3288 	movw	r2, #5000	; 0x1388
 8003296:	4293      	cmp	r3, r2
 8003298:	d901      	bls.n	800329e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e04f      	b.n	800333e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329e:	4b2b      	ldr	r3, [pc, #172]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 020c 	and.w	r2, r3, #12
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d1eb      	bne.n	8003288 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032b0:	4b25      	ldr	r3, [pc, #148]	; (8003348 <HAL_RCC_ClockConfig+0x1b8>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d20c      	bcs.n	80032d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032be:	4b22      	ldr	r3, [pc, #136]	; (8003348 <HAL_RCC_ClockConfig+0x1b8>)
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c6:	4b20      	ldr	r3, [pc, #128]	; (8003348 <HAL_RCC_ClockConfig+0x1b8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d001      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e032      	b.n	800333e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d008      	beq.n	80032f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032e4:	4b19      	ldr	r3, [pc, #100]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	4916      	ldr	r1, [pc, #88]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d009      	beq.n	8003316 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003302:	4b12      	ldr	r3, [pc, #72]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	490e      	ldr	r1, [pc, #56]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 8003312:	4313      	orrs	r3, r2
 8003314:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003316:	f000 f821 	bl	800335c <HAL_RCC_GetSysClockFreq>
 800331a:	4602      	mov	r2, r0
 800331c:	4b0b      	ldr	r3, [pc, #44]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	091b      	lsrs	r3, r3, #4
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	490a      	ldr	r1, [pc, #40]	; (8003350 <HAL_RCC_ClockConfig+0x1c0>)
 8003328:	5ccb      	ldrb	r3, [r1, r3]
 800332a:	fa22 f303 	lsr.w	r3, r2, r3
 800332e:	4a09      	ldr	r2, [pc, #36]	; (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 8003330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003332:	4b09      	ldr	r3, [pc, #36]	; (8003358 <HAL_RCC_ClockConfig+0x1c8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f7fe ff90 	bl	800225c <HAL_InitTick>

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40023c00 	.word	0x40023c00
 800334c:	40023800 	.word	0x40023800
 8003350:	0800b970 	.word	0x0800b970
 8003354:	20000000 	.word	0x20000000
 8003358:	20000004 	.word	0x20000004

0800335c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800335c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003360:	b094      	sub	sp, #80	; 0x50
 8003362:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003364:	2300      	movs	r3, #0
 8003366:	647b      	str	r3, [r7, #68]	; 0x44
 8003368:	2300      	movs	r3, #0
 800336a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800336c:	2300      	movs	r3, #0
 800336e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003374:	4b79      	ldr	r3, [pc, #484]	; (800355c <HAL_RCC_GetSysClockFreq+0x200>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 030c 	and.w	r3, r3, #12
 800337c:	2b08      	cmp	r3, #8
 800337e:	d00d      	beq.n	800339c <HAL_RCC_GetSysClockFreq+0x40>
 8003380:	2b08      	cmp	r3, #8
 8003382:	f200 80e1 	bhi.w	8003548 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003386:	2b00      	cmp	r3, #0
 8003388:	d002      	beq.n	8003390 <HAL_RCC_GetSysClockFreq+0x34>
 800338a:	2b04      	cmp	r3, #4
 800338c:	d003      	beq.n	8003396 <HAL_RCC_GetSysClockFreq+0x3a>
 800338e:	e0db      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003390:	4b73      	ldr	r3, [pc, #460]	; (8003560 <HAL_RCC_GetSysClockFreq+0x204>)
 8003392:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003394:	e0db      	b.n	800354e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003396:	4b73      	ldr	r3, [pc, #460]	; (8003564 <HAL_RCC_GetSysClockFreq+0x208>)
 8003398:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800339a:	e0d8      	b.n	800354e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800339c:	4b6f      	ldr	r3, [pc, #444]	; (800355c <HAL_RCC_GetSysClockFreq+0x200>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033a6:	4b6d      	ldr	r3, [pc, #436]	; (800355c <HAL_RCC_GetSysClockFreq+0x200>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d063      	beq.n	800347a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033b2:	4b6a      	ldr	r3, [pc, #424]	; (800355c <HAL_RCC_GetSysClockFreq+0x200>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	099b      	lsrs	r3, r3, #6
 80033b8:	2200      	movs	r2, #0
 80033ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80033bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033c4:	633b      	str	r3, [r7, #48]	; 0x30
 80033c6:	2300      	movs	r3, #0
 80033c8:	637b      	str	r3, [r7, #52]	; 0x34
 80033ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033ce:	4622      	mov	r2, r4
 80033d0:	462b      	mov	r3, r5
 80033d2:	f04f 0000 	mov.w	r0, #0
 80033d6:	f04f 0100 	mov.w	r1, #0
 80033da:	0159      	lsls	r1, r3, #5
 80033dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033e0:	0150      	lsls	r0, r2, #5
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	4621      	mov	r1, r4
 80033e8:	1a51      	subs	r1, r2, r1
 80033ea:	6139      	str	r1, [r7, #16]
 80033ec:	4629      	mov	r1, r5
 80033ee:	eb63 0301 	sbc.w	r3, r3, r1
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	f04f 0300 	mov.w	r3, #0
 80033fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003400:	4659      	mov	r1, fp
 8003402:	018b      	lsls	r3, r1, #6
 8003404:	4651      	mov	r1, sl
 8003406:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800340a:	4651      	mov	r1, sl
 800340c:	018a      	lsls	r2, r1, #6
 800340e:	4651      	mov	r1, sl
 8003410:	ebb2 0801 	subs.w	r8, r2, r1
 8003414:	4659      	mov	r1, fp
 8003416:	eb63 0901 	sbc.w	r9, r3, r1
 800341a:	f04f 0200 	mov.w	r2, #0
 800341e:	f04f 0300 	mov.w	r3, #0
 8003422:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003426:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800342a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800342e:	4690      	mov	r8, r2
 8003430:	4699      	mov	r9, r3
 8003432:	4623      	mov	r3, r4
 8003434:	eb18 0303 	adds.w	r3, r8, r3
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	462b      	mov	r3, r5
 800343c:	eb49 0303 	adc.w	r3, r9, r3
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800344e:	4629      	mov	r1, r5
 8003450:	024b      	lsls	r3, r1, #9
 8003452:	4621      	mov	r1, r4
 8003454:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003458:	4621      	mov	r1, r4
 800345a:	024a      	lsls	r2, r1, #9
 800345c:	4610      	mov	r0, r2
 800345e:	4619      	mov	r1, r3
 8003460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003462:	2200      	movs	r2, #0
 8003464:	62bb      	str	r3, [r7, #40]	; 0x28
 8003466:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003468:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800346c:	f7fd fbd4 	bl	8000c18 <__aeabi_uldivmod>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4613      	mov	r3, r2
 8003476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003478:	e058      	b.n	800352c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800347a:	4b38      	ldr	r3, [pc, #224]	; (800355c <HAL_RCC_GetSysClockFreq+0x200>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	099b      	lsrs	r3, r3, #6
 8003480:	2200      	movs	r2, #0
 8003482:	4618      	mov	r0, r3
 8003484:	4611      	mov	r1, r2
 8003486:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800348a:	623b      	str	r3, [r7, #32]
 800348c:	2300      	movs	r3, #0
 800348e:	627b      	str	r3, [r7, #36]	; 0x24
 8003490:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003494:	4642      	mov	r2, r8
 8003496:	464b      	mov	r3, r9
 8003498:	f04f 0000 	mov.w	r0, #0
 800349c:	f04f 0100 	mov.w	r1, #0
 80034a0:	0159      	lsls	r1, r3, #5
 80034a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034a6:	0150      	lsls	r0, r2, #5
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	4641      	mov	r1, r8
 80034ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80034b2:	4649      	mov	r1, r9
 80034b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80034b8:	f04f 0200 	mov.w	r2, #0
 80034bc:	f04f 0300 	mov.w	r3, #0
 80034c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034cc:	ebb2 040a 	subs.w	r4, r2, sl
 80034d0:	eb63 050b 	sbc.w	r5, r3, fp
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	00eb      	lsls	r3, r5, #3
 80034de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034e2:	00e2      	lsls	r2, r4, #3
 80034e4:	4614      	mov	r4, r2
 80034e6:	461d      	mov	r5, r3
 80034e8:	4643      	mov	r3, r8
 80034ea:	18e3      	adds	r3, r4, r3
 80034ec:	603b      	str	r3, [r7, #0]
 80034ee:	464b      	mov	r3, r9
 80034f0:	eb45 0303 	adc.w	r3, r5, r3
 80034f4:	607b      	str	r3, [r7, #4]
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	f04f 0300 	mov.w	r3, #0
 80034fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003502:	4629      	mov	r1, r5
 8003504:	028b      	lsls	r3, r1, #10
 8003506:	4621      	mov	r1, r4
 8003508:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800350c:	4621      	mov	r1, r4
 800350e:	028a      	lsls	r2, r1, #10
 8003510:	4610      	mov	r0, r2
 8003512:	4619      	mov	r1, r3
 8003514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003516:	2200      	movs	r2, #0
 8003518:	61bb      	str	r3, [r7, #24]
 800351a:	61fa      	str	r2, [r7, #28]
 800351c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003520:	f7fd fb7a 	bl	8000c18 <__aeabi_uldivmod>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4613      	mov	r3, r2
 800352a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800352c:	4b0b      	ldr	r3, [pc, #44]	; (800355c <HAL_RCC_GetSysClockFreq+0x200>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	0c1b      	lsrs	r3, r3, #16
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	3301      	adds	r3, #1
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800353c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800353e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003540:	fbb2 f3f3 	udiv	r3, r2, r3
 8003544:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003546:	e002      	b.n	800354e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003548:	4b05      	ldr	r3, [pc, #20]	; (8003560 <HAL_RCC_GetSysClockFreq+0x204>)
 800354a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800354c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800354e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003550:	4618      	mov	r0, r3
 8003552:	3750      	adds	r7, #80	; 0x50
 8003554:	46bd      	mov	sp, r7
 8003556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800355a:	bf00      	nop
 800355c:	40023800 	.word	0x40023800
 8003560:	00f42400 	.word	0x00f42400
 8003564:	007a1200 	.word	0x007a1200

08003568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800356c:	4b03      	ldr	r3, [pc, #12]	; (800357c <HAL_RCC_GetHCLKFreq+0x14>)
 800356e:	681b      	ldr	r3, [r3, #0]
}
 8003570:	4618      	mov	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	20000000 	.word	0x20000000

08003580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003584:	f7ff fff0 	bl	8003568 <HAL_RCC_GetHCLKFreq>
 8003588:	4602      	mov	r2, r0
 800358a:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	0a9b      	lsrs	r3, r3, #10
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	4903      	ldr	r1, [pc, #12]	; (80035a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003596:	5ccb      	ldrb	r3, [r1, r3]
 8003598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800359c:	4618      	mov	r0, r3
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40023800 	.word	0x40023800
 80035a4:	0800b980 	.word	0x0800b980

080035a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035ac:	f7ff ffdc 	bl	8003568 <HAL_RCC_GetHCLKFreq>
 80035b0:	4602      	mov	r2, r0
 80035b2:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	0b5b      	lsrs	r3, r3, #13
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	4903      	ldr	r1, [pc, #12]	; (80035cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80035be:	5ccb      	ldrb	r3, [r1, r3]
 80035c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40023800 	.word	0x40023800
 80035cc:	0800b980 	.word	0x0800b980

080035d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	220f      	movs	r2, #15
 80035de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80035e0:	4b12      	ldr	r3, [pc, #72]	; (800362c <HAL_RCC_GetClockConfig+0x5c>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 0203 	and.w	r2, r3, #3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80035ec:	4b0f      	ldr	r3, [pc, #60]	; (800362c <HAL_RCC_GetClockConfig+0x5c>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80035f8:	4b0c      	ldr	r3, [pc, #48]	; (800362c <HAL_RCC_GetClockConfig+0x5c>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003604:	4b09      	ldr	r3, [pc, #36]	; (800362c <HAL_RCC_GetClockConfig+0x5c>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	08db      	lsrs	r3, r3, #3
 800360a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003612:	4b07      	ldr	r3, [pc, #28]	; (8003630 <HAL_RCC_GetClockConfig+0x60>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0207 	and.w	r2, r3, #7
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	601a      	str	r2, [r3, #0]
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40023800 	.word	0x40023800
 8003630:	40023c00 	.word	0x40023c00

08003634 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e041      	b.n	80036ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d106      	bne.n	8003660 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f839 	bl	80036d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3304      	adds	r3, #4
 8003670:	4619      	mov	r1, r3
 8003672:	4610      	mov	r0, r2
 8003674:	f000 fc0a 	bl	8003e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
	...

080036e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d001      	beq.n	8003700 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e044      	b.n	800378a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0201 	orr.w	r2, r2, #1
 8003716:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a1e      	ldr	r2, [pc, #120]	; (8003798 <HAL_TIM_Base_Start_IT+0xb0>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d018      	beq.n	8003754 <HAL_TIM_Base_Start_IT+0x6c>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800372a:	d013      	beq.n	8003754 <HAL_TIM_Base_Start_IT+0x6c>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a1a      	ldr	r2, [pc, #104]	; (800379c <HAL_TIM_Base_Start_IT+0xb4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d00e      	beq.n	8003754 <HAL_TIM_Base_Start_IT+0x6c>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a19      	ldr	r2, [pc, #100]	; (80037a0 <HAL_TIM_Base_Start_IT+0xb8>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d009      	beq.n	8003754 <HAL_TIM_Base_Start_IT+0x6c>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a17      	ldr	r2, [pc, #92]	; (80037a4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d004      	beq.n	8003754 <HAL_TIM_Base_Start_IT+0x6c>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a16      	ldr	r2, [pc, #88]	; (80037a8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d111      	bne.n	8003778 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2b06      	cmp	r3, #6
 8003764:	d010      	beq.n	8003788 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f042 0201 	orr.w	r2, r2, #1
 8003774:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003776:	e007      	b.n	8003788 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	40010000 	.word	0x40010000
 800379c:	40000400 	.word	0x40000400
 80037a0:	40000800 	.word	0x40000800
 80037a4:	40000c00 	.word	0x40000c00
 80037a8:	40014000 	.word	0x40014000

080037ac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e041      	b.n	8003842 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d106      	bne.n	80037d8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7fe fc9a 	bl	800210c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3304      	adds	r3, #4
 80037e8:	4619      	mov	r1, r3
 80037ea:	4610      	mov	r0, r2
 80037ec:	f000 fb4e 	bl	8003e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d104      	bne.n	800386a <HAL_TIM_IC_Start_IT+0x1e>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003866:	b2db      	uxtb	r3, r3
 8003868:	e013      	b.n	8003892 <HAL_TIM_IC_Start_IT+0x46>
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b04      	cmp	r3, #4
 800386e:	d104      	bne.n	800387a <HAL_TIM_IC_Start_IT+0x2e>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003876:	b2db      	uxtb	r3, r3
 8003878:	e00b      	b.n	8003892 <HAL_TIM_IC_Start_IT+0x46>
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b08      	cmp	r3, #8
 800387e:	d104      	bne.n	800388a <HAL_TIM_IC_Start_IT+0x3e>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003886:	b2db      	uxtb	r3, r3
 8003888:	e003      	b.n	8003892 <HAL_TIM_IC_Start_IT+0x46>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003890:	b2db      	uxtb	r3, r3
 8003892:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d104      	bne.n	80038a4 <HAL_TIM_IC_Start_IT+0x58>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	e013      	b.n	80038cc <HAL_TIM_IC_Start_IT+0x80>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d104      	bne.n	80038b4 <HAL_TIM_IC_Start_IT+0x68>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	e00b      	b.n	80038cc <HAL_TIM_IC_Start_IT+0x80>
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	2b08      	cmp	r3, #8
 80038b8:	d104      	bne.n	80038c4 <HAL_TIM_IC_Start_IT+0x78>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	e003      	b.n	80038cc <HAL_TIM_IC_Start_IT+0x80>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80038ce:	7bbb      	ldrb	r3, [r7, #14]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d102      	bne.n	80038da <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80038d4:	7b7b      	ldrb	r3, [r7, #13]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d001      	beq.n	80038de <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e0c2      	b.n	8003a64 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d104      	bne.n	80038ee <HAL_TIM_IC_Start_IT+0xa2>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038ec:	e013      	b.n	8003916 <HAL_TIM_IC_Start_IT+0xca>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b04      	cmp	r3, #4
 80038f2:	d104      	bne.n	80038fe <HAL_TIM_IC_Start_IT+0xb2>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2202      	movs	r2, #2
 80038f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038fc:	e00b      	b.n	8003916 <HAL_TIM_IC_Start_IT+0xca>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b08      	cmp	r3, #8
 8003902:	d104      	bne.n	800390e <HAL_TIM_IC_Start_IT+0xc2>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800390c:	e003      	b.n	8003916 <HAL_TIM_IC_Start_IT+0xca>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2202      	movs	r2, #2
 8003912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d104      	bne.n	8003926 <HAL_TIM_IC_Start_IT+0xda>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003924:	e013      	b.n	800394e <HAL_TIM_IC_Start_IT+0x102>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b04      	cmp	r3, #4
 800392a:	d104      	bne.n	8003936 <HAL_TIM_IC_Start_IT+0xea>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003934:	e00b      	b.n	800394e <HAL_TIM_IC_Start_IT+0x102>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b08      	cmp	r3, #8
 800393a:	d104      	bne.n	8003946 <HAL_TIM_IC_Start_IT+0xfa>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2202      	movs	r2, #2
 8003940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003944:	e003      	b.n	800394e <HAL_TIM_IC_Start_IT+0x102>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2202      	movs	r2, #2
 800394a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2b0c      	cmp	r3, #12
 8003952:	d841      	bhi.n	80039d8 <HAL_TIM_IC_Start_IT+0x18c>
 8003954:	a201      	add	r2, pc, #4	; (adr r2, 800395c <HAL_TIM_IC_Start_IT+0x110>)
 8003956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395a:	bf00      	nop
 800395c:	08003991 	.word	0x08003991
 8003960:	080039d9 	.word	0x080039d9
 8003964:	080039d9 	.word	0x080039d9
 8003968:	080039d9 	.word	0x080039d9
 800396c:	080039a3 	.word	0x080039a3
 8003970:	080039d9 	.word	0x080039d9
 8003974:	080039d9 	.word	0x080039d9
 8003978:	080039d9 	.word	0x080039d9
 800397c:	080039b5 	.word	0x080039b5
 8003980:	080039d9 	.word	0x080039d9
 8003984:	080039d9 	.word	0x080039d9
 8003988:	080039d9 	.word	0x080039d9
 800398c:	080039c7 	.word	0x080039c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0202 	orr.w	r2, r2, #2
 800399e:	60da      	str	r2, [r3, #12]
      break;
 80039a0:	e01d      	b.n	80039de <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68da      	ldr	r2, [r3, #12]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f042 0204 	orr.w	r2, r2, #4
 80039b0:	60da      	str	r2, [r3, #12]
      break;
 80039b2:	e014      	b.n	80039de <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0208 	orr.w	r2, r2, #8
 80039c2:	60da      	str	r2, [r3, #12]
      break;
 80039c4:	e00b      	b.n	80039de <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f042 0210 	orr.w	r2, r2, #16
 80039d4:	60da      	str	r2, [r3, #12]
      break;
 80039d6:	e002      	b.n	80039de <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	73fb      	strb	r3, [r7, #15]
      break;
 80039dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80039de:	7bfb      	ldrb	r3, [r7, #15]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d13e      	bne.n	8003a62 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2201      	movs	r2, #1
 80039ea:	6839      	ldr	r1, [r7, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f000 fbeb 	bl	80041c8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a1d      	ldr	r2, [pc, #116]	; (8003a6c <HAL_TIM_IC_Start_IT+0x220>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d018      	beq.n	8003a2e <HAL_TIM_IC_Start_IT+0x1e2>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a04:	d013      	beq.n	8003a2e <HAL_TIM_IC_Start_IT+0x1e2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a19      	ldr	r2, [pc, #100]	; (8003a70 <HAL_TIM_IC_Start_IT+0x224>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d00e      	beq.n	8003a2e <HAL_TIM_IC_Start_IT+0x1e2>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a17      	ldr	r2, [pc, #92]	; (8003a74 <HAL_TIM_IC_Start_IT+0x228>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d009      	beq.n	8003a2e <HAL_TIM_IC_Start_IT+0x1e2>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a16      	ldr	r2, [pc, #88]	; (8003a78 <HAL_TIM_IC_Start_IT+0x22c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d004      	beq.n	8003a2e <HAL_TIM_IC_Start_IT+0x1e2>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a14      	ldr	r2, [pc, #80]	; (8003a7c <HAL_TIM_IC_Start_IT+0x230>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d111      	bne.n	8003a52 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	2b06      	cmp	r3, #6
 8003a3e:	d010      	beq.n	8003a62 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0201 	orr.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a50:	e007      	b.n	8003a62 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f042 0201 	orr.w	r2, r2, #1
 8003a60:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40010000 	.word	0x40010000
 8003a70:	40000400 	.word	0x40000400
 8003a74:	40000800 	.word	0x40000800
 8003a78:	40000c00 	.word	0x40000c00
 8003a7c:	40014000 	.word	0x40014000

08003a80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d122      	bne.n	8003adc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d11b      	bne.n	8003adc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0202 	mvn.w	r2, #2
 8003aac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7fd fe20 	bl	8001708 <HAL_TIM_IC_CaptureCallback>
 8003ac8:	e005      	b.n	8003ad6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f9c0 	bl	8003e50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f9c7 	bl	8003e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f003 0304 	and.w	r3, r3, #4
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d122      	bne.n	8003b30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b04      	cmp	r3, #4
 8003af6:	d11b      	bne.n	8003b30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f06f 0204 	mvn.w	r2, #4
 8003b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2202      	movs	r2, #2
 8003b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7fd fdf6 	bl	8001708 <HAL_TIM_IC_CaptureCallback>
 8003b1c:	e005      	b.n	8003b2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f996 	bl	8003e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f99d 	bl	8003e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d122      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f003 0308 	and.w	r3, r3, #8
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d11b      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0208 	mvn.w	r2, #8
 8003b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2204      	movs	r2, #4
 8003b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7fd fdcc 	bl	8001708 <HAL_TIM_IC_CaptureCallback>
 8003b70:	e005      	b.n	8003b7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f96c 	bl	8003e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f973 	bl	8003e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0310 	and.w	r3, r3, #16
 8003b8e:	2b10      	cmp	r3, #16
 8003b90:	d122      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f003 0310 	and.w	r3, r3, #16
 8003b9c:	2b10      	cmp	r3, #16
 8003b9e:	d11b      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0210 	mvn.w	r2, #16
 8003ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2208      	movs	r2, #8
 8003bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7fd fda2 	bl	8001708 <HAL_TIM_IC_CaptureCallback>
 8003bc4:	e005      	b.n	8003bd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f942 	bl	8003e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f949 	bl	8003e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d10e      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d107      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0201 	mvn.w	r2, #1
 8003bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fe fa40 	bl	8002084 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0e:	2b80      	cmp	r3, #128	; 0x80
 8003c10:	d10e      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1c:	2b80      	cmp	r3, #128	; 0x80
 8003c1e:	d107      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 fb6a 	bl	8004304 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3a:	2b40      	cmp	r3, #64	; 0x40
 8003c3c:	d10e      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c48:	2b40      	cmp	r3, #64	; 0x40
 8003c4a:	d107      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f90e 	bl	8003e78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f003 0320 	and.w	r3, r3, #32
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	d10e      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f003 0320 	and.w	r3, r3, #32
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d107      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f06f 0220 	mvn.w	r2, #32
 8003c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 fb34 	bl	80042f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c88:	bf00      	nop
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d101      	bne.n	8003cae <HAL_TIM_IC_ConfigChannel+0x1e>
 8003caa:	2302      	movs	r3, #2
 8003cac:	e088      	b.n	8003dc0 <HAL_TIM_IC_ConfigChannel+0x130>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d11b      	bne.n	8003cf4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6818      	ldr	r0, [r3, #0]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	6819      	ldr	r1, [r3, #0]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f000 f95e 	bl	8003f8c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699a      	ldr	r2, [r3, #24]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 020c 	bic.w	r2, r2, #12
 8003cde:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6999      	ldr	r1, [r3, #24]
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	689a      	ldr	r2, [r3, #8]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	619a      	str	r2, [r3, #24]
 8003cf2:	e060      	b.n	8003db6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d11c      	bne.n	8003d34 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6818      	ldr	r0, [r3, #0]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	6819      	ldr	r1, [r3, #0]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f000 f9a7 	bl	800405c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	699a      	ldr	r2, [r3, #24]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003d1c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6999      	ldr	r1, [r3, #24]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	021a      	lsls	r2, r3, #8
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	619a      	str	r2, [r3, #24]
 8003d32:	e040      	b.n	8003db6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b08      	cmp	r3, #8
 8003d38:	d11b      	bne.n	8003d72 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6818      	ldr	r0, [r3, #0]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	6819      	ldr	r1, [r3, #0]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f000 f9c4 	bl	80040d6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	69da      	ldr	r2, [r3, #28]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 020c 	bic.w	r2, r2, #12
 8003d5c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	69d9      	ldr	r1, [r3, #28]
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	61da      	str	r2, [r3, #28]
 8003d70:	e021      	b.n	8003db6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b0c      	cmp	r3, #12
 8003d76:	d11c      	bne.n	8003db2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6818      	ldr	r0, [r3, #0]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	6819      	ldr	r1, [r3, #0]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f000 f9e1 	bl	800414e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	69da      	ldr	r2, [r3, #28]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003d9a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	69d9      	ldr	r1, [r3, #28]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	021a      	lsls	r2, r3, #8
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	61da      	str	r2, [r3, #28]
 8003db0:	e001      	b.n	8003db6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b0c      	cmp	r3, #12
 8003dda:	d831      	bhi.n	8003e40 <HAL_TIM_ReadCapturedValue+0x78>
 8003ddc:	a201      	add	r2, pc, #4	; (adr r2, 8003de4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de2:	bf00      	nop
 8003de4:	08003e19 	.word	0x08003e19
 8003de8:	08003e41 	.word	0x08003e41
 8003dec:	08003e41 	.word	0x08003e41
 8003df0:	08003e41 	.word	0x08003e41
 8003df4:	08003e23 	.word	0x08003e23
 8003df8:	08003e41 	.word	0x08003e41
 8003dfc:	08003e41 	.word	0x08003e41
 8003e00:	08003e41 	.word	0x08003e41
 8003e04:	08003e2d 	.word	0x08003e2d
 8003e08:	08003e41 	.word	0x08003e41
 8003e0c:	08003e41 	.word	0x08003e41
 8003e10:	08003e41 	.word	0x08003e41
 8003e14:	08003e37 	.word	0x08003e37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1e:	60fb      	str	r3, [r7, #12]

      break;
 8003e20:	e00f      	b.n	8003e42 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e28:	60fb      	str	r3, [r7, #12]

      break;
 8003e2a:	e00a      	b.n	8003e42 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e32:	60fb      	str	r3, [r7, #12]

      break;
 8003e34:	e005      	b.n	8003e42 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3c:	60fb      	str	r3, [r7, #12]

      break;
 8003e3e:	e000      	b.n	8003e42 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003e40:	bf00      	nop
  }

  return tmpreg;
 8003e42:	68fb      	ldr	r3, [r7, #12]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3714      	adds	r7, #20
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a34      	ldr	r2, [pc, #208]	; (8003f70 <TIM_Base_SetConfig+0xe4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d00f      	beq.n	8003ec4 <TIM_Base_SetConfig+0x38>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eaa:	d00b      	beq.n	8003ec4 <TIM_Base_SetConfig+0x38>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a31      	ldr	r2, [pc, #196]	; (8003f74 <TIM_Base_SetConfig+0xe8>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d007      	beq.n	8003ec4 <TIM_Base_SetConfig+0x38>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a30      	ldr	r2, [pc, #192]	; (8003f78 <TIM_Base_SetConfig+0xec>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d003      	beq.n	8003ec4 <TIM_Base_SetConfig+0x38>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a2f      	ldr	r2, [pc, #188]	; (8003f7c <TIM_Base_SetConfig+0xf0>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d108      	bne.n	8003ed6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a25      	ldr	r2, [pc, #148]	; (8003f70 <TIM_Base_SetConfig+0xe4>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d01b      	beq.n	8003f16 <TIM_Base_SetConfig+0x8a>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee4:	d017      	beq.n	8003f16 <TIM_Base_SetConfig+0x8a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a22      	ldr	r2, [pc, #136]	; (8003f74 <TIM_Base_SetConfig+0xe8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d013      	beq.n	8003f16 <TIM_Base_SetConfig+0x8a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a21      	ldr	r2, [pc, #132]	; (8003f78 <TIM_Base_SetConfig+0xec>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00f      	beq.n	8003f16 <TIM_Base_SetConfig+0x8a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a20      	ldr	r2, [pc, #128]	; (8003f7c <TIM_Base_SetConfig+0xf0>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00b      	beq.n	8003f16 <TIM_Base_SetConfig+0x8a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a1f      	ldr	r2, [pc, #124]	; (8003f80 <TIM_Base_SetConfig+0xf4>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d007      	beq.n	8003f16 <TIM_Base_SetConfig+0x8a>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a1e      	ldr	r2, [pc, #120]	; (8003f84 <TIM_Base_SetConfig+0xf8>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d003      	beq.n	8003f16 <TIM_Base_SetConfig+0x8a>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a1d      	ldr	r2, [pc, #116]	; (8003f88 <TIM_Base_SetConfig+0xfc>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d108      	bne.n	8003f28 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a08      	ldr	r2, [pc, #32]	; (8003f70 <TIM_Base_SetConfig+0xe4>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d103      	bne.n	8003f5c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	615a      	str	r2, [r3, #20]
}
 8003f62:	bf00      	nop
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	40010000 	.word	0x40010000
 8003f74:	40000400 	.word	0x40000400
 8003f78:	40000800 	.word	0x40000800
 8003f7c:	40000c00 	.word	0x40000c00
 8003f80:	40014000 	.word	0x40014000
 8003f84:	40014400 	.word	0x40014400
 8003f88:	40014800 	.word	0x40014800

08003f8c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	f023 0201 	bic.w	r2, r3, #1
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	4a24      	ldr	r2, [pc, #144]	; (8004048 <TIM_TI1_SetConfig+0xbc>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d013      	beq.n	8003fe2 <TIM_TI1_SetConfig+0x56>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc0:	d00f      	beq.n	8003fe2 <TIM_TI1_SetConfig+0x56>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	4a21      	ldr	r2, [pc, #132]	; (800404c <TIM_TI1_SetConfig+0xc0>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d00b      	beq.n	8003fe2 <TIM_TI1_SetConfig+0x56>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	4a20      	ldr	r2, [pc, #128]	; (8004050 <TIM_TI1_SetConfig+0xc4>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d007      	beq.n	8003fe2 <TIM_TI1_SetConfig+0x56>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	4a1f      	ldr	r2, [pc, #124]	; (8004054 <TIM_TI1_SetConfig+0xc8>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d003      	beq.n	8003fe2 <TIM_TI1_SetConfig+0x56>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	4a1e      	ldr	r2, [pc, #120]	; (8004058 <TIM_TI1_SetConfig+0xcc>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d101      	bne.n	8003fe6 <TIM_TI1_SetConfig+0x5a>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e000      	b.n	8003fe8 <TIM_TI1_SetConfig+0x5c>
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d008      	beq.n	8003ffe <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	f023 0303 	bic.w	r3, r3, #3
 8003ff2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	e003      	b.n	8004006 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f043 0301 	orr.w	r3, r3, #1
 8004004:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800400c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	011b      	lsls	r3, r3, #4
 8004012:	b2db      	uxtb	r3, r3
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	4313      	orrs	r3, r2
 8004018:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f023 030a 	bic.w	r3, r3, #10
 8004020:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	f003 030a 	and.w	r3, r3, #10
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	4313      	orrs	r3, r2
 800402c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	621a      	str	r2, [r3, #32]
}
 800403a:	bf00      	nop
 800403c:	371c      	adds	r7, #28
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40010000 	.word	0x40010000
 800404c:	40000400 	.word	0x40000400
 8004050:	40000800 	.word	0x40000800
 8004054:	40000c00 	.word	0x40000c00
 8004058:	40014000 	.word	0x40014000

0800405c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800405c:	b480      	push	{r7}
 800405e:	b087      	sub	sp, #28
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
 8004068:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	f023 0210 	bic.w	r2, r3, #16
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004088:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	021b      	lsls	r3, r3, #8
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	4313      	orrs	r3, r2
 8004092:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800409a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	031b      	lsls	r3, r3, #12
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040ae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	621a      	str	r2, [r3, #32]
}
 80040ca:	bf00      	nop
 80040cc:	371c      	adds	r7, #28
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b087      	sub	sp, #28
 80040da:	af00      	add	r7, sp, #0
 80040dc:	60f8      	str	r0, [r7, #12]
 80040de:	60b9      	str	r1, [r7, #8]
 80040e0:	607a      	str	r2, [r7, #4]
 80040e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	69db      	ldr	r3, [r3, #28]
 80040f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f023 0303 	bic.w	r3, r3, #3
 8004102:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4313      	orrs	r3, r2
 800410a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004112:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	011b      	lsls	r3, r3, #4
 8004118:	b2db      	uxtb	r3, r3
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	4313      	orrs	r3, r2
 800411e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004126:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	021b      	lsls	r3, r3, #8
 800412c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	4313      	orrs	r3, r2
 8004134:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	621a      	str	r2, [r3, #32]
}
 8004142:	bf00      	nop
 8004144:	371c      	adds	r7, #28
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800414e:	b480      	push	{r7}
 8004150:	b087      	sub	sp, #28
 8004152:	af00      	add	r7, sp, #0
 8004154:	60f8      	str	r0, [r7, #12]
 8004156:	60b9      	str	r1, [r7, #8]
 8004158:	607a      	str	r2, [r7, #4]
 800415a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800417a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	021b      	lsls	r3, r3, #8
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	4313      	orrs	r3, r2
 8004184:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800418c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	031b      	lsls	r3, r3, #12
 8004192:	b29b      	uxth	r3, r3
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	4313      	orrs	r3, r2
 8004198:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80041a0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	031b      	lsls	r3, r3, #12
 80041a6:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	621a      	str	r2, [r3, #32]
}
 80041bc:	bf00      	nop
 80041be:	371c      	adds	r7, #28
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f003 031f 	and.w	r3, r3, #31
 80041da:	2201      	movs	r2, #1
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a1a      	ldr	r2, [r3, #32]
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	43db      	mvns	r3, r3
 80041ea:	401a      	ands	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6a1a      	ldr	r2, [r3, #32]
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f003 031f 	and.w	r3, r3, #31
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004200:	431a      	orrs	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	621a      	str	r2, [r3, #32]
}
 8004206:	bf00      	nop
 8004208:	371c      	adds	r7, #28
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
	...

08004214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004228:	2302      	movs	r3, #2
 800422a:	e050      	b.n	80042ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004252:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a1c      	ldr	r2, [pc, #112]	; (80042dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d018      	beq.n	80042a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004278:	d013      	beq.n	80042a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a18      	ldr	r2, [pc, #96]	; (80042e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d00e      	beq.n	80042a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a16      	ldr	r2, [pc, #88]	; (80042e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d009      	beq.n	80042a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a15      	ldr	r2, [pc, #84]	; (80042e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d004      	beq.n	80042a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a13      	ldr	r2, [pc, #76]	; (80042ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d10c      	bne.n	80042bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	40010000 	.word	0x40010000
 80042e0:	40000400 	.word	0x40000400
 80042e4:	40000800 	.word	0x40000800
 80042e8:	40000c00 	.word	0x40000c00
 80042ec:	40014000 	.word	0x40014000

080042f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e03f      	b.n	80043aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d106      	bne.n	8004344 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7fd ff3c 	bl	80021bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2224      	movs	r2, #36	; 0x24
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800435a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 fddb 	bl	8004f18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	691a      	ldr	r2, [r3, #16]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004370:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	695a      	ldr	r2, [r3, #20]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004380:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68da      	ldr	r2, [r3, #12]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004390:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2220      	movs	r2, #32
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b08a      	sub	sp, #40	; 0x28
 80043b6:	af02      	add	r7, sp, #8
 80043b8:	60f8      	str	r0, [r7, #12]
 80043ba:	60b9      	str	r1, [r7, #8]
 80043bc:	603b      	str	r3, [r7, #0]
 80043be:	4613      	mov	r3, r2
 80043c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043c2:	2300      	movs	r3, #0
 80043c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b20      	cmp	r3, #32
 80043d0:	d17c      	bne.n	80044cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d002      	beq.n	80043de <HAL_UART_Transmit+0x2c>
 80043d8:	88fb      	ldrh	r3, [r7, #6]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e075      	b.n	80044ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d101      	bne.n	80043f0 <HAL_UART_Transmit+0x3e>
 80043ec:	2302      	movs	r3, #2
 80043ee:	e06e      	b.n	80044ce <HAL_UART_Transmit+0x11c>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2221      	movs	r2, #33	; 0x21
 8004402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004406:	f7fe f8fd 	bl	8002604 <HAL_GetTick>
 800440a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	88fa      	ldrh	r2, [r7, #6]
 8004410:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	88fa      	ldrh	r2, [r7, #6]
 8004416:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004420:	d108      	bne.n	8004434 <HAL_UART_Transmit+0x82>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d104      	bne.n	8004434 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800442a:	2300      	movs	r3, #0
 800442c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	61bb      	str	r3, [r7, #24]
 8004432:	e003      	b.n	800443c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004438:	2300      	movs	r3, #0
 800443a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004444:	e02a      	b.n	800449c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2200      	movs	r2, #0
 800444e:	2180      	movs	r1, #128	; 0x80
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 fb1f 	bl	8004a94 <UART_WaitOnFlagUntilTimeout>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e036      	b.n	80044ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10b      	bne.n	800447e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	881b      	ldrh	r3, [r3, #0]
 800446a:	461a      	mov	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004474:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	3302      	adds	r3, #2
 800447a:	61bb      	str	r3, [r7, #24]
 800447c:	e007      	b.n	800448e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	781a      	ldrb	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	3301      	adds	r3, #1
 800448c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004492:	b29b      	uxth	r3, r3
 8004494:	3b01      	subs	r3, #1
 8004496:	b29a      	uxth	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1cf      	bne.n	8004446 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	2200      	movs	r2, #0
 80044ae:	2140      	movs	r1, #64	; 0x40
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 faef 	bl	8004a94 <UART_WaitOnFlagUntilTimeout>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e006      	b.n	80044ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80044c8:	2300      	movs	r3, #0
 80044ca:	e000      	b.n	80044ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80044cc:	2302      	movs	r3, #2
  }
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3720      	adds	r7, #32
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b084      	sub	sp, #16
 80044da:	af00      	add	r7, sp, #0
 80044dc:	60f8      	str	r0, [r7, #12]
 80044de:	60b9      	str	r1, [r7, #8]
 80044e0:	4613      	mov	r3, r2
 80044e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b20      	cmp	r3, #32
 80044ee:	d11d      	bne.n	800452c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d002      	beq.n	80044fc <HAL_UART_Receive_IT+0x26>
 80044f6:	88fb      	ldrh	r3, [r7, #6]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e016      	b.n	800452e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004506:	2b01      	cmp	r3, #1
 8004508:	d101      	bne.n	800450e <HAL_UART_Receive_IT+0x38>
 800450a:	2302      	movs	r3, #2
 800450c:	e00f      	b.n	800452e <HAL_UART_Receive_IT+0x58>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800451c:	88fb      	ldrh	r3, [r7, #6]
 800451e:	461a      	mov	r2, r3
 8004520:	68b9      	ldr	r1, [r7, #8]
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 fb24 	bl	8004b70 <UART_Start_Receive_IT>
 8004528:	4603      	mov	r3, r0
 800452a:	e000      	b.n	800452e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800452c:	2302      	movs	r3, #2
  }
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b0ba      	sub	sp, #232	; 0xe8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800455e:	2300      	movs	r3, #0
 8004560:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004564:	2300      	movs	r3, #0
 8004566:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800456a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004576:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10f      	bne.n	800459e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800457e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004582:	f003 0320 	and.w	r3, r3, #32
 8004586:	2b00      	cmp	r3, #0
 8004588:	d009      	beq.n	800459e <HAL_UART_IRQHandler+0x66>
 800458a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800458e:	f003 0320 	and.w	r3, r3, #32
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fc03 	bl	8004da2 <UART_Receive_IT>
      return;
 800459c:	e256      	b.n	8004a4c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800459e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f000 80de 	beq.w	8004764 <HAL_UART_IRQHandler+0x22c>
 80045a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d106      	bne.n	80045c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 80d1 	beq.w	8004764 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00b      	beq.n	80045e6 <HAL_UART_IRQHandler+0xae>
 80045ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d005      	beq.n	80045e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	f043 0201 	orr.w	r2, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ea:	f003 0304 	and.w	r3, r3, #4
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00b      	beq.n	800460a <HAL_UART_IRQHandler+0xd2>
 80045f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d005      	beq.n	800460a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	f043 0202 	orr.w	r2, r3, #2
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800460a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00b      	beq.n	800462e <HAL_UART_IRQHandler+0xf6>
 8004616:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d005      	beq.n	800462e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	f043 0204 	orr.w	r2, r3, #4
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800462e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004632:	f003 0308 	and.w	r3, r3, #8
 8004636:	2b00      	cmp	r3, #0
 8004638:	d011      	beq.n	800465e <HAL_UART_IRQHandler+0x126>
 800463a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800463e:	f003 0320 	and.w	r3, r3, #32
 8004642:	2b00      	cmp	r3, #0
 8004644:	d105      	bne.n	8004652 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d005      	beq.n	800465e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	f043 0208 	orr.w	r2, r3, #8
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 81ed 	beq.w	8004a42 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800466c:	f003 0320 	and.w	r3, r3, #32
 8004670:	2b00      	cmp	r3, #0
 8004672:	d008      	beq.n	8004686 <HAL_UART_IRQHandler+0x14e>
 8004674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004678:	f003 0320 	and.w	r3, r3, #32
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 fb8e 	bl	8004da2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004690:	2b40      	cmp	r3, #64	; 0x40
 8004692:	bf0c      	ite	eq
 8004694:	2301      	moveq	r3, #1
 8004696:	2300      	movne	r3, #0
 8004698:	b2db      	uxtb	r3, r3
 800469a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d103      	bne.n	80046b2 <HAL_UART_IRQHandler+0x17a>
 80046aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d04f      	beq.n	8004752 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 fa96 	bl	8004be4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c2:	2b40      	cmp	r3, #64	; 0x40
 80046c4:	d141      	bne.n	800474a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	3314      	adds	r3, #20
 80046cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046d4:	e853 3f00 	ldrex	r3, [r3]
 80046d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80046dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3314      	adds	r3, #20
 80046ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80046f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80046f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80046fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004702:	e841 2300 	strex	r3, r2, [r1]
 8004706:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800470a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1d9      	bne.n	80046c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004716:	2b00      	cmp	r3, #0
 8004718:	d013      	beq.n	8004742 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471e:	4a7d      	ldr	r2, [pc, #500]	; (8004914 <HAL_UART_IRQHandler+0x3dc>)
 8004720:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004726:	4618      	mov	r0, r3
 8004728:	f7fe f8ca 	bl	80028c0 <HAL_DMA_Abort_IT>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d016      	beq.n	8004760 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800473c:	4610      	mov	r0, r2
 800473e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004740:	e00e      	b.n	8004760 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f990 	bl	8004a68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004748:	e00a      	b.n	8004760 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f98c 	bl	8004a68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004750:	e006      	b.n	8004760 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f988 	bl	8004a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800475e:	e170      	b.n	8004a42 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004760:	bf00      	nop
    return;
 8004762:	e16e      	b.n	8004a42 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004768:	2b01      	cmp	r3, #1
 800476a:	f040 814a 	bne.w	8004a02 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800476e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004772:	f003 0310 	and.w	r3, r3, #16
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 8143 	beq.w	8004a02 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800477c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004780:	f003 0310 	and.w	r3, r3, #16
 8004784:	2b00      	cmp	r3, #0
 8004786:	f000 813c 	beq.w	8004a02 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800478a:	2300      	movs	r3, #0
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	60bb      	str	r3, [r7, #8]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	60bb      	str	r3, [r7, #8]
 800479e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047aa:	2b40      	cmp	r3, #64	; 0x40
 80047ac:	f040 80b4 	bne.w	8004918 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 8140 	beq.w	8004a46 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047ce:	429a      	cmp	r2, r3
 80047d0:	f080 8139 	bcs.w	8004a46 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047e6:	f000 8088 	beq.w	80048fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	330c      	adds	r3, #12
 80047f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047f8:	e853 3f00 	ldrex	r3, [r3]
 80047fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004800:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004808:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	330c      	adds	r3, #12
 8004812:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004816:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800481a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004822:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004826:	e841 2300 	strex	r3, r2, [r1]
 800482a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800482e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1d9      	bne.n	80047ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	3314      	adds	r3, #20
 800483c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004840:	e853 3f00 	ldrex	r3, [r3]
 8004844:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004846:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004848:	f023 0301 	bic.w	r3, r3, #1
 800484c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	3314      	adds	r3, #20
 8004856:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800485a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800485e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004860:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004862:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004866:	e841 2300 	strex	r3, r2, [r1]
 800486a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800486c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1e1      	bne.n	8004836 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	3314      	adds	r3, #20
 8004878:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800487c:	e853 3f00 	ldrex	r3, [r3]
 8004880:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004882:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004884:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004888:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	3314      	adds	r3, #20
 8004892:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004896:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004898:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800489c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800489e:	e841 2300 	strex	r3, r2, [r1]
 80048a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80048a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1e3      	bne.n	8004872 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2220      	movs	r2, #32
 80048ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	330c      	adds	r3, #12
 80048be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048c2:	e853 3f00 	ldrex	r3, [r3]
 80048c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ca:	f023 0310 	bic.w	r3, r3, #16
 80048ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	330c      	adds	r3, #12
 80048d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80048dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80048de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048e4:	e841 2300 	strex	r3, r2, [r1]
 80048e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1e3      	bne.n	80048b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7fd ff73 	bl	80027e0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004902:	b29b      	uxth	r3, r3
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	b29b      	uxth	r3, r3
 8004908:	4619      	mov	r1, r3
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f8b6 	bl	8004a7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004910:	e099      	b.n	8004a46 <HAL_UART_IRQHandler+0x50e>
 8004912:	bf00      	nop
 8004914:	08004cab 	.word	0x08004cab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004920:	b29b      	uxth	r3, r3
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 808b 	beq.w	8004a4a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004934:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 8086 	beq.w	8004a4a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	330c      	adds	r3, #12
 8004944:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004948:	e853 3f00 	ldrex	r3, [r3]
 800494c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800494e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004950:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004954:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	330c      	adds	r3, #12
 800495e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004962:	647a      	str	r2, [r7, #68]	; 0x44
 8004964:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004966:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004968:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800496a:	e841 2300 	strex	r3, r2, [r1]
 800496e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1e3      	bne.n	800493e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	3314      	adds	r3, #20
 800497c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	e853 3f00 	ldrex	r3, [r3]
 8004984:	623b      	str	r3, [r7, #32]
   return(result);
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	f023 0301 	bic.w	r3, r3, #1
 800498c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	3314      	adds	r3, #20
 8004996:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800499a:	633a      	str	r2, [r7, #48]	; 0x30
 800499c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049a2:	e841 2300 	strex	r3, r2, [r1]
 80049a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1e3      	bne.n	8004976 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2220      	movs	r2, #32
 80049b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	330c      	adds	r3, #12
 80049c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	e853 3f00 	ldrex	r3, [r3]
 80049ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f023 0310 	bic.w	r3, r3, #16
 80049d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	330c      	adds	r3, #12
 80049dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80049e0:	61fa      	str	r2, [r7, #28]
 80049e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e4:	69b9      	ldr	r1, [r7, #24]
 80049e6:	69fa      	ldr	r2, [r7, #28]
 80049e8:	e841 2300 	strex	r3, r2, [r1]
 80049ec:	617b      	str	r3, [r7, #20]
   return(result);
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1e3      	bne.n	80049bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049f8:	4619      	mov	r1, r3
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f83e 	bl	8004a7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a00:	e023      	b.n	8004a4a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d009      	beq.n	8004a22 <HAL_UART_IRQHandler+0x4ea>
 8004a0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f959 	bl	8004cd2 <UART_Transmit_IT>
    return;
 8004a20:	e014      	b.n	8004a4c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00e      	beq.n	8004a4c <HAL_UART_IRQHandler+0x514>
 8004a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d008      	beq.n	8004a4c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f999 	bl	8004d72 <UART_EndTransmit_IT>
    return;
 8004a40:	e004      	b.n	8004a4c <HAL_UART_IRQHandler+0x514>
    return;
 8004a42:	bf00      	nop
 8004a44:	e002      	b.n	8004a4c <HAL_UART_IRQHandler+0x514>
      return;
 8004a46:	bf00      	nop
 8004a48:	e000      	b.n	8004a4c <HAL_UART_IRQHandler+0x514>
      return;
 8004a4a:	bf00      	nop
  }
}
 8004a4c:	37e8      	adds	r7, #232	; 0xe8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop

08004a54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	460b      	mov	r3, r1
 8004a86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b090      	sub	sp, #64	; 0x40
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	603b      	str	r3, [r7, #0]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aa4:	e050      	b.n	8004b48 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aac:	d04c      	beq.n	8004b48 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d007      	beq.n	8004ac4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ab4:	f7fd fda6 	bl	8002604 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d241      	bcs.n	8004b48 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	330c      	adds	r3, #12
 8004aca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ace:	e853 3f00 	ldrex	r3, [r3]
 8004ad2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	330c      	adds	r3, #12
 8004ae2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ae4:	637a      	str	r2, [r7, #52]	; 0x34
 8004ae6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004aea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004aec:	e841 2300 	strex	r3, r2, [r1]
 8004af0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1e5      	bne.n	8004ac4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3314      	adds	r3, #20
 8004afe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	e853 3f00 	ldrex	r3, [r3]
 8004b06:	613b      	str	r3, [r7, #16]
   return(result);
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	f023 0301 	bic.w	r3, r3, #1
 8004b0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3314      	adds	r3, #20
 8004b16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b18:	623a      	str	r2, [r7, #32]
 8004b1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1c:	69f9      	ldr	r1, [r7, #28]
 8004b1e:	6a3a      	ldr	r2, [r7, #32]
 8004b20:	e841 2300 	strex	r3, r2, [r1]
 8004b24:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1e5      	bne.n	8004af8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2220      	movs	r2, #32
 8004b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e00f      	b.n	8004b68 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	4013      	ands	r3, r2
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	bf0c      	ite	eq
 8004b58:	2301      	moveq	r3, #1
 8004b5a:	2300      	movne	r3, #0
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	461a      	mov	r2, r3
 8004b60:	79fb      	ldrb	r3, [r7, #7]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d09f      	beq.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3740      	adds	r7, #64	; 0x40
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	88fa      	ldrh	r2, [r7, #6]
 8004b88:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	88fa      	ldrh	r2, [r7, #6]
 8004b8e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2222      	movs	r2, #34	; 0x22
 8004b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68da      	ldr	r2, [r3, #12]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bb4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695a      	ldr	r2, [r3, #20]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f042 0201 	orr.w	r2, r2, #1
 8004bc4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68da      	ldr	r2, [r3, #12]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f042 0220 	orr.w	r2, r2, #32
 8004bd4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b095      	sub	sp, #84	; 0x54
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	330c      	adds	r3, #12
 8004bf2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf6:	e853 3f00 	ldrex	r3, [r3]
 8004bfa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	330c      	adds	r3, #12
 8004c0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c0c:	643a      	str	r2, [r7, #64]	; 0x40
 8004c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c14:	e841 2300 	strex	r3, r2, [r1]
 8004c18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1e5      	bne.n	8004bec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3314      	adds	r3, #20
 8004c26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c28:	6a3b      	ldr	r3, [r7, #32]
 8004c2a:	e853 3f00 	ldrex	r3, [r3]
 8004c2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	f023 0301 	bic.w	r3, r3, #1
 8004c36:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	3314      	adds	r3, #20
 8004c3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c48:	e841 2300 	strex	r3, r2, [r1]
 8004c4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1e5      	bne.n	8004c20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d119      	bne.n	8004c90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	330c      	adds	r3, #12
 8004c62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	e853 3f00 	ldrex	r3, [r3]
 8004c6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	f023 0310 	bic.w	r3, r3, #16
 8004c72:	647b      	str	r3, [r7, #68]	; 0x44
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	330c      	adds	r3, #12
 8004c7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c7c:	61ba      	str	r2, [r7, #24]
 8004c7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c80:	6979      	ldr	r1, [r7, #20]
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	e841 2300 	strex	r3, r2, [r1]
 8004c88:	613b      	str	r3, [r7, #16]
   return(result);
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1e5      	bne.n	8004c5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c9e:	bf00      	nop
 8004ca0:	3754      	adds	r7, #84	; 0x54
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b084      	sub	sp, #16
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f7ff fecf 	bl	8004a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cca:	bf00      	nop
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b085      	sub	sp, #20
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b21      	cmp	r3, #33	; 0x21
 8004ce4:	d13e      	bne.n	8004d64 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cee:	d114      	bne.n	8004d1a <UART_Transmit_IT+0x48>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d110      	bne.n	8004d1a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	881b      	ldrh	r3, [r3, #0]
 8004d02:	461a      	mov	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d0c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	1c9a      	adds	r2, r3, #2
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	621a      	str	r2, [r3, #32]
 8004d18:	e008      	b.n	8004d2c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	1c59      	adds	r1, r3, #1
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	6211      	str	r1, [r2, #32]
 8004d24:	781a      	ldrb	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	3b01      	subs	r3, #1
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	4619      	mov	r1, r3
 8004d3a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10f      	bne.n	8004d60 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d4e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d5e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d60:	2300      	movs	r3, #0
 8004d62:	e000      	b.n	8004d66 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d64:	2302      	movs	r3, #2
  }
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b082      	sub	sp, #8
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68da      	ldr	r2, [r3, #12]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d88:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7ff fe5e 	bl	8004a54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b08c      	sub	sp, #48	; 0x30
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b22      	cmp	r3, #34	; 0x22
 8004db4:	f040 80ab 	bne.w	8004f0e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc0:	d117      	bne.n	8004df2 <UART_Receive_IT+0x50>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d113      	bne.n	8004df2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dea:	1c9a      	adds	r2, r3, #2
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	629a      	str	r2, [r3, #40]	; 0x28
 8004df0:	e026      	b.n	8004e40 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e04:	d007      	beq.n	8004e16 <UART_Receive_IT+0x74>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10a      	bne.n	8004e24 <UART_Receive_IT+0x82>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d106      	bne.n	8004e24 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e20:	701a      	strb	r2, [r3, #0]
 8004e22:	e008      	b.n	8004e36 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e34:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d15a      	bne.n	8004f0a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68da      	ldr	r2, [r3, #12]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0220 	bic.w	r2, r2, #32
 8004e62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68da      	ldr	r2, [r3, #12]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	695a      	ldr	r2, [r3, #20]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f022 0201 	bic.w	r2, r2, #1
 8004e82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2220      	movs	r2, #32
 8004e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d135      	bne.n	8004f00 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	330c      	adds	r3, #12
 8004ea0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	e853 3f00 	ldrex	r3, [r3]
 8004ea8:	613b      	str	r3, [r7, #16]
   return(result);
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f023 0310 	bic.w	r3, r3, #16
 8004eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	330c      	adds	r3, #12
 8004eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eba:	623a      	str	r2, [r7, #32]
 8004ebc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebe:	69f9      	ldr	r1, [r7, #28]
 8004ec0:	6a3a      	ldr	r2, [r7, #32]
 8004ec2:	e841 2300 	strex	r3, r2, [r1]
 8004ec6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1e5      	bne.n	8004e9a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0310 	and.w	r3, r3, #16
 8004ed8:	2b10      	cmp	r3, #16
 8004eda:	d10a      	bne.n	8004ef2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004edc:	2300      	movs	r3, #0
 8004ede:	60fb      	str	r3, [r7, #12]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7ff fdbf 	bl	8004a7c <HAL_UARTEx_RxEventCallback>
 8004efe:	e002      	b.n	8004f06 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7fc fb65 	bl	80015d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f06:	2300      	movs	r3, #0
 8004f08:	e002      	b.n	8004f10 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	e000      	b.n	8004f10 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004f0e:	2302      	movs	r3, #2
  }
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3730      	adds	r7, #48	; 0x30
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f1c:	b0c0      	sub	sp, #256	; 0x100
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f34:	68d9      	ldr	r1, [r3, #12]
 8004f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	ea40 0301 	orr.w	r3, r0, r1
 8004f40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	431a      	orrs	r2, r3
 8004f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	431a      	orrs	r2, r3
 8004f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f70:	f021 010c 	bic.w	r1, r1, #12
 8004f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f7e:	430b      	orrs	r3, r1
 8004f80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f92:	6999      	ldr	r1, [r3, #24]
 8004f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	ea40 0301 	orr.w	r3, r0, r1
 8004f9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	4b8f      	ldr	r3, [pc, #572]	; (80051e4 <UART_SetConfig+0x2cc>)
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d005      	beq.n	8004fb8 <UART_SetConfig+0xa0>
 8004fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	4b8d      	ldr	r3, [pc, #564]	; (80051e8 <UART_SetConfig+0x2d0>)
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d104      	bne.n	8004fc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fb8:	f7fe faf6 	bl	80035a8 <HAL_RCC_GetPCLK2Freq>
 8004fbc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004fc0:	e003      	b.n	8004fca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fc2:	f7fe fadd 	bl	8003580 <HAL_RCC_GetPCLK1Freq>
 8004fc6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fce:	69db      	ldr	r3, [r3, #28]
 8004fd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fd4:	f040 810c 	bne.w	80051f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004fe2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004fe6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004fea:	4622      	mov	r2, r4
 8004fec:	462b      	mov	r3, r5
 8004fee:	1891      	adds	r1, r2, r2
 8004ff0:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ff2:	415b      	adcs	r3, r3
 8004ff4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ff6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ffa:	4621      	mov	r1, r4
 8004ffc:	eb12 0801 	adds.w	r8, r2, r1
 8005000:	4629      	mov	r1, r5
 8005002:	eb43 0901 	adc.w	r9, r3, r1
 8005006:	f04f 0200 	mov.w	r2, #0
 800500a:	f04f 0300 	mov.w	r3, #0
 800500e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005012:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005016:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800501a:	4690      	mov	r8, r2
 800501c:	4699      	mov	r9, r3
 800501e:	4623      	mov	r3, r4
 8005020:	eb18 0303 	adds.w	r3, r8, r3
 8005024:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005028:	462b      	mov	r3, r5
 800502a:	eb49 0303 	adc.w	r3, r9, r3
 800502e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800503e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005042:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005046:	460b      	mov	r3, r1
 8005048:	18db      	adds	r3, r3, r3
 800504a:	653b      	str	r3, [r7, #80]	; 0x50
 800504c:	4613      	mov	r3, r2
 800504e:	eb42 0303 	adc.w	r3, r2, r3
 8005052:	657b      	str	r3, [r7, #84]	; 0x54
 8005054:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005058:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800505c:	f7fb fddc 	bl	8000c18 <__aeabi_uldivmod>
 8005060:	4602      	mov	r2, r0
 8005062:	460b      	mov	r3, r1
 8005064:	4b61      	ldr	r3, [pc, #388]	; (80051ec <UART_SetConfig+0x2d4>)
 8005066:	fba3 2302 	umull	r2, r3, r3, r2
 800506a:	095b      	lsrs	r3, r3, #5
 800506c:	011c      	lsls	r4, r3, #4
 800506e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005072:	2200      	movs	r2, #0
 8005074:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005078:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800507c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005080:	4642      	mov	r2, r8
 8005082:	464b      	mov	r3, r9
 8005084:	1891      	adds	r1, r2, r2
 8005086:	64b9      	str	r1, [r7, #72]	; 0x48
 8005088:	415b      	adcs	r3, r3
 800508a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800508c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005090:	4641      	mov	r1, r8
 8005092:	eb12 0a01 	adds.w	sl, r2, r1
 8005096:	4649      	mov	r1, r9
 8005098:	eb43 0b01 	adc.w	fp, r3, r1
 800509c:	f04f 0200 	mov.w	r2, #0
 80050a0:	f04f 0300 	mov.w	r3, #0
 80050a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050b0:	4692      	mov	sl, r2
 80050b2:	469b      	mov	fp, r3
 80050b4:	4643      	mov	r3, r8
 80050b6:	eb1a 0303 	adds.w	r3, sl, r3
 80050ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050be:	464b      	mov	r3, r9
 80050c0:	eb4b 0303 	adc.w	r3, fp, r3
 80050c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80050c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80050d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80050dc:	460b      	mov	r3, r1
 80050de:	18db      	adds	r3, r3, r3
 80050e0:	643b      	str	r3, [r7, #64]	; 0x40
 80050e2:	4613      	mov	r3, r2
 80050e4:	eb42 0303 	adc.w	r3, r2, r3
 80050e8:	647b      	str	r3, [r7, #68]	; 0x44
 80050ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80050ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80050f2:	f7fb fd91 	bl	8000c18 <__aeabi_uldivmod>
 80050f6:	4602      	mov	r2, r0
 80050f8:	460b      	mov	r3, r1
 80050fa:	4611      	mov	r1, r2
 80050fc:	4b3b      	ldr	r3, [pc, #236]	; (80051ec <UART_SetConfig+0x2d4>)
 80050fe:	fba3 2301 	umull	r2, r3, r3, r1
 8005102:	095b      	lsrs	r3, r3, #5
 8005104:	2264      	movs	r2, #100	; 0x64
 8005106:	fb02 f303 	mul.w	r3, r2, r3
 800510a:	1acb      	subs	r3, r1, r3
 800510c:	00db      	lsls	r3, r3, #3
 800510e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005112:	4b36      	ldr	r3, [pc, #216]	; (80051ec <UART_SetConfig+0x2d4>)
 8005114:	fba3 2302 	umull	r2, r3, r3, r2
 8005118:	095b      	lsrs	r3, r3, #5
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005120:	441c      	add	r4, r3
 8005122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005126:	2200      	movs	r2, #0
 8005128:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800512c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005130:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005134:	4642      	mov	r2, r8
 8005136:	464b      	mov	r3, r9
 8005138:	1891      	adds	r1, r2, r2
 800513a:	63b9      	str	r1, [r7, #56]	; 0x38
 800513c:	415b      	adcs	r3, r3
 800513e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005140:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005144:	4641      	mov	r1, r8
 8005146:	1851      	adds	r1, r2, r1
 8005148:	6339      	str	r1, [r7, #48]	; 0x30
 800514a:	4649      	mov	r1, r9
 800514c:	414b      	adcs	r3, r1
 800514e:	637b      	str	r3, [r7, #52]	; 0x34
 8005150:	f04f 0200 	mov.w	r2, #0
 8005154:	f04f 0300 	mov.w	r3, #0
 8005158:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800515c:	4659      	mov	r1, fp
 800515e:	00cb      	lsls	r3, r1, #3
 8005160:	4651      	mov	r1, sl
 8005162:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005166:	4651      	mov	r1, sl
 8005168:	00ca      	lsls	r2, r1, #3
 800516a:	4610      	mov	r0, r2
 800516c:	4619      	mov	r1, r3
 800516e:	4603      	mov	r3, r0
 8005170:	4642      	mov	r2, r8
 8005172:	189b      	adds	r3, r3, r2
 8005174:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005178:	464b      	mov	r3, r9
 800517a:	460a      	mov	r2, r1
 800517c:	eb42 0303 	adc.w	r3, r2, r3
 8005180:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005190:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005194:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005198:	460b      	mov	r3, r1
 800519a:	18db      	adds	r3, r3, r3
 800519c:	62bb      	str	r3, [r7, #40]	; 0x28
 800519e:	4613      	mov	r3, r2
 80051a0:	eb42 0303 	adc.w	r3, r2, r3
 80051a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80051ae:	f7fb fd33 	bl	8000c18 <__aeabi_uldivmod>
 80051b2:	4602      	mov	r2, r0
 80051b4:	460b      	mov	r3, r1
 80051b6:	4b0d      	ldr	r3, [pc, #52]	; (80051ec <UART_SetConfig+0x2d4>)
 80051b8:	fba3 1302 	umull	r1, r3, r3, r2
 80051bc:	095b      	lsrs	r3, r3, #5
 80051be:	2164      	movs	r1, #100	; 0x64
 80051c0:	fb01 f303 	mul.w	r3, r1, r3
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	3332      	adds	r3, #50	; 0x32
 80051ca:	4a08      	ldr	r2, [pc, #32]	; (80051ec <UART_SetConfig+0x2d4>)
 80051cc:	fba2 2303 	umull	r2, r3, r2, r3
 80051d0:	095b      	lsrs	r3, r3, #5
 80051d2:	f003 0207 	and.w	r2, r3, #7
 80051d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4422      	add	r2, r4
 80051de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051e0:	e105      	b.n	80053ee <UART_SetConfig+0x4d6>
 80051e2:	bf00      	nop
 80051e4:	40011000 	.word	0x40011000
 80051e8:	40011400 	.word	0x40011400
 80051ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051f4:	2200      	movs	r2, #0
 80051f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80051fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80051fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005202:	4642      	mov	r2, r8
 8005204:	464b      	mov	r3, r9
 8005206:	1891      	adds	r1, r2, r2
 8005208:	6239      	str	r1, [r7, #32]
 800520a:	415b      	adcs	r3, r3
 800520c:	627b      	str	r3, [r7, #36]	; 0x24
 800520e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005212:	4641      	mov	r1, r8
 8005214:	1854      	adds	r4, r2, r1
 8005216:	4649      	mov	r1, r9
 8005218:	eb43 0501 	adc.w	r5, r3, r1
 800521c:	f04f 0200 	mov.w	r2, #0
 8005220:	f04f 0300 	mov.w	r3, #0
 8005224:	00eb      	lsls	r3, r5, #3
 8005226:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800522a:	00e2      	lsls	r2, r4, #3
 800522c:	4614      	mov	r4, r2
 800522e:	461d      	mov	r5, r3
 8005230:	4643      	mov	r3, r8
 8005232:	18e3      	adds	r3, r4, r3
 8005234:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005238:	464b      	mov	r3, r9
 800523a:	eb45 0303 	adc.w	r3, r5, r3
 800523e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800524e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005252:	f04f 0200 	mov.w	r2, #0
 8005256:	f04f 0300 	mov.w	r3, #0
 800525a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800525e:	4629      	mov	r1, r5
 8005260:	008b      	lsls	r3, r1, #2
 8005262:	4621      	mov	r1, r4
 8005264:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005268:	4621      	mov	r1, r4
 800526a:	008a      	lsls	r2, r1, #2
 800526c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005270:	f7fb fcd2 	bl	8000c18 <__aeabi_uldivmod>
 8005274:	4602      	mov	r2, r0
 8005276:	460b      	mov	r3, r1
 8005278:	4b60      	ldr	r3, [pc, #384]	; (80053fc <UART_SetConfig+0x4e4>)
 800527a:	fba3 2302 	umull	r2, r3, r3, r2
 800527e:	095b      	lsrs	r3, r3, #5
 8005280:	011c      	lsls	r4, r3, #4
 8005282:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005286:	2200      	movs	r2, #0
 8005288:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800528c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005290:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005294:	4642      	mov	r2, r8
 8005296:	464b      	mov	r3, r9
 8005298:	1891      	adds	r1, r2, r2
 800529a:	61b9      	str	r1, [r7, #24]
 800529c:	415b      	adcs	r3, r3
 800529e:	61fb      	str	r3, [r7, #28]
 80052a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052a4:	4641      	mov	r1, r8
 80052a6:	1851      	adds	r1, r2, r1
 80052a8:	6139      	str	r1, [r7, #16]
 80052aa:	4649      	mov	r1, r9
 80052ac:	414b      	adcs	r3, r1
 80052ae:	617b      	str	r3, [r7, #20]
 80052b0:	f04f 0200 	mov.w	r2, #0
 80052b4:	f04f 0300 	mov.w	r3, #0
 80052b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052bc:	4659      	mov	r1, fp
 80052be:	00cb      	lsls	r3, r1, #3
 80052c0:	4651      	mov	r1, sl
 80052c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052c6:	4651      	mov	r1, sl
 80052c8:	00ca      	lsls	r2, r1, #3
 80052ca:	4610      	mov	r0, r2
 80052cc:	4619      	mov	r1, r3
 80052ce:	4603      	mov	r3, r0
 80052d0:	4642      	mov	r2, r8
 80052d2:	189b      	adds	r3, r3, r2
 80052d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052d8:	464b      	mov	r3, r9
 80052da:	460a      	mov	r2, r1
 80052dc:	eb42 0303 	adc.w	r3, r2, r3
 80052e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80052ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80052f0:	f04f 0200 	mov.w	r2, #0
 80052f4:	f04f 0300 	mov.w	r3, #0
 80052f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80052fc:	4649      	mov	r1, r9
 80052fe:	008b      	lsls	r3, r1, #2
 8005300:	4641      	mov	r1, r8
 8005302:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005306:	4641      	mov	r1, r8
 8005308:	008a      	lsls	r2, r1, #2
 800530a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800530e:	f7fb fc83 	bl	8000c18 <__aeabi_uldivmod>
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	4b39      	ldr	r3, [pc, #228]	; (80053fc <UART_SetConfig+0x4e4>)
 8005318:	fba3 1302 	umull	r1, r3, r3, r2
 800531c:	095b      	lsrs	r3, r3, #5
 800531e:	2164      	movs	r1, #100	; 0x64
 8005320:	fb01 f303 	mul.w	r3, r1, r3
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	011b      	lsls	r3, r3, #4
 8005328:	3332      	adds	r3, #50	; 0x32
 800532a:	4a34      	ldr	r2, [pc, #208]	; (80053fc <UART_SetConfig+0x4e4>)
 800532c:	fba2 2303 	umull	r2, r3, r2, r3
 8005330:	095b      	lsrs	r3, r3, #5
 8005332:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005336:	441c      	add	r4, r3
 8005338:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800533c:	2200      	movs	r2, #0
 800533e:	673b      	str	r3, [r7, #112]	; 0x70
 8005340:	677a      	str	r2, [r7, #116]	; 0x74
 8005342:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005346:	4642      	mov	r2, r8
 8005348:	464b      	mov	r3, r9
 800534a:	1891      	adds	r1, r2, r2
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	415b      	adcs	r3, r3
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005356:	4641      	mov	r1, r8
 8005358:	1851      	adds	r1, r2, r1
 800535a:	6039      	str	r1, [r7, #0]
 800535c:	4649      	mov	r1, r9
 800535e:	414b      	adcs	r3, r1
 8005360:	607b      	str	r3, [r7, #4]
 8005362:	f04f 0200 	mov.w	r2, #0
 8005366:	f04f 0300 	mov.w	r3, #0
 800536a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800536e:	4659      	mov	r1, fp
 8005370:	00cb      	lsls	r3, r1, #3
 8005372:	4651      	mov	r1, sl
 8005374:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005378:	4651      	mov	r1, sl
 800537a:	00ca      	lsls	r2, r1, #3
 800537c:	4610      	mov	r0, r2
 800537e:	4619      	mov	r1, r3
 8005380:	4603      	mov	r3, r0
 8005382:	4642      	mov	r2, r8
 8005384:	189b      	adds	r3, r3, r2
 8005386:	66bb      	str	r3, [r7, #104]	; 0x68
 8005388:	464b      	mov	r3, r9
 800538a:	460a      	mov	r2, r1
 800538c:	eb42 0303 	adc.w	r3, r2, r3
 8005390:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	663b      	str	r3, [r7, #96]	; 0x60
 800539c:	667a      	str	r2, [r7, #100]	; 0x64
 800539e:	f04f 0200 	mov.w	r2, #0
 80053a2:	f04f 0300 	mov.w	r3, #0
 80053a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80053aa:	4649      	mov	r1, r9
 80053ac:	008b      	lsls	r3, r1, #2
 80053ae:	4641      	mov	r1, r8
 80053b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053b4:	4641      	mov	r1, r8
 80053b6:	008a      	lsls	r2, r1, #2
 80053b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80053bc:	f7fb fc2c 	bl	8000c18 <__aeabi_uldivmod>
 80053c0:	4602      	mov	r2, r0
 80053c2:	460b      	mov	r3, r1
 80053c4:	4b0d      	ldr	r3, [pc, #52]	; (80053fc <UART_SetConfig+0x4e4>)
 80053c6:	fba3 1302 	umull	r1, r3, r3, r2
 80053ca:	095b      	lsrs	r3, r3, #5
 80053cc:	2164      	movs	r1, #100	; 0x64
 80053ce:	fb01 f303 	mul.w	r3, r1, r3
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	011b      	lsls	r3, r3, #4
 80053d6:	3332      	adds	r3, #50	; 0x32
 80053d8:	4a08      	ldr	r2, [pc, #32]	; (80053fc <UART_SetConfig+0x4e4>)
 80053da:	fba2 2303 	umull	r2, r3, r2, r3
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	f003 020f 	and.w	r2, r3, #15
 80053e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4422      	add	r2, r4
 80053ec:	609a      	str	r2, [r3, #8]
}
 80053ee:	bf00      	nop
 80053f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80053f4:	46bd      	mov	sp, r7
 80053f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053fa:	bf00      	nop
 80053fc:	51eb851f 	.word	0x51eb851f

08005400 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	4603      	mov	r3, r0
 8005408:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800540a:	2300      	movs	r3, #0
 800540c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800540e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005412:	2b84      	cmp	r3, #132	; 0x84
 8005414:	d005      	beq.n	8005422 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005416:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	4413      	add	r3, r2
 800541e:	3303      	adds	r3, #3
 8005420:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005422:	68fb      	ldr	r3, [r7, #12]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005436:	f3ef 8305 	mrs	r3, IPSR
 800543a:	607b      	str	r3, [r7, #4]
  return(result);
 800543c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800543e:	2b00      	cmp	r3, #0
 8005440:	bf14      	ite	ne
 8005442:	2301      	movne	r3, #1
 8005444:	2300      	moveq	r3, #0
 8005446:	b2db      	uxtb	r3, r3
}
 8005448:	4618      	mov	r0, r3
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005458:	f001 fd88 	bl	8006f6c <vTaskStartScheduler>
  
  return osOK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	bd80      	pop	{r7, pc}

08005462 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005466:	f7ff ffe3 	bl	8005430 <inHandlerMode>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d003      	beq.n	8005478 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005470:	f001 fe96 	bl	80071a0 <xTaskGetTickCountFromISR>
 8005474:	4603      	mov	r3, r0
 8005476:	e002      	b.n	800547e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005478:	f001 fe82 	bl	8007180 <xTaskGetTickCount>
 800547c:	4603      	mov	r3, r0
  }
}
 800547e:	4618      	mov	r0, r3
 8005480:	bd80      	pop	{r7, pc}

08005482 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005482:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005484:	b089      	sub	sp, #36	; 0x24
 8005486:	af04      	add	r7, sp, #16
 8005488:	6078      	str	r0, [r7, #4]
 800548a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d020      	beq.n	80054d6 <osThreadCreate+0x54>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d01c      	beq.n	80054d6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685c      	ldr	r4, [r3, #4]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681d      	ldr	r5, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	691e      	ldr	r6, [r3, #16]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7ff ffa6 	bl	8005400 <makeFreeRtosPriority>
 80054b4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054be:	9202      	str	r2, [sp, #8]
 80054c0:	9301      	str	r3, [sp, #4]
 80054c2:	9100      	str	r1, [sp, #0]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	4632      	mov	r2, r6
 80054c8:	4629      	mov	r1, r5
 80054ca:	4620      	mov	r0, r4
 80054cc:	f001 faf4 	bl	8006ab8 <xTaskCreateStatic>
 80054d0:	4603      	mov	r3, r0
 80054d2:	60fb      	str	r3, [r7, #12]
 80054d4:	e01c      	b.n	8005510 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685c      	ldr	r4, [r3, #4]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054e2:	b29e      	uxth	r6, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7ff ff88 	bl	8005400 <makeFreeRtosPriority>
 80054f0:	4602      	mov	r2, r0
 80054f2:	f107 030c 	add.w	r3, r7, #12
 80054f6:	9301      	str	r3, [sp, #4]
 80054f8:	9200      	str	r2, [sp, #0]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	4632      	mov	r2, r6
 80054fe:	4629      	mov	r1, r5
 8005500:	4620      	mov	r0, r4
 8005502:	f001 fb36 	bl	8006b72 <xTaskCreate>
 8005506:	4603      	mov	r3, r0
 8005508:	2b01      	cmp	r3, #1
 800550a:	d001      	beq.n	8005510 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800550c:	2300      	movs	r3, #0
 800550e:	e000      	b.n	8005512 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005510:	68fb      	ldr	r3, [r7, #12]
}
 8005512:	4618      	mov	r0, r3
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800551a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b084      	sub	sp, #16
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d001      	beq.n	8005530 <osDelay+0x16>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	e000      	b.n	8005532 <osDelay+0x18>
 8005530:	2301      	movs	r3, #1
 8005532:	4618      	mov	r0, r3
 8005534:	f001 fc54 	bl	8006de0 <vTaskDelay>
  
  return osOK;
 8005538:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
	...

08005544 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af02      	add	r7, sp, #8
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800554e:	2300      	movs	r3, #0
 8005550:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8005552:	2300      	movs	r3, #0
 8005554:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8005556:	f7ff ff6b 	bl	8005430 <inHandlerMode>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d01c      	beq.n	800559a <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8005560:	6839      	ldr	r1, [r7, #0]
 8005562:	f107 0208 	add.w	r2, r7, #8
 8005566:	f107 030c 	add.w	r3, r7, #12
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	4613      	mov	r3, r2
 800556e:	2201      	movs	r2, #1
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f002 fbe7 	bl	8007d44 <xTaskGenericNotifyFromISR>
 8005576:	4603      	mov	r3, r0
 8005578:	2b01      	cmp	r3, #1
 800557a:	d002      	beq.n	8005582 <osSignalSet+0x3e>
      return 0x80000000;
 800557c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005580:	e019      	b.n	80055b6 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d015      	beq.n	80055b4 <osSignalSet+0x70>
 8005588:	4b0d      	ldr	r3, [pc, #52]	; (80055c0 <osSignalSet+0x7c>)
 800558a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	f3bf 8f6f 	isb	sy
 8005598:	e00c      	b.n	80055b4 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800559a:	6839      	ldr	r1, [r7, #0]
 800559c:	f107 0308 	add.w	r3, r7, #8
 80055a0:	2201      	movs	r2, #1
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f002 fb18 	bl	8007bd8 <xTaskGenericNotify>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d002      	beq.n	80055b4 <osSignalSet+0x70>
    return 0x80000000;
 80055ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80055b2:	e000      	b.n	80055b6 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 80055b4:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	e000ed04 	.word	0xe000ed04

080055c4 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 80055c4:	b590      	push	{r4, r7, lr}
 80055c6:	b089      	sub	sp, #36	; 0x24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80055d0:	2300      	movs	r3, #0
 80055d2:	617b      	str	r3, [r7, #20]
  ticks = 0;
 80055d4:	2300      	movs	r3, #0
 80055d6:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055de:	d103      	bne.n	80055e8 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 80055e0:	f04f 33ff 	mov.w	r3, #4294967295
 80055e4:	61fb      	str	r3, [r7, #28]
 80055e6:	e009      	b.n	80055fc <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d006      	beq.n	80055fc <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <osSignalWait+0x38>
      ticks = 1;
 80055f8:	2301      	movs	r3, #1
 80055fa:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 80055fc:	f7ff ff18 	bl	8005430 <inHandlerMode>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d002      	beq.n	800560c <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8005606:	2382      	movs	r3, #130	; 0x82
 8005608:	613b      	str	r3, [r7, #16]
 800560a:	e01b      	b.n	8005644 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800560c:	68b9      	ldr	r1, [r7, #8]
 800560e:	f107 0310 	add.w	r3, r7, #16
 8005612:	1d1a      	adds	r2, r3, #4
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	2000      	movs	r0, #0
 8005618:	f002 fa84 	bl	8007b24 <xTaskNotifyWait>
 800561c:	4603      	mov	r3, r0
 800561e:	2b01      	cmp	r3, #1
 8005620:	d008      	beq.n	8005634 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d102      	bne.n	800562e <osSignalWait+0x6a>
 8005628:	2300      	movs	r3, #0
 800562a:	613b      	str	r3, [r7, #16]
 800562c:	e00a      	b.n	8005644 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800562e:	2340      	movs	r3, #64	; 0x40
 8005630:	613b      	str	r3, [r7, #16]
 8005632:	e007      	b.n	8005644 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	2b00      	cmp	r3, #0
 8005638:	da02      	bge.n	8005640 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800563a:	2386      	movs	r3, #134	; 0x86
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	e001      	b.n	8005644 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8005640:	2308      	movs	r3, #8
 8005642:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	461c      	mov	r4, r3
 8005648:	f107 0310 	add.w	r3, r7, #16
 800564c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005650:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	3724      	adds	r7, #36	; 0x24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd90      	pop	{r4, r7, pc}

0800565c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d007      	beq.n	800567c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	4619      	mov	r1, r3
 8005672:	2001      	movs	r0, #1
 8005674:	f000 fc4b 	bl	8005f0e <xQueueCreateMutexStatic>
 8005678:	4603      	mov	r3, r0
 800567a:	e003      	b.n	8005684 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800567c:	2001      	movs	r0, #1
 800567e:	f000 fc2e 	bl	8005ede <xQueueCreateMutex>
 8005682:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005684:	4618      	mov	r0, r3
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005696:	2300      	movs	r3, #0
 8005698:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <osMutexWait+0x18>
    return osErrorParameter;
 80056a0:	2380      	movs	r3, #128	; 0x80
 80056a2:	e03a      	b.n	800571a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80056a4:	2300      	movs	r3, #0
 80056a6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ae:	d103      	bne.n	80056b8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80056b0:	f04f 33ff 	mov.w	r3, #4294967295
 80056b4:	60fb      	str	r3, [r7, #12]
 80056b6:	e009      	b.n	80056cc <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d006      	beq.n	80056cc <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d101      	bne.n	80056cc <osMutexWait+0x40>
      ticks = 1;
 80056c8:	2301      	movs	r3, #1
 80056ca:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80056cc:	f7ff feb0 	bl	8005430 <inHandlerMode>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d017      	beq.n	8005706 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80056d6:	f107 0308 	add.w	r3, r7, #8
 80056da:	461a      	mov	r2, r3
 80056dc:	2100      	movs	r1, #0
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f001 f842 	bl	8006768 <xQueueReceiveFromISR>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d001      	beq.n	80056ee <osMutexWait+0x62>
      return osErrorOS;
 80056ea:	23ff      	movs	r3, #255	; 0xff
 80056ec:	e015      	b.n	800571a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d011      	beq.n	8005718 <osMutexWait+0x8c>
 80056f4:	4b0b      	ldr	r3, [pc, #44]	; (8005724 <osMutexWait+0x98>)
 80056f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	e008      	b.n	8005718 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005706:	68f9      	ldr	r1, [r7, #12]
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 ff21 	bl	8006550 <xQueueSemaphoreTake>
 800570e:	4603      	mov	r3, r0
 8005710:	2b01      	cmp	r3, #1
 8005712:	d001      	beq.n	8005718 <osMutexWait+0x8c>
    return osErrorOS;
 8005714:	23ff      	movs	r3, #255	; 0xff
 8005716:	e000      	b.n	800571a <osMutexWait+0x8e>
  }
  
  return osOK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	e000ed04 	.word	0xe000ed04

08005728 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005730:	2300      	movs	r3, #0
 8005732:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005734:	2300      	movs	r3, #0
 8005736:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005738:	f7ff fe7a 	bl	8005430 <inHandlerMode>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d016      	beq.n	8005770 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005742:	f107 0308 	add.w	r3, r7, #8
 8005746:	4619      	mov	r1, r3
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 fd94 	bl	8006276 <xQueueGiveFromISR>
 800574e:	4603      	mov	r3, r0
 8005750:	2b01      	cmp	r3, #1
 8005752:	d001      	beq.n	8005758 <osMutexRelease+0x30>
      return osErrorOS;
 8005754:	23ff      	movs	r3, #255	; 0xff
 8005756:	e017      	b.n	8005788 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d013      	beq.n	8005786 <osMutexRelease+0x5e>
 800575e:	4b0c      	ldr	r3, [pc, #48]	; (8005790 <osMutexRelease+0x68>)
 8005760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005764:	601a      	str	r2, [r3, #0]
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	e00a      	b.n	8005786 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005770:	2300      	movs	r3, #0
 8005772:	2200      	movs	r2, #0
 8005774:	2100      	movs	r1, #0
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 fbe4 	bl	8005f44 <xQueueGenericSend>
 800577c:	4603      	mov	r3, r0
 800577e:	2b01      	cmp	r3, #1
 8005780:	d001      	beq.n	8005786 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005782:	23ff      	movs	r3, #255	; 0xff
 8005784:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005786:	68fb      	ldr	r3, [r7, #12]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	e000ed04 	.word	0xe000ed04

08005794 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af02      	add	r7, sp, #8
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00f      	beq.n	80057c6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d10a      	bne.n	80057c2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	2203      	movs	r2, #3
 80057b2:	9200      	str	r2, [sp, #0]
 80057b4:	2200      	movs	r2, #0
 80057b6:	2100      	movs	r1, #0
 80057b8:	2001      	movs	r0, #1
 80057ba:	f000 faa5 	bl	8005d08 <xQueueGenericCreateStatic>
 80057be:	4603      	mov	r3, r0
 80057c0:	e016      	b.n	80057f0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80057c2:	2300      	movs	r3, #0
 80057c4:	e014      	b.n	80057f0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d110      	bne.n	80057ee <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80057cc:	2203      	movs	r2, #3
 80057ce:	2100      	movs	r1, #0
 80057d0:	2001      	movs	r0, #1
 80057d2:	f000 fb11 	bl	8005df8 <xQueueGenericCreate>
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d005      	beq.n	80057ea <osSemaphoreCreate+0x56>
 80057de:	2300      	movs	r3, #0
 80057e0:	2200      	movs	r2, #0
 80057e2:	2100      	movs	r1, #0
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 fbad 	bl	8005f44 <xQueueGenericSend>
      return sema;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	e000      	b.n	80057f0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80057ee:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005802:	2300      	movs	r3, #0
 8005804:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d101      	bne.n	8005810 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800580c:	2380      	movs	r3, #128	; 0x80
 800580e:	e03a      	b.n	8005886 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005810:	2300      	movs	r3, #0
 8005812:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581a:	d103      	bne.n	8005824 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800581c:	f04f 33ff 	mov.w	r3, #4294967295
 8005820:	60fb      	str	r3, [r7, #12]
 8005822:	e009      	b.n	8005838 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d006      	beq.n	8005838 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <osSemaphoreWait+0x40>
      ticks = 1;
 8005834:	2301      	movs	r3, #1
 8005836:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005838:	f7ff fdfa 	bl	8005430 <inHandlerMode>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d017      	beq.n	8005872 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005842:	f107 0308 	add.w	r3, r7, #8
 8005846:	461a      	mov	r2, r3
 8005848:	2100      	movs	r1, #0
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 ff8c 	bl	8006768 <xQueueReceiveFromISR>
 8005850:	4603      	mov	r3, r0
 8005852:	2b01      	cmp	r3, #1
 8005854:	d001      	beq.n	800585a <osSemaphoreWait+0x62>
      return osErrorOS;
 8005856:	23ff      	movs	r3, #255	; 0xff
 8005858:	e015      	b.n	8005886 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d011      	beq.n	8005884 <osSemaphoreWait+0x8c>
 8005860:	4b0b      	ldr	r3, [pc, #44]	; (8005890 <osSemaphoreWait+0x98>)
 8005862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	f3bf 8f4f 	dsb	sy
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	e008      	b.n	8005884 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005872:	68f9      	ldr	r1, [r7, #12]
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 fe6b 	bl	8006550 <xQueueSemaphoreTake>
 800587a:	4603      	mov	r3, r0
 800587c:	2b01      	cmp	r3, #1
 800587e:	d001      	beq.n	8005884 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005880:	23ff      	movs	r3, #255	; 0xff
 8005882:	e000      	b.n	8005886 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	e000ed04 	.word	0xe000ed04

08005894 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800589c:	2300      	movs	r3, #0
 800589e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80058a0:	2300      	movs	r3, #0
 80058a2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80058a4:	f7ff fdc4 	bl	8005430 <inHandlerMode>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d016      	beq.n	80058dc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80058ae:	f107 0308 	add.w	r3, r7, #8
 80058b2:	4619      	mov	r1, r3
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 fcde 	bl	8006276 <xQueueGiveFromISR>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d001      	beq.n	80058c4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80058c0:	23ff      	movs	r3, #255	; 0xff
 80058c2:	e017      	b.n	80058f4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d013      	beq.n	80058f2 <osSemaphoreRelease+0x5e>
 80058ca:	4b0c      	ldr	r3, [pc, #48]	; (80058fc <osSemaphoreRelease+0x68>)
 80058cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	f3bf 8f4f 	dsb	sy
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	e00a      	b.n	80058f2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80058dc:	2300      	movs	r3, #0
 80058de:	2200      	movs	r2, #0
 80058e0:	2100      	movs	r1, #0
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 fb2e 	bl	8005f44 <xQueueGenericSend>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d001      	beq.n	80058f2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80058ee:	23ff      	movs	r3, #255	; 0xff
 80058f0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80058f2:	68fb      	ldr	r3, [r7, #12]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	e000ed04 	.word	0xe000ed04

08005900 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005900:	b590      	push	{r4, r7, lr}
 8005902:	b085      	sub	sp, #20
 8005904:	af02      	add	r7, sp, #8
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d011      	beq.n	8005936 <osMessageCreate+0x36>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00d      	beq.n	8005936 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6818      	ldr	r0, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6859      	ldr	r1, [r3, #4]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689a      	ldr	r2, [r3, #8]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	2400      	movs	r4, #0
 800592c:	9400      	str	r4, [sp, #0]
 800592e:	f000 f9eb 	bl	8005d08 <xQueueGenericCreateStatic>
 8005932:	4603      	mov	r3, r0
 8005934:	e008      	b.n	8005948 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6818      	ldr	r0, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	4619      	mov	r1, r3
 8005942:	f000 fa59 	bl	8005df8 <xQueueGenericCreate>
 8005946:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005948:	4618      	mov	r0, r3
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	bd90      	pop	{r4, r7, pc}

08005950 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800595c:	2300      	movs	r3, #0
 800595e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <osMessagePut+0x1e>
    ticks = 1;
 800596a:	2301      	movs	r3, #1
 800596c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800596e:	f7ff fd5f 	bl	8005430 <inHandlerMode>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d018      	beq.n	80059aa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005978:	f107 0210 	add.w	r2, r7, #16
 800597c:	f107 0108 	add.w	r1, r7, #8
 8005980:	2300      	movs	r3, #0
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 fbdc 	bl	8006140 <xQueueGenericSendFromISR>
 8005988:	4603      	mov	r3, r0
 800598a:	2b01      	cmp	r3, #1
 800598c:	d001      	beq.n	8005992 <osMessagePut+0x42>
      return osErrorOS;
 800598e:	23ff      	movs	r3, #255	; 0xff
 8005990:	e018      	b.n	80059c4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d014      	beq.n	80059c2 <osMessagePut+0x72>
 8005998:	4b0c      	ldr	r3, [pc, #48]	; (80059cc <osMessagePut+0x7c>)
 800599a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800599e:	601a      	str	r2, [r3, #0]
 80059a0:	f3bf 8f4f 	dsb	sy
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	e00b      	b.n	80059c2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80059aa:	f107 0108 	add.w	r1, r7, #8
 80059ae:	2300      	movs	r3, #0
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f000 fac6 	bl	8005f44 <xQueueGenericSend>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d001      	beq.n	80059c2 <osMessagePut+0x72>
      return osErrorOS;
 80059be:	23ff      	movs	r3, #255	; 0xff
 80059c0:	e000      	b.n	80059c4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3718      	adds	r7, #24
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	e000ed04 	.word	0xe000ed04

080059d0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80059d0:	b590      	push	{r4, r7, lr}
 80059d2:	b08b      	sub	sp, #44	; 0x2c
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80059e0:	2300      	movs	r3, #0
 80059e2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10a      	bne.n	8005a00 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80059ea:	2380      	movs	r3, #128	; 0x80
 80059ec:	617b      	str	r3, [r7, #20]
    return event;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	461c      	mov	r4, r3
 80059f2:	f107 0314 	add.w	r3, r7, #20
 80059f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80059fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80059fe:	e054      	b.n	8005aaa <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005a00:	2300      	movs	r3, #0
 8005a02:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005a04:	2300      	movs	r3, #0
 8005a06:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0e:	d103      	bne.n	8005a18 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005a10:	f04f 33ff 	mov.w	r3, #4294967295
 8005a14:	627b      	str	r3, [r7, #36]	; 0x24
 8005a16:	e009      	b.n	8005a2c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d006      	beq.n	8005a2c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d101      	bne.n	8005a2c <osMessageGet+0x5c>
      ticks = 1;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005a2c:	f7ff fd00 	bl	8005430 <inHandlerMode>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d01c      	beq.n	8005a70 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005a36:	f107 0220 	add.w	r2, r7, #32
 8005a3a:	f107 0314 	add.w	r3, r7, #20
 8005a3e:	3304      	adds	r3, #4
 8005a40:	4619      	mov	r1, r3
 8005a42:	68b8      	ldr	r0, [r7, #8]
 8005a44:	f000 fe90 	bl	8006768 <xQueueReceiveFromISR>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d102      	bne.n	8005a54 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005a4e:	2310      	movs	r3, #16
 8005a50:	617b      	str	r3, [r7, #20]
 8005a52:	e001      	b.n	8005a58 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005a54:	2300      	movs	r3, #0
 8005a56:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d01d      	beq.n	8005a9a <osMessageGet+0xca>
 8005a5e:	4b15      	ldr	r3, [pc, #84]	; (8005ab4 <osMessageGet+0xe4>)
 8005a60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a64:	601a      	str	r2, [r3, #0]
 8005a66:	f3bf 8f4f 	dsb	sy
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	e014      	b.n	8005a9a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005a70:	f107 0314 	add.w	r3, r7, #20
 8005a74:	3304      	adds	r3, #4
 8005a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a78:	4619      	mov	r1, r3
 8005a7a:	68b8      	ldr	r0, [r7, #8]
 8005a7c:	f000 fc88 	bl	8006390 <xQueueReceive>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d102      	bne.n	8005a8c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005a86:	2310      	movs	r3, #16
 8005a88:	617b      	str	r3, [r7, #20]
 8005a8a:	e006      	b.n	8005a9a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <osMessageGet+0xc6>
 8005a92:	2300      	movs	r3, #0
 8005a94:	e000      	b.n	8005a98 <osMessageGet+0xc8>
 8005a96:	2340      	movs	r3, #64	; 0x40
 8005a98:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	461c      	mov	r4, r3
 8005a9e:	f107 0314 	add.w	r3, r7, #20
 8005aa2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005aa6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	372c      	adds	r7, #44	; 0x2c
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd90      	pop	{r4, r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	e000ed04 	.word	0xe000ed04

08005ab8 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f001 f9c1 	bl	8006e48 <vTaskSuspend>
  
  return osOK;
 8005ac6:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3708      	adds	r7, #8
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f103 0208 	add.w	r2, r3, #8
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ae8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f103 0208 	add.w	r2, r3, #8
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f103 0208 	add.w	r2, r3, #8
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b1e:	bf00      	nop
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b085      	sub	sp, #20
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
 8005b32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	689a      	ldr	r2, [r3, #8]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	1c5a      	adds	r2, r3, #1
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	601a      	str	r2, [r3, #0]
}
 8005b66:	bf00      	nop
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b72:	b480      	push	{r7}
 8005b74:	b085      	sub	sp, #20
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
 8005b7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b88:	d103      	bne.n	8005b92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	60fb      	str	r3, [r7, #12]
 8005b90:	e00c      	b.n	8005bac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	3308      	adds	r3, #8
 8005b96:	60fb      	str	r3, [r7, #12]
 8005b98:	e002      	b.n	8005ba0 <vListInsert+0x2e>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d2f6      	bcs.n	8005b9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	683a      	ldr	r2, [r7, #0]
 8005bba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	1c5a      	adds	r2, r3, #1
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	601a      	str	r2, [r3, #0]
}
 8005bd8:	bf00      	nop
 8005bda:	3714      	adds	r7, #20
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	6892      	ldr	r2, [r2, #8]
 8005bfa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	6852      	ldr	r2, [r2, #4]
 8005c04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d103      	bne.n	8005c18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	1e5a      	subs	r2, r3, #1
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10a      	bne.n	8005c62 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c50:	f383 8811 	msr	BASEPRI, r3
 8005c54:	f3bf 8f6f 	isb	sy
 8005c58:	f3bf 8f4f 	dsb	sy
 8005c5c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005c5e:	bf00      	nop
 8005c60:	e7fe      	b.n	8005c60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005c62:	f002 fadf 	bl	8008224 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6e:	68f9      	ldr	r1, [r7, #12]
 8005c70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c72:	fb01 f303 	mul.w	r3, r1, r3
 8005c76:	441a      	add	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c92:	3b01      	subs	r3, #1
 8005c94:	68f9      	ldr	r1, [r7, #12]
 8005c96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c98:	fb01 f303 	mul.w	r3, r1, r3
 8005c9c:	441a      	add	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	22ff      	movs	r2, #255	; 0xff
 8005ca6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	22ff      	movs	r2, #255	; 0xff
 8005cae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d114      	bne.n	8005ce2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d01a      	beq.n	8005cf6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	3310      	adds	r3, #16
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f001 fbb5 	bl	8007434 <xTaskRemoveFromEventList>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d012      	beq.n	8005cf6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005cd0:	4b0c      	ldr	r3, [pc, #48]	; (8005d04 <xQueueGenericReset+0xcc>)
 8005cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cd6:	601a      	str	r2, [r3, #0]
 8005cd8:	f3bf 8f4f 	dsb	sy
 8005cdc:	f3bf 8f6f 	isb	sy
 8005ce0:	e009      	b.n	8005cf6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	3310      	adds	r3, #16
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7ff fef2 	bl	8005ad0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	3324      	adds	r3, #36	; 0x24
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7ff feed 	bl	8005ad0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005cf6:	f002 fac5 	bl	8008284 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005cfa:	2301      	movs	r3, #1
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	e000ed04 	.word	0xe000ed04

08005d08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b08e      	sub	sp, #56	; 0x38
 8005d0c:	af02      	add	r7, sp, #8
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
 8005d14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d10a      	bne.n	8005d32 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d20:	f383 8811 	msr	BASEPRI, r3
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	f3bf 8f4f 	dsb	sy
 8005d2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d2e:	bf00      	nop
 8005d30:	e7fe      	b.n	8005d30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10a      	bne.n	8005d4e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d4a:	bf00      	nop
 8005d4c:	e7fe      	b.n	8005d4c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d002      	beq.n	8005d5a <xQueueGenericCreateStatic+0x52>
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <xQueueGenericCreateStatic+0x56>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e000      	b.n	8005d60 <xQueueGenericCreateStatic+0x58>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10a      	bne.n	8005d7a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	623b      	str	r3, [r7, #32]
}
 8005d76:	bf00      	nop
 8005d78:	e7fe      	b.n	8005d78 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d102      	bne.n	8005d86 <xQueueGenericCreateStatic+0x7e>
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <xQueueGenericCreateStatic+0x82>
 8005d86:	2301      	movs	r3, #1
 8005d88:	e000      	b.n	8005d8c <xQueueGenericCreateStatic+0x84>
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10a      	bne.n	8005da6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d94:	f383 8811 	msr	BASEPRI, r3
 8005d98:	f3bf 8f6f 	isb	sy
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	61fb      	str	r3, [r7, #28]
}
 8005da2:	bf00      	nop
 8005da4:	e7fe      	b.n	8005da4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005da6:	2348      	movs	r3, #72	; 0x48
 8005da8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2b48      	cmp	r3, #72	; 0x48
 8005dae:	d00a      	beq.n	8005dc6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db4:	f383 8811 	msr	BASEPRI, r3
 8005db8:	f3bf 8f6f 	isb	sy
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	61bb      	str	r3, [r7, #24]
}
 8005dc2:	bf00      	nop
 8005dc4:	e7fe      	b.n	8005dc4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005dc6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00d      	beq.n	8005dee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005dda:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	4613      	mov	r3, r2
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	68b9      	ldr	r1, [r7, #8]
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f000 f83f 	bl	8005e6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3730      	adds	r7, #48	; 0x30
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b08a      	sub	sp, #40	; 0x28
 8005dfc:	af02      	add	r7, sp, #8
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	4613      	mov	r3, r2
 8005e04:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d10a      	bne.n	8005e22 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	613b      	str	r3, [r7, #16]
}
 8005e1e:	bf00      	nop
 8005e20:	e7fe      	b.n	8005e20 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	fb02 f303 	mul.w	r3, r2, r3
 8005e2a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	3348      	adds	r3, #72	; 0x48
 8005e30:	4618      	mov	r0, r3
 8005e32:	f002 fb19 	bl	8008468 <pvPortMalloc>
 8005e36:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d011      	beq.n	8005e62 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	3348      	adds	r3, #72	; 0x48
 8005e46:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e50:	79fa      	ldrb	r2, [r7, #7]
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	4613      	mov	r3, r2
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	68b9      	ldr	r1, [r7, #8]
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 f805 	bl	8005e6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e62:	69bb      	ldr	r3, [r7, #24]
	}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3720      	adds	r7, #32
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
 8005e78:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d103      	bne.n	8005e88 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	601a      	str	r2, [r3, #0]
 8005e86:	e002      	b.n	8005e8e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e9a:	2101      	movs	r1, #1
 8005e9c:	69b8      	ldr	r0, [r7, #24]
 8005e9e:	f7ff fecb 	bl	8005c38 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005ea2:	bf00      	nop
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b082      	sub	sp, #8
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00e      	beq.n	8005ed6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005eca:	2300      	movs	r3, #0
 8005ecc:	2200      	movs	r2, #0
 8005ece:	2100      	movs	r1, #0
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 f837 	bl	8005f44 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005ed6:	bf00      	nop
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b086      	sub	sp, #24
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	617b      	str	r3, [r7, #20]
 8005eec:	2300      	movs	r3, #0
 8005eee:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005ef0:	79fb      	ldrb	r3, [r7, #7]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	6939      	ldr	r1, [r7, #16]
 8005ef6:	6978      	ldr	r0, [r7, #20]
 8005ef8:	f7ff ff7e 	bl	8005df8 <xQueueGenericCreate>
 8005efc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f7ff ffd3 	bl	8005eaa <prvInitialiseMutex>

		return xNewQueue;
 8005f04:	68fb      	ldr	r3, [r7, #12]
	}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3718      	adds	r7, #24
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b088      	sub	sp, #32
 8005f12:	af02      	add	r7, sp, #8
 8005f14:	4603      	mov	r3, r0
 8005f16:	6039      	str	r1, [r7, #0]
 8005f18:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	617b      	str	r3, [r7, #20]
 8005f1e:	2300      	movs	r3, #0
 8005f20:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005f22:	79fb      	ldrb	r3, [r7, #7]
 8005f24:	9300      	str	r3, [sp, #0]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	6939      	ldr	r1, [r7, #16]
 8005f2c:	6978      	ldr	r0, [r7, #20]
 8005f2e:	f7ff feeb 	bl	8005d08 <xQueueGenericCreateStatic>
 8005f32:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f7ff ffb8 	bl	8005eaa <prvInitialiseMutex>

		return xNewQueue;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
	}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3718      	adds	r7, #24
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b08e      	sub	sp, #56	; 0x38
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
 8005f50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005f52:	2300      	movs	r3, #0
 8005f54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d10a      	bne.n	8005f76 <xQueueGenericSend+0x32>
	__asm volatile
 8005f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f64:	f383 8811 	msr	BASEPRI, r3
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f72:	bf00      	nop
 8005f74:	e7fe      	b.n	8005f74 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d103      	bne.n	8005f84 <xQueueGenericSend+0x40>
 8005f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d101      	bne.n	8005f88 <xQueueGenericSend+0x44>
 8005f84:	2301      	movs	r3, #1
 8005f86:	e000      	b.n	8005f8a <xQueueGenericSend+0x46>
 8005f88:	2300      	movs	r3, #0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10a      	bne.n	8005fa4 <xQueueGenericSend+0x60>
	__asm volatile
 8005f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005fa0:	bf00      	nop
 8005fa2:	e7fe      	b.n	8005fa2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d103      	bne.n	8005fb2 <xQueueGenericSend+0x6e>
 8005faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d101      	bne.n	8005fb6 <xQueueGenericSend+0x72>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e000      	b.n	8005fb8 <xQueueGenericSend+0x74>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10a      	bne.n	8005fd2 <xQueueGenericSend+0x8e>
	__asm volatile
 8005fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc0:	f383 8811 	msr	BASEPRI, r3
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	623b      	str	r3, [r7, #32]
}
 8005fce:	bf00      	nop
 8005fd0:	e7fe      	b.n	8005fd0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fd2:	f001 fbeb 	bl	80077ac <xTaskGetSchedulerState>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d102      	bne.n	8005fe2 <xQueueGenericSend+0x9e>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <xQueueGenericSend+0xa2>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e000      	b.n	8005fe8 <xQueueGenericSend+0xa4>
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d10a      	bne.n	8006002 <xQueueGenericSend+0xbe>
	__asm volatile
 8005fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff0:	f383 8811 	msr	BASEPRI, r3
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	61fb      	str	r3, [r7, #28]
}
 8005ffe:	bf00      	nop
 8006000:	e7fe      	b.n	8006000 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006002:	f002 f90f 	bl	8008224 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006008:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800600a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600e:	429a      	cmp	r2, r3
 8006010:	d302      	bcc.n	8006018 <xQueueGenericSend+0xd4>
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2b02      	cmp	r3, #2
 8006016:	d129      	bne.n	800606c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	68b9      	ldr	r1, [r7, #8]
 800601c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800601e:	f000 fc3b 	bl	8006898 <prvCopyDataToQueue>
 8006022:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006028:	2b00      	cmp	r3, #0
 800602a:	d010      	beq.n	800604e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800602c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602e:	3324      	adds	r3, #36	; 0x24
 8006030:	4618      	mov	r0, r3
 8006032:	f001 f9ff 	bl	8007434 <xTaskRemoveFromEventList>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d013      	beq.n	8006064 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800603c:	4b3f      	ldr	r3, [pc, #252]	; (800613c <xQueueGenericSend+0x1f8>)
 800603e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006042:	601a      	str	r2, [r3, #0]
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	f3bf 8f6f 	isb	sy
 800604c:	e00a      	b.n	8006064 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800604e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006050:	2b00      	cmp	r3, #0
 8006052:	d007      	beq.n	8006064 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006054:	4b39      	ldr	r3, [pc, #228]	; (800613c <xQueueGenericSend+0x1f8>)
 8006056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	f3bf 8f4f 	dsb	sy
 8006060:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006064:	f002 f90e 	bl	8008284 <vPortExitCritical>
				return pdPASS;
 8006068:	2301      	movs	r3, #1
 800606a:	e063      	b.n	8006134 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d103      	bne.n	800607a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006072:	f002 f907 	bl	8008284 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006076:	2300      	movs	r3, #0
 8006078:	e05c      	b.n	8006134 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800607a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800607c:	2b00      	cmp	r3, #0
 800607e:	d106      	bne.n	800608e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006080:	f107 0314 	add.w	r3, r7, #20
 8006084:	4618      	mov	r0, r3
 8006086:	f001 fa37 	bl	80074f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800608a:	2301      	movs	r3, #1
 800608c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800608e:	f002 f8f9 	bl	8008284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006092:	f000 ffcb 	bl	800702c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006096:	f002 f8c5 	bl	8008224 <vPortEnterCritical>
 800609a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060a0:	b25b      	sxtb	r3, r3
 80060a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a6:	d103      	bne.n	80060b0 <xQueueGenericSend+0x16c>
 80060a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060b6:	b25b      	sxtb	r3, r3
 80060b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060bc:	d103      	bne.n	80060c6 <xQueueGenericSend+0x182>
 80060be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060c6:	f002 f8dd 	bl	8008284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060ca:	1d3a      	adds	r2, r7, #4
 80060cc:	f107 0314 	add.w	r3, r7, #20
 80060d0:	4611      	mov	r1, r2
 80060d2:	4618      	mov	r0, r3
 80060d4:	f001 fa26 	bl	8007524 <xTaskCheckForTimeOut>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d124      	bne.n	8006128 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80060de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060e0:	f000 fcd2 	bl	8006a88 <prvIsQueueFull>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d018      	beq.n	800611c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80060ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ec:	3310      	adds	r3, #16
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	4611      	mov	r1, r2
 80060f2:	4618      	mov	r0, r3
 80060f4:	f001 f97a 	bl	80073ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80060f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060fa:	f000 fc5d 	bl	80069b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80060fe:	f000 ffa3 	bl	8007048 <xTaskResumeAll>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	f47f af7c 	bne.w	8006002 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800610a:	4b0c      	ldr	r3, [pc, #48]	; (800613c <xQueueGenericSend+0x1f8>)
 800610c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	e772      	b.n	8006002 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800611c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800611e:	f000 fc4b 	bl	80069b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006122:	f000 ff91 	bl	8007048 <xTaskResumeAll>
 8006126:	e76c      	b.n	8006002 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006128:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800612a:	f000 fc45 	bl	80069b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800612e:	f000 ff8b 	bl	8007048 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006132:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006134:	4618      	mov	r0, r3
 8006136:	3738      	adds	r7, #56	; 0x38
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	e000ed04 	.word	0xe000ed04

08006140 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b090      	sub	sp, #64	; 0x40
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
 800614c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10a      	bne.n	800616e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615c:	f383 8811 	msr	BASEPRI, r3
 8006160:	f3bf 8f6f 	isb	sy
 8006164:	f3bf 8f4f 	dsb	sy
 8006168:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800616a:	bf00      	nop
 800616c:	e7fe      	b.n	800616c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d103      	bne.n	800617c <xQueueGenericSendFromISR+0x3c>
 8006174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <xQueueGenericSendFromISR+0x40>
 800617c:	2301      	movs	r3, #1
 800617e:	e000      	b.n	8006182 <xQueueGenericSendFromISR+0x42>
 8006180:	2300      	movs	r3, #0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10a      	bne.n	800619c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618a:	f383 8811 	msr	BASEPRI, r3
 800618e:	f3bf 8f6f 	isb	sy
 8006192:	f3bf 8f4f 	dsb	sy
 8006196:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006198:	bf00      	nop
 800619a:	e7fe      	b.n	800619a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d103      	bne.n	80061aa <xQueueGenericSendFromISR+0x6a>
 80061a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d101      	bne.n	80061ae <xQueueGenericSendFromISR+0x6e>
 80061aa:	2301      	movs	r3, #1
 80061ac:	e000      	b.n	80061b0 <xQueueGenericSendFromISR+0x70>
 80061ae:	2300      	movs	r3, #0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10a      	bne.n	80061ca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80061b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	623b      	str	r3, [r7, #32]
}
 80061c6:	bf00      	nop
 80061c8:	e7fe      	b.n	80061c8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80061ca:	f002 f90d 	bl	80083e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80061ce:	f3ef 8211 	mrs	r2, BASEPRI
 80061d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d6:	f383 8811 	msr	BASEPRI, r3
 80061da:	f3bf 8f6f 	isb	sy
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	61fa      	str	r2, [r7, #28]
 80061e4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80061e6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80061e8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d302      	bcc.n	80061fc <xQueueGenericSendFromISR+0xbc>
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d12f      	bne.n	800625c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80061fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800620c:	683a      	ldr	r2, [r7, #0]
 800620e:	68b9      	ldr	r1, [r7, #8]
 8006210:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006212:	f000 fb41 	bl	8006898 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006216:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800621a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621e:	d112      	bne.n	8006246 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006224:	2b00      	cmp	r3, #0
 8006226:	d016      	beq.n	8006256 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622a:	3324      	adds	r3, #36	; 0x24
 800622c:	4618      	mov	r0, r3
 800622e:	f001 f901 	bl	8007434 <xTaskRemoveFromEventList>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00e      	beq.n	8006256 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00b      	beq.n	8006256 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	601a      	str	r2, [r3, #0]
 8006244:	e007      	b.n	8006256 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006246:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800624a:	3301      	adds	r3, #1
 800624c:	b2db      	uxtb	r3, r3
 800624e:	b25a      	sxtb	r2, r3
 8006250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006256:	2301      	movs	r3, #1
 8006258:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800625a:	e001      	b.n	8006260 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800625c:	2300      	movs	r3, #0
 800625e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006262:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800626a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800626c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800626e:	4618      	mov	r0, r3
 8006270:	3740      	adds	r7, #64	; 0x40
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b08e      	sub	sp, #56	; 0x38
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10a      	bne.n	80062a0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800628a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628e:	f383 8811 	msr	BASEPRI, r3
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	f3bf 8f4f 	dsb	sy
 800629a:	623b      	str	r3, [r7, #32]
}
 800629c:	bf00      	nop
 800629e:	e7fe      	b.n	800629e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80062a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00a      	beq.n	80062be <xQueueGiveFromISR+0x48>
	__asm volatile
 80062a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ac:	f383 8811 	msr	BASEPRI, r3
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	61fb      	str	r3, [r7, #28]
}
 80062ba:	bf00      	nop
 80062bc:	e7fe      	b.n	80062bc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80062be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d103      	bne.n	80062ce <xQueueGiveFromISR+0x58>
 80062c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <xQueueGiveFromISR+0x5c>
 80062ce:	2301      	movs	r3, #1
 80062d0:	e000      	b.n	80062d4 <xQueueGiveFromISR+0x5e>
 80062d2:	2300      	movs	r3, #0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d10a      	bne.n	80062ee <xQueueGiveFromISR+0x78>
	__asm volatile
 80062d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062dc:	f383 8811 	msr	BASEPRI, r3
 80062e0:	f3bf 8f6f 	isb	sy
 80062e4:	f3bf 8f4f 	dsb	sy
 80062e8:	61bb      	str	r3, [r7, #24]
}
 80062ea:	bf00      	nop
 80062ec:	e7fe      	b.n	80062ec <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062ee:	f002 f87b 	bl	80083e8 <vPortValidateInterruptPriority>
	__asm volatile
 80062f2:	f3ef 8211 	mrs	r2, BASEPRI
 80062f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fa:	f383 8811 	msr	BASEPRI, r3
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	617a      	str	r2, [r7, #20]
 8006308:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800630a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800630c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800630e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006312:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800631a:	429a      	cmp	r2, r3
 800631c:	d22b      	bcs.n	8006376 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800631e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006320:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006324:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632a:	1c5a      	adds	r2, r3, #1
 800632c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006330:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006338:	d112      	bne.n	8006360 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800633a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633e:	2b00      	cmp	r3, #0
 8006340:	d016      	beq.n	8006370 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006344:	3324      	adds	r3, #36	; 0x24
 8006346:	4618      	mov	r0, r3
 8006348:	f001 f874 	bl	8007434 <xTaskRemoveFromEventList>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00e      	beq.n	8006370 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00b      	beq.n	8006370 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	2201      	movs	r2, #1
 800635c:	601a      	str	r2, [r3, #0]
 800635e:	e007      	b.n	8006370 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006364:	3301      	adds	r3, #1
 8006366:	b2db      	uxtb	r3, r3
 8006368:	b25a      	sxtb	r2, r3
 800636a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006370:	2301      	movs	r3, #1
 8006372:	637b      	str	r3, [r7, #52]	; 0x34
 8006374:	e001      	b.n	800637a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006376:	2300      	movs	r3, #0
 8006378:	637b      	str	r3, [r7, #52]	; 0x34
 800637a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f383 8811 	msr	BASEPRI, r3
}
 8006384:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006388:	4618      	mov	r0, r3
 800638a:	3738      	adds	r7, #56	; 0x38
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b08c      	sub	sp, #48	; 0x30
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800639c:	2300      	movs	r3, #0
 800639e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80063a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10a      	bne.n	80063c0 <xQueueReceive+0x30>
	__asm volatile
 80063aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ae:	f383 8811 	msr	BASEPRI, r3
 80063b2:	f3bf 8f6f 	isb	sy
 80063b6:	f3bf 8f4f 	dsb	sy
 80063ba:	623b      	str	r3, [r7, #32]
}
 80063bc:	bf00      	nop
 80063be:	e7fe      	b.n	80063be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d103      	bne.n	80063ce <xQueueReceive+0x3e>
 80063c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <xQueueReceive+0x42>
 80063ce:	2301      	movs	r3, #1
 80063d0:	e000      	b.n	80063d4 <xQueueReceive+0x44>
 80063d2:	2300      	movs	r3, #0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10a      	bne.n	80063ee <xQueueReceive+0x5e>
	__asm volatile
 80063d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063dc:	f383 8811 	msr	BASEPRI, r3
 80063e0:	f3bf 8f6f 	isb	sy
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	61fb      	str	r3, [r7, #28]
}
 80063ea:	bf00      	nop
 80063ec:	e7fe      	b.n	80063ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063ee:	f001 f9dd 	bl	80077ac <xTaskGetSchedulerState>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d102      	bne.n	80063fe <xQueueReceive+0x6e>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <xQueueReceive+0x72>
 80063fe:	2301      	movs	r3, #1
 8006400:	e000      	b.n	8006404 <xQueueReceive+0x74>
 8006402:	2300      	movs	r3, #0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10a      	bne.n	800641e <xQueueReceive+0x8e>
	__asm volatile
 8006408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640c:	f383 8811 	msr	BASEPRI, r3
 8006410:	f3bf 8f6f 	isb	sy
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	61bb      	str	r3, [r7, #24]
}
 800641a:	bf00      	nop
 800641c:	e7fe      	b.n	800641c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800641e:	f001 ff01 	bl	8008224 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006426:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	2b00      	cmp	r3, #0
 800642c:	d01f      	beq.n	800646e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800642e:	68b9      	ldr	r1, [r7, #8]
 8006430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006432:	f000 fa9b 	bl	800696c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	1e5a      	subs	r2, r3, #1
 800643a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800643e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00f      	beq.n	8006466 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006448:	3310      	adds	r3, #16
 800644a:	4618      	mov	r0, r3
 800644c:	f000 fff2 	bl	8007434 <xTaskRemoveFromEventList>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d007      	beq.n	8006466 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006456:	4b3d      	ldr	r3, [pc, #244]	; (800654c <xQueueReceive+0x1bc>)
 8006458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800645c:	601a      	str	r2, [r3, #0]
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006466:	f001 ff0d 	bl	8008284 <vPortExitCritical>
				return pdPASS;
 800646a:	2301      	movs	r3, #1
 800646c:	e069      	b.n	8006542 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d103      	bne.n	800647c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006474:	f001 ff06 	bl	8008284 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006478:	2300      	movs	r3, #0
 800647a:	e062      	b.n	8006542 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800647c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647e:	2b00      	cmp	r3, #0
 8006480:	d106      	bne.n	8006490 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006482:	f107 0310 	add.w	r3, r7, #16
 8006486:	4618      	mov	r0, r3
 8006488:	f001 f836 	bl	80074f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800648c:	2301      	movs	r3, #1
 800648e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006490:	f001 fef8 	bl	8008284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006494:	f000 fdca 	bl	800702c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006498:	f001 fec4 	bl	8008224 <vPortEnterCritical>
 800649c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064a2:	b25b      	sxtb	r3, r3
 80064a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a8:	d103      	bne.n	80064b2 <xQueueReceive+0x122>
 80064aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064b8:	b25b      	sxtb	r3, r3
 80064ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064be:	d103      	bne.n	80064c8 <xQueueReceive+0x138>
 80064c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064c8:	f001 fedc 	bl	8008284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064cc:	1d3a      	adds	r2, r7, #4
 80064ce:	f107 0310 	add.w	r3, r7, #16
 80064d2:	4611      	mov	r1, r2
 80064d4:	4618      	mov	r0, r3
 80064d6:	f001 f825 	bl	8007524 <xTaskCheckForTimeOut>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d123      	bne.n	8006528 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064e2:	f000 fabb 	bl	8006a5c <prvIsQueueEmpty>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d017      	beq.n	800651c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ee:	3324      	adds	r3, #36	; 0x24
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	4611      	mov	r1, r2
 80064f4:	4618      	mov	r0, r3
 80064f6:	f000 ff79 	bl	80073ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064fc:	f000 fa5c 	bl	80069b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006500:	f000 fda2 	bl	8007048 <xTaskResumeAll>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d189      	bne.n	800641e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800650a:	4b10      	ldr	r3, [pc, #64]	; (800654c <xQueueReceive+0x1bc>)
 800650c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006510:	601a      	str	r2, [r3, #0]
 8006512:	f3bf 8f4f 	dsb	sy
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	e780      	b.n	800641e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800651c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800651e:	f000 fa4b 	bl	80069b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006522:	f000 fd91 	bl	8007048 <xTaskResumeAll>
 8006526:	e77a      	b.n	800641e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800652a:	f000 fa45 	bl	80069b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800652e:	f000 fd8b 	bl	8007048 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006534:	f000 fa92 	bl	8006a5c <prvIsQueueEmpty>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	f43f af6f 	beq.w	800641e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006540:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006542:	4618      	mov	r0, r3
 8006544:	3730      	adds	r7, #48	; 0x30
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	e000ed04 	.word	0xe000ed04

08006550 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b08e      	sub	sp, #56	; 0x38
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800655a:	2300      	movs	r3, #0
 800655c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006562:	2300      	movs	r3, #0
 8006564:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10a      	bne.n	8006582 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800656c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006570:	f383 8811 	msr	BASEPRI, r3
 8006574:	f3bf 8f6f 	isb	sy
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	623b      	str	r3, [r7, #32]
}
 800657e:	bf00      	nop
 8006580:	e7fe      	b.n	8006580 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00a      	beq.n	80065a0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800658a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658e:	f383 8811 	msr	BASEPRI, r3
 8006592:	f3bf 8f6f 	isb	sy
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	61fb      	str	r3, [r7, #28]
}
 800659c:	bf00      	nop
 800659e:	e7fe      	b.n	800659e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065a0:	f001 f904 	bl	80077ac <xTaskGetSchedulerState>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d102      	bne.n	80065b0 <xQueueSemaphoreTake+0x60>
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <xQueueSemaphoreTake+0x64>
 80065b0:	2301      	movs	r3, #1
 80065b2:	e000      	b.n	80065b6 <xQueueSemaphoreTake+0x66>
 80065b4:	2300      	movs	r3, #0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10a      	bne.n	80065d0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80065ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	61bb      	str	r3, [r7, #24]
}
 80065cc:	bf00      	nop
 80065ce:	e7fe      	b.n	80065ce <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065d0:	f001 fe28 	bl	8008224 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80065d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80065da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d024      	beq.n	800662a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80065e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e2:	1e5a      	subs	r2, r3, #1
 80065e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d104      	bne.n	80065fa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80065f0:	f001 fa84 	bl	8007afc <pvTaskIncrementMutexHeldCount>
 80065f4:	4602      	mov	r2, r0
 80065f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00f      	beq.n	8006622 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006604:	3310      	adds	r3, #16
 8006606:	4618      	mov	r0, r3
 8006608:	f000 ff14 	bl	8007434 <xTaskRemoveFromEventList>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d007      	beq.n	8006622 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006612:	4b54      	ldr	r3, [pc, #336]	; (8006764 <xQueueSemaphoreTake+0x214>)
 8006614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006618:	601a      	str	r2, [r3, #0]
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006622:	f001 fe2f 	bl	8008284 <vPortExitCritical>
				return pdPASS;
 8006626:	2301      	movs	r3, #1
 8006628:	e097      	b.n	800675a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d111      	bne.n	8006654 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00a      	beq.n	800664c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663a:	f383 8811 	msr	BASEPRI, r3
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	f3bf 8f4f 	dsb	sy
 8006646:	617b      	str	r3, [r7, #20]
}
 8006648:	bf00      	nop
 800664a:	e7fe      	b.n	800664a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800664c:	f001 fe1a 	bl	8008284 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006650:	2300      	movs	r3, #0
 8006652:	e082      	b.n	800675a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006656:	2b00      	cmp	r3, #0
 8006658:	d106      	bne.n	8006668 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800665a:	f107 030c 	add.w	r3, r7, #12
 800665e:	4618      	mov	r0, r3
 8006660:	f000 ff4a 	bl	80074f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006664:	2301      	movs	r3, #1
 8006666:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006668:	f001 fe0c 	bl	8008284 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800666c:	f000 fcde 	bl	800702c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006670:	f001 fdd8 	bl	8008224 <vPortEnterCritical>
 8006674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006676:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800667a:	b25b      	sxtb	r3, r3
 800667c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006680:	d103      	bne.n	800668a <xQueueSemaphoreTake+0x13a>
 8006682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006684:	2200      	movs	r2, #0
 8006686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800668a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006690:	b25b      	sxtb	r3, r3
 8006692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006696:	d103      	bne.n	80066a0 <xQueueSemaphoreTake+0x150>
 8006698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066a0:	f001 fdf0 	bl	8008284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066a4:	463a      	mov	r2, r7
 80066a6:	f107 030c 	add.w	r3, r7, #12
 80066aa:	4611      	mov	r1, r2
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 ff39 	bl	8007524 <xTaskCheckForTimeOut>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d132      	bne.n	800671e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066ba:	f000 f9cf 	bl	8006a5c <prvIsQueueEmpty>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d026      	beq.n	8006712 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d109      	bne.n	80066e0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80066cc:	f001 fdaa 	bl	8008224 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80066d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	4618      	mov	r0, r3
 80066d6:	f001 f887 	bl	80077e8 <xTaskPriorityInherit>
 80066da:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80066dc:	f001 fdd2 	bl	8008284 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80066e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e2:	3324      	adds	r3, #36	; 0x24
 80066e4:	683a      	ldr	r2, [r7, #0]
 80066e6:	4611      	mov	r1, r2
 80066e8:	4618      	mov	r0, r3
 80066ea:	f000 fe7f 	bl	80073ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80066ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066f0:	f000 f962 	bl	80069b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80066f4:	f000 fca8 	bl	8007048 <xTaskResumeAll>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f47f af68 	bne.w	80065d0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006700:	4b18      	ldr	r3, [pc, #96]	; (8006764 <xQueueSemaphoreTake+0x214>)
 8006702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006706:	601a      	str	r2, [r3, #0]
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	e75e      	b.n	80065d0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006712:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006714:	f000 f950 	bl	80069b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006718:	f000 fc96 	bl	8007048 <xTaskResumeAll>
 800671c:	e758      	b.n	80065d0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800671e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006720:	f000 f94a 	bl	80069b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006724:	f000 fc90 	bl	8007048 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006728:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800672a:	f000 f997 	bl	8006a5c <prvIsQueueEmpty>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	f43f af4d 	beq.w	80065d0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00d      	beq.n	8006758 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800673c:	f001 fd72 	bl	8008224 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006740:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006742:	f000 f891 	bl	8006868 <prvGetDisinheritPriorityAfterTimeout>
 8006746:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800674e:	4618      	mov	r0, r3
 8006750:	f001 f946 	bl	80079e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006754:	f001 fd96 	bl	8008284 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006758:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800675a:	4618      	mov	r0, r3
 800675c:	3738      	adds	r7, #56	; 0x38
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	e000ed04 	.word	0xe000ed04

08006768 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b08e      	sub	sp, #56	; 0x38
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10a      	bne.n	8006794 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800677e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	623b      	str	r3, [r7, #32]
}
 8006790:	bf00      	nop
 8006792:	e7fe      	b.n	8006792 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d103      	bne.n	80067a2 <xQueueReceiveFromISR+0x3a>
 800679a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <xQueueReceiveFromISR+0x3e>
 80067a2:	2301      	movs	r3, #1
 80067a4:	e000      	b.n	80067a8 <xQueueReceiveFromISR+0x40>
 80067a6:	2300      	movs	r3, #0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10a      	bne.n	80067c2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80067ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b0:	f383 8811 	msr	BASEPRI, r3
 80067b4:	f3bf 8f6f 	isb	sy
 80067b8:	f3bf 8f4f 	dsb	sy
 80067bc:	61fb      	str	r3, [r7, #28]
}
 80067be:	bf00      	nop
 80067c0:	e7fe      	b.n	80067c0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80067c2:	f001 fe11 	bl	80083e8 <vPortValidateInterruptPriority>
	__asm volatile
 80067c6:	f3ef 8211 	mrs	r2, BASEPRI
 80067ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	61ba      	str	r2, [r7, #24]
 80067dc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80067de:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d02f      	beq.n	800684e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80067ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80067f8:	68b9      	ldr	r1, [r7, #8]
 80067fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067fc:	f000 f8b6 	bl	800696c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006802:	1e5a      	subs	r2, r3, #1
 8006804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006806:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006808:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800680c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006810:	d112      	bne.n	8006838 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d016      	beq.n	8006848 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800681a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681c:	3310      	adds	r3, #16
 800681e:	4618      	mov	r0, r3
 8006820:	f000 fe08 	bl	8007434 <xTaskRemoveFromEventList>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00e      	beq.n	8006848 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00b      	beq.n	8006848 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	601a      	str	r2, [r3, #0]
 8006836:	e007      	b.n	8006848 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800683c:	3301      	adds	r3, #1
 800683e:	b2db      	uxtb	r3, r3
 8006840:	b25a      	sxtb	r2, r3
 8006842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006848:	2301      	movs	r3, #1
 800684a:	637b      	str	r3, [r7, #52]	; 0x34
 800684c:	e001      	b.n	8006852 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800684e:	2300      	movs	r3, #0
 8006850:	637b      	str	r3, [r7, #52]	; 0x34
 8006852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006854:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	f383 8811 	msr	BASEPRI, r3
}
 800685c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800685e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006860:	4618      	mov	r0, r3
 8006862:	3738      	adds	r7, #56	; 0x38
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006874:	2b00      	cmp	r3, #0
 8006876:	d006      	beq.n	8006886 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f1c3 0307 	rsb	r3, r3, #7
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	e001      	b.n	800688a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006886:	2300      	movs	r3, #0
 8006888:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800688a:	68fb      	ldr	r3, [r7, #12]
	}
 800688c:	4618      	mov	r0, r3
 800688e:	3714      	adds	r7, #20
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b086      	sub	sp, #24
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80068a4:	2300      	movs	r3, #0
 80068a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d10d      	bne.n	80068d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d14d      	bne.n	800695a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	4618      	mov	r0, r3
 80068c4:	f001 f806 	bl	80078d4 <xTaskPriorityDisinherit>
 80068c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	609a      	str	r2, [r3, #8]
 80068d0:	e043      	b.n	800695a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d119      	bne.n	800690c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6858      	ldr	r0, [r3, #4]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e0:	461a      	mov	r2, r3
 80068e2:	68b9      	ldr	r1, [r7, #8]
 80068e4:	f001 ffd4 	bl	8008890 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f0:	441a      	add	r2, r3
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	685a      	ldr	r2, [r3, #4]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d32b      	bcc.n	800695a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	605a      	str	r2, [r3, #4]
 800690a:	e026      	b.n	800695a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	68d8      	ldr	r0, [r3, #12]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006914:	461a      	mov	r2, r3
 8006916:	68b9      	ldr	r1, [r7, #8]
 8006918:	f001 ffba 	bl	8008890 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	68da      	ldr	r2, [r3, #12]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006924:	425b      	negs	r3, r3
 8006926:	441a      	add	r2, r3
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	68da      	ldr	r2, [r3, #12]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	429a      	cmp	r2, r3
 8006936:	d207      	bcs.n	8006948 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	689a      	ldr	r2, [r3, #8]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006940:	425b      	negs	r3, r3
 8006942:	441a      	add	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b02      	cmp	r3, #2
 800694c:	d105      	bne.n	800695a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d002      	beq.n	800695a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	3b01      	subs	r3, #1
 8006958:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	1c5a      	adds	r2, r3, #1
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006962:	697b      	ldr	r3, [r7, #20]
}
 8006964:	4618      	mov	r0, r3
 8006966:	3718      	adds	r7, #24
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697a:	2b00      	cmp	r3, #0
 800697c:	d018      	beq.n	80069b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	68da      	ldr	r2, [r3, #12]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006986:	441a      	add	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	68da      	ldr	r2, [r3, #12]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	429a      	cmp	r2, r3
 8006996:	d303      	bcc.n	80069a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	68d9      	ldr	r1, [r3, #12]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a8:	461a      	mov	r2, r3
 80069aa:	6838      	ldr	r0, [r7, #0]
 80069ac:	f001 ff70 	bl	8008890 <memcpy>
	}
}
 80069b0:	bf00      	nop
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80069c0:	f001 fc30 	bl	8008224 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069cc:	e011      	b.n	80069f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d012      	beq.n	80069fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	3324      	adds	r3, #36	; 0x24
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 fd2a 	bl	8007434 <xTaskRemoveFromEventList>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d001      	beq.n	80069ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80069e6:	f000 fdff 	bl	80075e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80069ea:	7bfb      	ldrb	r3, [r7, #15]
 80069ec:	3b01      	subs	r3, #1
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	dce9      	bgt.n	80069ce <prvUnlockQueue+0x16>
 80069fa:	e000      	b.n	80069fe <prvUnlockQueue+0x46>
					break;
 80069fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	22ff      	movs	r2, #255	; 0xff
 8006a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006a06:	f001 fc3d 	bl	8008284 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a0a:	f001 fc0b 	bl	8008224 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a16:	e011      	b.n	8006a3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d012      	beq.n	8006a46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	3310      	adds	r3, #16
 8006a24:	4618      	mov	r0, r3
 8006a26:	f000 fd05 	bl	8007434 <xTaskRemoveFromEventList>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d001      	beq.n	8006a34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a30:	f000 fdda 	bl	80075e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a34:	7bbb      	ldrb	r3, [r7, #14]
 8006a36:	3b01      	subs	r3, #1
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	dce9      	bgt.n	8006a18 <prvUnlockQueue+0x60>
 8006a44:	e000      	b.n	8006a48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	22ff      	movs	r2, #255	; 0xff
 8006a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006a50:	f001 fc18 	bl	8008284 <vPortExitCritical>
}
 8006a54:	bf00      	nop
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a64:	f001 fbde 	bl	8008224 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d102      	bne.n	8006a76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a70:	2301      	movs	r3, #1
 8006a72:	60fb      	str	r3, [r7, #12]
 8006a74:	e001      	b.n	8006a7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a76:	2300      	movs	r3, #0
 8006a78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a7a:	f001 fc03 	bl	8008284 <vPortExitCritical>

	return xReturn;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3710      	adds	r7, #16
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a90:	f001 fbc8 	bl	8008224 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d102      	bne.n	8006aa6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	60fb      	str	r3, [r7, #12]
 8006aa4:	e001      	b.n	8006aaa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006aaa:	f001 fbeb 	bl	8008284 <vPortExitCritical>

	return xReturn;
 8006aae:	68fb      	ldr	r3, [r7, #12]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b08e      	sub	sp, #56	; 0x38
 8006abc:	af04      	add	r7, sp, #16
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]
 8006ac4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10a      	bne.n	8006ae2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	623b      	str	r3, [r7, #32]
}
 8006ade:	bf00      	nop
 8006ae0:	e7fe      	b.n	8006ae0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d10a      	bne.n	8006afe <xTaskCreateStatic+0x46>
	__asm volatile
 8006ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aec:	f383 8811 	msr	BASEPRI, r3
 8006af0:	f3bf 8f6f 	isb	sy
 8006af4:	f3bf 8f4f 	dsb	sy
 8006af8:	61fb      	str	r3, [r7, #28]
}
 8006afa:	bf00      	nop
 8006afc:	e7fe      	b.n	8006afc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006afe:	2354      	movs	r3, #84	; 0x54
 8006b00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	2b54      	cmp	r3, #84	; 0x54
 8006b06:	d00a      	beq.n	8006b1e <xTaskCreateStatic+0x66>
	__asm volatile
 8006b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0c:	f383 8811 	msr	BASEPRI, r3
 8006b10:	f3bf 8f6f 	isb	sy
 8006b14:	f3bf 8f4f 	dsb	sy
 8006b18:	61bb      	str	r3, [r7, #24]
}
 8006b1a:	bf00      	nop
 8006b1c:	e7fe      	b.n	8006b1c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b1e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d01e      	beq.n	8006b64 <xTaskCreateStatic+0xac>
 8006b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d01b      	beq.n	8006b64 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b34:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b38:	2202      	movs	r2, #2
 8006b3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b3e:	2300      	movs	r3, #0
 8006b40:	9303      	str	r3, [sp, #12]
 8006b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b44:	9302      	str	r3, [sp, #8]
 8006b46:	f107 0314 	add.w	r3, r7, #20
 8006b4a:	9301      	str	r3, [sp, #4]
 8006b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4e:	9300      	str	r3, [sp, #0]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	68b9      	ldr	r1, [r7, #8]
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f000 f850 	bl	8006bfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b5e:	f000 f8d5 	bl	8006d0c <prvAddNewTaskToReadyList>
 8006b62:	e001      	b.n	8006b68 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006b64:	2300      	movs	r3, #0
 8006b66:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006b68:	697b      	ldr	r3, [r7, #20]
	}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3728      	adds	r7, #40	; 0x28
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b08c      	sub	sp, #48	; 0x30
 8006b76:	af04      	add	r7, sp, #16
 8006b78:	60f8      	str	r0, [r7, #12]
 8006b7a:	60b9      	str	r1, [r7, #8]
 8006b7c:	603b      	str	r3, [r7, #0]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006b82:	88fb      	ldrh	r3, [r7, #6]
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	4618      	mov	r0, r3
 8006b88:	f001 fc6e 	bl	8008468 <pvPortMalloc>
 8006b8c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00e      	beq.n	8006bb2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006b94:	2054      	movs	r0, #84	; 0x54
 8006b96:	f001 fc67 	bl	8008468 <pvPortMalloc>
 8006b9a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d003      	beq.n	8006baa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	631a      	str	r2, [r3, #48]	; 0x30
 8006ba8:	e005      	b.n	8006bb6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006baa:	6978      	ldr	r0, [r7, #20]
 8006bac:	f001 fd28 	bl	8008600 <vPortFree>
 8006bb0:	e001      	b.n	8006bb6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d017      	beq.n	8006bec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006bc4:	88fa      	ldrh	r2, [r7, #6]
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	9303      	str	r3, [sp, #12]
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	9302      	str	r3, [sp, #8]
 8006bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd0:	9301      	str	r3, [sp, #4]
 8006bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd4:	9300      	str	r3, [sp, #0]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	68b9      	ldr	r1, [r7, #8]
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f000 f80e 	bl	8006bfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006be0:	69f8      	ldr	r0, [r7, #28]
 8006be2:	f000 f893 	bl	8006d0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006be6:	2301      	movs	r3, #1
 8006be8:	61bb      	str	r3, [r7, #24]
 8006bea:	e002      	b.n	8006bf2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006bec:	f04f 33ff 	mov.w	r3, #4294967295
 8006bf0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006bf2:	69bb      	ldr	r3, [r7, #24]
	}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3720      	adds	r7, #32
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b088      	sub	sp, #32
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
 8006c08:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006c14:	3b01      	subs	r3, #1
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	f023 0307 	bic.w	r3, r3, #7
 8006c22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	f003 0307 	and.w	r3, r3, #7
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00a      	beq.n	8006c44 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	617b      	str	r3, [r7, #20]
}
 8006c40:	bf00      	nop
 8006c42:	e7fe      	b.n	8006c42 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d01f      	beq.n	8006c8a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	61fb      	str	r3, [r7, #28]
 8006c4e:	e012      	b.n	8006c76 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	4413      	add	r3, r2
 8006c56:	7819      	ldrb	r1, [r3, #0]
 8006c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	3334      	adds	r3, #52	; 0x34
 8006c60:	460a      	mov	r2, r1
 8006c62:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	4413      	add	r3, r2
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d006      	beq.n	8006c7e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	3301      	adds	r3, #1
 8006c74:	61fb      	str	r3, [r7, #28]
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	2b0f      	cmp	r3, #15
 8006c7a:	d9e9      	bls.n	8006c50 <prvInitialiseNewTask+0x54>
 8006c7c:	e000      	b.n	8006c80 <prvInitialiseNewTask+0x84>
			{
				break;
 8006c7e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c88:	e003      	b.n	8006c92 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c94:	2b06      	cmp	r3, #6
 8006c96:	d901      	bls.n	8006c9c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c98:	2306      	movs	r3, #6
 8006c9a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ca0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ca6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006caa:	2200      	movs	r2, #0
 8006cac:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb0:	3304      	adds	r3, #4
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7fe ff2c 	bl	8005b10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cba:	3318      	adds	r3, #24
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f7fe ff27 	bl	8005b10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cc6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cca:	f1c3 0207 	rsb	r2, r3, #7
 8006cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cd6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cda:	2200      	movs	r2, #0
 8006cdc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	68f9      	ldr	r1, [r7, #12]
 8006cea:	69b8      	ldr	r0, [r7, #24]
 8006cec:	f001 f96a 	bl	8007fc4 <pxPortInitialiseStack>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d002      	beq.n	8006d02 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d02:	bf00      	nop
 8006d04:	3720      	adds	r7, #32
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
	...

08006d0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d14:	f001 fa86 	bl	8008224 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d18:	4b2a      	ldr	r3, [pc, #168]	; (8006dc4 <prvAddNewTaskToReadyList+0xb8>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	4a29      	ldr	r2, [pc, #164]	; (8006dc4 <prvAddNewTaskToReadyList+0xb8>)
 8006d20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d22:	4b29      	ldr	r3, [pc, #164]	; (8006dc8 <prvAddNewTaskToReadyList+0xbc>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d109      	bne.n	8006d3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d2a:	4a27      	ldr	r2, [pc, #156]	; (8006dc8 <prvAddNewTaskToReadyList+0xbc>)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d30:	4b24      	ldr	r3, [pc, #144]	; (8006dc4 <prvAddNewTaskToReadyList+0xb8>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d110      	bne.n	8006d5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006d38:	f000 fc7a 	bl	8007630 <prvInitialiseTaskLists>
 8006d3c:	e00d      	b.n	8006d5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006d3e:	4b23      	ldr	r3, [pc, #140]	; (8006dcc <prvAddNewTaskToReadyList+0xc0>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d109      	bne.n	8006d5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006d46:	4b20      	ldr	r3, [pc, #128]	; (8006dc8 <prvAddNewTaskToReadyList+0xbc>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d802      	bhi.n	8006d5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006d54:	4a1c      	ldr	r2, [pc, #112]	; (8006dc8 <prvAddNewTaskToReadyList+0xbc>)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006d5a:	4b1d      	ldr	r3, [pc, #116]	; (8006dd0 <prvAddNewTaskToReadyList+0xc4>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	4a1b      	ldr	r2, [pc, #108]	; (8006dd0 <prvAddNewTaskToReadyList+0xc4>)
 8006d62:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d68:	2201      	movs	r2, #1
 8006d6a:	409a      	lsls	r2, r3
 8006d6c:	4b19      	ldr	r3, [pc, #100]	; (8006dd4 <prvAddNewTaskToReadyList+0xc8>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	4a18      	ldr	r2, [pc, #96]	; (8006dd4 <prvAddNewTaskToReadyList+0xc8>)
 8006d74:	6013      	str	r3, [r2, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4a15      	ldr	r2, [pc, #84]	; (8006dd8 <prvAddNewTaskToReadyList+0xcc>)
 8006d84:	441a      	add	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	3304      	adds	r3, #4
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	4610      	mov	r0, r2
 8006d8e:	f7fe fecc 	bl	8005b2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d92:	f001 fa77 	bl	8008284 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d96:	4b0d      	ldr	r3, [pc, #52]	; (8006dcc <prvAddNewTaskToReadyList+0xc0>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00e      	beq.n	8006dbc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d9e:	4b0a      	ldr	r3, [pc, #40]	; (8006dc8 <prvAddNewTaskToReadyList+0xbc>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d207      	bcs.n	8006dbc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006dac:	4b0b      	ldr	r3, [pc, #44]	; (8006ddc <prvAddNewTaskToReadyList+0xd0>)
 8006dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006db2:	601a      	str	r2, [r3, #0]
 8006db4:	f3bf 8f4f 	dsb	sy
 8006db8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006dbc:	bf00      	nop
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	2000070c 	.word	0x2000070c
 8006dc8:	2000060c 	.word	0x2000060c
 8006dcc:	20000718 	.word	0x20000718
 8006dd0:	20000728 	.word	0x20000728
 8006dd4:	20000714 	.word	0x20000714
 8006dd8:	20000610 	.word	0x20000610
 8006ddc:	e000ed04 	.word	0xe000ed04

08006de0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006de8:	2300      	movs	r3, #0
 8006dea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d017      	beq.n	8006e22 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006df2:	4b13      	ldr	r3, [pc, #76]	; (8006e40 <vTaskDelay+0x60>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00a      	beq.n	8006e10 <vTaskDelay+0x30>
	__asm volatile
 8006dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfe:	f383 8811 	msr	BASEPRI, r3
 8006e02:	f3bf 8f6f 	isb	sy
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	60bb      	str	r3, [r7, #8]
}
 8006e0c:	bf00      	nop
 8006e0e:	e7fe      	b.n	8006e0e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006e10:	f000 f90c 	bl	800702c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e14:	2100      	movs	r1, #0
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f001 f86e 	bl	8007ef8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e1c:	f000 f914 	bl	8007048 <xTaskResumeAll>
 8006e20:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d107      	bne.n	8006e38 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006e28:	4b06      	ldr	r3, [pc, #24]	; (8006e44 <vTaskDelay+0x64>)
 8006e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e2e:	601a      	str	r2, [r3, #0]
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e38:	bf00      	nop
 8006e3a:	3710      	adds	r7, #16
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	20000734 	.word	0x20000734
 8006e44:	e000ed04 	.word	0xe000ed04

08006e48 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006e50:	f001 f9e8 	bl	8008224 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d102      	bne.n	8006e60 <vTaskSuspend+0x18>
 8006e5a:	4b3c      	ldr	r3, [pc, #240]	; (8006f4c <vTaskSuspend+0x104>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	e000      	b.n	8006e62 <vTaskSuspend+0x1a>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	3304      	adds	r3, #4
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7fe febb 	bl	8005be4 <uxListRemove>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d115      	bne.n	8006ea0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e78:	4935      	ldr	r1, [pc, #212]	; (8006f50 <vTaskSuspend+0x108>)
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	4413      	add	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	440b      	add	r3, r1
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10a      	bne.n	8006ea0 <vTaskSuspend+0x58>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8e:	2201      	movs	r2, #1
 8006e90:	fa02 f303 	lsl.w	r3, r2, r3
 8006e94:	43da      	mvns	r2, r3
 8006e96:	4b2f      	ldr	r3, [pc, #188]	; (8006f54 <vTaskSuspend+0x10c>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	4a2d      	ldr	r2, [pc, #180]	; (8006f54 <vTaskSuspend+0x10c>)
 8006e9e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d004      	beq.n	8006eb2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	3318      	adds	r3, #24
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7fe fe99 	bl	8005be4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	3304      	adds	r3, #4
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	4827      	ldr	r0, [pc, #156]	; (8006f58 <vTaskSuspend+0x110>)
 8006eba:	f7fe fe36 	bl	8005b2a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d103      	bne.n	8006ed2 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006ed2:	f001 f9d7 	bl	8008284 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006ed6:	4b21      	ldr	r3, [pc, #132]	; (8006f5c <vTaskSuspend+0x114>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d005      	beq.n	8006eea <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006ede:	f001 f9a1 	bl	8008224 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006ee2:	f000 fc43 	bl	800776c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006ee6:	f001 f9cd 	bl	8008284 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006eea:	4b18      	ldr	r3, [pc, #96]	; (8006f4c <vTaskSuspend+0x104>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d127      	bne.n	8006f44 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8006ef4:	4b19      	ldr	r3, [pc, #100]	; (8006f5c <vTaskSuspend+0x114>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d017      	beq.n	8006f2c <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8006efc:	4b18      	ldr	r3, [pc, #96]	; (8006f60 <vTaskSuspend+0x118>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00a      	beq.n	8006f1a <vTaskSuspend+0xd2>
	__asm volatile
 8006f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	60bb      	str	r3, [r7, #8]
}
 8006f16:	bf00      	nop
 8006f18:	e7fe      	b.n	8006f18 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8006f1a:	4b12      	ldr	r3, [pc, #72]	; (8006f64 <vTaskSuspend+0x11c>)
 8006f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f20:	601a      	str	r2, [r3, #0]
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f2a:	e00b      	b.n	8006f44 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8006f2c:	4b0a      	ldr	r3, [pc, #40]	; (8006f58 <vTaskSuspend+0x110>)
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	4b0d      	ldr	r3, [pc, #52]	; (8006f68 <vTaskSuspend+0x120>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d103      	bne.n	8006f40 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8006f38:	4b04      	ldr	r3, [pc, #16]	; (8006f4c <vTaskSuspend+0x104>)
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	601a      	str	r2, [r3, #0]
	}
 8006f3e:	e001      	b.n	8006f44 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8006f40:	f000 f9f8 	bl	8007334 <vTaskSwitchContext>
	}
 8006f44:	bf00      	nop
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	2000060c 	.word	0x2000060c
 8006f50:	20000610 	.word	0x20000610
 8006f54:	20000714 	.word	0x20000714
 8006f58:	200006f8 	.word	0x200006f8
 8006f5c:	20000718 	.word	0x20000718
 8006f60:	20000734 	.word	0x20000734
 8006f64:	e000ed04 	.word	0xe000ed04
 8006f68:	2000070c 	.word	0x2000070c

08006f6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b08a      	sub	sp, #40	; 0x28
 8006f70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f72:	2300      	movs	r3, #0
 8006f74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f76:	2300      	movs	r3, #0
 8006f78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f7a:	463a      	mov	r2, r7
 8006f7c:	1d39      	adds	r1, r7, #4
 8006f7e:	f107 0308 	add.w	r3, r7, #8
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7f9 ffca 	bl	8000f1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f88:	6839      	ldr	r1, [r7, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	9202      	str	r2, [sp, #8]
 8006f90:	9301      	str	r3, [sp, #4]
 8006f92:	2300      	movs	r3, #0
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	2300      	movs	r3, #0
 8006f98:	460a      	mov	r2, r1
 8006f9a:	491e      	ldr	r1, [pc, #120]	; (8007014 <vTaskStartScheduler+0xa8>)
 8006f9c:	481e      	ldr	r0, [pc, #120]	; (8007018 <vTaskStartScheduler+0xac>)
 8006f9e:	f7ff fd8b 	bl	8006ab8 <xTaskCreateStatic>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	4a1d      	ldr	r2, [pc, #116]	; (800701c <vTaskStartScheduler+0xb0>)
 8006fa6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006fa8:	4b1c      	ldr	r3, [pc, #112]	; (800701c <vTaskStartScheduler+0xb0>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d002      	beq.n	8006fb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	617b      	str	r3, [r7, #20]
 8006fb4:	e001      	b.n	8006fba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d116      	bne.n	8006fee <vTaskStartScheduler+0x82>
	__asm volatile
 8006fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc4:	f383 8811 	msr	BASEPRI, r3
 8006fc8:	f3bf 8f6f 	isb	sy
 8006fcc:	f3bf 8f4f 	dsb	sy
 8006fd0:	613b      	str	r3, [r7, #16]
}
 8006fd2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006fd4:	4b12      	ldr	r3, [pc, #72]	; (8007020 <vTaskStartScheduler+0xb4>)
 8006fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006fda:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006fdc:	4b11      	ldr	r3, [pc, #68]	; (8007024 <vTaskStartScheduler+0xb8>)
 8006fde:	2201      	movs	r2, #1
 8006fe0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006fe2:	4b11      	ldr	r3, [pc, #68]	; (8007028 <vTaskStartScheduler+0xbc>)
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006fe8:	f001 f87a 	bl	80080e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006fec:	e00e      	b.n	800700c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff4:	d10a      	bne.n	800700c <vTaskStartScheduler+0xa0>
	__asm volatile
 8006ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffa:	f383 8811 	msr	BASEPRI, r3
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f3bf 8f4f 	dsb	sy
 8007006:	60fb      	str	r3, [r7, #12]
}
 8007008:	bf00      	nop
 800700a:	e7fe      	b.n	800700a <vTaskStartScheduler+0x9e>
}
 800700c:	bf00      	nop
 800700e:	3718      	adds	r7, #24
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	0800b968 	.word	0x0800b968
 8007018:	08007601 	.word	0x08007601
 800701c:	20000730 	.word	0x20000730
 8007020:	2000072c 	.word	0x2000072c
 8007024:	20000718 	.word	0x20000718
 8007028:	20000710 	.word	0x20000710

0800702c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800702c:	b480      	push	{r7}
 800702e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007030:	4b04      	ldr	r3, [pc, #16]	; (8007044 <vTaskSuspendAll+0x18>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	3301      	adds	r3, #1
 8007036:	4a03      	ldr	r2, [pc, #12]	; (8007044 <vTaskSuspendAll+0x18>)
 8007038:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800703a:	bf00      	nop
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr
 8007044:	20000734 	.word	0x20000734

08007048 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800704e:	2300      	movs	r3, #0
 8007050:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007052:	2300      	movs	r3, #0
 8007054:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007056:	4b41      	ldr	r3, [pc, #260]	; (800715c <xTaskResumeAll+0x114>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10a      	bne.n	8007074 <xTaskResumeAll+0x2c>
	__asm volatile
 800705e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007062:	f383 8811 	msr	BASEPRI, r3
 8007066:	f3bf 8f6f 	isb	sy
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	603b      	str	r3, [r7, #0]
}
 8007070:	bf00      	nop
 8007072:	e7fe      	b.n	8007072 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007074:	f001 f8d6 	bl	8008224 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007078:	4b38      	ldr	r3, [pc, #224]	; (800715c <xTaskResumeAll+0x114>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	3b01      	subs	r3, #1
 800707e:	4a37      	ldr	r2, [pc, #220]	; (800715c <xTaskResumeAll+0x114>)
 8007080:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007082:	4b36      	ldr	r3, [pc, #216]	; (800715c <xTaskResumeAll+0x114>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d161      	bne.n	800714e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800708a:	4b35      	ldr	r3, [pc, #212]	; (8007160 <xTaskResumeAll+0x118>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d05d      	beq.n	800714e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007092:	e02e      	b.n	80070f2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007094:	4b33      	ldr	r3, [pc, #204]	; (8007164 <xTaskResumeAll+0x11c>)
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	3318      	adds	r3, #24
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7fe fd9f 	bl	8005be4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	3304      	adds	r3, #4
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7fe fd9a 	bl	8005be4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b4:	2201      	movs	r2, #1
 80070b6:	409a      	lsls	r2, r3
 80070b8:	4b2b      	ldr	r3, [pc, #172]	; (8007168 <xTaskResumeAll+0x120>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4313      	orrs	r3, r2
 80070be:	4a2a      	ldr	r2, [pc, #168]	; (8007168 <xTaskResumeAll+0x120>)
 80070c0:	6013      	str	r3, [r2, #0]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c6:	4613      	mov	r3, r2
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	4413      	add	r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	4a27      	ldr	r2, [pc, #156]	; (800716c <xTaskResumeAll+0x124>)
 80070d0:	441a      	add	r2, r3
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	3304      	adds	r3, #4
 80070d6:	4619      	mov	r1, r3
 80070d8:	4610      	mov	r0, r2
 80070da:	f7fe fd26 	bl	8005b2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070e2:	4b23      	ldr	r3, [pc, #140]	; (8007170 <xTaskResumeAll+0x128>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d302      	bcc.n	80070f2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80070ec:	4b21      	ldr	r3, [pc, #132]	; (8007174 <xTaskResumeAll+0x12c>)
 80070ee:	2201      	movs	r2, #1
 80070f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070f2:	4b1c      	ldr	r3, [pc, #112]	; (8007164 <xTaskResumeAll+0x11c>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1cc      	bne.n	8007094 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d001      	beq.n	8007104 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007100:	f000 fb34 	bl	800776c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007104:	4b1c      	ldr	r3, [pc, #112]	; (8007178 <xTaskResumeAll+0x130>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d010      	beq.n	8007132 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007110:	f000 f858 	bl	80071c4 <xTaskIncrementTick>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d002      	beq.n	8007120 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800711a:	4b16      	ldr	r3, [pc, #88]	; (8007174 <xTaskResumeAll+0x12c>)
 800711c:	2201      	movs	r2, #1
 800711e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	3b01      	subs	r3, #1
 8007124:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1f1      	bne.n	8007110 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800712c:	4b12      	ldr	r3, [pc, #72]	; (8007178 <xTaskResumeAll+0x130>)
 800712e:	2200      	movs	r2, #0
 8007130:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007132:	4b10      	ldr	r3, [pc, #64]	; (8007174 <xTaskResumeAll+0x12c>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d009      	beq.n	800714e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800713a:	2301      	movs	r3, #1
 800713c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800713e:	4b0f      	ldr	r3, [pc, #60]	; (800717c <xTaskResumeAll+0x134>)
 8007140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007144:	601a      	str	r2, [r3, #0]
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800714e:	f001 f899 	bl	8008284 <vPortExitCritical>

	return xAlreadyYielded;
 8007152:	68bb      	ldr	r3, [r7, #8]
}
 8007154:	4618      	mov	r0, r3
 8007156:	3710      	adds	r7, #16
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}
 800715c:	20000734 	.word	0x20000734
 8007160:	2000070c 	.word	0x2000070c
 8007164:	200006cc 	.word	0x200006cc
 8007168:	20000714 	.word	0x20000714
 800716c:	20000610 	.word	0x20000610
 8007170:	2000060c 	.word	0x2000060c
 8007174:	20000720 	.word	0x20000720
 8007178:	2000071c 	.word	0x2000071c
 800717c:	e000ed04 	.word	0xe000ed04

08007180 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007186:	4b05      	ldr	r3, [pc, #20]	; (800719c <xTaskGetTickCount+0x1c>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800718c:	687b      	ldr	r3, [r7, #4]
}
 800718e:	4618      	mov	r0, r3
 8007190:	370c      	adds	r7, #12
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	20000710 	.word	0x20000710

080071a0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071a6:	f001 f91f 	bl	80083e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80071aa:	2300      	movs	r3, #0
 80071ac:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80071ae:	4b04      	ldr	r3, [pc, #16]	; (80071c0 <xTaskGetTickCountFromISR+0x20>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071b4:	683b      	ldr	r3, [r7, #0]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	20000710 	.word	0x20000710

080071c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b086      	sub	sp, #24
 80071c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80071ca:	2300      	movs	r3, #0
 80071cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071ce:	4b4e      	ldr	r3, [pc, #312]	; (8007308 <xTaskIncrementTick+0x144>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f040 808e 	bne.w	80072f4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80071d8:	4b4c      	ldr	r3, [pc, #304]	; (800730c <xTaskIncrementTick+0x148>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	3301      	adds	r3, #1
 80071de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80071e0:	4a4a      	ldr	r2, [pc, #296]	; (800730c <xTaskIncrementTick+0x148>)
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d120      	bne.n	800722e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80071ec:	4b48      	ldr	r3, [pc, #288]	; (8007310 <xTaskIncrementTick+0x14c>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00a      	beq.n	800720c <xTaskIncrementTick+0x48>
	__asm volatile
 80071f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fa:	f383 8811 	msr	BASEPRI, r3
 80071fe:	f3bf 8f6f 	isb	sy
 8007202:	f3bf 8f4f 	dsb	sy
 8007206:	603b      	str	r3, [r7, #0]
}
 8007208:	bf00      	nop
 800720a:	e7fe      	b.n	800720a <xTaskIncrementTick+0x46>
 800720c:	4b40      	ldr	r3, [pc, #256]	; (8007310 <xTaskIncrementTick+0x14c>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	60fb      	str	r3, [r7, #12]
 8007212:	4b40      	ldr	r3, [pc, #256]	; (8007314 <xTaskIncrementTick+0x150>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a3e      	ldr	r2, [pc, #248]	; (8007310 <xTaskIncrementTick+0x14c>)
 8007218:	6013      	str	r3, [r2, #0]
 800721a:	4a3e      	ldr	r2, [pc, #248]	; (8007314 <xTaskIncrementTick+0x150>)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6013      	str	r3, [r2, #0]
 8007220:	4b3d      	ldr	r3, [pc, #244]	; (8007318 <xTaskIncrementTick+0x154>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	3301      	adds	r3, #1
 8007226:	4a3c      	ldr	r2, [pc, #240]	; (8007318 <xTaskIncrementTick+0x154>)
 8007228:	6013      	str	r3, [r2, #0]
 800722a:	f000 fa9f 	bl	800776c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800722e:	4b3b      	ldr	r3, [pc, #236]	; (800731c <xTaskIncrementTick+0x158>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	429a      	cmp	r2, r3
 8007236:	d348      	bcc.n	80072ca <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007238:	4b35      	ldr	r3, [pc, #212]	; (8007310 <xTaskIncrementTick+0x14c>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d104      	bne.n	800724c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007242:	4b36      	ldr	r3, [pc, #216]	; (800731c <xTaskIncrementTick+0x158>)
 8007244:	f04f 32ff 	mov.w	r2, #4294967295
 8007248:	601a      	str	r2, [r3, #0]
					break;
 800724a:	e03e      	b.n	80072ca <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800724c:	4b30      	ldr	r3, [pc, #192]	; (8007310 <xTaskIncrementTick+0x14c>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	429a      	cmp	r2, r3
 8007262:	d203      	bcs.n	800726c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007264:	4a2d      	ldr	r2, [pc, #180]	; (800731c <xTaskIncrementTick+0x158>)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800726a:	e02e      	b.n	80072ca <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	3304      	adds	r3, #4
 8007270:	4618      	mov	r0, r3
 8007272:	f7fe fcb7 	bl	8005be4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727a:	2b00      	cmp	r3, #0
 800727c:	d004      	beq.n	8007288 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	3318      	adds	r3, #24
 8007282:	4618      	mov	r0, r3
 8007284:	f7fe fcae 	bl	8005be4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728c:	2201      	movs	r2, #1
 800728e:	409a      	lsls	r2, r3
 8007290:	4b23      	ldr	r3, [pc, #140]	; (8007320 <xTaskIncrementTick+0x15c>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4313      	orrs	r3, r2
 8007296:	4a22      	ldr	r2, [pc, #136]	; (8007320 <xTaskIncrementTick+0x15c>)
 8007298:	6013      	str	r3, [r2, #0]
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800729e:	4613      	mov	r3, r2
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	4413      	add	r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	4a1f      	ldr	r2, [pc, #124]	; (8007324 <xTaskIncrementTick+0x160>)
 80072a8:	441a      	add	r2, r3
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	3304      	adds	r3, #4
 80072ae:	4619      	mov	r1, r3
 80072b0:	4610      	mov	r0, r2
 80072b2:	f7fe fc3a 	bl	8005b2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ba:	4b1b      	ldr	r3, [pc, #108]	; (8007328 <xTaskIncrementTick+0x164>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d3b9      	bcc.n	8007238 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80072c4:	2301      	movs	r3, #1
 80072c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072c8:	e7b6      	b.n	8007238 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80072ca:	4b17      	ldr	r3, [pc, #92]	; (8007328 <xTaskIncrementTick+0x164>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d0:	4914      	ldr	r1, [pc, #80]	; (8007324 <xTaskIncrementTick+0x160>)
 80072d2:	4613      	mov	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	4413      	add	r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	440b      	add	r3, r1
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d901      	bls.n	80072e6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80072e2:	2301      	movs	r3, #1
 80072e4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80072e6:	4b11      	ldr	r3, [pc, #68]	; (800732c <xTaskIncrementTick+0x168>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d007      	beq.n	80072fe <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80072ee:	2301      	movs	r3, #1
 80072f0:	617b      	str	r3, [r7, #20]
 80072f2:	e004      	b.n	80072fe <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80072f4:	4b0e      	ldr	r3, [pc, #56]	; (8007330 <xTaskIncrementTick+0x16c>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3301      	adds	r3, #1
 80072fa:	4a0d      	ldr	r2, [pc, #52]	; (8007330 <xTaskIncrementTick+0x16c>)
 80072fc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80072fe:	697b      	ldr	r3, [r7, #20]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3718      	adds	r7, #24
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	20000734 	.word	0x20000734
 800730c:	20000710 	.word	0x20000710
 8007310:	200006c4 	.word	0x200006c4
 8007314:	200006c8 	.word	0x200006c8
 8007318:	20000724 	.word	0x20000724
 800731c:	2000072c 	.word	0x2000072c
 8007320:	20000714 	.word	0x20000714
 8007324:	20000610 	.word	0x20000610
 8007328:	2000060c 	.word	0x2000060c
 800732c:	20000720 	.word	0x20000720
 8007330:	2000071c 	.word	0x2000071c

08007334 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007334:	b480      	push	{r7}
 8007336:	b087      	sub	sp, #28
 8007338:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800733a:	4b27      	ldr	r3, [pc, #156]	; (80073d8 <vTaskSwitchContext+0xa4>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d003      	beq.n	800734a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007342:	4b26      	ldr	r3, [pc, #152]	; (80073dc <vTaskSwitchContext+0xa8>)
 8007344:	2201      	movs	r2, #1
 8007346:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007348:	e03f      	b.n	80073ca <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800734a:	4b24      	ldr	r3, [pc, #144]	; (80073dc <vTaskSwitchContext+0xa8>)
 800734c:	2200      	movs	r2, #0
 800734e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007350:	4b23      	ldr	r3, [pc, #140]	; (80073e0 <vTaskSwitchContext+0xac>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	fab3 f383 	clz	r3, r3
 800735c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800735e:	7afb      	ldrb	r3, [r7, #11]
 8007360:	f1c3 031f 	rsb	r3, r3, #31
 8007364:	617b      	str	r3, [r7, #20]
 8007366:	491f      	ldr	r1, [pc, #124]	; (80073e4 <vTaskSwitchContext+0xb0>)
 8007368:	697a      	ldr	r2, [r7, #20]
 800736a:	4613      	mov	r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	4413      	add	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	440b      	add	r3, r1
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10a      	bne.n	8007390 <vTaskSwitchContext+0x5c>
	__asm volatile
 800737a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737e:	f383 8811 	msr	BASEPRI, r3
 8007382:	f3bf 8f6f 	isb	sy
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	607b      	str	r3, [r7, #4]
}
 800738c:	bf00      	nop
 800738e:	e7fe      	b.n	800738e <vTaskSwitchContext+0x5a>
 8007390:	697a      	ldr	r2, [r7, #20]
 8007392:	4613      	mov	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4413      	add	r3, r2
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	4a12      	ldr	r2, [pc, #72]	; (80073e4 <vTaskSwitchContext+0xb0>)
 800739c:	4413      	add	r3, r2
 800739e:	613b      	str	r3, [r7, #16]
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	685a      	ldr	r2, [r3, #4]
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	605a      	str	r2, [r3, #4]
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	685a      	ldr	r2, [r3, #4]
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	3308      	adds	r3, #8
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d104      	bne.n	80073c0 <vTaskSwitchContext+0x8c>
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	685a      	ldr	r2, [r3, #4]
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	605a      	str	r2, [r3, #4]
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	4a08      	ldr	r2, [pc, #32]	; (80073e8 <vTaskSwitchContext+0xb4>)
 80073c8:	6013      	str	r3, [r2, #0]
}
 80073ca:	bf00      	nop
 80073cc:	371c      	adds	r7, #28
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop
 80073d8:	20000734 	.word	0x20000734
 80073dc:	20000720 	.word	0x20000720
 80073e0:	20000714 	.word	0x20000714
 80073e4:	20000610 	.word	0x20000610
 80073e8:	2000060c 	.word	0x2000060c

080073ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10a      	bne.n	8007412 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80073fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007400:	f383 8811 	msr	BASEPRI, r3
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	60fb      	str	r3, [r7, #12]
}
 800740e:	bf00      	nop
 8007410:	e7fe      	b.n	8007410 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007412:	4b07      	ldr	r3, [pc, #28]	; (8007430 <vTaskPlaceOnEventList+0x44>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	3318      	adds	r3, #24
 8007418:	4619      	mov	r1, r3
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7fe fba9 	bl	8005b72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007420:	2101      	movs	r1, #1
 8007422:	6838      	ldr	r0, [r7, #0]
 8007424:	f000 fd68 	bl	8007ef8 <prvAddCurrentTaskToDelayedList>
}
 8007428:	bf00      	nop
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	2000060c 	.word	0x2000060c

08007434 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d10a      	bne.n	8007460 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800744a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744e:	f383 8811 	msr	BASEPRI, r3
 8007452:	f3bf 8f6f 	isb	sy
 8007456:	f3bf 8f4f 	dsb	sy
 800745a:	60fb      	str	r3, [r7, #12]
}
 800745c:	bf00      	nop
 800745e:	e7fe      	b.n	800745e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	3318      	adds	r3, #24
 8007464:	4618      	mov	r0, r3
 8007466:	f7fe fbbd 	bl	8005be4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800746a:	4b1d      	ldr	r3, [pc, #116]	; (80074e0 <xTaskRemoveFromEventList+0xac>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d11c      	bne.n	80074ac <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	3304      	adds	r3, #4
 8007476:	4618      	mov	r0, r3
 8007478:	f7fe fbb4 	bl	8005be4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007480:	2201      	movs	r2, #1
 8007482:	409a      	lsls	r2, r3
 8007484:	4b17      	ldr	r3, [pc, #92]	; (80074e4 <xTaskRemoveFromEventList+0xb0>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4313      	orrs	r3, r2
 800748a:	4a16      	ldr	r2, [pc, #88]	; (80074e4 <xTaskRemoveFromEventList+0xb0>)
 800748c:	6013      	str	r3, [r2, #0]
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007492:	4613      	mov	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	4413      	add	r3, r2
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	4a13      	ldr	r2, [pc, #76]	; (80074e8 <xTaskRemoveFromEventList+0xb4>)
 800749c:	441a      	add	r2, r3
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	3304      	adds	r3, #4
 80074a2:	4619      	mov	r1, r3
 80074a4:	4610      	mov	r0, r2
 80074a6:	f7fe fb40 	bl	8005b2a <vListInsertEnd>
 80074aa:	e005      	b.n	80074b8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	3318      	adds	r3, #24
 80074b0:	4619      	mov	r1, r3
 80074b2:	480e      	ldr	r0, [pc, #56]	; (80074ec <xTaskRemoveFromEventList+0xb8>)
 80074b4:	f7fe fb39 	bl	8005b2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074bc:	4b0c      	ldr	r3, [pc, #48]	; (80074f0 <xTaskRemoveFromEventList+0xbc>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d905      	bls.n	80074d2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80074c6:	2301      	movs	r3, #1
 80074c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80074ca:	4b0a      	ldr	r3, [pc, #40]	; (80074f4 <xTaskRemoveFromEventList+0xc0>)
 80074cc:	2201      	movs	r2, #1
 80074ce:	601a      	str	r2, [r3, #0]
 80074d0:	e001      	b.n	80074d6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80074d2:	2300      	movs	r3, #0
 80074d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80074d6:	697b      	ldr	r3, [r7, #20]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3718      	adds	r7, #24
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	20000734 	.word	0x20000734
 80074e4:	20000714 	.word	0x20000714
 80074e8:	20000610 	.word	0x20000610
 80074ec:	200006cc 	.word	0x200006cc
 80074f0:	2000060c 	.word	0x2000060c
 80074f4:	20000720 	.word	0x20000720

080074f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007500:	4b06      	ldr	r3, [pc, #24]	; (800751c <vTaskInternalSetTimeOutState+0x24>)
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007508:	4b05      	ldr	r3, [pc, #20]	; (8007520 <vTaskInternalSetTimeOutState+0x28>)
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	605a      	str	r2, [r3, #4]
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr
 800751c:	20000724 	.word	0x20000724
 8007520:	20000710 	.word	0x20000710

08007524 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b088      	sub	sp, #32
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10a      	bne.n	800754a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007538:	f383 8811 	msr	BASEPRI, r3
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	613b      	str	r3, [r7, #16]
}
 8007546:	bf00      	nop
 8007548:	e7fe      	b.n	8007548 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10a      	bne.n	8007566 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	60fb      	str	r3, [r7, #12]
}
 8007562:	bf00      	nop
 8007564:	e7fe      	b.n	8007564 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007566:	f000 fe5d 	bl	8008224 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800756a:	4b1d      	ldr	r3, [pc, #116]	; (80075e0 <xTaskCheckForTimeOut+0xbc>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	69ba      	ldr	r2, [r7, #24]
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007582:	d102      	bne.n	800758a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007584:	2300      	movs	r3, #0
 8007586:	61fb      	str	r3, [r7, #28]
 8007588:	e023      	b.n	80075d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	4b15      	ldr	r3, [pc, #84]	; (80075e4 <xTaskCheckForTimeOut+0xc0>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	429a      	cmp	r2, r3
 8007594:	d007      	beq.n	80075a6 <xTaskCheckForTimeOut+0x82>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	69ba      	ldr	r2, [r7, #24]
 800759c:	429a      	cmp	r2, r3
 800759e:	d302      	bcc.n	80075a6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80075a0:	2301      	movs	r3, #1
 80075a2:	61fb      	str	r3, [r7, #28]
 80075a4:	e015      	b.n	80075d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d20b      	bcs.n	80075c8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	1ad2      	subs	r2, r2, r3
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f7ff ff9b 	bl	80074f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80075c2:	2300      	movs	r3, #0
 80075c4:	61fb      	str	r3, [r7, #28]
 80075c6:	e004      	b.n	80075d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2200      	movs	r2, #0
 80075cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80075ce:	2301      	movs	r3, #1
 80075d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80075d2:	f000 fe57 	bl	8008284 <vPortExitCritical>

	return xReturn;
 80075d6:	69fb      	ldr	r3, [r7, #28]
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3720      	adds	r7, #32
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	20000710 	.word	0x20000710
 80075e4:	20000724 	.word	0x20000724

080075e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80075e8:	b480      	push	{r7}
 80075ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80075ec:	4b03      	ldr	r3, [pc, #12]	; (80075fc <vTaskMissedYield+0x14>)
 80075ee:	2201      	movs	r2, #1
 80075f0:	601a      	str	r2, [r3, #0]
}
 80075f2:	bf00      	nop
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr
 80075fc:	20000720 	.word	0x20000720

08007600 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007608:	f000 f852 	bl	80076b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800760c:	4b06      	ldr	r3, [pc, #24]	; (8007628 <prvIdleTask+0x28>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2b01      	cmp	r3, #1
 8007612:	d9f9      	bls.n	8007608 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007614:	4b05      	ldr	r3, [pc, #20]	; (800762c <prvIdleTask+0x2c>)
 8007616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800761a:	601a      	str	r2, [r3, #0]
 800761c:	f3bf 8f4f 	dsb	sy
 8007620:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007624:	e7f0      	b.n	8007608 <prvIdleTask+0x8>
 8007626:	bf00      	nop
 8007628:	20000610 	.word	0x20000610
 800762c:	e000ed04 	.word	0xe000ed04

08007630 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007636:	2300      	movs	r3, #0
 8007638:	607b      	str	r3, [r7, #4]
 800763a:	e00c      	b.n	8007656 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	4613      	mov	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	4413      	add	r3, r2
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	4a12      	ldr	r2, [pc, #72]	; (8007690 <prvInitialiseTaskLists+0x60>)
 8007648:	4413      	add	r3, r2
 800764a:	4618      	mov	r0, r3
 800764c:	f7fe fa40 	bl	8005ad0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	3301      	adds	r3, #1
 8007654:	607b      	str	r3, [r7, #4]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2b06      	cmp	r3, #6
 800765a:	d9ef      	bls.n	800763c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800765c:	480d      	ldr	r0, [pc, #52]	; (8007694 <prvInitialiseTaskLists+0x64>)
 800765e:	f7fe fa37 	bl	8005ad0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007662:	480d      	ldr	r0, [pc, #52]	; (8007698 <prvInitialiseTaskLists+0x68>)
 8007664:	f7fe fa34 	bl	8005ad0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007668:	480c      	ldr	r0, [pc, #48]	; (800769c <prvInitialiseTaskLists+0x6c>)
 800766a:	f7fe fa31 	bl	8005ad0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800766e:	480c      	ldr	r0, [pc, #48]	; (80076a0 <prvInitialiseTaskLists+0x70>)
 8007670:	f7fe fa2e 	bl	8005ad0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007674:	480b      	ldr	r0, [pc, #44]	; (80076a4 <prvInitialiseTaskLists+0x74>)
 8007676:	f7fe fa2b 	bl	8005ad0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800767a:	4b0b      	ldr	r3, [pc, #44]	; (80076a8 <prvInitialiseTaskLists+0x78>)
 800767c:	4a05      	ldr	r2, [pc, #20]	; (8007694 <prvInitialiseTaskLists+0x64>)
 800767e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007680:	4b0a      	ldr	r3, [pc, #40]	; (80076ac <prvInitialiseTaskLists+0x7c>)
 8007682:	4a05      	ldr	r2, [pc, #20]	; (8007698 <prvInitialiseTaskLists+0x68>)
 8007684:	601a      	str	r2, [r3, #0]
}
 8007686:	bf00      	nop
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	20000610 	.word	0x20000610
 8007694:	2000069c 	.word	0x2000069c
 8007698:	200006b0 	.word	0x200006b0
 800769c:	200006cc 	.word	0x200006cc
 80076a0:	200006e0 	.word	0x200006e0
 80076a4:	200006f8 	.word	0x200006f8
 80076a8:	200006c4 	.word	0x200006c4
 80076ac:	200006c8 	.word	0x200006c8

080076b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076b6:	e019      	b.n	80076ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80076b8:	f000 fdb4 	bl	8008224 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076bc:	4b10      	ldr	r3, [pc, #64]	; (8007700 <prvCheckTasksWaitingTermination+0x50>)
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	3304      	adds	r3, #4
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7fe fa8b 	bl	8005be4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80076ce:	4b0d      	ldr	r3, [pc, #52]	; (8007704 <prvCheckTasksWaitingTermination+0x54>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	3b01      	subs	r3, #1
 80076d4:	4a0b      	ldr	r2, [pc, #44]	; (8007704 <prvCheckTasksWaitingTermination+0x54>)
 80076d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80076d8:	4b0b      	ldr	r3, [pc, #44]	; (8007708 <prvCheckTasksWaitingTermination+0x58>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	3b01      	subs	r3, #1
 80076de:	4a0a      	ldr	r2, [pc, #40]	; (8007708 <prvCheckTasksWaitingTermination+0x58>)
 80076e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80076e2:	f000 fdcf 	bl	8008284 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f810 	bl	800770c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076ec:	4b06      	ldr	r3, [pc, #24]	; (8007708 <prvCheckTasksWaitingTermination+0x58>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d1e1      	bne.n	80076b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80076f4:	bf00      	nop
 80076f6:	bf00      	nop
 80076f8:	3708      	adds	r7, #8
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	200006e0 	.word	0x200006e0
 8007704:	2000070c 	.word	0x2000070c
 8007708:	200006f4 	.word	0x200006f4

0800770c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800771a:	2b00      	cmp	r3, #0
 800771c:	d108      	bne.n	8007730 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007722:	4618      	mov	r0, r3
 8007724:	f000 ff6c 	bl	8008600 <vPortFree>
				vPortFree( pxTCB );
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 ff69 	bl	8008600 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800772e:	e018      	b.n	8007762 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007736:	2b01      	cmp	r3, #1
 8007738:	d103      	bne.n	8007742 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 ff60 	bl	8008600 <vPortFree>
	}
 8007740:	e00f      	b.n	8007762 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007748:	2b02      	cmp	r3, #2
 800774a:	d00a      	beq.n	8007762 <prvDeleteTCB+0x56>
	__asm volatile
 800774c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007750:	f383 8811 	msr	BASEPRI, r3
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	f3bf 8f4f 	dsb	sy
 800775c:	60fb      	str	r3, [r7, #12]
}
 800775e:	bf00      	nop
 8007760:	e7fe      	b.n	8007760 <prvDeleteTCB+0x54>
	}
 8007762:	bf00      	nop
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
	...

0800776c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007772:	4b0c      	ldr	r3, [pc, #48]	; (80077a4 <prvResetNextTaskUnblockTime+0x38>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d104      	bne.n	8007786 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800777c:	4b0a      	ldr	r3, [pc, #40]	; (80077a8 <prvResetNextTaskUnblockTime+0x3c>)
 800777e:	f04f 32ff 	mov.w	r2, #4294967295
 8007782:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007784:	e008      	b.n	8007798 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007786:	4b07      	ldr	r3, [pc, #28]	; (80077a4 <prvResetNextTaskUnblockTime+0x38>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	4a04      	ldr	r2, [pc, #16]	; (80077a8 <prvResetNextTaskUnblockTime+0x3c>)
 8007796:	6013      	str	r3, [r2, #0]
}
 8007798:	bf00      	nop
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr
 80077a4:	200006c4 	.word	0x200006c4
 80077a8:	2000072c 	.word	0x2000072c

080077ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80077b2:	4b0b      	ldr	r3, [pc, #44]	; (80077e0 <xTaskGetSchedulerState+0x34>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d102      	bne.n	80077c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80077ba:	2301      	movs	r3, #1
 80077bc:	607b      	str	r3, [r7, #4]
 80077be:	e008      	b.n	80077d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077c0:	4b08      	ldr	r3, [pc, #32]	; (80077e4 <xTaskGetSchedulerState+0x38>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d102      	bne.n	80077ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80077c8:	2302      	movs	r3, #2
 80077ca:	607b      	str	r3, [r7, #4]
 80077cc:	e001      	b.n	80077d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80077ce:	2300      	movs	r3, #0
 80077d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80077d2:	687b      	ldr	r3, [r7, #4]
	}
 80077d4:	4618      	mov	r0, r3
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr
 80077e0:	20000718 	.word	0x20000718
 80077e4:	20000734 	.word	0x20000734

080077e8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80077f4:	2300      	movs	r3, #0
 80077f6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d05e      	beq.n	80078bc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007802:	4b31      	ldr	r3, [pc, #196]	; (80078c8 <xTaskPriorityInherit+0xe0>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007808:	429a      	cmp	r2, r3
 800780a:	d24e      	bcs.n	80078aa <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	699b      	ldr	r3, [r3, #24]
 8007810:	2b00      	cmp	r3, #0
 8007812:	db06      	blt.n	8007822 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007814:	4b2c      	ldr	r3, [pc, #176]	; (80078c8 <xTaskPriorityInherit+0xe0>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800781a:	f1c3 0207 	rsb	r2, r3, #7
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	6959      	ldr	r1, [r3, #20]
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800782a:	4613      	mov	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4413      	add	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	4a26      	ldr	r2, [pc, #152]	; (80078cc <xTaskPriorityInherit+0xe4>)
 8007834:	4413      	add	r3, r2
 8007836:	4299      	cmp	r1, r3
 8007838:	d12f      	bne.n	800789a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	3304      	adds	r3, #4
 800783e:	4618      	mov	r0, r3
 8007840:	f7fe f9d0 	bl	8005be4 <uxListRemove>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d10a      	bne.n	8007860 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800784e:	2201      	movs	r2, #1
 8007850:	fa02 f303 	lsl.w	r3, r2, r3
 8007854:	43da      	mvns	r2, r3
 8007856:	4b1e      	ldr	r3, [pc, #120]	; (80078d0 <xTaskPriorityInherit+0xe8>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4013      	ands	r3, r2
 800785c:	4a1c      	ldr	r2, [pc, #112]	; (80078d0 <xTaskPriorityInherit+0xe8>)
 800785e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007860:	4b19      	ldr	r3, [pc, #100]	; (80078c8 <xTaskPriorityInherit+0xe0>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786e:	2201      	movs	r2, #1
 8007870:	409a      	lsls	r2, r3
 8007872:	4b17      	ldr	r3, [pc, #92]	; (80078d0 <xTaskPriorityInherit+0xe8>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4313      	orrs	r3, r2
 8007878:	4a15      	ldr	r2, [pc, #84]	; (80078d0 <xTaskPriorityInherit+0xe8>)
 800787a:	6013      	str	r3, [r2, #0]
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007880:	4613      	mov	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	4413      	add	r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	4a10      	ldr	r2, [pc, #64]	; (80078cc <xTaskPriorityInherit+0xe4>)
 800788a:	441a      	add	r2, r3
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	3304      	adds	r3, #4
 8007890:	4619      	mov	r1, r3
 8007892:	4610      	mov	r0, r2
 8007894:	f7fe f949 	bl	8005b2a <vListInsertEnd>
 8007898:	e004      	b.n	80078a4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800789a:	4b0b      	ldr	r3, [pc, #44]	; (80078c8 <xTaskPriorityInherit+0xe0>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80078a4:	2301      	movs	r3, #1
 80078a6:	60fb      	str	r3, [r7, #12]
 80078a8:	e008      	b.n	80078bc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078ae:	4b06      	ldr	r3, [pc, #24]	; (80078c8 <xTaskPriorityInherit+0xe0>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d201      	bcs.n	80078bc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80078b8:	2301      	movs	r3, #1
 80078ba:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80078bc:	68fb      	ldr	r3, [r7, #12]
	}
 80078be:	4618      	mov	r0, r3
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	2000060c 	.word	0x2000060c
 80078cc:	20000610 	.word	0x20000610
 80078d0:	20000714 	.word	0x20000714

080078d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b086      	sub	sp, #24
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80078e0:	2300      	movs	r3, #0
 80078e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d06e      	beq.n	80079c8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80078ea:	4b3a      	ldr	r3, [pc, #232]	; (80079d4 <xTaskPriorityDisinherit+0x100>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	693a      	ldr	r2, [r7, #16]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d00a      	beq.n	800790a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80078f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f8:	f383 8811 	msr	BASEPRI, r3
 80078fc:	f3bf 8f6f 	isb	sy
 8007900:	f3bf 8f4f 	dsb	sy
 8007904:	60fb      	str	r3, [r7, #12]
}
 8007906:	bf00      	nop
 8007908:	e7fe      	b.n	8007908 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800790e:	2b00      	cmp	r3, #0
 8007910:	d10a      	bne.n	8007928 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007916:	f383 8811 	msr	BASEPRI, r3
 800791a:	f3bf 8f6f 	isb	sy
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	60bb      	str	r3, [r7, #8]
}
 8007924:	bf00      	nop
 8007926:	e7fe      	b.n	8007926 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800792c:	1e5a      	subs	r2, r3, #1
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800793a:	429a      	cmp	r2, r3
 800793c:	d044      	beq.n	80079c8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007942:	2b00      	cmp	r3, #0
 8007944:	d140      	bne.n	80079c8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	3304      	adds	r3, #4
 800794a:	4618      	mov	r0, r3
 800794c:	f7fe f94a 	bl	8005be4 <uxListRemove>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d115      	bne.n	8007982 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800795a:	491f      	ldr	r1, [pc, #124]	; (80079d8 <xTaskPriorityDisinherit+0x104>)
 800795c:	4613      	mov	r3, r2
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	4413      	add	r3, r2
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	440b      	add	r3, r1
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10a      	bne.n	8007982 <xTaskPriorityDisinherit+0xae>
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007970:	2201      	movs	r2, #1
 8007972:	fa02 f303 	lsl.w	r3, r2, r3
 8007976:	43da      	mvns	r2, r3
 8007978:	4b18      	ldr	r3, [pc, #96]	; (80079dc <xTaskPriorityDisinherit+0x108>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4013      	ands	r3, r2
 800797e:	4a17      	ldr	r2, [pc, #92]	; (80079dc <xTaskPriorityDisinherit+0x108>)
 8007980:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798e:	f1c3 0207 	rsb	r2, r3, #7
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799a:	2201      	movs	r2, #1
 800799c:	409a      	lsls	r2, r3
 800799e:	4b0f      	ldr	r3, [pc, #60]	; (80079dc <xTaskPriorityDisinherit+0x108>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	4a0d      	ldr	r2, [pc, #52]	; (80079dc <xTaskPriorityDisinherit+0x108>)
 80079a6:	6013      	str	r3, [r2, #0]
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ac:	4613      	mov	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4413      	add	r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	4a08      	ldr	r2, [pc, #32]	; (80079d8 <xTaskPriorityDisinherit+0x104>)
 80079b6:	441a      	add	r2, r3
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	3304      	adds	r3, #4
 80079bc:	4619      	mov	r1, r3
 80079be:	4610      	mov	r0, r2
 80079c0:	f7fe f8b3 	bl	8005b2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80079c4:	2301      	movs	r3, #1
 80079c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079c8:	697b      	ldr	r3, [r7, #20]
	}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3718      	adds	r7, #24
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	2000060c 	.word	0x2000060c
 80079d8:	20000610 	.word	0x20000610
 80079dc:	20000714 	.word	0x20000714

080079e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b088      	sub	sp, #32
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80079ee:	2301      	movs	r3, #1
 80079f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d077      	beq.n	8007ae8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10a      	bne.n	8007a16 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	60fb      	str	r3, [r7, #12]
}
 8007a12:	bf00      	nop
 8007a14:	e7fe      	b.n	8007a14 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007a16:	69bb      	ldr	r3, [r7, #24]
 8007a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a1a:	683a      	ldr	r2, [r7, #0]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d902      	bls.n	8007a26 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	61fb      	str	r3, [r7, #28]
 8007a24:	e002      	b.n	8007a2c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a2a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a30:	69fa      	ldr	r2, [r7, #28]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d058      	beq.n	8007ae8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d153      	bne.n	8007ae8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007a40:	4b2b      	ldr	r3, [pc, #172]	; (8007af0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	69ba      	ldr	r2, [r7, #24]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d10a      	bne.n	8007a60 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4e:	f383 8811 	msr	BASEPRI, r3
 8007a52:	f3bf 8f6f 	isb	sy
 8007a56:	f3bf 8f4f 	dsb	sy
 8007a5a:	60bb      	str	r3, [r7, #8]
}
 8007a5c:	bf00      	nop
 8007a5e:	e7fe      	b.n	8007a5e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a64:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	69fa      	ldr	r2, [r7, #28]
 8007a6a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	db04      	blt.n	8007a7e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	f1c3 0207 	rsb	r2, r3, #7
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	6959      	ldr	r1, [r3, #20]
 8007a82:	693a      	ldr	r2, [r7, #16]
 8007a84:	4613      	mov	r3, r2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	4a19      	ldr	r2, [pc, #100]	; (8007af4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007a8e:	4413      	add	r3, r2
 8007a90:	4299      	cmp	r1, r3
 8007a92:	d129      	bne.n	8007ae8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	3304      	adds	r3, #4
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7fe f8a3 	bl	8005be4 <uxListRemove>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d10a      	bne.n	8007aba <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8007aae:	43da      	mvns	r2, r3
 8007ab0:	4b11      	ldr	r3, [pc, #68]	; (8007af8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	4a10      	ldr	r2, [pc, #64]	; (8007af8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007ab8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007abe:	2201      	movs	r2, #1
 8007ac0:	409a      	lsls	r2, r3
 8007ac2:	4b0d      	ldr	r3, [pc, #52]	; (8007af8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	4a0b      	ldr	r2, [pc, #44]	; (8007af8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007aca:	6013      	str	r3, [r2, #0]
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	4413      	add	r3, r2
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	4a06      	ldr	r2, [pc, #24]	; (8007af4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007ada:	441a      	add	r2, r3
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	3304      	adds	r3, #4
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	4610      	mov	r0, r2
 8007ae4:	f7fe f821 	bl	8005b2a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007ae8:	bf00      	nop
 8007aea:	3720      	adds	r7, #32
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	2000060c 	.word	0x2000060c
 8007af4:	20000610 	.word	0x20000610
 8007af8:	20000714 	.word	0x20000714

08007afc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007afc:	b480      	push	{r7}
 8007afe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007b00:	4b07      	ldr	r3, [pc, #28]	; (8007b20 <pvTaskIncrementMutexHeldCount+0x24>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d004      	beq.n	8007b12 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007b08:	4b05      	ldr	r3, [pc, #20]	; (8007b20 <pvTaskIncrementMutexHeldCount+0x24>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b0e:	3201      	adds	r2, #1
 8007b10:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007b12:	4b03      	ldr	r3, [pc, #12]	; (8007b20 <pvTaskIncrementMutexHeldCount+0x24>)
 8007b14:	681b      	ldr	r3, [r3, #0]
	}
 8007b16:	4618      	mov	r0, r3
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr
 8007b20:	2000060c 	.word	0x2000060c

08007b24 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b086      	sub	sp, #24
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	607a      	str	r2, [r7, #4]
 8007b30:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007b32:	f000 fb77 	bl	8008224 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007b36:	4b26      	ldr	r3, [pc, #152]	; (8007bd0 <xTaskNotifyWait+0xac>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	d01a      	beq.n	8007b7a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007b44:	4b22      	ldr	r3, [pc, #136]	; (8007bd0 <xTaskNotifyWait+0xac>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	43d2      	mvns	r2, r2
 8007b4e:	400a      	ands	r2, r1
 8007b50:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007b52:	4b1f      	ldr	r3, [pc, #124]	; (8007bd0 <xTaskNotifyWait+0xac>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00b      	beq.n	8007b7a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b62:	2101      	movs	r1, #1
 8007b64:	6838      	ldr	r0, [r7, #0]
 8007b66:	f000 f9c7 	bl	8007ef8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007b6a:	4b1a      	ldr	r3, [pc, #104]	; (8007bd4 <xTaskNotifyWait+0xb0>)
 8007b6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b70:	601a      	str	r2, [r3, #0]
 8007b72:	f3bf 8f4f 	dsb	sy
 8007b76:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007b7a:	f000 fb83 	bl	8008284 <vPortExitCritical>

		taskENTER_CRITICAL();
 8007b7e:	f000 fb51 	bl	8008224 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d004      	beq.n	8007b92 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8007b88:	4b11      	ldr	r3, [pc, #68]	; (8007bd0 <xTaskNotifyWait+0xac>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007b92:	4b0f      	ldr	r3, [pc, #60]	; (8007bd0 <xTaskNotifyWait+0xac>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d002      	beq.n	8007ba6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	617b      	str	r3, [r7, #20]
 8007ba4:	e008      	b.n	8007bb8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8007ba6:	4b0a      	ldr	r3, [pc, #40]	; (8007bd0 <xTaskNotifyWait+0xac>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	43d2      	mvns	r2, r2
 8007bb0:	400a      	ands	r2, r1
 8007bb2:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007bb8:	4b05      	ldr	r3, [pc, #20]	; (8007bd0 <xTaskNotifyWait+0xac>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8007bc2:	f000 fb5f 	bl	8008284 <vPortExitCritical>

		return xReturn;
 8007bc6:	697b      	ldr	r3, [r7, #20]
	}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3718      	adds	r7, #24
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	2000060c 	.word	0x2000060c
 8007bd4:	e000ed04 	.word	0xe000ed04

08007bd8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b08a      	sub	sp, #40	; 0x28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	603b      	str	r3, [r7, #0]
 8007be4:	4613      	mov	r3, r2
 8007be6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8007be8:	2301      	movs	r3, #1
 8007bea:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10a      	bne.n	8007c08 <xTaskGenericNotify+0x30>
	__asm volatile
 8007bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	61bb      	str	r3, [r7, #24]
}
 8007c04:	bf00      	nop
 8007c06:	e7fe      	b.n	8007c06 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8007c0c:	f000 fb0a 	bl	8008224 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d003      	beq.n	8007c1e <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007c16:	6a3b      	ldr	r3, [r7, #32]
 8007c18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007c1e:	6a3b      	ldr	r3, [r7, #32]
 8007c20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007c24:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007c26:	6a3b      	ldr	r3, [r7, #32]
 8007c28:	2202      	movs	r2, #2
 8007c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8007c2e:	79fb      	ldrb	r3, [r7, #7]
 8007c30:	2b04      	cmp	r3, #4
 8007c32:	d828      	bhi.n	8007c86 <xTaskGenericNotify+0xae>
 8007c34:	a201      	add	r2, pc, #4	; (adr r2, 8007c3c <xTaskGenericNotify+0x64>)
 8007c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3a:	bf00      	nop
 8007c3c:	08007ca7 	.word	0x08007ca7
 8007c40:	08007c51 	.word	0x08007c51
 8007c44:	08007c5f 	.word	0x08007c5f
 8007c48:	08007c6b 	.word	0x08007c6b
 8007c4c:	08007c73 	.word	0x08007c73
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007c50:	6a3b      	ldr	r3, [r7, #32]
 8007c52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	431a      	orrs	r2, r3
 8007c58:	6a3b      	ldr	r3, [r7, #32]
 8007c5a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8007c5c:	e026      	b.n	8007cac <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007c5e:	6a3b      	ldr	r3, [r7, #32]
 8007c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c62:	1c5a      	adds	r2, r3, #1
 8007c64:	6a3b      	ldr	r3, [r7, #32]
 8007c66:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8007c68:	e020      	b.n	8007cac <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007c6a:	6a3b      	ldr	r3, [r7, #32]
 8007c6c:	68ba      	ldr	r2, [r7, #8]
 8007c6e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8007c70:	e01c      	b.n	8007cac <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007c72:	7ffb      	ldrb	r3, [r7, #31]
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d003      	beq.n	8007c80 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007c78:	6a3b      	ldr	r3, [r7, #32]
 8007c7a:	68ba      	ldr	r2, [r7, #8]
 8007c7c:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007c7e:	e015      	b.n	8007cac <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 8007c80:	2300      	movs	r3, #0
 8007c82:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8007c84:	e012      	b.n	8007cac <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007c86:	6a3b      	ldr	r3, [r7, #32]
 8007c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c8e:	d00c      	beq.n	8007caa <xTaskGenericNotify+0xd2>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c94:	f383 8811 	msr	BASEPRI, r3
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	617b      	str	r3, [r7, #20]
}
 8007ca2:	bf00      	nop
 8007ca4:	e7fe      	b.n	8007ca4 <xTaskGenericNotify+0xcc>
					break;
 8007ca6:	bf00      	nop
 8007ca8:	e000      	b.n	8007cac <xTaskGenericNotify+0xd4>

					break;
 8007caa:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007cac:	7ffb      	ldrb	r3, [r7, #31]
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d139      	bne.n	8007d26 <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cb2:	6a3b      	ldr	r3, [r7, #32]
 8007cb4:	3304      	adds	r3, #4
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fd ff94 	bl	8005be4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007cbc:	6a3b      	ldr	r3, [r7, #32]
 8007cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	409a      	lsls	r2, r3
 8007cc4:	4b1b      	ldr	r3, [pc, #108]	; (8007d34 <xTaskGenericNotify+0x15c>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	4a1a      	ldr	r2, [pc, #104]	; (8007d34 <xTaskGenericNotify+0x15c>)
 8007ccc:	6013      	str	r3, [r2, #0]
 8007cce:	6a3b      	ldr	r3, [r7, #32]
 8007cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	4413      	add	r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	4a17      	ldr	r2, [pc, #92]	; (8007d38 <xTaskGenericNotify+0x160>)
 8007cdc:	441a      	add	r2, r3
 8007cde:	6a3b      	ldr	r3, [r7, #32]
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	4610      	mov	r0, r2
 8007ce6:	f7fd ff20 	bl	8005b2a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007cea:	6a3b      	ldr	r3, [r7, #32]
 8007cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00a      	beq.n	8007d08 <xTaskGenericNotify+0x130>
	__asm volatile
 8007cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf6:	f383 8811 	msr	BASEPRI, r3
 8007cfa:	f3bf 8f6f 	isb	sy
 8007cfe:	f3bf 8f4f 	dsb	sy
 8007d02:	613b      	str	r3, [r7, #16]
}
 8007d04:	bf00      	nop
 8007d06:	e7fe      	b.n	8007d06 <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d08:	6a3b      	ldr	r3, [r7, #32]
 8007d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d0c:	4b0b      	ldr	r3, [pc, #44]	; (8007d3c <xTaskGenericNotify+0x164>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d907      	bls.n	8007d26 <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007d16:	4b0a      	ldr	r3, [pc, #40]	; (8007d40 <xTaskGenericNotify+0x168>)
 8007d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d1c:	601a      	str	r2, [r3, #0]
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007d26:	f000 faad 	bl	8008284 <vPortExitCritical>

		return xReturn;
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3728      	adds	r7, #40	; 0x28
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	20000714 	.word	0x20000714
 8007d38:	20000610 	.word	0x20000610
 8007d3c:	2000060c 	.word	0x2000060c
 8007d40:	e000ed04 	.word	0xe000ed04

08007d44 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b08e      	sub	sp, #56	; 0x38
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	603b      	str	r3, [r7, #0]
 8007d50:	4613      	mov	r3, r2
 8007d52:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007d54:	2301      	movs	r3, #1
 8007d56:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10a      	bne.n	8007d74 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8007d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d70:	bf00      	nop
 8007d72:	e7fe      	b.n	8007d72 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d74:	f000 fb38 	bl	80083e8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8007d7c:	f3ef 8211 	mrs	r2, BASEPRI
 8007d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d84:	f383 8811 	msr	BASEPRI, r3
 8007d88:	f3bf 8f6f 	isb	sy
 8007d8c:	f3bf 8f4f 	dsb	sy
 8007d90:	623a      	str	r2, [r7, #32]
 8007d92:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8007d94:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d96:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d003      	beq.n	8007da6 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007dac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db2:	2202      	movs	r2, #2
 8007db4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8007db8:	79fb      	ldrb	r3, [r7, #7]
 8007dba:	2b04      	cmp	r3, #4
 8007dbc:	d828      	bhi.n	8007e10 <xTaskGenericNotifyFromISR+0xcc>
 8007dbe:	a201      	add	r2, pc, #4	; (adr r2, 8007dc4 <xTaskGenericNotifyFromISR+0x80>)
 8007dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc4:	08007e31 	.word	0x08007e31
 8007dc8:	08007dd9 	.word	0x08007dd9
 8007dcc:	08007de7 	.word	0x08007de7
 8007dd0:	08007df3 	.word	0x08007df3
 8007dd4:	08007dfb 	.word	0x08007dfb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	431a      	orrs	r2, r3
 8007de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8007de4:	e027      	b.n	8007e36 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dea:	1c5a      	adds	r2, r3, #1
 8007dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dee:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8007df0:	e021      	b.n	8007e36 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df4:	68ba      	ldr	r2, [r7, #8]
 8007df6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8007df8:	e01d      	b.n	8007e36 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007dfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d003      	beq.n	8007e0a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e04:	68ba      	ldr	r2, [r7, #8]
 8007e06:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007e08:	e015      	b.n	8007e36 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8007e0e:	e012      	b.n	8007e36 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e18:	d00c      	beq.n	8007e34 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8007e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1e:	f383 8811 	msr	BASEPRI, r3
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	61bb      	str	r3, [r7, #24]
}
 8007e2c:	bf00      	nop
 8007e2e:	e7fe      	b.n	8007e2e <xTaskGenericNotifyFromISR+0xea>
					break;
 8007e30:	bf00      	nop
 8007e32:	e000      	b.n	8007e36 <xTaskGenericNotifyFromISR+0xf2>
					break;
 8007e34:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007e36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d145      	bne.n	8007eca <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00a      	beq.n	8007e5c <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8007e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4a:	f383 8811 	msr	BASEPRI, r3
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	f3bf 8f4f 	dsb	sy
 8007e56:	617b      	str	r3, [r7, #20]
}
 8007e58:	bf00      	nop
 8007e5a:	e7fe      	b.n	8007e5a <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e5c:	4b20      	ldr	r3, [pc, #128]	; (8007ee0 <xTaskGenericNotifyFromISR+0x19c>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d11c      	bne.n	8007e9e <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e66:	3304      	adds	r3, #4
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7fd febb 	bl	8005be4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e72:	2201      	movs	r2, #1
 8007e74:	409a      	lsls	r2, r3
 8007e76:	4b1b      	ldr	r3, [pc, #108]	; (8007ee4 <xTaskGenericNotifyFromISR+0x1a0>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	4a19      	ldr	r2, [pc, #100]	; (8007ee4 <xTaskGenericNotifyFromISR+0x1a0>)
 8007e7e:	6013      	str	r3, [r2, #0]
 8007e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e84:	4613      	mov	r3, r2
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	4413      	add	r3, r2
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	4a16      	ldr	r2, [pc, #88]	; (8007ee8 <xTaskGenericNotifyFromISR+0x1a4>)
 8007e8e:	441a      	add	r2, r3
 8007e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e92:	3304      	adds	r3, #4
 8007e94:	4619      	mov	r1, r3
 8007e96:	4610      	mov	r0, r2
 8007e98:	f7fd fe47 	bl	8005b2a <vListInsertEnd>
 8007e9c:	e005      	b.n	8007eaa <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea0:	3318      	adds	r3, #24
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	4811      	ldr	r0, [pc, #68]	; (8007eec <xTaskGenericNotifyFromISR+0x1a8>)
 8007ea6:	f7fd fe40 	bl	8005b2a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eae:	4b10      	ldr	r3, [pc, #64]	; (8007ef0 <xTaskGenericNotifyFromISR+0x1ac>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d908      	bls.n	8007eca <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d002      	beq.n	8007ec4 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007ec4:	4b0b      	ldr	r3, [pc, #44]	; (8007ef4 <xTaskGenericNotifyFromISR+0x1b0>)
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	601a      	str	r2, [r3, #0]
 8007eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ecc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	f383 8811 	msr	BASEPRI, r3
}
 8007ed4:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3738      	adds	r7, #56	; 0x38
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	20000734 	.word	0x20000734
 8007ee4:	20000714 	.word	0x20000714
 8007ee8:	20000610 	.word	0x20000610
 8007eec:	200006cc 	.word	0x200006cc
 8007ef0:	2000060c 	.word	0x2000060c
 8007ef4:	20000720 	.word	0x20000720

08007ef8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007f02:	4b29      	ldr	r3, [pc, #164]	; (8007fa8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f08:	4b28      	ldr	r3, [pc, #160]	; (8007fac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	3304      	adds	r3, #4
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7fd fe68 	bl	8005be4 <uxListRemove>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d10b      	bne.n	8007f32 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007f1a:	4b24      	ldr	r3, [pc, #144]	; (8007fac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f20:	2201      	movs	r2, #1
 8007f22:	fa02 f303 	lsl.w	r3, r2, r3
 8007f26:	43da      	mvns	r2, r3
 8007f28:	4b21      	ldr	r3, [pc, #132]	; (8007fb0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4013      	ands	r3, r2
 8007f2e:	4a20      	ldr	r2, [pc, #128]	; (8007fb0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007f30:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f38:	d10a      	bne.n	8007f50 <prvAddCurrentTaskToDelayedList+0x58>
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d007      	beq.n	8007f50 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f40:	4b1a      	ldr	r3, [pc, #104]	; (8007fac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	3304      	adds	r3, #4
 8007f46:	4619      	mov	r1, r3
 8007f48:	481a      	ldr	r0, [pc, #104]	; (8007fb4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007f4a:	f7fd fdee 	bl	8005b2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f4e:	e026      	b.n	8007f9e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4413      	add	r3, r2
 8007f56:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f58:	4b14      	ldr	r3, [pc, #80]	; (8007fac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68ba      	ldr	r2, [r7, #8]
 8007f5e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d209      	bcs.n	8007f7c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f68:	4b13      	ldr	r3, [pc, #76]	; (8007fb8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	4b0f      	ldr	r3, [pc, #60]	; (8007fac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	3304      	adds	r3, #4
 8007f72:	4619      	mov	r1, r3
 8007f74:	4610      	mov	r0, r2
 8007f76:	f7fd fdfc 	bl	8005b72 <vListInsert>
}
 8007f7a:	e010      	b.n	8007f9e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f7c:	4b0f      	ldr	r3, [pc, #60]	; (8007fbc <prvAddCurrentTaskToDelayedList+0xc4>)
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	4b0a      	ldr	r3, [pc, #40]	; (8007fac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	3304      	adds	r3, #4
 8007f86:	4619      	mov	r1, r3
 8007f88:	4610      	mov	r0, r2
 8007f8a:	f7fd fdf2 	bl	8005b72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007f8e:	4b0c      	ldr	r3, [pc, #48]	; (8007fc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68ba      	ldr	r2, [r7, #8]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d202      	bcs.n	8007f9e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007f98:	4a09      	ldr	r2, [pc, #36]	; (8007fc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	6013      	str	r3, [r2, #0]
}
 8007f9e:	bf00      	nop
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	20000710 	.word	0x20000710
 8007fac:	2000060c 	.word	0x2000060c
 8007fb0:	20000714 	.word	0x20000714
 8007fb4:	200006f8 	.word	0x200006f8
 8007fb8:	200006c8 	.word	0x200006c8
 8007fbc:	200006c4 	.word	0x200006c4
 8007fc0:	2000072c 	.word	0x2000072c

08007fc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	3b04      	subs	r3, #4
 8007fd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007fdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	3b04      	subs	r3, #4
 8007fe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	f023 0201 	bic.w	r2, r3, #1
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	3b04      	subs	r3, #4
 8007ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ff4:	4a0c      	ldr	r2, [pc, #48]	; (8008028 <pxPortInitialiseStack+0x64>)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	3b14      	subs	r3, #20
 8007ffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	3b04      	subs	r3, #4
 800800a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f06f 0202 	mvn.w	r2, #2
 8008012:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	3b20      	subs	r3, #32
 8008018:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800801a:	68fb      	ldr	r3, [r7, #12]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3714      	adds	r7, #20
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr
 8008028:	0800802d 	.word	0x0800802d

0800802c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008032:	2300      	movs	r3, #0
 8008034:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008036:	4b12      	ldr	r3, [pc, #72]	; (8008080 <prvTaskExitError+0x54>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800803e:	d00a      	beq.n	8008056 <prvTaskExitError+0x2a>
	__asm volatile
 8008040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008044:	f383 8811 	msr	BASEPRI, r3
 8008048:	f3bf 8f6f 	isb	sy
 800804c:	f3bf 8f4f 	dsb	sy
 8008050:	60fb      	str	r3, [r7, #12]
}
 8008052:	bf00      	nop
 8008054:	e7fe      	b.n	8008054 <prvTaskExitError+0x28>
	__asm volatile
 8008056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805a:	f383 8811 	msr	BASEPRI, r3
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	f3bf 8f4f 	dsb	sy
 8008066:	60bb      	str	r3, [r7, #8]
}
 8008068:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800806a:	bf00      	nop
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d0fc      	beq.n	800806c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008072:	bf00      	nop
 8008074:	bf00      	nop
 8008076:	3714      	adds	r7, #20
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr
 8008080:	2000000c 	.word	0x2000000c
	...

08008090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008090:	4b07      	ldr	r3, [pc, #28]	; (80080b0 <pxCurrentTCBConst2>)
 8008092:	6819      	ldr	r1, [r3, #0]
 8008094:	6808      	ldr	r0, [r1, #0]
 8008096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800809a:	f380 8809 	msr	PSP, r0
 800809e:	f3bf 8f6f 	isb	sy
 80080a2:	f04f 0000 	mov.w	r0, #0
 80080a6:	f380 8811 	msr	BASEPRI, r0
 80080aa:	4770      	bx	lr
 80080ac:	f3af 8000 	nop.w

080080b0 <pxCurrentTCBConst2>:
 80080b0:	2000060c 	.word	0x2000060c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80080b4:	bf00      	nop
 80080b6:	bf00      	nop

080080b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80080b8:	4808      	ldr	r0, [pc, #32]	; (80080dc <prvPortStartFirstTask+0x24>)
 80080ba:	6800      	ldr	r0, [r0, #0]
 80080bc:	6800      	ldr	r0, [r0, #0]
 80080be:	f380 8808 	msr	MSP, r0
 80080c2:	f04f 0000 	mov.w	r0, #0
 80080c6:	f380 8814 	msr	CONTROL, r0
 80080ca:	b662      	cpsie	i
 80080cc:	b661      	cpsie	f
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	df00      	svc	0
 80080d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80080da:	bf00      	nop
 80080dc:	e000ed08 	.word	0xe000ed08

080080e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80080e6:	4b46      	ldr	r3, [pc, #280]	; (8008200 <xPortStartScheduler+0x120>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a46      	ldr	r2, [pc, #280]	; (8008204 <xPortStartScheduler+0x124>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d10a      	bne.n	8008106 <xPortStartScheduler+0x26>
	__asm volatile
 80080f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f4:	f383 8811 	msr	BASEPRI, r3
 80080f8:	f3bf 8f6f 	isb	sy
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	613b      	str	r3, [r7, #16]
}
 8008102:	bf00      	nop
 8008104:	e7fe      	b.n	8008104 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008106:	4b3e      	ldr	r3, [pc, #248]	; (8008200 <xPortStartScheduler+0x120>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a3f      	ldr	r2, [pc, #252]	; (8008208 <xPortStartScheduler+0x128>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d10a      	bne.n	8008126 <xPortStartScheduler+0x46>
	__asm volatile
 8008110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008114:	f383 8811 	msr	BASEPRI, r3
 8008118:	f3bf 8f6f 	isb	sy
 800811c:	f3bf 8f4f 	dsb	sy
 8008120:	60fb      	str	r3, [r7, #12]
}
 8008122:	bf00      	nop
 8008124:	e7fe      	b.n	8008124 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008126:	4b39      	ldr	r3, [pc, #228]	; (800820c <xPortStartScheduler+0x12c>)
 8008128:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	b2db      	uxtb	r3, r3
 8008130:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	22ff      	movs	r2, #255	; 0xff
 8008136:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	b2db      	uxtb	r3, r3
 800813e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008140:	78fb      	ldrb	r3, [r7, #3]
 8008142:	b2db      	uxtb	r3, r3
 8008144:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008148:	b2da      	uxtb	r2, r3
 800814a:	4b31      	ldr	r3, [pc, #196]	; (8008210 <xPortStartScheduler+0x130>)
 800814c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800814e:	4b31      	ldr	r3, [pc, #196]	; (8008214 <xPortStartScheduler+0x134>)
 8008150:	2207      	movs	r2, #7
 8008152:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008154:	e009      	b.n	800816a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008156:	4b2f      	ldr	r3, [pc, #188]	; (8008214 <xPortStartScheduler+0x134>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	3b01      	subs	r3, #1
 800815c:	4a2d      	ldr	r2, [pc, #180]	; (8008214 <xPortStartScheduler+0x134>)
 800815e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008160:	78fb      	ldrb	r3, [r7, #3]
 8008162:	b2db      	uxtb	r3, r3
 8008164:	005b      	lsls	r3, r3, #1
 8008166:	b2db      	uxtb	r3, r3
 8008168:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800816a:	78fb      	ldrb	r3, [r7, #3]
 800816c:	b2db      	uxtb	r3, r3
 800816e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008172:	2b80      	cmp	r3, #128	; 0x80
 8008174:	d0ef      	beq.n	8008156 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008176:	4b27      	ldr	r3, [pc, #156]	; (8008214 <xPortStartScheduler+0x134>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f1c3 0307 	rsb	r3, r3, #7
 800817e:	2b04      	cmp	r3, #4
 8008180:	d00a      	beq.n	8008198 <xPortStartScheduler+0xb8>
	__asm volatile
 8008182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008186:	f383 8811 	msr	BASEPRI, r3
 800818a:	f3bf 8f6f 	isb	sy
 800818e:	f3bf 8f4f 	dsb	sy
 8008192:	60bb      	str	r3, [r7, #8]
}
 8008194:	bf00      	nop
 8008196:	e7fe      	b.n	8008196 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008198:	4b1e      	ldr	r3, [pc, #120]	; (8008214 <xPortStartScheduler+0x134>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	021b      	lsls	r3, r3, #8
 800819e:	4a1d      	ldr	r2, [pc, #116]	; (8008214 <xPortStartScheduler+0x134>)
 80081a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80081a2:	4b1c      	ldr	r3, [pc, #112]	; (8008214 <xPortStartScheduler+0x134>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80081aa:	4a1a      	ldr	r2, [pc, #104]	; (8008214 <xPortStartScheduler+0x134>)
 80081ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	b2da      	uxtb	r2, r3
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80081b6:	4b18      	ldr	r3, [pc, #96]	; (8008218 <xPortStartScheduler+0x138>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a17      	ldr	r2, [pc, #92]	; (8008218 <xPortStartScheduler+0x138>)
 80081bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80081c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80081c2:	4b15      	ldr	r3, [pc, #84]	; (8008218 <xPortStartScheduler+0x138>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a14      	ldr	r2, [pc, #80]	; (8008218 <xPortStartScheduler+0x138>)
 80081c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80081cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80081ce:	f000 f8dd 	bl	800838c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80081d2:	4b12      	ldr	r3, [pc, #72]	; (800821c <xPortStartScheduler+0x13c>)
 80081d4:	2200      	movs	r2, #0
 80081d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80081d8:	f000 f8fc 	bl	80083d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80081dc:	4b10      	ldr	r3, [pc, #64]	; (8008220 <xPortStartScheduler+0x140>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a0f      	ldr	r2, [pc, #60]	; (8008220 <xPortStartScheduler+0x140>)
 80081e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80081e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80081e8:	f7ff ff66 	bl	80080b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80081ec:	f7ff f8a2 	bl	8007334 <vTaskSwitchContext>
	prvTaskExitError();
 80081f0:	f7ff ff1c 	bl	800802c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3718      	adds	r7, #24
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	e000ed00 	.word	0xe000ed00
 8008204:	410fc271 	.word	0x410fc271
 8008208:	410fc270 	.word	0x410fc270
 800820c:	e000e400 	.word	0xe000e400
 8008210:	20000738 	.word	0x20000738
 8008214:	2000073c 	.word	0x2000073c
 8008218:	e000ed20 	.word	0xe000ed20
 800821c:	2000000c 	.word	0x2000000c
 8008220:	e000ef34 	.word	0xe000ef34

08008224 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
	__asm volatile
 800822a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822e:	f383 8811 	msr	BASEPRI, r3
 8008232:	f3bf 8f6f 	isb	sy
 8008236:	f3bf 8f4f 	dsb	sy
 800823a:	607b      	str	r3, [r7, #4]
}
 800823c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800823e:	4b0f      	ldr	r3, [pc, #60]	; (800827c <vPortEnterCritical+0x58>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	3301      	adds	r3, #1
 8008244:	4a0d      	ldr	r2, [pc, #52]	; (800827c <vPortEnterCritical+0x58>)
 8008246:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008248:	4b0c      	ldr	r3, [pc, #48]	; (800827c <vPortEnterCritical+0x58>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d10f      	bne.n	8008270 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008250:	4b0b      	ldr	r3, [pc, #44]	; (8008280 <vPortEnterCritical+0x5c>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	b2db      	uxtb	r3, r3
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00a      	beq.n	8008270 <vPortEnterCritical+0x4c>
	__asm volatile
 800825a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825e:	f383 8811 	msr	BASEPRI, r3
 8008262:	f3bf 8f6f 	isb	sy
 8008266:	f3bf 8f4f 	dsb	sy
 800826a:	603b      	str	r3, [r7, #0]
}
 800826c:	bf00      	nop
 800826e:	e7fe      	b.n	800826e <vPortEnterCritical+0x4a>
	}
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	2000000c 	.word	0x2000000c
 8008280:	e000ed04 	.word	0xe000ed04

08008284 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800828a:	4b12      	ldr	r3, [pc, #72]	; (80082d4 <vPortExitCritical+0x50>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10a      	bne.n	80082a8 <vPortExitCritical+0x24>
	__asm volatile
 8008292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008296:	f383 8811 	msr	BASEPRI, r3
 800829a:	f3bf 8f6f 	isb	sy
 800829e:	f3bf 8f4f 	dsb	sy
 80082a2:	607b      	str	r3, [r7, #4]
}
 80082a4:	bf00      	nop
 80082a6:	e7fe      	b.n	80082a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80082a8:	4b0a      	ldr	r3, [pc, #40]	; (80082d4 <vPortExitCritical+0x50>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	3b01      	subs	r3, #1
 80082ae:	4a09      	ldr	r2, [pc, #36]	; (80082d4 <vPortExitCritical+0x50>)
 80082b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80082b2:	4b08      	ldr	r3, [pc, #32]	; (80082d4 <vPortExitCritical+0x50>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d105      	bne.n	80082c6 <vPortExitCritical+0x42>
 80082ba:	2300      	movs	r3, #0
 80082bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	f383 8811 	msr	BASEPRI, r3
}
 80082c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80082c6:	bf00      	nop
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	2000000c 	.word	0x2000000c
	...

080082e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80082e0:	f3ef 8009 	mrs	r0, PSP
 80082e4:	f3bf 8f6f 	isb	sy
 80082e8:	4b15      	ldr	r3, [pc, #84]	; (8008340 <pxCurrentTCBConst>)
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	f01e 0f10 	tst.w	lr, #16
 80082f0:	bf08      	it	eq
 80082f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80082f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082fa:	6010      	str	r0, [r2, #0]
 80082fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008300:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008304:	f380 8811 	msr	BASEPRI, r0
 8008308:	f3bf 8f4f 	dsb	sy
 800830c:	f3bf 8f6f 	isb	sy
 8008310:	f7ff f810 	bl	8007334 <vTaskSwitchContext>
 8008314:	f04f 0000 	mov.w	r0, #0
 8008318:	f380 8811 	msr	BASEPRI, r0
 800831c:	bc09      	pop	{r0, r3}
 800831e:	6819      	ldr	r1, [r3, #0]
 8008320:	6808      	ldr	r0, [r1, #0]
 8008322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008326:	f01e 0f10 	tst.w	lr, #16
 800832a:	bf08      	it	eq
 800832c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008330:	f380 8809 	msr	PSP, r0
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	f3af 8000 	nop.w

08008340 <pxCurrentTCBConst>:
 8008340:	2000060c 	.word	0x2000060c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008344:	bf00      	nop
 8008346:	bf00      	nop

08008348 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
	__asm volatile
 800834e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008352:	f383 8811 	msr	BASEPRI, r3
 8008356:	f3bf 8f6f 	isb	sy
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	607b      	str	r3, [r7, #4]
}
 8008360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008362:	f7fe ff2f 	bl	80071c4 <xTaskIncrementTick>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d003      	beq.n	8008374 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800836c:	4b06      	ldr	r3, [pc, #24]	; (8008388 <SysTick_Handler+0x40>)
 800836e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008372:	601a      	str	r2, [r3, #0]
 8008374:	2300      	movs	r3, #0
 8008376:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	f383 8811 	msr	BASEPRI, r3
}
 800837e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008380:	bf00      	nop
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	e000ed04 	.word	0xe000ed04

0800838c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800838c:	b480      	push	{r7}
 800838e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008390:	4b0b      	ldr	r3, [pc, #44]	; (80083c0 <vPortSetupTimerInterrupt+0x34>)
 8008392:	2200      	movs	r2, #0
 8008394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008396:	4b0b      	ldr	r3, [pc, #44]	; (80083c4 <vPortSetupTimerInterrupt+0x38>)
 8008398:	2200      	movs	r2, #0
 800839a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800839c:	4b0a      	ldr	r3, [pc, #40]	; (80083c8 <vPortSetupTimerInterrupt+0x3c>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a0a      	ldr	r2, [pc, #40]	; (80083cc <vPortSetupTimerInterrupt+0x40>)
 80083a2:	fba2 2303 	umull	r2, r3, r2, r3
 80083a6:	099b      	lsrs	r3, r3, #6
 80083a8:	4a09      	ldr	r2, [pc, #36]	; (80083d0 <vPortSetupTimerInterrupt+0x44>)
 80083aa:	3b01      	subs	r3, #1
 80083ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80083ae:	4b04      	ldr	r3, [pc, #16]	; (80083c0 <vPortSetupTimerInterrupt+0x34>)
 80083b0:	2207      	movs	r2, #7
 80083b2:	601a      	str	r2, [r3, #0]
}
 80083b4:	bf00      	nop
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	e000e010 	.word	0xe000e010
 80083c4:	e000e018 	.word	0xe000e018
 80083c8:	20000000 	.word	0x20000000
 80083cc:	10624dd3 	.word	0x10624dd3
 80083d0:	e000e014 	.word	0xe000e014

080083d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80083d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80083e4 <vPortEnableVFP+0x10>
 80083d8:	6801      	ldr	r1, [r0, #0]
 80083da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80083de:	6001      	str	r1, [r0, #0]
 80083e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80083e2:	bf00      	nop
 80083e4:	e000ed88 	.word	0xe000ed88

080083e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80083ee:	f3ef 8305 	mrs	r3, IPSR
 80083f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2b0f      	cmp	r3, #15
 80083f8:	d914      	bls.n	8008424 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80083fa:	4a17      	ldr	r2, [pc, #92]	; (8008458 <vPortValidateInterruptPriority+0x70>)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	4413      	add	r3, r2
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008404:	4b15      	ldr	r3, [pc, #84]	; (800845c <vPortValidateInterruptPriority+0x74>)
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	7afa      	ldrb	r2, [r7, #11]
 800840a:	429a      	cmp	r2, r3
 800840c:	d20a      	bcs.n	8008424 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800840e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008412:	f383 8811 	msr	BASEPRI, r3
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	607b      	str	r3, [r7, #4]
}
 8008420:	bf00      	nop
 8008422:	e7fe      	b.n	8008422 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008424:	4b0e      	ldr	r3, [pc, #56]	; (8008460 <vPortValidateInterruptPriority+0x78>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800842c:	4b0d      	ldr	r3, [pc, #52]	; (8008464 <vPortValidateInterruptPriority+0x7c>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	429a      	cmp	r2, r3
 8008432:	d90a      	bls.n	800844a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008438:	f383 8811 	msr	BASEPRI, r3
 800843c:	f3bf 8f6f 	isb	sy
 8008440:	f3bf 8f4f 	dsb	sy
 8008444:	603b      	str	r3, [r7, #0]
}
 8008446:	bf00      	nop
 8008448:	e7fe      	b.n	8008448 <vPortValidateInterruptPriority+0x60>
	}
 800844a:	bf00      	nop
 800844c:	3714      	adds	r7, #20
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop
 8008458:	e000e3f0 	.word	0xe000e3f0
 800845c:	20000738 	.word	0x20000738
 8008460:	e000ed0c 	.word	0xe000ed0c
 8008464:	2000073c 	.word	0x2000073c

08008468 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b08a      	sub	sp, #40	; 0x28
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008470:	2300      	movs	r3, #0
 8008472:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008474:	f7fe fdda 	bl	800702c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008478:	4b5b      	ldr	r3, [pc, #364]	; (80085e8 <pvPortMalloc+0x180>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d101      	bne.n	8008484 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008480:	f000 f920 	bl	80086c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008484:	4b59      	ldr	r3, [pc, #356]	; (80085ec <pvPortMalloc+0x184>)
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4013      	ands	r3, r2
 800848c:	2b00      	cmp	r3, #0
 800848e:	f040 8093 	bne.w	80085b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d01d      	beq.n	80084d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008498:	2208      	movs	r2, #8
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4413      	add	r3, r2
 800849e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f003 0307 	and.w	r3, r3, #7
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d014      	beq.n	80084d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f023 0307 	bic.w	r3, r3, #7
 80084b0:	3308      	adds	r3, #8
 80084b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f003 0307 	and.w	r3, r3, #7
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00a      	beq.n	80084d4 <pvPortMalloc+0x6c>
	__asm volatile
 80084be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c2:	f383 8811 	msr	BASEPRI, r3
 80084c6:	f3bf 8f6f 	isb	sy
 80084ca:	f3bf 8f4f 	dsb	sy
 80084ce:	617b      	str	r3, [r7, #20]
}
 80084d0:	bf00      	nop
 80084d2:	e7fe      	b.n	80084d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d06e      	beq.n	80085b8 <pvPortMalloc+0x150>
 80084da:	4b45      	ldr	r3, [pc, #276]	; (80085f0 <pvPortMalloc+0x188>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d869      	bhi.n	80085b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80084e4:	4b43      	ldr	r3, [pc, #268]	; (80085f4 <pvPortMalloc+0x18c>)
 80084e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80084e8:	4b42      	ldr	r3, [pc, #264]	; (80085f4 <pvPortMalloc+0x18c>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084ee:	e004      	b.n	80084fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80084f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80084f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	429a      	cmp	r2, r3
 8008502:	d903      	bls.n	800850c <pvPortMalloc+0xa4>
 8008504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1f1      	bne.n	80084f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800850c:	4b36      	ldr	r3, [pc, #216]	; (80085e8 <pvPortMalloc+0x180>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008512:	429a      	cmp	r2, r3
 8008514:	d050      	beq.n	80085b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008516:	6a3b      	ldr	r3, [r7, #32]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2208      	movs	r2, #8
 800851c:	4413      	add	r3, r2
 800851e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	6a3b      	ldr	r3, [r7, #32]
 8008526:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852a:	685a      	ldr	r2, [r3, #4]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	1ad2      	subs	r2, r2, r3
 8008530:	2308      	movs	r3, #8
 8008532:	005b      	lsls	r3, r3, #1
 8008534:	429a      	cmp	r2, r3
 8008536:	d91f      	bls.n	8008578 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4413      	add	r3, r2
 800853e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	f003 0307 	and.w	r3, r3, #7
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00a      	beq.n	8008560 <pvPortMalloc+0xf8>
	__asm volatile
 800854a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854e:	f383 8811 	msr	BASEPRI, r3
 8008552:	f3bf 8f6f 	isb	sy
 8008556:	f3bf 8f4f 	dsb	sy
 800855a:	613b      	str	r3, [r7, #16]
}
 800855c:	bf00      	nop
 800855e:	e7fe      	b.n	800855e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008562:	685a      	ldr	r2, [r3, #4]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	1ad2      	subs	r2, r2, r3
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800856c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008572:	69b8      	ldr	r0, [r7, #24]
 8008574:	f000 f908 	bl	8008788 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008578:	4b1d      	ldr	r3, [pc, #116]	; (80085f0 <pvPortMalloc+0x188>)
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	4a1b      	ldr	r2, [pc, #108]	; (80085f0 <pvPortMalloc+0x188>)
 8008584:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008586:	4b1a      	ldr	r3, [pc, #104]	; (80085f0 <pvPortMalloc+0x188>)
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	4b1b      	ldr	r3, [pc, #108]	; (80085f8 <pvPortMalloc+0x190>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	429a      	cmp	r2, r3
 8008590:	d203      	bcs.n	800859a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008592:	4b17      	ldr	r3, [pc, #92]	; (80085f0 <pvPortMalloc+0x188>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a18      	ldr	r2, [pc, #96]	; (80085f8 <pvPortMalloc+0x190>)
 8008598:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800859a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859c:	685a      	ldr	r2, [r3, #4]
 800859e:	4b13      	ldr	r3, [pc, #76]	; (80085ec <pvPortMalloc+0x184>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	431a      	orrs	r2, r3
 80085a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80085a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085aa:	2200      	movs	r2, #0
 80085ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80085ae:	4b13      	ldr	r3, [pc, #76]	; (80085fc <pvPortMalloc+0x194>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	3301      	adds	r3, #1
 80085b4:	4a11      	ldr	r2, [pc, #68]	; (80085fc <pvPortMalloc+0x194>)
 80085b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80085b8:	f7fe fd46 	bl	8007048 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	f003 0307 	and.w	r3, r3, #7
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00a      	beq.n	80085dc <pvPortMalloc+0x174>
	__asm volatile
 80085c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ca:	f383 8811 	msr	BASEPRI, r3
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	f3bf 8f4f 	dsb	sy
 80085d6:	60fb      	str	r3, [r7, #12]
}
 80085d8:	bf00      	nop
 80085da:	e7fe      	b.n	80085da <pvPortMalloc+0x172>
	return pvReturn;
 80085dc:	69fb      	ldr	r3, [r7, #28]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3728      	adds	r7, #40	; 0x28
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	20004348 	.word	0x20004348
 80085ec:	2000435c 	.word	0x2000435c
 80085f0:	2000434c 	.word	0x2000434c
 80085f4:	20004340 	.word	0x20004340
 80085f8:	20004350 	.word	0x20004350
 80085fc:	20004354 	.word	0x20004354

08008600 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b086      	sub	sp, #24
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d04d      	beq.n	80086ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008612:	2308      	movs	r3, #8
 8008614:	425b      	negs	r3, r3
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	4413      	add	r3, r2
 800861a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	685a      	ldr	r2, [r3, #4]
 8008624:	4b24      	ldr	r3, [pc, #144]	; (80086b8 <vPortFree+0xb8>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4013      	ands	r3, r2
 800862a:	2b00      	cmp	r3, #0
 800862c:	d10a      	bne.n	8008644 <vPortFree+0x44>
	__asm volatile
 800862e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008632:	f383 8811 	msr	BASEPRI, r3
 8008636:	f3bf 8f6f 	isb	sy
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	60fb      	str	r3, [r7, #12]
}
 8008640:	bf00      	nop
 8008642:	e7fe      	b.n	8008642 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00a      	beq.n	8008662 <vPortFree+0x62>
	__asm volatile
 800864c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008650:	f383 8811 	msr	BASEPRI, r3
 8008654:	f3bf 8f6f 	isb	sy
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	60bb      	str	r3, [r7, #8]
}
 800865e:	bf00      	nop
 8008660:	e7fe      	b.n	8008660 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	685a      	ldr	r2, [r3, #4]
 8008666:	4b14      	ldr	r3, [pc, #80]	; (80086b8 <vPortFree+0xb8>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4013      	ands	r3, r2
 800866c:	2b00      	cmp	r3, #0
 800866e:	d01e      	beq.n	80086ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d11a      	bne.n	80086ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	685a      	ldr	r2, [r3, #4]
 800867c:	4b0e      	ldr	r3, [pc, #56]	; (80086b8 <vPortFree+0xb8>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	43db      	mvns	r3, r3
 8008682:	401a      	ands	r2, r3
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008688:	f7fe fcd0 	bl	800702c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	685a      	ldr	r2, [r3, #4]
 8008690:	4b0a      	ldr	r3, [pc, #40]	; (80086bc <vPortFree+0xbc>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4413      	add	r3, r2
 8008696:	4a09      	ldr	r2, [pc, #36]	; (80086bc <vPortFree+0xbc>)
 8008698:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800869a:	6938      	ldr	r0, [r7, #16]
 800869c:	f000 f874 	bl	8008788 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80086a0:	4b07      	ldr	r3, [pc, #28]	; (80086c0 <vPortFree+0xc0>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	3301      	adds	r3, #1
 80086a6:	4a06      	ldr	r2, [pc, #24]	; (80086c0 <vPortFree+0xc0>)
 80086a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80086aa:	f7fe fccd 	bl	8007048 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80086ae:	bf00      	nop
 80086b0:	3718      	adds	r7, #24
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	2000435c 	.word	0x2000435c
 80086bc:	2000434c 	.word	0x2000434c
 80086c0:	20004358 	.word	0x20004358

080086c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80086ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80086ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80086d0:	4b27      	ldr	r3, [pc, #156]	; (8008770 <prvHeapInit+0xac>)
 80086d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f003 0307 	and.w	r3, r3, #7
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00c      	beq.n	80086f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	3307      	adds	r3, #7
 80086e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f023 0307 	bic.w	r3, r3, #7
 80086ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	1ad3      	subs	r3, r2, r3
 80086f2:	4a1f      	ldr	r2, [pc, #124]	; (8008770 <prvHeapInit+0xac>)
 80086f4:	4413      	add	r3, r2
 80086f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80086fc:	4a1d      	ldr	r2, [pc, #116]	; (8008774 <prvHeapInit+0xb0>)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008702:	4b1c      	ldr	r3, [pc, #112]	; (8008774 <prvHeapInit+0xb0>)
 8008704:	2200      	movs	r2, #0
 8008706:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	68ba      	ldr	r2, [r7, #8]
 800870c:	4413      	add	r3, r2
 800870e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008710:	2208      	movs	r2, #8
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	1a9b      	subs	r3, r3, r2
 8008716:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f023 0307 	bic.w	r3, r3, #7
 800871e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	4a15      	ldr	r2, [pc, #84]	; (8008778 <prvHeapInit+0xb4>)
 8008724:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008726:	4b14      	ldr	r3, [pc, #80]	; (8008778 <prvHeapInit+0xb4>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2200      	movs	r2, #0
 800872c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800872e:	4b12      	ldr	r3, [pc, #72]	; (8008778 <prvHeapInit+0xb4>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2200      	movs	r2, #0
 8008734:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	1ad2      	subs	r2, r2, r3
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008744:	4b0c      	ldr	r3, [pc, #48]	; (8008778 <prvHeapInit+0xb4>)
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	4a0a      	ldr	r2, [pc, #40]	; (800877c <prvHeapInit+0xb8>)
 8008752:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	4a09      	ldr	r2, [pc, #36]	; (8008780 <prvHeapInit+0xbc>)
 800875a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800875c:	4b09      	ldr	r3, [pc, #36]	; (8008784 <prvHeapInit+0xc0>)
 800875e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008762:	601a      	str	r2, [r3, #0]
}
 8008764:	bf00      	nop
 8008766:	3714      	adds	r7, #20
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr
 8008770:	20000740 	.word	0x20000740
 8008774:	20004340 	.word	0x20004340
 8008778:	20004348 	.word	0x20004348
 800877c:	20004350 	.word	0x20004350
 8008780:	2000434c 	.word	0x2000434c
 8008784:	2000435c 	.word	0x2000435c

08008788 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008790:	4b28      	ldr	r3, [pc, #160]	; (8008834 <prvInsertBlockIntoFreeList+0xac>)
 8008792:	60fb      	str	r3, [r7, #12]
 8008794:	e002      	b.n	800879c <prvInsertBlockIntoFreeList+0x14>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	60fb      	str	r3, [r7, #12]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d8f7      	bhi.n	8008796 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	68ba      	ldr	r2, [r7, #8]
 80087b0:	4413      	add	r3, r2
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d108      	bne.n	80087ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	685a      	ldr	r2, [r3, #4]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	441a      	add	r2, r3
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	441a      	add	r2, r3
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d118      	bne.n	8008810 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	4b15      	ldr	r3, [pc, #84]	; (8008838 <prvInsertBlockIntoFreeList+0xb0>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d00d      	beq.n	8008806 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	685a      	ldr	r2, [r3, #4]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	441a      	add	r2, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	601a      	str	r2, [r3, #0]
 8008804:	e008      	b.n	8008818 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008806:	4b0c      	ldr	r3, [pc, #48]	; (8008838 <prvInsertBlockIntoFreeList+0xb0>)
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	601a      	str	r2, [r3, #0]
 800880e:	e003      	b.n	8008818 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	429a      	cmp	r2, r3
 800881e:	d002      	beq.n	8008826 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008826:	bf00      	nop
 8008828:	3714      	adds	r7, #20
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	20004340 	.word	0x20004340
 8008838:	20004348 	.word	0x20004348

0800883c <__errno>:
 800883c:	4b01      	ldr	r3, [pc, #4]	; (8008844 <__errno+0x8>)
 800883e:	6818      	ldr	r0, [r3, #0]
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	20000010 	.word	0x20000010

08008848 <__libc_init_array>:
 8008848:	b570      	push	{r4, r5, r6, lr}
 800884a:	4d0d      	ldr	r5, [pc, #52]	; (8008880 <__libc_init_array+0x38>)
 800884c:	4c0d      	ldr	r4, [pc, #52]	; (8008884 <__libc_init_array+0x3c>)
 800884e:	1b64      	subs	r4, r4, r5
 8008850:	10a4      	asrs	r4, r4, #2
 8008852:	2600      	movs	r6, #0
 8008854:	42a6      	cmp	r6, r4
 8008856:	d109      	bne.n	800886c <__libc_init_array+0x24>
 8008858:	4d0b      	ldr	r5, [pc, #44]	; (8008888 <__libc_init_array+0x40>)
 800885a:	4c0c      	ldr	r4, [pc, #48]	; (800888c <__libc_init_array+0x44>)
 800885c:	f002 ff02 	bl	800b664 <_init>
 8008860:	1b64      	subs	r4, r4, r5
 8008862:	10a4      	asrs	r4, r4, #2
 8008864:	2600      	movs	r6, #0
 8008866:	42a6      	cmp	r6, r4
 8008868:	d105      	bne.n	8008876 <__libc_init_array+0x2e>
 800886a:	bd70      	pop	{r4, r5, r6, pc}
 800886c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008870:	4798      	blx	r3
 8008872:	3601      	adds	r6, #1
 8008874:	e7ee      	b.n	8008854 <__libc_init_array+0xc>
 8008876:	f855 3b04 	ldr.w	r3, [r5], #4
 800887a:	4798      	blx	r3
 800887c:	3601      	adds	r6, #1
 800887e:	e7f2      	b.n	8008866 <__libc_init_array+0x1e>
 8008880:	0800bd6c 	.word	0x0800bd6c
 8008884:	0800bd6c 	.word	0x0800bd6c
 8008888:	0800bd6c 	.word	0x0800bd6c
 800888c:	0800bd70 	.word	0x0800bd70

08008890 <memcpy>:
 8008890:	440a      	add	r2, r1
 8008892:	4291      	cmp	r1, r2
 8008894:	f100 33ff 	add.w	r3, r0, #4294967295
 8008898:	d100      	bne.n	800889c <memcpy+0xc>
 800889a:	4770      	bx	lr
 800889c:	b510      	push	{r4, lr}
 800889e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088a6:	4291      	cmp	r1, r2
 80088a8:	d1f9      	bne.n	800889e <memcpy+0xe>
 80088aa:	bd10      	pop	{r4, pc}

080088ac <memset>:
 80088ac:	4402      	add	r2, r0
 80088ae:	4603      	mov	r3, r0
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d100      	bne.n	80088b6 <memset+0xa>
 80088b4:	4770      	bx	lr
 80088b6:	f803 1b01 	strb.w	r1, [r3], #1
 80088ba:	e7f9      	b.n	80088b0 <memset+0x4>

080088bc <__cvt>:
 80088bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088c0:	ec55 4b10 	vmov	r4, r5, d0
 80088c4:	2d00      	cmp	r5, #0
 80088c6:	460e      	mov	r6, r1
 80088c8:	4619      	mov	r1, r3
 80088ca:	462b      	mov	r3, r5
 80088cc:	bfbb      	ittet	lt
 80088ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80088d2:	461d      	movlt	r5, r3
 80088d4:	2300      	movge	r3, #0
 80088d6:	232d      	movlt	r3, #45	; 0x2d
 80088d8:	700b      	strb	r3, [r1, #0]
 80088da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80088e0:	4691      	mov	r9, r2
 80088e2:	f023 0820 	bic.w	r8, r3, #32
 80088e6:	bfbc      	itt	lt
 80088e8:	4622      	movlt	r2, r4
 80088ea:	4614      	movlt	r4, r2
 80088ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80088f0:	d005      	beq.n	80088fe <__cvt+0x42>
 80088f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80088f6:	d100      	bne.n	80088fa <__cvt+0x3e>
 80088f8:	3601      	adds	r6, #1
 80088fa:	2102      	movs	r1, #2
 80088fc:	e000      	b.n	8008900 <__cvt+0x44>
 80088fe:	2103      	movs	r1, #3
 8008900:	ab03      	add	r3, sp, #12
 8008902:	9301      	str	r3, [sp, #4]
 8008904:	ab02      	add	r3, sp, #8
 8008906:	9300      	str	r3, [sp, #0]
 8008908:	ec45 4b10 	vmov	d0, r4, r5
 800890c:	4653      	mov	r3, sl
 800890e:	4632      	mov	r2, r6
 8008910:	f000 fcea 	bl	80092e8 <_dtoa_r>
 8008914:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008918:	4607      	mov	r7, r0
 800891a:	d102      	bne.n	8008922 <__cvt+0x66>
 800891c:	f019 0f01 	tst.w	r9, #1
 8008920:	d022      	beq.n	8008968 <__cvt+0xac>
 8008922:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008926:	eb07 0906 	add.w	r9, r7, r6
 800892a:	d110      	bne.n	800894e <__cvt+0x92>
 800892c:	783b      	ldrb	r3, [r7, #0]
 800892e:	2b30      	cmp	r3, #48	; 0x30
 8008930:	d10a      	bne.n	8008948 <__cvt+0x8c>
 8008932:	2200      	movs	r2, #0
 8008934:	2300      	movs	r3, #0
 8008936:	4620      	mov	r0, r4
 8008938:	4629      	mov	r1, r5
 800893a:	f7f8 f8dd 	bl	8000af8 <__aeabi_dcmpeq>
 800893e:	b918      	cbnz	r0, 8008948 <__cvt+0x8c>
 8008940:	f1c6 0601 	rsb	r6, r6, #1
 8008944:	f8ca 6000 	str.w	r6, [sl]
 8008948:	f8da 3000 	ldr.w	r3, [sl]
 800894c:	4499      	add	r9, r3
 800894e:	2200      	movs	r2, #0
 8008950:	2300      	movs	r3, #0
 8008952:	4620      	mov	r0, r4
 8008954:	4629      	mov	r1, r5
 8008956:	f7f8 f8cf 	bl	8000af8 <__aeabi_dcmpeq>
 800895a:	b108      	cbz	r0, 8008960 <__cvt+0xa4>
 800895c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008960:	2230      	movs	r2, #48	; 0x30
 8008962:	9b03      	ldr	r3, [sp, #12]
 8008964:	454b      	cmp	r3, r9
 8008966:	d307      	bcc.n	8008978 <__cvt+0xbc>
 8008968:	9b03      	ldr	r3, [sp, #12]
 800896a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800896c:	1bdb      	subs	r3, r3, r7
 800896e:	4638      	mov	r0, r7
 8008970:	6013      	str	r3, [r2, #0]
 8008972:	b004      	add	sp, #16
 8008974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008978:	1c59      	adds	r1, r3, #1
 800897a:	9103      	str	r1, [sp, #12]
 800897c:	701a      	strb	r2, [r3, #0]
 800897e:	e7f0      	b.n	8008962 <__cvt+0xa6>

08008980 <__exponent>:
 8008980:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008982:	4603      	mov	r3, r0
 8008984:	2900      	cmp	r1, #0
 8008986:	bfb8      	it	lt
 8008988:	4249      	neglt	r1, r1
 800898a:	f803 2b02 	strb.w	r2, [r3], #2
 800898e:	bfb4      	ite	lt
 8008990:	222d      	movlt	r2, #45	; 0x2d
 8008992:	222b      	movge	r2, #43	; 0x2b
 8008994:	2909      	cmp	r1, #9
 8008996:	7042      	strb	r2, [r0, #1]
 8008998:	dd2a      	ble.n	80089f0 <__exponent+0x70>
 800899a:	f10d 0407 	add.w	r4, sp, #7
 800899e:	46a4      	mov	ip, r4
 80089a0:	270a      	movs	r7, #10
 80089a2:	46a6      	mov	lr, r4
 80089a4:	460a      	mov	r2, r1
 80089a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80089aa:	fb07 1516 	mls	r5, r7, r6, r1
 80089ae:	3530      	adds	r5, #48	; 0x30
 80089b0:	2a63      	cmp	r2, #99	; 0x63
 80089b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80089b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80089ba:	4631      	mov	r1, r6
 80089bc:	dcf1      	bgt.n	80089a2 <__exponent+0x22>
 80089be:	3130      	adds	r1, #48	; 0x30
 80089c0:	f1ae 0502 	sub.w	r5, lr, #2
 80089c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80089c8:	1c44      	adds	r4, r0, #1
 80089ca:	4629      	mov	r1, r5
 80089cc:	4561      	cmp	r1, ip
 80089ce:	d30a      	bcc.n	80089e6 <__exponent+0x66>
 80089d0:	f10d 0209 	add.w	r2, sp, #9
 80089d4:	eba2 020e 	sub.w	r2, r2, lr
 80089d8:	4565      	cmp	r5, ip
 80089da:	bf88      	it	hi
 80089dc:	2200      	movhi	r2, #0
 80089de:	4413      	add	r3, r2
 80089e0:	1a18      	subs	r0, r3, r0
 80089e2:	b003      	add	sp, #12
 80089e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 80089ee:	e7ed      	b.n	80089cc <__exponent+0x4c>
 80089f0:	2330      	movs	r3, #48	; 0x30
 80089f2:	3130      	adds	r1, #48	; 0x30
 80089f4:	7083      	strb	r3, [r0, #2]
 80089f6:	70c1      	strb	r1, [r0, #3]
 80089f8:	1d03      	adds	r3, r0, #4
 80089fa:	e7f1      	b.n	80089e0 <__exponent+0x60>

080089fc <_printf_float>:
 80089fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a00:	ed2d 8b02 	vpush	{d8}
 8008a04:	b08d      	sub	sp, #52	; 0x34
 8008a06:	460c      	mov	r4, r1
 8008a08:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008a0c:	4616      	mov	r6, r2
 8008a0e:	461f      	mov	r7, r3
 8008a10:	4605      	mov	r5, r0
 8008a12:	f001 fa57 	bl	8009ec4 <_localeconv_r>
 8008a16:	f8d0 a000 	ldr.w	sl, [r0]
 8008a1a:	4650      	mov	r0, sl
 8008a1c:	f7f7 fbea 	bl	80001f4 <strlen>
 8008a20:	2300      	movs	r3, #0
 8008a22:	930a      	str	r3, [sp, #40]	; 0x28
 8008a24:	6823      	ldr	r3, [r4, #0]
 8008a26:	9305      	str	r3, [sp, #20]
 8008a28:	f8d8 3000 	ldr.w	r3, [r8]
 8008a2c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008a30:	3307      	adds	r3, #7
 8008a32:	f023 0307 	bic.w	r3, r3, #7
 8008a36:	f103 0208 	add.w	r2, r3, #8
 8008a3a:	f8c8 2000 	str.w	r2, [r8]
 8008a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a42:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008a46:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008a4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a4e:	9307      	str	r3, [sp, #28]
 8008a50:	f8cd 8018 	str.w	r8, [sp, #24]
 8008a54:	ee08 0a10 	vmov	s16, r0
 8008a58:	4b9f      	ldr	r3, [pc, #636]	; (8008cd8 <_printf_float+0x2dc>)
 8008a5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a62:	f7f8 f87b 	bl	8000b5c <__aeabi_dcmpun>
 8008a66:	bb88      	cbnz	r0, 8008acc <_printf_float+0xd0>
 8008a68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a6c:	4b9a      	ldr	r3, [pc, #616]	; (8008cd8 <_printf_float+0x2dc>)
 8008a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a72:	f7f8 f855 	bl	8000b20 <__aeabi_dcmple>
 8008a76:	bb48      	cbnz	r0, 8008acc <_printf_float+0xd0>
 8008a78:	2200      	movs	r2, #0
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	4640      	mov	r0, r8
 8008a7e:	4649      	mov	r1, r9
 8008a80:	f7f8 f844 	bl	8000b0c <__aeabi_dcmplt>
 8008a84:	b110      	cbz	r0, 8008a8c <_printf_float+0x90>
 8008a86:	232d      	movs	r3, #45	; 0x2d
 8008a88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a8c:	4b93      	ldr	r3, [pc, #588]	; (8008cdc <_printf_float+0x2e0>)
 8008a8e:	4894      	ldr	r0, [pc, #592]	; (8008ce0 <_printf_float+0x2e4>)
 8008a90:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008a94:	bf94      	ite	ls
 8008a96:	4698      	movls	r8, r3
 8008a98:	4680      	movhi	r8, r0
 8008a9a:	2303      	movs	r3, #3
 8008a9c:	6123      	str	r3, [r4, #16]
 8008a9e:	9b05      	ldr	r3, [sp, #20]
 8008aa0:	f023 0204 	bic.w	r2, r3, #4
 8008aa4:	6022      	str	r2, [r4, #0]
 8008aa6:	f04f 0900 	mov.w	r9, #0
 8008aaa:	9700      	str	r7, [sp, #0]
 8008aac:	4633      	mov	r3, r6
 8008aae:	aa0b      	add	r2, sp, #44	; 0x2c
 8008ab0:	4621      	mov	r1, r4
 8008ab2:	4628      	mov	r0, r5
 8008ab4:	f000 f9d8 	bl	8008e68 <_printf_common>
 8008ab8:	3001      	adds	r0, #1
 8008aba:	f040 8090 	bne.w	8008bde <_printf_float+0x1e2>
 8008abe:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac2:	b00d      	add	sp, #52	; 0x34
 8008ac4:	ecbd 8b02 	vpop	{d8}
 8008ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008acc:	4642      	mov	r2, r8
 8008ace:	464b      	mov	r3, r9
 8008ad0:	4640      	mov	r0, r8
 8008ad2:	4649      	mov	r1, r9
 8008ad4:	f7f8 f842 	bl	8000b5c <__aeabi_dcmpun>
 8008ad8:	b140      	cbz	r0, 8008aec <_printf_float+0xf0>
 8008ada:	464b      	mov	r3, r9
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	bfbc      	itt	lt
 8008ae0:	232d      	movlt	r3, #45	; 0x2d
 8008ae2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008ae6:	487f      	ldr	r0, [pc, #508]	; (8008ce4 <_printf_float+0x2e8>)
 8008ae8:	4b7f      	ldr	r3, [pc, #508]	; (8008ce8 <_printf_float+0x2ec>)
 8008aea:	e7d1      	b.n	8008a90 <_printf_float+0x94>
 8008aec:	6863      	ldr	r3, [r4, #4]
 8008aee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008af2:	9206      	str	r2, [sp, #24]
 8008af4:	1c5a      	adds	r2, r3, #1
 8008af6:	d13f      	bne.n	8008b78 <_printf_float+0x17c>
 8008af8:	2306      	movs	r3, #6
 8008afa:	6063      	str	r3, [r4, #4]
 8008afc:	9b05      	ldr	r3, [sp, #20]
 8008afe:	6861      	ldr	r1, [r4, #4]
 8008b00:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008b04:	2300      	movs	r3, #0
 8008b06:	9303      	str	r3, [sp, #12]
 8008b08:	ab0a      	add	r3, sp, #40	; 0x28
 8008b0a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008b0e:	ab09      	add	r3, sp, #36	; 0x24
 8008b10:	ec49 8b10 	vmov	d0, r8, r9
 8008b14:	9300      	str	r3, [sp, #0]
 8008b16:	6022      	str	r2, [r4, #0]
 8008b18:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008b1c:	4628      	mov	r0, r5
 8008b1e:	f7ff fecd 	bl	80088bc <__cvt>
 8008b22:	9b06      	ldr	r3, [sp, #24]
 8008b24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b26:	2b47      	cmp	r3, #71	; 0x47
 8008b28:	4680      	mov	r8, r0
 8008b2a:	d108      	bne.n	8008b3e <_printf_float+0x142>
 8008b2c:	1cc8      	adds	r0, r1, #3
 8008b2e:	db02      	blt.n	8008b36 <_printf_float+0x13a>
 8008b30:	6863      	ldr	r3, [r4, #4]
 8008b32:	4299      	cmp	r1, r3
 8008b34:	dd41      	ble.n	8008bba <_printf_float+0x1be>
 8008b36:	f1ab 0b02 	sub.w	fp, fp, #2
 8008b3a:	fa5f fb8b 	uxtb.w	fp, fp
 8008b3e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008b42:	d820      	bhi.n	8008b86 <_printf_float+0x18a>
 8008b44:	3901      	subs	r1, #1
 8008b46:	465a      	mov	r2, fp
 8008b48:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008b4c:	9109      	str	r1, [sp, #36]	; 0x24
 8008b4e:	f7ff ff17 	bl	8008980 <__exponent>
 8008b52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b54:	1813      	adds	r3, r2, r0
 8008b56:	2a01      	cmp	r2, #1
 8008b58:	4681      	mov	r9, r0
 8008b5a:	6123      	str	r3, [r4, #16]
 8008b5c:	dc02      	bgt.n	8008b64 <_printf_float+0x168>
 8008b5e:	6822      	ldr	r2, [r4, #0]
 8008b60:	07d2      	lsls	r2, r2, #31
 8008b62:	d501      	bpl.n	8008b68 <_printf_float+0x16c>
 8008b64:	3301      	adds	r3, #1
 8008b66:	6123      	str	r3, [r4, #16]
 8008b68:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d09c      	beq.n	8008aaa <_printf_float+0xae>
 8008b70:	232d      	movs	r3, #45	; 0x2d
 8008b72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b76:	e798      	b.n	8008aaa <_printf_float+0xae>
 8008b78:	9a06      	ldr	r2, [sp, #24]
 8008b7a:	2a47      	cmp	r2, #71	; 0x47
 8008b7c:	d1be      	bne.n	8008afc <_printf_float+0x100>
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1bc      	bne.n	8008afc <_printf_float+0x100>
 8008b82:	2301      	movs	r3, #1
 8008b84:	e7b9      	b.n	8008afa <_printf_float+0xfe>
 8008b86:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008b8a:	d118      	bne.n	8008bbe <_printf_float+0x1c2>
 8008b8c:	2900      	cmp	r1, #0
 8008b8e:	6863      	ldr	r3, [r4, #4]
 8008b90:	dd0b      	ble.n	8008baa <_printf_float+0x1ae>
 8008b92:	6121      	str	r1, [r4, #16]
 8008b94:	b913      	cbnz	r3, 8008b9c <_printf_float+0x1a0>
 8008b96:	6822      	ldr	r2, [r4, #0]
 8008b98:	07d0      	lsls	r0, r2, #31
 8008b9a:	d502      	bpl.n	8008ba2 <_printf_float+0x1a6>
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	440b      	add	r3, r1
 8008ba0:	6123      	str	r3, [r4, #16]
 8008ba2:	65a1      	str	r1, [r4, #88]	; 0x58
 8008ba4:	f04f 0900 	mov.w	r9, #0
 8008ba8:	e7de      	b.n	8008b68 <_printf_float+0x16c>
 8008baa:	b913      	cbnz	r3, 8008bb2 <_printf_float+0x1b6>
 8008bac:	6822      	ldr	r2, [r4, #0]
 8008bae:	07d2      	lsls	r2, r2, #31
 8008bb0:	d501      	bpl.n	8008bb6 <_printf_float+0x1ba>
 8008bb2:	3302      	adds	r3, #2
 8008bb4:	e7f4      	b.n	8008ba0 <_printf_float+0x1a4>
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e7f2      	b.n	8008ba0 <_printf_float+0x1a4>
 8008bba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bc0:	4299      	cmp	r1, r3
 8008bc2:	db05      	blt.n	8008bd0 <_printf_float+0x1d4>
 8008bc4:	6823      	ldr	r3, [r4, #0]
 8008bc6:	6121      	str	r1, [r4, #16]
 8008bc8:	07d8      	lsls	r0, r3, #31
 8008bca:	d5ea      	bpl.n	8008ba2 <_printf_float+0x1a6>
 8008bcc:	1c4b      	adds	r3, r1, #1
 8008bce:	e7e7      	b.n	8008ba0 <_printf_float+0x1a4>
 8008bd0:	2900      	cmp	r1, #0
 8008bd2:	bfd4      	ite	le
 8008bd4:	f1c1 0202 	rsble	r2, r1, #2
 8008bd8:	2201      	movgt	r2, #1
 8008bda:	4413      	add	r3, r2
 8008bdc:	e7e0      	b.n	8008ba0 <_printf_float+0x1a4>
 8008bde:	6823      	ldr	r3, [r4, #0]
 8008be0:	055a      	lsls	r2, r3, #21
 8008be2:	d407      	bmi.n	8008bf4 <_printf_float+0x1f8>
 8008be4:	6923      	ldr	r3, [r4, #16]
 8008be6:	4642      	mov	r2, r8
 8008be8:	4631      	mov	r1, r6
 8008bea:	4628      	mov	r0, r5
 8008bec:	47b8      	blx	r7
 8008bee:	3001      	adds	r0, #1
 8008bf0:	d12c      	bne.n	8008c4c <_printf_float+0x250>
 8008bf2:	e764      	b.n	8008abe <_printf_float+0xc2>
 8008bf4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008bf8:	f240 80e0 	bls.w	8008dbc <_printf_float+0x3c0>
 8008bfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008c00:	2200      	movs	r2, #0
 8008c02:	2300      	movs	r3, #0
 8008c04:	f7f7 ff78 	bl	8000af8 <__aeabi_dcmpeq>
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	d034      	beq.n	8008c76 <_printf_float+0x27a>
 8008c0c:	4a37      	ldr	r2, [pc, #220]	; (8008cec <_printf_float+0x2f0>)
 8008c0e:	2301      	movs	r3, #1
 8008c10:	4631      	mov	r1, r6
 8008c12:	4628      	mov	r0, r5
 8008c14:	47b8      	blx	r7
 8008c16:	3001      	adds	r0, #1
 8008c18:	f43f af51 	beq.w	8008abe <_printf_float+0xc2>
 8008c1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c20:	429a      	cmp	r2, r3
 8008c22:	db02      	blt.n	8008c2a <_printf_float+0x22e>
 8008c24:	6823      	ldr	r3, [r4, #0]
 8008c26:	07d8      	lsls	r0, r3, #31
 8008c28:	d510      	bpl.n	8008c4c <_printf_float+0x250>
 8008c2a:	ee18 3a10 	vmov	r3, s16
 8008c2e:	4652      	mov	r2, sl
 8008c30:	4631      	mov	r1, r6
 8008c32:	4628      	mov	r0, r5
 8008c34:	47b8      	blx	r7
 8008c36:	3001      	adds	r0, #1
 8008c38:	f43f af41 	beq.w	8008abe <_printf_float+0xc2>
 8008c3c:	f04f 0800 	mov.w	r8, #0
 8008c40:	f104 091a 	add.w	r9, r4, #26
 8008c44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c46:	3b01      	subs	r3, #1
 8008c48:	4543      	cmp	r3, r8
 8008c4a:	dc09      	bgt.n	8008c60 <_printf_float+0x264>
 8008c4c:	6823      	ldr	r3, [r4, #0]
 8008c4e:	079b      	lsls	r3, r3, #30
 8008c50:	f100 8105 	bmi.w	8008e5e <_printf_float+0x462>
 8008c54:	68e0      	ldr	r0, [r4, #12]
 8008c56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c58:	4298      	cmp	r0, r3
 8008c5a:	bfb8      	it	lt
 8008c5c:	4618      	movlt	r0, r3
 8008c5e:	e730      	b.n	8008ac2 <_printf_float+0xc6>
 8008c60:	2301      	movs	r3, #1
 8008c62:	464a      	mov	r2, r9
 8008c64:	4631      	mov	r1, r6
 8008c66:	4628      	mov	r0, r5
 8008c68:	47b8      	blx	r7
 8008c6a:	3001      	adds	r0, #1
 8008c6c:	f43f af27 	beq.w	8008abe <_printf_float+0xc2>
 8008c70:	f108 0801 	add.w	r8, r8, #1
 8008c74:	e7e6      	b.n	8008c44 <_printf_float+0x248>
 8008c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	dc39      	bgt.n	8008cf0 <_printf_float+0x2f4>
 8008c7c:	4a1b      	ldr	r2, [pc, #108]	; (8008cec <_printf_float+0x2f0>)
 8008c7e:	2301      	movs	r3, #1
 8008c80:	4631      	mov	r1, r6
 8008c82:	4628      	mov	r0, r5
 8008c84:	47b8      	blx	r7
 8008c86:	3001      	adds	r0, #1
 8008c88:	f43f af19 	beq.w	8008abe <_printf_float+0xc2>
 8008c8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c90:	4313      	orrs	r3, r2
 8008c92:	d102      	bne.n	8008c9a <_printf_float+0x29e>
 8008c94:	6823      	ldr	r3, [r4, #0]
 8008c96:	07d9      	lsls	r1, r3, #31
 8008c98:	d5d8      	bpl.n	8008c4c <_printf_float+0x250>
 8008c9a:	ee18 3a10 	vmov	r3, s16
 8008c9e:	4652      	mov	r2, sl
 8008ca0:	4631      	mov	r1, r6
 8008ca2:	4628      	mov	r0, r5
 8008ca4:	47b8      	blx	r7
 8008ca6:	3001      	adds	r0, #1
 8008ca8:	f43f af09 	beq.w	8008abe <_printf_float+0xc2>
 8008cac:	f04f 0900 	mov.w	r9, #0
 8008cb0:	f104 0a1a 	add.w	sl, r4, #26
 8008cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cb6:	425b      	negs	r3, r3
 8008cb8:	454b      	cmp	r3, r9
 8008cba:	dc01      	bgt.n	8008cc0 <_printf_float+0x2c4>
 8008cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cbe:	e792      	b.n	8008be6 <_printf_float+0x1ea>
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	4652      	mov	r2, sl
 8008cc4:	4631      	mov	r1, r6
 8008cc6:	4628      	mov	r0, r5
 8008cc8:	47b8      	blx	r7
 8008cca:	3001      	adds	r0, #1
 8008ccc:	f43f aef7 	beq.w	8008abe <_printf_float+0xc2>
 8008cd0:	f109 0901 	add.w	r9, r9, #1
 8008cd4:	e7ee      	b.n	8008cb4 <_printf_float+0x2b8>
 8008cd6:	bf00      	nop
 8008cd8:	7fefffff 	.word	0x7fefffff
 8008cdc:	0800b98c 	.word	0x0800b98c
 8008ce0:	0800b990 	.word	0x0800b990
 8008ce4:	0800b998 	.word	0x0800b998
 8008ce8:	0800b994 	.word	0x0800b994
 8008cec:	0800b99c 	.word	0x0800b99c
 8008cf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cf2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	bfa8      	it	ge
 8008cf8:	461a      	movge	r2, r3
 8008cfa:	2a00      	cmp	r2, #0
 8008cfc:	4691      	mov	r9, r2
 8008cfe:	dc37      	bgt.n	8008d70 <_printf_float+0x374>
 8008d00:	f04f 0b00 	mov.w	fp, #0
 8008d04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d08:	f104 021a 	add.w	r2, r4, #26
 8008d0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008d0e:	9305      	str	r3, [sp, #20]
 8008d10:	eba3 0309 	sub.w	r3, r3, r9
 8008d14:	455b      	cmp	r3, fp
 8008d16:	dc33      	bgt.n	8008d80 <_printf_float+0x384>
 8008d18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	db3b      	blt.n	8008d98 <_printf_float+0x39c>
 8008d20:	6823      	ldr	r3, [r4, #0]
 8008d22:	07da      	lsls	r2, r3, #31
 8008d24:	d438      	bmi.n	8008d98 <_printf_float+0x39c>
 8008d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d28:	9a05      	ldr	r2, [sp, #20]
 8008d2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d2c:	1a9a      	subs	r2, r3, r2
 8008d2e:	eba3 0901 	sub.w	r9, r3, r1
 8008d32:	4591      	cmp	r9, r2
 8008d34:	bfa8      	it	ge
 8008d36:	4691      	movge	r9, r2
 8008d38:	f1b9 0f00 	cmp.w	r9, #0
 8008d3c:	dc35      	bgt.n	8008daa <_printf_float+0x3ae>
 8008d3e:	f04f 0800 	mov.w	r8, #0
 8008d42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d46:	f104 0a1a 	add.w	sl, r4, #26
 8008d4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d4e:	1a9b      	subs	r3, r3, r2
 8008d50:	eba3 0309 	sub.w	r3, r3, r9
 8008d54:	4543      	cmp	r3, r8
 8008d56:	f77f af79 	ble.w	8008c4c <_printf_float+0x250>
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	4652      	mov	r2, sl
 8008d5e:	4631      	mov	r1, r6
 8008d60:	4628      	mov	r0, r5
 8008d62:	47b8      	blx	r7
 8008d64:	3001      	adds	r0, #1
 8008d66:	f43f aeaa 	beq.w	8008abe <_printf_float+0xc2>
 8008d6a:	f108 0801 	add.w	r8, r8, #1
 8008d6e:	e7ec      	b.n	8008d4a <_printf_float+0x34e>
 8008d70:	4613      	mov	r3, r2
 8008d72:	4631      	mov	r1, r6
 8008d74:	4642      	mov	r2, r8
 8008d76:	4628      	mov	r0, r5
 8008d78:	47b8      	blx	r7
 8008d7a:	3001      	adds	r0, #1
 8008d7c:	d1c0      	bne.n	8008d00 <_printf_float+0x304>
 8008d7e:	e69e      	b.n	8008abe <_printf_float+0xc2>
 8008d80:	2301      	movs	r3, #1
 8008d82:	4631      	mov	r1, r6
 8008d84:	4628      	mov	r0, r5
 8008d86:	9205      	str	r2, [sp, #20]
 8008d88:	47b8      	blx	r7
 8008d8a:	3001      	adds	r0, #1
 8008d8c:	f43f ae97 	beq.w	8008abe <_printf_float+0xc2>
 8008d90:	9a05      	ldr	r2, [sp, #20]
 8008d92:	f10b 0b01 	add.w	fp, fp, #1
 8008d96:	e7b9      	b.n	8008d0c <_printf_float+0x310>
 8008d98:	ee18 3a10 	vmov	r3, s16
 8008d9c:	4652      	mov	r2, sl
 8008d9e:	4631      	mov	r1, r6
 8008da0:	4628      	mov	r0, r5
 8008da2:	47b8      	blx	r7
 8008da4:	3001      	adds	r0, #1
 8008da6:	d1be      	bne.n	8008d26 <_printf_float+0x32a>
 8008da8:	e689      	b.n	8008abe <_printf_float+0xc2>
 8008daa:	9a05      	ldr	r2, [sp, #20]
 8008dac:	464b      	mov	r3, r9
 8008dae:	4442      	add	r2, r8
 8008db0:	4631      	mov	r1, r6
 8008db2:	4628      	mov	r0, r5
 8008db4:	47b8      	blx	r7
 8008db6:	3001      	adds	r0, #1
 8008db8:	d1c1      	bne.n	8008d3e <_printf_float+0x342>
 8008dba:	e680      	b.n	8008abe <_printf_float+0xc2>
 8008dbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dbe:	2a01      	cmp	r2, #1
 8008dc0:	dc01      	bgt.n	8008dc6 <_printf_float+0x3ca>
 8008dc2:	07db      	lsls	r3, r3, #31
 8008dc4:	d538      	bpl.n	8008e38 <_printf_float+0x43c>
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	4642      	mov	r2, r8
 8008dca:	4631      	mov	r1, r6
 8008dcc:	4628      	mov	r0, r5
 8008dce:	47b8      	blx	r7
 8008dd0:	3001      	adds	r0, #1
 8008dd2:	f43f ae74 	beq.w	8008abe <_printf_float+0xc2>
 8008dd6:	ee18 3a10 	vmov	r3, s16
 8008dda:	4652      	mov	r2, sl
 8008ddc:	4631      	mov	r1, r6
 8008dde:	4628      	mov	r0, r5
 8008de0:	47b8      	blx	r7
 8008de2:	3001      	adds	r0, #1
 8008de4:	f43f ae6b 	beq.w	8008abe <_printf_float+0xc2>
 8008de8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008dec:	2200      	movs	r2, #0
 8008dee:	2300      	movs	r3, #0
 8008df0:	f7f7 fe82 	bl	8000af8 <__aeabi_dcmpeq>
 8008df4:	b9d8      	cbnz	r0, 8008e2e <_printf_float+0x432>
 8008df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008df8:	f108 0201 	add.w	r2, r8, #1
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	4631      	mov	r1, r6
 8008e00:	4628      	mov	r0, r5
 8008e02:	47b8      	blx	r7
 8008e04:	3001      	adds	r0, #1
 8008e06:	d10e      	bne.n	8008e26 <_printf_float+0x42a>
 8008e08:	e659      	b.n	8008abe <_printf_float+0xc2>
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	4652      	mov	r2, sl
 8008e0e:	4631      	mov	r1, r6
 8008e10:	4628      	mov	r0, r5
 8008e12:	47b8      	blx	r7
 8008e14:	3001      	adds	r0, #1
 8008e16:	f43f ae52 	beq.w	8008abe <_printf_float+0xc2>
 8008e1a:	f108 0801 	add.w	r8, r8, #1
 8008e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e20:	3b01      	subs	r3, #1
 8008e22:	4543      	cmp	r3, r8
 8008e24:	dcf1      	bgt.n	8008e0a <_printf_float+0x40e>
 8008e26:	464b      	mov	r3, r9
 8008e28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008e2c:	e6dc      	b.n	8008be8 <_printf_float+0x1ec>
 8008e2e:	f04f 0800 	mov.w	r8, #0
 8008e32:	f104 0a1a 	add.w	sl, r4, #26
 8008e36:	e7f2      	b.n	8008e1e <_printf_float+0x422>
 8008e38:	2301      	movs	r3, #1
 8008e3a:	4642      	mov	r2, r8
 8008e3c:	e7df      	b.n	8008dfe <_printf_float+0x402>
 8008e3e:	2301      	movs	r3, #1
 8008e40:	464a      	mov	r2, r9
 8008e42:	4631      	mov	r1, r6
 8008e44:	4628      	mov	r0, r5
 8008e46:	47b8      	blx	r7
 8008e48:	3001      	adds	r0, #1
 8008e4a:	f43f ae38 	beq.w	8008abe <_printf_float+0xc2>
 8008e4e:	f108 0801 	add.w	r8, r8, #1
 8008e52:	68e3      	ldr	r3, [r4, #12]
 8008e54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e56:	1a5b      	subs	r3, r3, r1
 8008e58:	4543      	cmp	r3, r8
 8008e5a:	dcf0      	bgt.n	8008e3e <_printf_float+0x442>
 8008e5c:	e6fa      	b.n	8008c54 <_printf_float+0x258>
 8008e5e:	f04f 0800 	mov.w	r8, #0
 8008e62:	f104 0919 	add.w	r9, r4, #25
 8008e66:	e7f4      	b.n	8008e52 <_printf_float+0x456>

08008e68 <_printf_common>:
 8008e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e6c:	4616      	mov	r6, r2
 8008e6e:	4699      	mov	r9, r3
 8008e70:	688a      	ldr	r2, [r1, #8]
 8008e72:	690b      	ldr	r3, [r1, #16]
 8008e74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	bfb8      	it	lt
 8008e7c:	4613      	movlt	r3, r2
 8008e7e:	6033      	str	r3, [r6, #0]
 8008e80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e84:	4607      	mov	r7, r0
 8008e86:	460c      	mov	r4, r1
 8008e88:	b10a      	cbz	r2, 8008e8e <_printf_common+0x26>
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	6033      	str	r3, [r6, #0]
 8008e8e:	6823      	ldr	r3, [r4, #0]
 8008e90:	0699      	lsls	r1, r3, #26
 8008e92:	bf42      	ittt	mi
 8008e94:	6833      	ldrmi	r3, [r6, #0]
 8008e96:	3302      	addmi	r3, #2
 8008e98:	6033      	strmi	r3, [r6, #0]
 8008e9a:	6825      	ldr	r5, [r4, #0]
 8008e9c:	f015 0506 	ands.w	r5, r5, #6
 8008ea0:	d106      	bne.n	8008eb0 <_printf_common+0x48>
 8008ea2:	f104 0a19 	add.w	sl, r4, #25
 8008ea6:	68e3      	ldr	r3, [r4, #12]
 8008ea8:	6832      	ldr	r2, [r6, #0]
 8008eaa:	1a9b      	subs	r3, r3, r2
 8008eac:	42ab      	cmp	r3, r5
 8008eae:	dc26      	bgt.n	8008efe <_printf_common+0x96>
 8008eb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008eb4:	1e13      	subs	r3, r2, #0
 8008eb6:	6822      	ldr	r2, [r4, #0]
 8008eb8:	bf18      	it	ne
 8008eba:	2301      	movne	r3, #1
 8008ebc:	0692      	lsls	r2, r2, #26
 8008ebe:	d42b      	bmi.n	8008f18 <_printf_common+0xb0>
 8008ec0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ec4:	4649      	mov	r1, r9
 8008ec6:	4638      	mov	r0, r7
 8008ec8:	47c0      	blx	r8
 8008eca:	3001      	adds	r0, #1
 8008ecc:	d01e      	beq.n	8008f0c <_printf_common+0xa4>
 8008ece:	6823      	ldr	r3, [r4, #0]
 8008ed0:	68e5      	ldr	r5, [r4, #12]
 8008ed2:	6832      	ldr	r2, [r6, #0]
 8008ed4:	f003 0306 	and.w	r3, r3, #6
 8008ed8:	2b04      	cmp	r3, #4
 8008eda:	bf08      	it	eq
 8008edc:	1aad      	subeq	r5, r5, r2
 8008ede:	68a3      	ldr	r3, [r4, #8]
 8008ee0:	6922      	ldr	r2, [r4, #16]
 8008ee2:	bf0c      	ite	eq
 8008ee4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ee8:	2500      	movne	r5, #0
 8008eea:	4293      	cmp	r3, r2
 8008eec:	bfc4      	itt	gt
 8008eee:	1a9b      	subgt	r3, r3, r2
 8008ef0:	18ed      	addgt	r5, r5, r3
 8008ef2:	2600      	movs	r6, #0
 8008ef4:	341a      	adds	r4, #26
 8008ef6:	42b5      	cmp	r5, r6
 8008ef8:	d11a      	bne.n	8008f30 <_printf_common+0xc8>
 8008efa:	2000      	movs	r0, #0
 8008efc:	e008      	b.n	8008f10 <_printf_common+0xa8>
 8008efe:	2301      	movs	r3, #1
 8008f00:	4652      	mov	r2, sl
 8008f02:	4649      	mov	r1, r9
 8008f04:	4638      	mov	r0, r7
 8008f06:	47c0      	blx	r8
 8008f08:	3001      	adds	r0, #1
 8008f0a:	d103      	bne.n	8008f14 <_printf_common+0xac>
 8008f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f14:	3501      	adds	r5, #1
 8008f16:	e7c6      	b.n	8008ea6 <_printf_common+0x3e>
 8008f18:	18e1      	adds	r1, r4, r3
 8008f1a:	1c5a      	adds	r2, r3, #1
 8008f1c:	2030      	movs	r0, #48	; 0x30
 8008f1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f22:	4422      	add	r2, r4
 8008f24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f2c:	3302      	adds	r3, #2
 8008f2e:	e7c7      	b.n	8008ec0 <_printf_common+0x58>
 8008f30:	2301      	movs	r3, #1
 8008f32:	4622      	mov	r2, r4
 8008f34:	4649      	mov	r1, r9
 8008f36:	4638      	mov	r0, r7
 8008f38:	47c0      	blx	r8
 8008f3a:	3001      	adds	r0, #1
 8008f3c:	d0e6      	beq.n	8008f0c <_printf_common+0xa4>
 8008f3e:	3601      	adds	r6, #1
 8008f40:	e7d9      	b.n	8008ef6 <_printf_common+0x8e>
	...

08008f44 <_printf_i>:
 8008f44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f48:	7e0f      	ldrb	r7, [r1, #24]
 8008f4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f4c:	2f78      	cmp	r7, #120	; 0x78
 8008f4e:	4691      	mov	r9, r2
 8008f50:	4680      	mov	r8, r0
 8008f52:	460c      	mov	r4, r1
 8008f54:	469a      	mov	sl, r3
 8008f56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f5a:	d807      	bhi.n	8008f6c <_printf_i+0x28>
 8008f5c:	2f62      	cmp	r7, #98	; 0x62
 8008f5e:	d80a      	bhi.n	8008f76 <_printf_i+0x32>
 8008f60:	2f00      	cmp	r7, #0
 8008f62:	f000 80d8 	beq.w	8009116 <_printf_i+0x1d2>
 8008f66:	2f58      	cmp	r7, #88	; 0x58
 8008f68:	f000 80a3 	beq.w	80090b2 <_printf_i+0x16e>
 8008f6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f74:	e03a      	b.n	8008fec <_printf_i+0xa8>
 8008f76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f7a:	2b15      	cmp	r3, #21
 8008f7c:	d8f6      	bhi.n	8008f6c <_printf_i+0x28>
 8008f7e:	a101      	add	r1, pc, #4	; (adr r1, 8008f84 <_printf_i+0x40>)
 8008f80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f84:	08008fdd 	.word	0x08008fdd
 8008f88:	08008ff1 	.word	0x08008ff1
 8008f8c:	08008f6d 	.word	0x08008f6d
 8008f90:	08008f6d 	.word	0x08008f6d
 8008f94:	08008f6d 	.word	0x08008f6d
 8008f98:	08008f6d 	.word	0x08008f6d
 8008f9c:	08008ff1 	.word	0x08008ff1
 8008fa0:	08008f6d 	.word	0x08008f6d
 8008fa4:	08008f6d 	.word	0x08008f6d
 8008fa8:	08008f6d 	.word	0x08008f6d
 8008fac:	08008f6d 	.word	0x08008f6d
 8008fb0:	080090fd 	.word	0x080090fd
 8008fb4:	08009021 	.word	0x08009021
 8008fb8:	080090df 	.word	0x080090df
 8008fbc:	08008f6d 	.word	0x08008f6d
 8008fc0:	08008f6d 	.word	0x08008f6d
 8008fc4:	0800911f 	.word	0x0800911f
 8008fc8:	08008f6d 	.word	0x08008f6d
 8008fcc:	08009021 	.word	0x08009021
 8008fd0:	08008f6d 	.word	0x08008f6d
 8008fd4:	08008f6d 	.word	0x08008f6d
 8008fd8:	080090e7 	.word	0x080090e7
 8008fdc:	682b      	ldr	r3, [r5, #0]
 8008fde:	1d1a      	adds	r2, r3, #4
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	602a      	str	r2, [r5, #0]
 8008fe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fe8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fec:	2301      	movs	r3, #1
 8008fee:	e0a3      	b.n	8009138 <_printf_i+0x1f4>
 8008ff0:	6820      	ldr	r0, [r4, #0]
 8008ff2:	6829      	ldr	r1, [r5, #0]
 8008ff4:	0606      	lsls	r6, r0, #24
 8008ff6:	f101 0304 	add.w	r3, r1, #4
 8008ffa:	d50a      	bpl.n	8009012 <_printf_i+0xce>
 8008ffc:	680e      	ldr	r6, [r1, #0]
 8008ffe:	602b      	str	r3, [r5, #0]
 8009000:	2e00      	cmp	r6, #0
 8009002:	da03      	bge.n	800900c <_printf_i+0xc8>
 8009004:	232d      	movs	r3, #45	; 0x2d
 8009006:	4276      	negs	r6, r6
 8009008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800900c:	485e      	ldr	r0, [pc, #376]	; (8009188 <_printf_i+0x244>)
 800900e:	230a      	movs	r3, #10
 8009010:	e019      	b.n	8009046 <_printf_i+0x102>
 8009012:	680e      	ldr	r6, [r1, #0]
 8009014:	602b      	str	r3, [r5, #0]
 8009016:	f010 0f40 	tst.w	r0, #64	; 0x40
 800901a:	bf18      	it	ne
 800901c:	b236      	sxthne	r6, r6
 800901e:	e7ef      	b.n	8009000 <_printf_i+0xbc>
 8009020:	682b      	ldr	r3, [r5, #0]
 8009022:	6820      	ldr	r0, [r4, #0]
 8009024:	1d19      	adds	r1, r3, #4
 8009026:	6029      	str	r1, [r5, #0]
 8009028:	0601      	lsls	r1, r0, #24
 800902a:	d501      	bpl.n	8009030 <_printf_i+0xec>
 800902c:	681e      	ldr	r6, [r3, #0]
 800902e:	e002      	b.n	8009036 <_printf_i+0xf2>
 8009030:	0646      	lsls	r6, r0, #25
 8009032:	d5fb      	bpl.n	800902c <_printf_i+0xe8>
 8009034:	881e      	ldrh	r6, [r3, #0]
 8009036:	4854      	ldr	r0, [pc, #336]	; (8009188 <_printf_i+0x244>)
 8009038:	2f6f      	cmp	r7, #111	; 0x6f
 800903a:	bf0c      	ite	eq
 800903c:	2308      	moveq	r3, #8
 800903e:	230a      	movne	r3, #10
 8009040:	2100      	movs	r1, #0
 8009042:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009046:	6865      	ldr	r5, [r4, #4]
 8009048:	60a5      	str	r5, [r4, #8]
 800904a:	2d00      	cmp	r5, #0
 800904c:	bfa2      	ittt	ge
 800904e:	6821      	ldrge	r1, [r4, #0]
 8009050:	f021 0104 	bicge.w	r1, r1, #4
 8009054:	6021      	strge	r1, [r4, #0]
 8009056:	b90e      	cbnz	r6, 800905c <_printf_i+0x118>
 8009058:	2d00      	cmp	r5, #0
 800905a:	d04d      	beq.n	80090f8 <_printf_i+0x1b4>
 800905c:	4615      	mov	r5, r2
 800905e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009062:	fb03 6711 	mls	r7, r3, r1, r6
 8009066:	5dc7      	ldrb	r7, [r0, r7]
 8009068:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800906c:	4637      	mov	r7, r6
 800906e:	42bb      	cmp	r3, r7
 8009070:	460e      	mov	r6, r1
 8009072:	d9f4      	bls.n	800905e <_printf_i+0x11a>
 8009074:	2b08      	cmp	r3, #8
 8009076:	d10b      	bne.n	8009090 <_printf_i+0x14c>
 8009078:	6823      	ldr	r3, [r4, #0]
 800907a:	07de      	lsls	r6, r3, #31
 800907c:	d508      	bpl.n	8009090 <_printf_i+0x14c>
 800907e:	6923      	ldr	r3, [r4, #16]
 8009080:	6861      	ldr	r1, [r4, #4]
 8009082:	4299      	cmp	r1, r3
 8009084:	bfde      	ittt	le
 8009086:	2330      	movle	r3, #48	; 0x30
 8009088:	f805 3c01 	strble.w	r3, [r5, #-1]
 800908c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009090:	1b52      	subs	r2, r2, r5
 8009092:	6122      	str	r2, [r4, #16]
 8009094:	f8cd a000 	str.w	sl, [sp]
 8009098:	464b      	mov	r3, r9
 800909a:	aa03      	add	r2, sp, #12
 800909c:	4621      	mov	r1, r4
 800909e:	4640      	mov	r0, r8
 80090a0:	f7ff fee2 	bl	8008e68 <_printf_common>
 80090a4:	3001      	adds	r0, #1
 80090a6:	d14c      	bne.n	8009142 <_printf_i+0x1fe>
 80090a8:	f04f 30ff 	mov.w	r0, #4294967295
 80090ac:	b004      	add	sp, #16
 80090ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090b2:	4835      	ldr	r0, [pc, #212]	; (8009188 <_printf_i+0x244>)
 80090b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80090b8:	6829      	ldr	r1, [r5, #0]
 80090ba:	6823      	ldr	r3, [r4, #0]
 80090bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80090c0:	6029      	str	r1, [r5, #0]
 80090c2:	061d      	lsls	r5, r3, #24
 80090c4:	d514      	bpl.n	80090f0 <_printf_i+0x1ac>
 80090c6:	07df      	lsls	r7, r3, #31
 80090c8:	bf44      	itt	mi
 80090ca:	f043 0320 	orrmi.w	r3, r3, #32
 80090ce:	6023      	strmi	r3, [r4, #0]
 80090d0:	b91e      	cbnz	r6, 80090da <_printf_i+0x196>
 80090d2:	6823      	ldr	r3, [r4, #0]
 80090d4:	f023 0320 	bic.w	r3, r3, #32
 80090d8:	6023      	str	r3, [r4, #0]
 80090da:	2310      	movs	r3, #16
 80090dc:	e7b0      	b.n	8009040 <_printf_i+0xfc>
 80090de:	6823      	ldr	r3, [r4, #0]
 80090e0:	f043 0320 	orr.w	r3, r3, #32
 80090e4:	6023      	str	r3, [r4, #0]
 80090e6:	2378      	movs	r3, #120	; 0x78
 80090e8:	4828      	ldr	r0, [pc, #160]	; (800918c <_printf_i+0x248>)
 80090ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090ee:	e7e3      	b.n	80090b8 <_printf_i+0x174>
 80090f0:	0659      	lsls	r1, r3, #25
 80090f2:	bf48      	it	mi
 80090f4:	b2b6      	uxthmi	r6, r6
 80090f6:	e7e6      	b.n	80090c6 <_printf_i+0x182>
 80090f8:	4615      	mov	r5, r2
 80090fa:	e7bb      	b.n	8009074 <_printf_i+0x130>
 80090fc:	682b      	ldr	r3, [r5, #0]
 80090fe:	6826      	ldr	r6, [r4, #0]
 8009100:	6961      	ldr	r1, [r4, #20]
 8009102:	1d18      	adds	r0, r3, #4
 8009104:	6028      	str	r0, [r5, #0]
 8009106:	0635      	lsls	r5, r6, #24
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	d501      	bpl.n	8009110 <_printf_i+0x1cc>
 800910c:	6019      	str	r1, [r3, #0]
 800910e:	e002      	b.n	8009116 <_printf_i+0x1d2>
 8009110:	0670      	lsls	r0, r6, #25
 8009112:	d5fb      	bpl.n	800910c <_printf_i+0x1c8>
 8009114:	8019      	strh	r1, [r3, #0]
 8009116:	2300      	movs	r3, #0
 8009118:	6123      	str	r3, [r4, #16]
 800911a:	4615      	mov	r5, r2
 800911c:	e7ba      	b.n	8009094 <_printf_i+0x150>
 800911e:	682b      	ldr	r3, [r5, #0]
 8009120:	1d1a      	adds	r2, r3, #4
 8009122:	602a      	str	r2, [r5, #0]
 8009124:	681d      	ldr	r5, [r3, #0]
 8009126:	6862      	ldr	r2, [r4, #4]
 8009128:	2100      	movs	r1, #0
 800912a:	4628      	mov	r0, r5
 800912c:	f7f7 f870 	bl	8000210 <memchr>
 8009130:	b108      	cbz	r0, 8009136 <_printf_i+0x1f2>
 8009132:	1b40      	subs	r0, r0, r5
 8009134:	6060      	str	r0, [r4, #4]
 8009136:	6863      	ldr	r3, [r4, #4]
 8009138:	6123      	str	r3, [r4, #16]
 800913a:	2300      	movs	r3, #0
 800913c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009140:	e7a8      	b.n	8009094 <_printf_i+0x150>
 8009142:	6923      	ldr	r3, [r4, #16]
 8009144:	462a      	mov	r2, r5
 8009146:	4649      	mov	r1, r9
 8009148:	4640      	mov	r0, r8
 800914a:	47d0      	blx	sl
 800914c:	3001      	adds	r0, #1
 800914e:	d0ab      	beq.n	80090a8 <_printf_i+0x164>
 8009150:	6823      	ldr	r3, [r4, #0]
 8009152:	079b      	lsls	r3, r3, #30
 8009154:	d413      	bmi.n	800917e <_printf_i+0x23a>
 8009156:	68e0      	ldr	r0, [r4, #12]
 8009158:	9b03      	ldr	r3, [sp, #12]
 800915a:	4298      	cmp	r0, r3
 800915c:	bfb8      	it	lt
 800915e:	4618      	movlt	r0, r3
 8009160:	e7a4      	b.n	80090ac <_printf_i+0x168>
 8009162:	2301      	movs	r3, #1
 8009164:	4632      	mov	r2, r6
 8009166:	4649      	mov	r1, r9
 8009168:	4640      	mov	r0, r8
 800916a:	47d0      	blx	sl
 800916c:	3001      	adds	r0, #1
 800916e:	d09b      	beq.n	80090a8 <_printf_i+0x164>
 8009170:	3501      	adds	r5, #1
 8009172:	68e3      	ldr	r3, [r4, #12]
 8009174:	9903      	ldr	r1, [sp, #12]
 8009176:	1a5b      	subs	r3, r3, r1
 8009178:	42ab      	cmp	r3, r5
 800917a:	dcf2      	bgt.n	8009162 <_printf_i+0x21e>
 800917c:	e7eb      	b.n	8009156 <_printf_i+0x212>
 800917e:	2500      	movs	r5, #0
 8009180:	f104 0619 	add.w	r6, r4, #25
 8009184:	e7f5      	b.n	8009172 <_printf_i+0x22e>
 8009186:	bf00      	nop
 8009188:	0800b99e 	.word	0x0800b99e
 800918c:	0800b9af 	.word	0x0800b9af

08009190 <siprintf>:
 8009190:	b40e      	push	{r1, r2, r3}
 8009192:	b500      	push	{lr}
 8009194:	b09c      	sub	sp, #112	; 0x70
 8009196:	ab1d      	add	r3, sp, #116	; 0x74
 8009198:	9002      	str	r0, [sp, #8]
 800919a:	9006      	str	r0, [sp, #24]
 800919c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80091a0:	4809      	ldr	r0, [pc, #36]	; (80091c8 <siprintf+0x38>)
 80091a2:	9107      	str	r1, [sp, #28]
 80091a4:	9104      	str	r1, [sp, #16]
 80091a6:	4909      	ldr	r1, [pc, #36]	; (80091cc <siprintf+0x3c>)
 80091a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80091ac:	9105      	str	r1, [sp, #20]
 80091ae:	6800      	ldr	r0, [r0, #0]
 80091b0:	9301      	str	r3, [sp, #4]
 80091b2:	a902      	add	r1, sp, #8
 80091b4:	f001 fb68 	bl	800a888 <_svfiprintf_r>
 80091b8:	9b02      	ldr	r3, [sp, #8]
 80091ba:	2200      	movs	r2, #0
 80091bc:	701a      	strb	r2, [r3, #0]
 80091be:	b01c      	add	sp, #112	; 0x70
 80091c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80091c4:	b003      	add	sp, #12
 80091c6:	4770      	bx	lr
 80091c8:	20000010 	.word	0x20000010
 80091cc:	ffff0208 	.word	0xffff0208

080091d0 <quorem>:
 80091d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d4:	6903      	ldr	r3, [r0, #16]
 80091d6:	690c      	ldr	r4, [r1, #16]
 80091d8:	42a3      	cmp	r3, r4
 80091da:	4607      	mov	r7, r0
 80091dc:	f2c0 8081 	blt.w	80092e2 <quorem+0x112>
 80091e0:	3c01      	subs	r4, #1
 80091e2:	f101 0814 	add.w	r8, r1, #20
 80091e6:	f100 0514 	add.w	r5, r0, #20
 80091ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80091ee:	9301      	str	r3, [sp, #4]
 80091f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80091f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80091f8:	3301      	adds	r3, #1
 80091fa:	429a      	cmp	r2, r3
 80091fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009200:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009204:	fbb2 f6f3 	udiv	r6, r2, r3
 8009208:	d331      	bcc.n	800926e <quorem+0x9e>
 800920a:	f04f 0e00 	mov.w	lr, #0
 800920e:	4640      	mov	r0, r8
 8009210:	46ac      	mov	ip, r5
 8009212:	46f2      	mov	sl, lr
 8009214:	f850 2b04 	ldr.w	r2, [r0], #4
 8009218:	b293      	uxth	r3, r2
 800921a:	fb06 e303 	mla	r3, r6, r3, lr
 800921e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009222:	b29b      	uxth	r3, r3
 8009224:	ebaa 0303 	sub.w	r3, sl, r3
 8009228:	f8dc a000 	ldr.w	sl, [ip]
 800922c:	0c12      	lsrs	r2, r2, #16
 800922e:	fa13 f38a 	uxtah	r3, r3, sl
 8009232:	fb06 e202 	mla	r2, r6, r2, lr
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	9b00      	ldr	r3, [sp, #0]
 800923a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800923e:	b292      	uxth	r2, r2
 8009240:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009244:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009248:	f8bd 3000 	ldrh.w	r3, [sp]
 800924c:	4581      	cmp	r9, r0
 800924e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009252:	f84c 3b04 	str.w	r3, [ip], #4
 8009256:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800925a:	d2db      	bcs.n	8009214 <quorem+0x44>
 800925c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009260:	b92b      	cbnz	r3, 800926e <quorem+0x9e>
 8009262:	9b01      	ldr	r3, [sp, #4]
 8009264:	3b04      	subs	r3, #4
 8009266:	429d      	cmp	r5, r3
 8009268:	461a      	mov	r2, r3
 800926a:	d32e      	bcc.n	80092ca <quorem+0xfa>
 800926c:	613c      	str	r4, [r7, #16]
 800926e:	4638      	mov	r0, r7
 8009270:	f001 f8b6 	bl	800a3e0 <__mcmp>
 8009274:	2800      	cmp	r0, #0
 8009276:	db24      	blt.n	80092c2 <quorem+0xf2>
 8009278:	3601      	adds	r6, #1
 800927a:	4628      	mov	r0, r5
 800927c:	f04f 0c00 	mov.w	ip, #0
 8009280:	f858 2b04 	ldr.w	r2, [r8], #4
 8009284:	f8d0 e000 	ldr.w	lr, [r0]
 8009288:	b293      	uxth	r3, r2
 800928a:	ebac 0303 	sub.w	r3, ip, r3
 800928e:	0c12      	lsrs	r2, r2, #16
 8009290:	fa13 f38e 	uxtah	r3, r3, lr
 8009294:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009298:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800929c:	b29b      	uxth	r3, r3
 800929e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092a2:	45c1      	cmp	r9, r8
 80092a4:	f840 3b04 	str.w	r3, [r0], #4
 80092a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80092ac:	d2e8      	bcs.n	8009280 <quorem+0xb0>
 80092ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092b6:	b922      	cbnz	r2, 80092c2 <quorem+0xf2>
 80092b8:	3b04      	subs	r3, #4
 80092ba:	429d      	cmp	r5, r3
 80092bc:	461a      	mov	r2, r3
 80092be:	d30a      	bcc.n	80092d6 <quorem+0x106>
 80092c0:	613c      	str	r4, [r7, #16]
 80092c2:	4630      	mov	r0, r6
 80092c4:	b003      	add	sp, #12
 80092c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ca:	6812      	ldr	r2, [r2, #0]
 80092cc:	3b04      	subs	r3, #4
 80092ce:	2a00      	cmp	r2, #0
 80092d0:	d1cc      	bne.n	800926c <quorem+0x9c>
 80092d2:	3c01      	subs	r4, #1
 80092d4:	e7c7      	b.n	8009266 <quorem+0x96>
 80092d6:	6812      	ldr	r2, [r2, #0]
 80092d8:	3b04      	subs	r3, #4
 80092da:	2a00      	cmp	r2, #0
 80092dc:	d1f0      	bne.n	80092c0 <quorem+0xf0>
 80092de:	3c01      	subs	r4, #1
 80092e0:	e7eb      	b.n	80092ba <quorem+0xea>
 80092e2:	2000      	movs	r0, #0
 80092e4:	e7ee      	b.n	80092c4 <quorem+0xf4>
	...

080092e8 <_dtoa_r>:
 80092e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ec:	ed2d 8b04 	vpush	{d8-d9}
 80092f0:	ec57 6b10 	vmov	r6, r7, d0
 80092f4:	b093      	sub	sp, #76	; 0x4c
 80092f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80092f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80092fc:	9106      	str	r1, [sp, #24]
 80092fe:	ee10 aa10 	vmov	sl, s0
 8009302:	4604      	mov	r4, r0
 8009304:	9209      	str	r2, [sp, #36]	; 0x24
 8009306:	930c      	str	r3, [sp, #48]	; 0x30
 8009308:	46bb      	mov	fp, r7
 800930a:	b975      	cbnz	r5, 800932a <_dtoa_r+0x42>
 800930c:	2010      	movs	r0, #16
 800930e:	f000 fddd 	bl	8009ecc <malloc>
 8009312:	4602      	mov	r2, r0
 8009314:	6260      	str	r0, [r4, #36]	; 0x24
 8009316:	b920      	cbnz	r0, 8009322 <_dtoa_r+0x3a>
 8009318:	4ba7      	ldr	r3, [pc, #668]	; (80095b8 <_dtoa_r+0x2d0>)
 800931a:	21ea      	movs	r1, #234	; 0xea
 800931c:	48a7      	ldr	r0, [pc, #668]	; (80095bc <_dtoa_r+0x2d4>)
 800931e:	f001 fbc3 	bl	800aaa8 <__assert_func>
 8009322:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009326:	6005      	str	r5, [r0, #0]
 8009328:	60c5      	str	r5, [r0, #12]
 800932a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800932c:	6819      	ldr	r1, [r3, #0]
 800932e:	b151      	cbz	r1, 8009346 <_dtoa_r+0x5e>
 8009330:	685a      	ldr	r2, [r3, #4]
 8009332:	604a      	str	r2, [r1, #4]
 8009334:	2301      	movs	r3, #1
 8009336:	4093      	lsls	r3, r2
 8009338:	608b      	str	r3, [r1, #8]
 800933a:	4620      	mov	r0, r4
 800933c:	f000 fe0e 	bl	8009f5c <_Bfree>
 8009340:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009342:	2200      	movs	r2, #0
 8009344:	601a      	str	r2, [r3, #0]
 8009346:	1e3b      	subs	r3, r7, #0
 8009348:	bfaa      	itet	ge
 800934a:	2300      	movge	r3, #0
 800934c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009350:	f8c8 3000 	strge.w	r3, [r8]
 8009354:	4b9a      	ldr	r3, [pc, #616]	; (80095c0 <_dtoa_r+0x2d8>)
 8009356:	bfbc      	itt	lt
 8009358:	2201      	movlt	r2, #1
 800935a:	f8c8 2000 	strlt.w	r2, [r8]
 800935e:	ea33 030b 	bics.w	r3, r3, fp
 8009362:	d11b      	bne.n	800939c <_dtoa_r+0xb4>
 8009364:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009366:	f242 730f 	movw	r3, #9999	; 0x270f
 800936a:	6013      	str	r3, [r2, #0]
 800936c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009370:	4333      	orrs	r3, r6
 8009372:	f000 8592 	beq.w	8009e9a <_dtoa_r+0xbb2>
 8009376:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009378:	b963      	cbnz	r3, 8009394 <_dtoa_r+0xac>
 800937a:	4b92      	ldr	r3, [pc, #584]	; (80095c4 <_dtoa_r+0x2dc>)
 800937c:	e022      	b.n	80093c4 <_dtoa_r+0xdc>
 800937e:	4b92      	ldr	r3, [pc, #584]	; (80095c8 <_dtoa_r+0x2e0>)
 8009380:	9301      	str	r3, [sp, #4]
 8009382:	3308      	adds	r3, #8
 8009384:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009386:	6013      	str	r3, [r2, #0]
 8009388:	9801      	ldr	r0, [sp, #4]
 800938a:	b013      	add	sp, #76	; 0x4c
 800938c:	ecbd 8b04 	vpop	{d8-d9}
 8009390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009394:	4b8b      	ldr	r3, [pc, #556]	; (80095c4 <_dtoa_r+0x2dc>)
 8009396:	9301      	str	r3, [sp, #4]
 8009398:	3303      	adds	r3, #3
 800939a:	e7f3      	b.n	8009384 <_dtoa_r+0x9c>
 800939c:	2200      	movs	r2, #0
 800939e:	2300      	movs	r3, #0
 80093a0:	4650      	mov	r0, sl
 80093a2:	4659      	mov	r1, fp
 80093a4:	f7f7 fba8 	bl	8000af8 <__aeabi_dcmpeq>
 80093a8:	ec4b ab19 	vmov	d9, sl, fp
 80093ac:	4680      	mov	r8, r0
 80093ae:	b158      	cbz	r0, 80093c8 <_dtoa_r+0xe0>
 80093b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093b2:	2301      	movs	r3, #1
 80093b4:	6013      	str	r3, [r2, #0]
 80093b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	f000 856b 	beq.w	8009e94 <_dtoa_r+0xbac>
 80093be:	4883      	ldr	r0, [pc, #524]	; (80095cc <_dtoa_r+0x2e4>)
 80093c0:	6018      	str	r0, [r3, #0]
 80093c2:	1e43      	subs	r3, r0, #1
 80093c4:	9301      	str	r3, [sp, #4]
 80093c6:	e7df      	b.n	8009388 <_dtoa_r+0xa0>
 80093c8:	ec4b ab10 	vmov	d0, sl, fp
 80093cc:	aa10      	add	r2, sp, #64	; 0x40
 80093ce:	a911      	add	r1, sp, #68	; 0x44
 80093d0:	4620      	mov	r0, r4
 80093d2:	f001 f8ab 	bl	800a52c <__d2b>
 80093d6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80093da:	ee08 0a10 	vmov	s16, r0
 80093de:	2d00      	cmp	r5, #0
 80093e0:	f000 8084 	beq.w	80094ec <_dtoa_r+0x204>
 80093e4:	ee19 3a90 	vmov	r3, s19
 80093e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093ec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80093f0:	4656      	mov	r6, sl
 80093f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80093f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80093fa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80093fe:	4b74      	ldr	r3, [pc, #464]	; (80095d0 <_dtoa_r+0x2e8>)
 8009400:	2200      	movs	r2, #0
 8009402:	4630      	mov	r0, r6
 8009404:	4639      	mov	r1, r7
 8009406:	f7f6 ff57 	bl	80002b8 <__aeabi_dsub>
 800940a:	a365      	add	r3, pc, #404	; (adr r3, 80095a0 <_dtoa_r+0x2b8>)
 800940c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009410:	f7f7 f90a 	bl	8000628 <__aeabi_dmul>
 8009414:	a364      	add	r3, pc, #400	; (adr r3, 80095a8 <_dtoa_r+0x2c0>)
 8009416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941a:	f7f6 ff4f 	bl	80002bc <__adddf3>
 800941e:	4606      	mov	r6, r0
 8009420:	4628      	mov	r0, r5
 8009422:	460f      	mov	r7, r1
 8009424:	f7f7 f896 	bl	8000554 <__aeabi_i2d>
 8009428:	a361      	add	r3, pc, #388	; (adr r3, 80095b0 <_dtoa_r+0x2c8>)
 800942a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942e:	f7f7 f8fb 	bl	8000628 <__aeabi_dmul>
 8009432:	4602      	mov	r2, r0
 8009434:	460b      	mov	r3, r1
 8009436:	4630      	mov	r0, r6
 8009438:	4639      	mov	r1, r7
 800943a:	f7f6 ff3f 	bl	80002bc <__adddf3>
 800943e:	4606      	mov	r6, r0
 8009440:	460f      	mov	r7, r1
 8009442:	f7f7 fba1 	bl	8000b88 <__aeabi_d2iz>
 8009446:	2200      	movs	r2, #0
 8009448:	9000      	str	r0, [sp, #0]
 800944a:	2300      	movs	r3, #0
 800944c:	4630      	mov	r0, r6
 800944e:	4639      	mov	r1, r7
 8009450:	f7f7 fb5c 	bl	8000b0c <__aeabi_dcmplt>
 8009454:	b150      	cbz	r0, 800946c <_dtoa_r+0x184>
 8009456:	9800      	ldr	r0, [sp, #0]
 8009458:	f7f7 f87c 	bl	8000554 <__aeabi_i2d>
 800945c:	4632      	mov	r2, r6
 800945e:	463b      	mov	r3, r7
 8009460:	f7f7 fb4a 	bl	8000af8 <__aeabi_dcmpeq>
 8009464:	b910      	cbnz	r0, 800946c <_dtoa_r+0x184>
 8009466:	9b00      	ldr	r3, [sp, #0]
 8009468:	3b01      	subs	r3, #1
 800946a:	9300      	str	r3, [sp, #0]
 800946c:	9b00      	ldr	r3, [sp, #0]
 800946e:	2b16      	cmp	r3, #22
 8009470:	d85a      	bhi.n	8009528 <_dtoa_r+0x240>
 8009472:	9a00      	ldr	r2, [sp, #0]
 8009474:	4b57      	ldr	r3, [pc, #348]	; (80095d4 <_dtoa_r+0x2ec>)
 8009476:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800947a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800947e:	ec51 0b19 	vmov	r0, r1, d9
 8009482:	f7f7 fb43 	bl	8000b0c <__aeabi_dcmplt>
 8009486:	2800      	cmp	r0, #0
 8009488:	d050      	beq.n	800952c <_dtoa_r+0x244>
 800948a:	9b00      	ldr	r3, [sp, #0]
 800948c:	3b01      	subs	r3, #1
 800948e:	9300      	str	r3, [sp, #0]
 8009490:	2300      	movs	r3, #0
 8009492:	930b      	str	r3, [sp, #44]	; 0x2c
 8009494:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009496:	1b5d      	subs	r5, r3, r5
 8009498:	1e6b      	subs	r3, r5, #1
 800949a:	9305      	str	r3, [sp, #20]
 800949c:	bf45      	ittet	mi
 800949e:	f1c5 0301 	rsbmi	r3, r5, #1
 80094a2:	9304      	strmi	r3, [sp, #16]
 80094a4:	2300      	movpl	r3, #0
 80094a6:	2300      	movmi	r3, #0
 80094a8:	bf4c      	ite	mi
 80094aa:	9305      	strmi	r3, [sp, #20]
 80094ac:	9304      	strpl	r3, [sp, #16]
 80094ae:	9b00      	ldr	r3, [sp, #0]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	db3d      	blt.n	8009530 <_dtoa_r+0x248>
 80094b4:	9b05      	ldr	r3, [sp, #20]
 80094b6:	9a00      	ldr	r2, [sp, #0]
 80094b8:	920a      	str	r2, [sp, #40]	; 0x28
 80094ba:	4413      	add	r3, r2
 80094bc:	9305      	str	r3, [sp, #20]
 80094be:	2300      	movs	r3, #0
 80094c0:	9307      	str	r3, [sp, #28]
 80094c2:	9b06      	ldr	r3, [sp, #24]
 80094c4:	2b09      	cmp	r3, #9
 80094c6:	f200 8089 	bhi.w	80095dc <_dtoa_r+0x2f4>
 80094ca:	2b05      	cmp	r3, #5
 80094cc:	bfc4      	itt	gt
 80094ce:	3b04      	subgt	r3, #4
 80094d0:	9306      	strgt	r3, [sp, #24]
 80094d2:	9b06      	ldr	r3, [sp, #24]
 80094d4:	f1a3 0302 	sub.w	r3, r3, #2
 80094d8:	bfcc      	ite	gt
 80094da:	2500      	movgt	r5, #0
 80094dc:	2501      	movle	r5, #1
 80094de:	2b03      	cmp	r3, #3
 80094e0:	f200 8087 	bhi.w	80095f2 <_dtoa_r+0x30a>
 80094e4:	e8df f003 	tbb	[pc, r3]
 80094e8:	59383a2d 	.word	0x59383a2d
 80094ec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80094f0:	441d      	add	r5, r3
 80094f2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80094f6:	2b20      	cmp	r3, #32
 80094f8:	bfc1      	itttt	gt
 80094fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80094fe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009502:	fa0b f303 	lslgt.w	r3, fp, r3
 8009506:	fa26 f000 	lsrgt.w	r0, r6, r0
 800950a:	bfda      	itte	le
 800950c:	f1c3 0320 	rsble	r3, r3, #32
 8009510:	fa06 f003 	lslle.w	r0, r6, r3
 8009514:	4318      	orrgt	r0, r3
 8009516:	f7f7 f80d 	bl	8000534 <__aeabi_ui2d>
 800951a:	2301      	movs	r3, #1
 800951c:	4606      	mov	r6, r0
 800951e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009522:	3d01      	subs	r5, #1
 8009524:	930e      	str	r3, [sp, #56]	; 0x38
 8009526:	e76a      	b.n	80093fe <_dtoa_r+0x116>
 8009528:	2301      	movs	r3, #1
 800952a:	e7b2      	b.n	8009492 <_dtoa_r+0x1aa>
 800952c:	900b      	str	r0, [sp, #44]	; 0x2c
 800952e:	e7b1      	b.n	8009494 <_dtoa_r+0x1ac>
 8009530:	9b04      	ldr	r3, [sp, #16]
 8009532:	9a00      	ldr	r2, [sp, #0]
 8009534:	1a9b      	subs	r3, r3, r2
 8009536:	9304      	str	r3, [sp, #16]
 8009538:	4253      	negs	r3, r2
 800953a:	9307      	str	r3, [sp, #28]
 800953c:	2300      	movs	r3, #0
 800953e:	930a      	str	r3, [sp, #40]	; 0x28
 8009540:	e7bf      	b.n	80094c2 <_dtoa_r+0x1da>
 8009542:	2300      	movs	r3, #0
 8009544:	9308      	str	r3, [sp, #32]
 8009546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009548:	2b00      	cmp	r3, #0
 800954a:	dc55      	bgt.n	80095f8 <_dtoa_r+0x310>
 800954c:	2301      	movs	r3, #1
 800954e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009552:	461a      	mov	r2, r3
 8009554:	9209      	str	r2, [sp, #36]	; 0x24
 8009556:	e00c      	b.n	8009572 <_dtoa_r+0x28a>
 8009558:	2301      	movs	r3, #1
 800955a:	e7f3      	b.n	8009544 <_dtoa_r+0x25c>
 800955c:	2300      	movs	r3, #0
 800955e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009560:	9308      	str	r3, [sp, #32]
 8009562:	9b00      	ldr	r3, [sp, #0]
 8009564:	4413      	add	r3, r2
 8009566:	9302      	str	r3, [sp, #8]
 8009568:	3301      	adds	r3, #1
 800956a:	2b01      	cmp	r3, #1
 800956c:	9303      	str	r3, [sp, #12]
 800956e:	bfb8      	it	lt
 8009570:	2301      	movlt	r3, #1
 8009572:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009574:	2200      	movs	r2, #0
 8009576:	6042      	str	r2, [r0, #4]
 8009578:	2204      	movs	r2, #4
 800957a:	f102 0614 	add.w	r6, r2, #20
 800957e:	429e      	cmp	r6, r3
 8009580:	6841      	ldr	r1, [r0, #4]
 8009582:	d93d      	bls.n	8009600 <_dtoa_r+0x318>
 8009584:	4620      	mov	r0, r4
 8009586:	f000 fca9 	bl	8009edc <_Balloc>
 800958a:	9001      	str	r0, [sp, #4]
 800958c:	2800      	cmp	r0, #0
 800958e:	d13b      	bne.n	8009608 <_dtoa_r+0x320>
 8009590:	4b11      	ldr	r3, [pc, #68]	; (80095d8 <_dtoa_r+0x2f0>)
 8009592:	4602      	mov	r2, r0
 8009594:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009598:	e6c0      	b.n	800931c <_dtoa_r+0x34>
 800959a:	2301      	movs	r3, #1
 800959c:	e7df      	b.n	800955e <_dtoa_r+0x276>
 800959e:	bf00      	nop
 80095a0:	636f4361 	.word	0x636f4361
 80095a4:	3fd287a7 	.word	0x3fd287a7
 80095a8:	8b60c8b3 	.word	0x8b60c8b3
 80095ac:	3fc68a28 	.word	0x3fc68a28
 80095b0:	509f79fb 	.word	0x509f79fb
 80095b4:	3fd34413 	.word	0x3fd34413
 80095b8:	0800b9cd 	.word	0x0800b9cd
 80095bc:	0800b9e4 	.word	0x0800b9e4
 80095c0:	7ff00000 	.word	0x7ff00000
 80095c4:	0800b9c9 	.word	0x0800b9c9
 80095c8:	0800b9c0 	.word	0x0800b9c0
 80095cc:	0800b99d 	.word	0x0800b99d
 80095d0:	3ff80000 	.word	0x3ff80000
 80095d4:	0800bad8 	.word	0x0800bad8
 80095d8:	0800ba3f 	.word	0x0800ba3f
 80095dc:	2501      	movs	r5, #1
 80095de:	2300      	movs	r3, #0
 80095e0:	9306      	str	r3, [sp, #24]
 80095e2:	9508      	str	r5, [sp, #32]
 80095e4:	f04f 33ff 	mov.w	r3, #4294967295
 80095e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80095ec:	2200      	movs	r2, #0
 80095ee:	2312      	movs	r3, #18
 80095f0:	e7b0      	b.n	8009554 <_dtoa_r+0x26c>
 80095f2:	2301      	movs	r3, #1
 80095f4:	9308      	str	r3, [sp, #32]
 80095f6:	e7f5      	b.n	80095e4 <_dtoa_r+0x2fc>
 80095f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80095fe:	e7b8      	b.n	8009572 <_dtoa_r+0x28a>
 8009600:	3101      	adds	r1, #1
 8009602:	6041      	str	r1, [r0, #4]
 8009604:	0052      	lsls	r2, r2, #1
 8009606:	e7b8      	b.n	800957a <_dtoa_r+0x292>
 8009608:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800960a:	9a01      	ldr	r2, [sp, #4]
 800960c:	601a      	str	r2, [r3, #0]
 800960e:	9b03      	ldr	r3, [sp, #12]
 8009610:	2b0e      	cmp	r3, #14
 8009612:	f200 809d 	bhi.w	8009750 <_dtoa_r+0x468>
 8009616:	2d00      	cmp	r5, #0
 8009618:	f000 809a 	beq.w	8009750 <_dtoa_r+0x468>
 800961c:	9b00      	ldr	r3, [sp, #0]
 800961e:	2b00      	cmp	r3, #0
 8009620:	dd32      	ble.n	8009688 <_dtoa_r+0x3a0>
 8009622:	4ab7      	ldr	r2, [pc, #732]	; (8009900 <_dtoa_r+0x618>)
 8009624:	f003 030f 	and.w	r3, r3, #15
 8009628:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800962c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009630:	9b00      	ldr	r3, [sp, #0]
 8009632:	05d8      	lsls	r0, r3, #23
 8009634:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009638:	d516      	bpl.n	8009668 <_dtoa_r+0x380>
 800963a:	4bb2      	ldr	r3, [pc, #712]	; (8009904 <_dtoa_r+0x61c>)
 800963c:	ec51 0b19 	vmov	r0, r1, d9
 8009640:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009644:	f7f7 f91a 	bl	800087c <__aeabi_ddiv>
 8009648:	f007 070f 	and.w	r7, r7, #15
 800964c:	4682      	mov	sl, r0
 800964e:	468b      	mov	fp, r1
 8009650:	2503      	movs	r5, #3
 8009652:	4eac      	ldr	r6, [pc, #688]	; (8009904 <_dtoa_r+0x61c>)
 8009654:	b957      	cbnz	r7, 800966c <_dtoa_r+0x384>
 8009656:	4642      	mov	r2, r8
 8009658:	464b      	mov	r3, r9
 800965a:	4650      	mov	r0, sl
 800965c:	4659      	mov	r1, fp
 800965e:	f7f7 f90d 	bl	800087c <__aeabi_ddiv>
 8009662:	4682      	mov	sl, r0
 8009664:	468b      	mov	fp, r1
 8009666:	e028      	b.n	80096ba <_dtoa_r+0x3d2>
 8009668:	2502      	movs	r5, #2
 800966a:	e7f2      	b.n	8009652 <_dtoa_r+0x36a>
 800966c:	07f9      	lsls	r1, r7, #31
 800966e:	d508      	bpl.n	8009682 <_dtoa_r+0x39a>
 8009670:	4640      	mov	r0, r8
 8009672:	4649      	mov	r1, r9
 8009674:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009678:	f7f6 ffd6 	bl	8000628 <__aeabi_dmul>
 800967c:	3501      	adds	r5, #1
 800967e:	4680      	mov	r8, r0
 8009680:	4689      	mov	r9, r1
 8009682:	107f      	asrs	r7, r7, #1
 8009684:	3608      	adds	r6, #8
 8009686:	e7e5      	b.n	8009654 <_dtoa_r+0x36c>
 8009688:	f000 809b 	beq.w	80097c2 <_dtoa_r+0x4da>
 800968c:	9b00      	ldr	r3, [sp, #0]
 800968e:	4f9d      	ldr	r7, [pc, #628]	; (8009904 <_dtoa_r+0x61c>)
 8009690:	425e      	negs	r6, r3
 8009692:	4b9b      	ldr	r3, [pc, #620]	; (8009900 <_dtoa_r+0x618>)
 8009694:	f006 020f 	and.w	r2, r6, #15
 8009698:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800969c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a0:	ec51 0b19 	vmov	r0, r1, d9
 80096a4:	f7f6 ffc0 	bl	8000628 <__aeabi_dmul>
 80096a8:	1136      	asrs	r6, r6, #4
 80096aa:	4682      	mov	sl, r0
 80096ac:	468b      	mov	fp, r1
 80096ae:	2300      	movs	r3, #0
 80096b0:	2502      	movs	r5, #2
 80096b2:	2e00      	cmp	r6, #0
 80096b4:	d17a      	bne.n	80097ac <_dtoa_r+0x4c4>
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d1d3      	bne.n	8009662 <_dtoa_r+0x37a>
 80096ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f000 8082 	beq.w	80097c6 <_dtoa_r+0x4de>
 80096c2:	4b91      	ldr	r3, [pc, #580]	; (8009908 <_dtoa_r+0x620>)
 80096c4:	2200      	movs	r2, #0
 80096c6:	4650      	mov	r0, sl
 80096c8:	4659      	mov	r1, fp
 80096ca:	f7f7 fa1f 	bl	8000b0c <__aeabi_dcmplt>
 80096ce:	2800      	cmp	r0, #0
 80096d0:	d079      	beq.n	80097c6 <_dtoa_r+0x4de>
 80096d2:	9b03      	ldr	r3, [sp, #12]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d076      	beq.n	80097c6 <_dtoa_r+0x4de>
 80096d8:	9b02      	ldr	r3, [sp, #8]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	dd36      	ble.n	800974c <_dtoa_r+0x464>
 80096de:	9b00      	ldr	r3, [sp, #0]
 80096e0:	4650      	mov	r0, sl
 80096e2:	4659      	mov	r1, fp
 80096e4:	1e5f      	subs	r7, r3, #1
 80096e6:	2200      	movs	r2, #0
 80096e8:	4b88      	ldr	r3, [pc, #544]	; (800990c <_dtoa_r+0x624>)
 80096ea:	f7f6 ff9d 	bl	8000628 <__aeabi_dmul>
 80096ee:	9e02      	ldr	r6, [sp, #8]
 80096f0:	4682      	mov	sl, r0
 80096f2:	468b      	mov	fp, r1
 80096f4:	3501      	adds	r5, #1
 80096f6:	4628      	mov	r0, r5
 80096f8:	f7f6 ff2c 	bl	8000554 <__aeabi_i2d>
 80096fc:	4652      	mov	r2, sl
 80096fe:	465b      	mov	r3, fp
 8009700:	f7f6 ff92 	bl	8000628 <__aeabi_dmul>
 8009704:	4b82      	ldr	r3, [pc, #520]	; (8009910 <_dtoa_r+0x628>)
 8009706:	2200      	movs	r2, #0
 8009708:	f7f6 fdd8 	bl	80002bc <__adddf3>
 800970c:	46d0      	mov	r8, sl
 800970e:	46d9      	mov	r9, fp
 8009710:	4682      	mov	sl, r0
 8009712:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009716:	2e00      	cmp	r6, #0
 8009718:	d158      	bne.n	80097cc <_dtoa_r+0x4e4>
 800971a:	4b7e      	ldr	r3, [pc, #504]	; (8009914 <_dtoa_r+0x62c>)
 800971c:	2200      	movs	r2, #0
 800971e:	4640      	mov	r0, r8
 8009720:	4649      	mov	r1, r9
 8009722:	f7f6 fdc9 	bl	80002b8 <__aeabi_dsub>
 8009726:	4652      	mov	r2, sl
 8009728:	465b      	mov	r3, fp
 800972a:	4680      	mov	r8, r0
 800972c:	4689      	mov	r9, r1
 800972e:	f7f7 fa0b 	bl	8000b48 <__aeabi_dcmpgt>
 8009732:	2800      	cmp	r0, #0
 8009734:	f040 8295 	bne.w	8009c62 <_dtoa_r+0x97a>
 8009738:	4652      	mov	r2, sl
 800973a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800973e:	4640      	mov	r0, r8
 8009740:	4649      	mov	r1, r9
 8009742:	f7f7 f9e3 	bl	8000b0c <__aeabi_dcmplt>
 8009746:	2800      	cmp	r0, #0
 8009748:	f040 8289 	bne.w	8009c5e <_dtoa_r+0x976>
 800974c:	ec5b ab19 	vmov	sl, fp, d9
 8009750:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009752:	2b00      	cmp	r3, #0
 8009754:	f2c0 8148 	blt.w	80099e8 <_dtoa_r+0x700>
 8009758:	9a00      	ldr	r2, [sp, #0]
 800975a:	2a0e      	cmp	r2, #14
 800975c:	f300 8144 	bgt.w	80099e8 <_dtoa_r+0x700>
 8009760:	4b67      	ldr	r3, [pc, #412]	; (8009900 <_dtoa_r+0x618>)
 8009762:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009766:	e9d3 8900 	ldrd	r8, r9, [r3]
 800976a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800976c:	2b00      	cmp	r3, #0
 800976e:	f280 80d5 	bge.w	800991c <_dtoa_r+0x634>
 8009772:	9b03      	ldr	r3, [sp, #12]
 8009774:	2b00      	cmp	r3, #0
 8009776:	f300 80d1 	bgt.w	800991c <_dtoa_r+0x634>
 800977a:	f040 826f 	bne.w	8009c5c <_dtoa_r+0x974>
 800977e:	4b65      	ldr	r3, [pc, #404]	; (8009914 <_dtoa_r+0x62c>)
 8009780:	2200      	movs	r2, #0
 8009782:	4640      	mov	r0, r8
 8009784:	4649      	mov	r1, r9
 8009786:	f7f6 ff4f 	bl	8000628 <__aeabi_dmul>
 800978a:	4652      	mov	r2, sl
 800978c:	465b      	mov	r3, fp
 800978e:	f7f7 f9d1 	bl	8000b34 <__aeabi_dcmpge>
 8009792:	9e03      	ldr	r6, [sp, #12]
 8009794:	4637      	mov	r7, r6
 8009796:	2800      	cmp	r0, #0
 8009798:	f040 8245 	bne.w	8009c26 <_dtoa_r+0x93e>
 800979c:	9d01      	ldr	r5, [sp, #4]
 800979e:	2331      	movs	r3, #49	; 0x31
 80097a0:	f805 3b01 	strb.w	r3, [r5], #1
 80097a4:	9b00      	ldr	r3, [sp, #0]
 80097a6:	3301      	adds	r3, #1
 80097a8:	9300      	str	r3, [sp, #0]
 80097aa:	e240      	b.n	8009c2e <_dtoa_r+0x946>
 80097ac:	07f2      	lsls	r2, r6, #31
 80097ae:	d505      	bpl.n	80097bc <_dtoa_r+0x4d4>
 80097b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097b4:	f7f6 ff38 	bl	8000628 <__aeabi_dmul>
 80097b8:	3501      	adds	r5, #1
 80097ba:	2301      	movs	r3, #1
 80097bc:	1076      	asrs	r6, r6, #1
 80097be:	3708      	adds	r7, #8
 80097c0:	e777      	b.n	80096b2 <_dtoa_r+0x3ca>
 80097c2:	2502      	movs	r5, #2
 80097c4:	e779      	b.n	80096ba <_dtoa_r+0x3d2>
 80097c6:	9f00      	ldr	r7, [sp, #0]
 80097c8:	9e03      	ldr	r6, [sp, #12]
 80097ca:	e794      	b.n	80096f6 <_dtoa_r+0x40e>
 80097cc:	9901      	ldr	r1, [sp, #4]
 80097ce:	4b4c      	ldr	r3, [pc, #304]	; (8009900 <_dtoa_r+0x618>)
 80097d0:	4431      	add	r1, r6
 80097d2:	910d      	str	r1, [sp, #52]	; 0x34
 80097d4:	9908      	ldr	r1, [sp, #32]
 80097d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80097da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80097de:	2900      	cmp	r1, #0
 80097e0:	d043      	beq.n	800986a <_dtoa_r+0x582>
 80097e2:	494d      	ldr	r1, [pc, #308]	; (8009918 <_dtoa_r+0x630>)
 80097e4:	2000      	movs	r0, #0
 80097e6:	f7f7 f849 	bl	800087c <__aeabi_ddiv>
 80097ea:	4652      	mov	r2, sl
 80097ec:	465b      	mov	r3, fp
 80097ee:	f7f6 fd63 	bl	80002b8 <__aeabi_dsub>
 80097f2:	9d01      	ldr	r5, [sp, #4]
 80097f4:	4682      	mov	sl, r0
 80097f6:	468b      	mov	fp, r1
 80097f8:	4649      	mov	r1, r9
 80097fa:	4640      	mov	r0, r8
 80097fc:	f7f7 f9c4 	bl	8000b88 <__aeabi_d2iz>
 8009800:	4606      	mov	r6, r0
 8009802:	f7f6 fea7 	bl	8000554 <__aeabi_i2d>
 8009806:	4602      	mov	r2, r0
 8009808:	460b      	mov	r3, r1
 800980a:	4640      	mov	r0, r8
 800980c:	4649      	mov	r1, r9
 800980e:	f7f6 fd53 	bl	80002b8 <__aeabi_dsub>
 8009812:	3630      	adds	r6, #48	; 0x30
 8009814:	f805 6b01 	strb.w	r6, [r5], #1
 8009818:	4652      	mov	r2, sl
 800981a:	465b      	mov	r3, fp
 800981c:	4680      	mov	r8, r0
 800981e:	4689      	mov	r9, r1
 8009820:	f7f7 f974 	bl	8000b0c <__aeabi_dcmplt>
 8009824:	2800      	cmp	r0, #0
 8009826:	d163      	bne.n	80098f0 <_dtoa_r+0x608>
 8009828:	4642      	mov	r2, r8
 800982a:	464b      	mov	r3, r9
 800982c:	4936      	ldr	r1, [pc, #216]	; (8009908 <_dtoa_r+0x620>)
 800982e:	2000      	movs	r0, #0
 8009830:	f7f6 fd42 	bl	80002b8 <__aeabi_dsub>
 8009834:	4652      	mov	r2, sl
 8009836:	465b      	mov	r3, fp
 8009838:	f7f7 f968 	bl	8000b0c <__aeabi_dcmplt>
 800983c:	2800      	cmp	r0, #0
 800983e:	f040 80b5 	bne.w	80099ac <_dtoa_r+0x6c4>
 8009842:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009844:	429d      	cmp	r5, r3
 8009846:	d081      	beq.n	800974c <_dtoa_r+0x464>
 8009848:	4b30      	ldr	r3, [pc, #192]	; (800990c <_dtoa_r+0x624>)
 800984a:	2200      	movs	r2, #0
 800984c:	4650      	mov	r0, sl
 800984e:	4659      	mov	r1, fp
 8009850:	f7f6 feea 	bl	8000628 <__aeabi_dmul>
 8009854:	4b2d      	ldr	r3, [pc, #180]	; (800990c <_dtoa_r+0x624>)
 8009856:	4682      	mov	sl, r0
 8009858:	468b      	mov	fp, r1
 800985a:	4640      	mov	r0, r8
 800985c:	4649      	mov	r1, r9
 800985e:	2200      	movs	r2, #0
 8009860:	f7f6 fee2 	bl	8000628 <__aeabi_dmul>
 8009864:	4680      	mov	r8, r0
 8009866:	4689      	mov	r9, r1
 8009868:	e7c6      	b.n	80097f8 <_dtoa_r+0x510>
 800986a:	4650      	mov	r0, sl
 800986c:	4659      	mov	r1, fp
 800986e:	f7f6 fedb 	bl	8000628 <__aeabi_dmul>
 8009872:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009874:	9d01      	ldr	r5, [sp, #4]
 8009876:	930f      	str	r3, [sp, #60]	; 0x3c
 8009878:	4682      	mov	sl, r0
 800987a:	468b      	mov	fp, r1
 800987c:	4649      	mov	r1, r9
 800987e:	4640      	mov	r0, r8
 8009880:	f7f7 f982 	bl	8000b88 <__aeabi_d2iz>
 8009884:	4606      	mov	r6, r0
 8009886:	f7f6 fe65 	bl	8000554 <__aeabi_i2d>
 800988a:	3630      	adds	r6, #48	; 0x30
 800988c:	4602      	mov	r2, r0
 800988e:	460b      	mov	r3, r1
 8009890:	4640      	mov	r0, r8
 8009892:	4649      	mov	r1, r9
 8009894:	f7f6 fd10 	bl	80002b8 <__aeabi_dsub>
 8009898:	f805 6b01 	strb.w	r6, [r5], #1
 800989c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800989e:	429d      	cmp	r5, r3
 80098a0:	4680      	mov	r8, r0
 80098a2:	4689      	mov	r9, r1
 80098a4:	f04f 0200 	mov.w	r2, #0
 80098a8:	d124      	bne.n	80098f4 <_dtoa_r+0x60c>
 80098aa:	4b1b      	ldr	r3, [pc, #108]	; (8009918 <_dtoa_r+0x630>)
 80098ac:	4650      	mov	r0, sl
 80098ae:	4659      	mov	r1, fp
 80098b0:	f7f6 fd04 	bl	80002bc <__adddf3>
 80098b4:	4602      	mov	r2, r0
 80098b6:	460b      	mov	r3, r1
 80098b8:	4640      	mov	r0, r8
 80098ba:	4649      	mov	r1, r9
 80098bc:	f7f7 f944 	bl	8000b48 <__aeabi_dcmpgt>
 80098c0:	2800      	cmp	r0, #0
 80098c2:	d173      	bne.n	80099ac <_dtoa_r+0x6c4>
 80098c4:	4652      	mov	r2, sl
 80098c6:	465b      	mov	r3, fp
 80098c8:	4913      	ldr	r1, [pc, #76]	; (8009918 <_dtoa_r+0x630>)
 80098ca:	2000      	movs	r0, #0
 80098cc:	f7f6 fcf4 	bl	80002b8 <__aeabi_dsub>
 80098d0:	4602      	mov	r2, r0
 80098d2:	460b      	mov	r3, r1
 80098d4:	4640      	mov	r0, r8
 80098d6:	4649      	mov	r1, r9
 80098d8:	f7f7 f918 	bl	8000b0c <__aeabi_dcmplt>
 80098dc:	2800      	cmp	r0, #0
 80098de:	f43f af35 	beq.w	800974c <_dtoa_r+0x464>
 80098e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80098e4:	1e6b      	subs	r3, r5, #1
 80098e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80098e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80098ec:	2b30      	cmp	r3, #48	; 0x30
 80098ee:	d0f8      	beq.n	80098e2 <_dtoa_r+0x5fa>
 80098f0:	9700      	str	r7, [sp, #0]
 80098f2:	e049      	b.n	8009988 <_dtoa_r+0x6a0>
 80098f4:	4b05      	ldr	r3, [pc, #20]	; (800990c <_dtoa_r+0x624>)
 80098f6:	f7f6 fe97 	bl	8000628 <__aeabi_dmul>
 80098fa:	4680      	mov	r8, r0
 80098fc:	4689      	mov	r9, r1
 80098fe:	e7bd      	b.n	800987c <_dtoa_r+0x594>
 8009900:	0800bad8 	.word	0x0800bad8
 8009904:	0800bab0 	.word	0x0800bab0
 8009908:	3ff00000 	.word	0x3ff00000
 800990c:	40240000 	.word	0x40240000
 8009910:	401c0000 	.word	0x401c0000
 8009914:	40140000 	.word	0x40140000
 8009918:	3fe00000 	.word	0x3fe00000
 800991c:	9d01      	ldr	r5, [sp, #4]
 800991e:	4656      	mov	r6, sl
 8009920:	465f      	mov	r7, fp
 8009922:	4642      	mov	r2, r8
 8009924:	464b      	mov	r3, r9
 8009926:	4630      	mov	r0, r6
 8009928:	4639      	mov	r1, r7
 800992a:	f7f6 ffa7 	bl	800087c <__aeabi_ddiv>
 800992e:	f7f7 f92b 	bl	8000b88 <__aeabi_d2iz>
 8009932:	4682      	mov	sl, r0
 8009934:	f7f6 fe0e 	bl	8000554 <__aeabi_i2d>
 8009938:	4642      	mov	r2, r8
 800993a:	464b      	mov	r3, r9
 800993c:	f7f6 fe74 	bl	8000628 <__aeabi_dmul>
 8009940:	4602      	mov	r2, r0
 8009942:	460b      	mov	r3, r1
 8009944:	4630      	mov	r0, r6
 8009946:	4639      	mov	r1, r7
 8009948:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800994c:	f7f6 fcb4 	bl	80002b8 <__aeabi_dsub>
 8009950:	f805 6b01 	strb.w	r6, [r5], #1
 8009954:	9e01      	ldr	r6, [sp, #4]
 8009956:	9f03      	ldr	r7, [sp, #12]
 8009958:	1bae      	subs	r6, r5, r6
 800995a:	42b7      	cmp	r7, r6
 800995c:	4602      	mov	r2, r0
 800995e:	460b      	mov	r3, r1
 8009960:	d135      	bne.n	80099ce <_dtoa_r+0x6e6>
 8009962:	f7f6 fcab 	bl	80002bc <__adddf3>
 8009966:	4642      	mov	r2, r8
 8009968:	464b      	mov	r3, r9
 800996a:	4606      	mov	r6, r0
 800996c:	460f      	mov	r7, r1
 800996e:	f7f7 f8eb 	bl	8000b48 <__aeabi_dcmpgt>
 8009972:	b9d0      	cbnz	r0, 80099aa <_dtoa_r+0x6c2>
 8009974:	4642      	mov	r2, r8
 8009976:	464b      	mov	r3, r9
 8009978:	4630      	mov	r0, r6
 800997a:	4639      	mov	r1, r7
 800997c:	f7f7 f8bc 	bl	8000af8 <__aeabi_dcmpeq>
 8009980:	b110      	cbz	r0, 8009988 <_dtoa_r+0x6a0>
 8009982:	f01a 0f01 	tst.w	sl, #1
 8009986:	d110      	bne.n	80099aa <_dtoa_r+0x6c2>
 8009988:	4620      	mov	r0, r4
 800998a:	ee18 1a10 	vmov	r1, s16
 800998e:	f000 fae5 	bl	8009f5c <_Bfree>
 8009992:	2300      	movs	r3, #0
 8009994:	9800      	ldr	r0, [sp, #0]
 8009996:	702b      	strb	r3, [r5, #0]
 8009998:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800999a:	3001      	adds	r0, #1
 800999c:	6018      	str	r0, [r3, #0]
 800999e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f43f acf1 	beq.w	8009388 <_dtoa_r+0xa0>
 80099a6:	601d      	str	r5, [r3, #0]
 80099a8:	e4ee      	b.n	8009388 <_dtoa_r+0xa0>
 80099aa:	9f00      	ldr	r7, [sp, #0]
 80099ac:	462b      	mov	r3, r5
 80099ae:	461d      	mov	r5, r3
 80099b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099b4:	2a39      	cmp	r2, #57	; 0x39
 80099b6:	d106      	bne.n	80099c6 <_dtoa_r+0x6de>
 80099b8:	9a01      	ldr	r2, [sp, #4]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d1f7      	bne.n	80099ae <_dtoa_r+0x6c6>
 80099be:	9901      	ldr	r1, [sp, #4]
 80099c0:	2230      	movs	r2, #48	; 0x30
 80099c2:	3701      	adds	r7, #1
 80099c4:	700a      	strb	r2, [r1, #0]
 80099c6:	781a      	ldrb	r2, [r3, #0]
 80099c8:	3201      	adds	r2, #1
 80099ca:	701a      	strb	r2, [r3, #0]
 80099cc:	e790      	b.n	80098f0 <_dtoa_r+0x608>
 80099ce:	4ba6      	ldr	r3, [pc, #664]	; (8009c68 <_dtoa_r+0x980>)
 80099d0:	2200      	movs	r2, #0
 80099d2:	f7f6 fe29 	bl	8000628 <__aeabi_dmul>
 80099d6:	2200      	movs	r2, #0
 80099d8:	2300      	movs	r3, #0
 80099da:	4606      	mov	r6, r0
 80099dc:	460f      	mov	r7, r1
 80099de:	f7f7 f88b 	bl	8000af8 <__aeabi_dcmpeq>
 80099e2:	2800      	cmp	r0, #0
 80099e4:	d09d      	beq.n	8009922 <_dtoa_r+0x63a>
 80099e6:	e7cf      	b.n	8009988 <_dtoa_r+0x6a0>
 80099e8:	9a08      	ldr	r2, [sp, #32]
 80099ea:	2a00      	cmp	r2, #0
 80099ec:	f000 80d7 	beq.w	8009b9e <_dtoa_r+0x8b6>
 80099f0:	9a06      	ldr	r2, [sp, #24]
 80099f2:	2a01      	cmp	r2, #1
 80099f4:	f300 80ba 	bgt.w	8009b6c <_dtoa_r+0x884>
 80099f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099fa:	2a00      	cmp	r2, #0
 80099fc:	f000 80b2 	beq.w	8009b64 <_dtoa_r+0x87c>
 8009a00:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009a04:	9e07      	ldr	r6, [sp, #28]
 8009a06:	9d04      	ldr	r5, [sp, #16]
 8009a08:	9a04      	ldr	r2, [sp, #16]
 8009a0a:	441a      	add	r2, r3
 8009a0c:	9204      	str	r2, [sp, #16]
 8009a0e:	9a05      	ldr	r2, [sp, #20]
 8009a10:	2101      	movs	r1, #1
 8009a12:	441a      	add	r2, r3
 8009a14:	4620      	mov	r0, r4
 8009a16:	9205      	str	r2, [sp, #20]
 8009a18:	f000 fb58 	bl	800a0cc <__i2b>
 8009a1c:	4607      	mov	r7, r0
 8009a1e:	2d00      	cmp	r5, #0
 8009a20:	dd0c      	ble.n	8009a3c <_dtoa_r+0x754>
 8009a22:	9b05      	ldr	r3, [sp, #20]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	dd09      	ble.n	8009a3c <_dtoa_r+0x754>
 8009a28:	42ab      	cmp	r3, r5
 8009a2a:	9a04      	ldr	r2, [sp, #16]
 8009a2c:	bfa8      	it	ge
 8009a2e:	462b      	movge	r3, r5
 8009a30:	1ad2      	subs	r2, r2, r3
 8009a32:	9204      	str	r2, [sp, #16]
 8009a34:	9a05      	ldr	r2, [sp, #20]
 8009a36:	1aed      	subs	r5, r5, r3
 8009a38:	1ad3      	subs	r3, r2, r3
 8009a3a:	9305      	str	r3, [sp, #20]
 8009a3c:	9b07      	ldr	r3, [sp, #28]
 8009a3e:	b31b      	cbz	r3, 8009a88 <_dtoa_r+0x7a0>
 8009a40:	9b08      	ldr	r3, [sp, #32]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	f000 80af 	beq.w	8009ba6 <_dtoa_r+0x8be>
 8009a48:	2e00      	cmp	r6, #0
 8009a4a:	dd13      	ble.n	8009a74 <_dtoa_r+0x78c>
 8009a4c:	4639      	mov	r1, r7
 8009a4e:	4632      	mov	r2, r6
 8009a50:	4620      	mov	r0, r4
 8009a52:	f000 fbfb 	bl	800a24c <__pow5mult>
 8009a56:	ee18 2a10 	vmov	r2, s16
 8009a5a:	4601      	mov	r1, r0
 8009a5c:	4607      	mov	r7, r0
 8009a5e:	4620      	mov	r0, r4
 8009a60:	f000 fb4a 	bl	800a0f8 <__multiply>
 8009a64:	ee18 1a10 	vmov	r1, s16
 8009a68:	4680      	mov	r8, r0
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	f000 fa76 	bl	8009f5c <_Bfree>
 8009a70:	ee08 8a10 	vmov	s16, r8
 8009a74:	9b07      	ldr	r3, [sp, #28]
 8009a76:	1b9a      	subs	r2, r3, r6
 8009a78:	d006      	beq.n	8009a88 <_dtoa_r+0x7a0>
 8009a7a:	ee18 1a10 	vmov	r1, s16
 8009a7e:	4620      	mov	r0, r4
 8009a80:	f000 fbe4 	bl	800a24c <__pow5mult>
 8009a84:	ee08 0a10 	vmov	s16, r0
 8009a88:	2101      	movs	r1, #1
 8009a8a:	4620      	mov	r0, r4
 8009a8c:	f000 fb1e 	bl	800a0cc <__i2b>
 8009a90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	4606      	mov	r6, r0
 8009a96:	f340 8088 	ble.w	8009baa <_dtoa_r+0x8c2>
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	4601      	mov	r1, r0
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	f000 fbd4 	bl	800a24c <__pow5mult>
 8009aa4:	9b06      	ldr	r3, [sp, #24]
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	4606      	mov	r6, r0
 8009aaa:	f340 8081 	ble.w	8009bb0 <_dtoa_r+0x8c8>
 8009aae:	f04f 0800 	mov.w	r8, #0
 8009ab2:	6933      	ldr	r3, [r6, #16]
 8009ab4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009ab8:	6918      	ldr	r0, [r3, #16]
 8009aba:	f000 fab7 	bl	800a02c <__hi0bits>
 8009abe:	f1c0 0020 	rsb	r0, r0, #32
 8009ac2:	9b05      	ldr	r3, [sp, #20]
 8009ac4:	4418      	add	r0, r3
 8009ac6:	f010 001f 	ands.w	r0, r0, #31
 8009aca:	f000 8092 	beq.w	8009bf2 <_dtoa_r+0x90a>
 8009ace:	f1c0 0320 	rsb	r3, r0, #32
 8009ad2:	2b04      	cmp	r3, #4
 8009ad4:	f340 808a 	ble.w	8009bec <_dtoa_r+0x904>
 8009ad8:	f1c0 001c 	rsb	r0, r0, #28
 8009adc:	9b04      	ldr	r3, [sp, #16]
 8009ade:	4403      	add	r3, r0
 8009ae0:	9304      	str	r3, [sp, #16]
 8009ae2:	9b05      	ldr	r3, [sp, #20]
 8009ae4:	4403      	add	r3, r0
 8009ae6:	4405      	add	r5, r0
 8009ae8:	9305      	str	r3, [sp, #20]
 8009aea:	9b04      	ldr	r3, [sp, #16]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	dd07      	ble.n	8009b00 <_dtoa_r+0x818>
 8009af0:	ee18 1a10 	vmov	r1, s16
 8009af4:	461a      	mov	r2, r3
 8009af6:	4620      	mov	r0, r4
 8009af8:	f000 fc02 	bl	800a300 <__lshift>
 8009afc:	ee08 0a10 	vmov	s16, r0
 8009b00:	9b05      	ldr	r3, [sp, #20]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	dd05      	ble.n	8009b12 <_dtoa_r+0x82a>
 8009b06:	4631      	mov	r1, r6
 8009b08:	461a      	mov	r2, r3
 8009b0a:	4620      	mov	r0, r4
 8009b0c:	f000 fbf8 	bl	800a300 <__lshift>
 8009b10:	4606      	mov	r6, r0
 8009b12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d06e      	beq.n	8009bf6 <_dtoa_r+0x90e>
 8009b18:	ee18 0a10 	vmov	r0, s16
 8009b1c:	4631      	mov	r1, r6
 8009b1e:	f000 fc5f 	bl	800a3e0 <__mcmp>
 8009b22:	2800      	cmp	r0, #0
 8009b24:	da67      	bge.n	8009bf6 <_dtoa_r+0x90e>
 8009b26:	9b00      	ldr	r3, [sp, #0]
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	ee18 1a10 	vmov	r1, s16
 8009b2e:	9300      	str	r3, [sp, #0]
 8009b30:	220a      	movs	r2, #10
 8009b32:	2300      	movs	r3, #0
 8009b34:	4620      	mov	r0, r4
 8009b36:	f000 fa33 	bl	8009fa0 <__multadd>
 8009b3a:	9b08      	ldr	r3, [sp, #32]
 8009b3c:	ee08 0a10 	vmov	s16, r0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	f000 81b1 	beq.w	8009ea8 <_dtoa_r+0xbc0>
 8009b46:	2300      	movs	r3, #0
 8009b48:	4639      	mov	r1, r7
 8009b4a:	220a      	movs	r2, #10
 8009b4c:	4620      	mov	r0, r4
 8009b4e:	f000 fa27 	bl	8009fa0 <__multadd>
 8009b52:	9b02      	ldr	r3, [sp, #8]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	4607      	mov	r7, r0
 8009b58:	f300 808e 	bgt.w	8009c78 <_dtoa_r+0x990>
 8009b5c:	9b06      	ldr	r3, [sp, #24]
 8009b5e:	2b02      	cmp	r3, #2
 8009b60:	dc51      	bgt.n	8009c06 <_dtoa_r+0x91e>
 8009b62:	e089      	b.n	8009c78 <_dtoa_r+0x990>
 8009b64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009b6a:	e74b      	b.n	8009a04 <_dtoa_r+0x71c>
 8009b6c:	9b03      	ldr	r3, [sp, #12]
 8009b6e:	1e5e      	subs	r6, r3, #1
 8009b70:	9b07      	ldr	r3, [sp, #28]
 8009b72:	42b3      	cmp	r3, r6
 8009b74:	bfbf      	itttt	lt
 8009b76:	9b07      	ldrlt	r3, [sp, #28]
 8009b78:	9607      	strlt	r6, [sp, #28]
 8009b7a:	1af2      	sublt	r2, r6, r3
 8009b7c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009b7e:	bfb6      	itet	lt
 8009b80:	189b      	addlt	r3, r3, r2
 8009b82:	1b9e      	subge	r6, r3, r6
 8009b84:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009b86:	9b03      	ldr	r3, [sp, #12]
 8009b88:	bfb8      	it	lt
 8009b8a:	2600      	movlt	r6, #0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	bfb7      	itett	lt
 8009b90:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009b94:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009b98:	1a9d      	sublt	r5, r3, r2
 8009b9a:	2300      	movlt	r3, #0
 8009b9c:	e734      	b.n	8009a08 <_dtoa_r+0x720>
 8009b9e:	9e07      	ldr	r6, [sp, #28]
 8009ba0:	9d04      	ldr	r5, [sp, #16]
 8009ba2:	9f08      	ldr	r7, [sp, #32]
 8009ba4:	e73b      	b.n	8009a1e <_dtoa_r+0x736>
 8009ba6:	9a07      	ldr	r2, [sp, #28]
 8009ba8:	e767      	b.n	8009a7a <_dtoa_r+0x792>
 8009baa:	9b06      	ldr	r3, [sp, #24]
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	dc18      	bgt.n	8009be2 <_dtoa_r+0x8fa>
 8009bb0:	f1ba 0f00 	cmp.w	sl, #0
 8009bb4:	d115      	bne.n	8009be2 <_dtoa_r+0x8fa>
 8009bb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009bba:	b993      	cbnz	r3, 8009be2 <_dtoa_r+0x8fa>
 8009bbc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009bc0:	0d1b      	lsrs	r3, r3, #20
 8009bc2:	051b      	lsls	r3, r3, #20
 8009bc4:	b183      	cbz	r3, 8009be8 <_dtoa_r+0x900>
 8009bc6:	9b04      	ldr	r3, [sp, #16]
 8009bc8:	3301      	adds	r3, #1
 8009bca:	9304      	str	r3, [sp, #16]
 8009bcc:	9b05      	ldr	r3, [sp, #20]
 8009bce:	3301      	adds	r3, #1
 8009bd0:	9305      	str	r3, [sp, #20]
 8009bd2:	f04f 0801 	mov.w	r8, #1
 8009bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	f47f af6a 	bne.w	8009ab2 <_dtoa_r+0x7ca>
 8009bde:	2001      	movs	r0, #1
 8009be0:	e76f      	b.n	8009ac2 <_dtoa_r+0x7da>
 8009be2:	f04f 0800 	mov.w	r8, #0
 8009be6:	e7f6      	b.n	8009bd6 <_dtoa_r+0x8ee>
 8009be8:	4698      	mov	r8, r3
 8009bea:	e7f4      	b.n	8009bd6 <_dtoa_r+0x8ee>
 8009bec:	f43f af7d 	beq.w	8009aea <_dtoa_r+0x802>
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	301c      	adds	r0, #28
 8009bf4:	e772      	b.n	8009adc <_dtoa_r+0x7f4>
 8009bf6:	9b03      	ldr	r3, [sp, #12]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	dc37      	bgt.n	8009c6c <_dtoa_r+0x984>
 8009bfc:	9b06      	ldr	r3, [sp, #24]
 8009bfe:	2b02      	cmp	r3, #2
 8009c00:	dd34      	ble.n	8009c6c <_dtoa_r+0x984>
 8009c02:	9b03      	ldr	r3, [sp, #12]
 8009c04:	9302      	str	r3, [sp, #8]
 8009c06:	9b02      	ldr	r3, [sp, #8]
 8009c08:	b96b      	cbnz	r3, 8009c26 <_dtoa_r+0x93e>
 8009c0a:	4631      	mov	r1, r6
 8009c0c:	2205      	movs	r2, #5
 8009c0e:	4620      	mov	r0, r4
 8009c10:	f000 f9c6 	bl	8009fa0 <__multadd>
 8009c14:	4601      	mov	r1, r0
 8009c16:	4606      	mov	r6, r0
 8009c18:	ee18 0a10 	vmov	r0, s16
 8009c1c:	f000 fbe0 	bl	800a3e0 <__mcmp>
 8009c20:	2800      	cmp	r0, #0
 8009c22:	f73f adbb 	bgt.w	800979c <_dtoa_r+0x4b4>
 8009c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c28:	9d01      	ldr	r5, [sp, #4]
 8009c2a:	43db      	mvns	r3, r3
 8009c2c:	9300      	str	r3, [sp, #0]
 8009c2e:	f04f 0800 	mov.w	r8, #0
 8009c32:	4631      	mov	r1, r6
 8009c34:	4620      	mov	r0, r4
 8009c36:	f000 f991 	bl	8009f5c <_Bfree>
 8009c3a:	2f00      	cmp	r7, #0
 8009c3c:	f43f aea4 	beq.w	8009988 <_dtoa_r+0x6a0>
 8009c40:	f1b8 0f00 	cmp.w	r8, #0
 8009c44:	d005      	beq.n	8009c52 <_dtoa_r+0x96a>
 8009c46:	45b8      	cmp	r8, r7
 8009c48:	d003      	beq.n	8009c52 <_dtoa_r+0x96a>
 8009c4a:	4641      	mov	r1, r8
 8009c4c:	4620      	mov	r0, r4
 8009c4e:	f000 f985 	bl	8009f5c <_Bfree>
 8009c52:	4639      	mov	r1, r7
 8009c54:	4620      	mov	r0, r4
 8009c56:	f000 f981 	bl	8009f5c <_Bfree>
 8009c5a:	e695      	b.n	8009988 <_dtoa_r+0x6a0>
 8009c5c:	2600      	movs	r6, #0
 8009c5e:	4637      	mov	r7, r6
 8009c60:	e7e1      	b.n	8009c26 <_dtoa_r+0x93e>
 8009c62:	9700      	str	r7, [sp, #0]
 8009c64:	4637      	mov	r7, r6
 8009c66:	e599      	b.n	800979c <_dtoa_r+0x4b4>
 8009c68:	40240000 	.word	0x40240000
 8009c6c:	9b08      	ldr	r3, [sp, #32]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	f000 80ca 	beq.w	8009e08 <_dtoa_r+0xb20>
 8009c74:	9b03      	ldr	r3, [sp, #12]
 8009c76:	9302      	str	r3, [sp, #8]
 8009c78:	2d00      	cmp	r5, #0
 8009c7a:	dd05      	ble.n	8009c88 <_dtoa_r+0x9a0>
 8009c7c:	4639      	mov	r1, r7
 8009c7e:	462a      	mov	r2, r5
 8009c80:	4620      	mov	r0, r4
 8009c82:	f000 fb3d 	bl	800a300 <__lshift>
 8009c86:	4607      	mov	r7, r0
 8009c88:	f1b8 0f00 	cmp.w	r8, #0
 8009c8c:	d05b      	beq.n	8009d46 <_dtoa_r+0xa5e>
 8009c8e:	6879      	ldr	r1, [r7, #4]
 8009c90:	4620      	mov	r0, r4
 8009c92:	f000 f923 	bl	8009edc <_Balloc>
 8009c96:	4605      	mov	r5, r0
 8009c98:	b928      	cbnz	r0, 8009ca6 <_dtoa_r+0x9be>
 8009c9a:	4b87      	ldr	r3, [pc, #540]	; (8009eb8 <_dtoa_r+0xbd0>)
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009ca2:	f7ff bb3b 	b.w	800931c <_dtoa_r+0x34>
 8009ca6:	693a      	ldr	r2, [r7, #16]
 8009ca8:	3202      	adds	r2, #2
 8009caa:	0092      	lsls	r2, r2, #2
 8009cac:	f107 010c 	add.w	r1, r7, #12
 8009cb0:	300c      	adds	r0, #12
 8009cb2:	f7fe fded 	bl	8008890 <memcpy>
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	4629      	mov	r1, r5
 8009cba:	4620      	mov	r0, r4
 8009cbc:	f000 fb20 	bl	800a300 <__lshift>
 8009cc0:	9b01      	ldr	r3, [sp, #4]
 8009cc2:	f103 0901 	add.w	r9, r3, #1
 8009cc6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009cca:	4413      	add	r3, r2
 8009ccc:	9305      	str	r3, [sp, #20]
 8009cce:	f00a 0301 	and.w	r3, sl, #1
 8009cd2:	46b8      	mov	r8, r7
 8009cd4:	9304      	str	r3, [sp, #16]
 8009cd6:	4607      	mov	r7, r0
 8009cd8:	4631      	mov	r1, r6
 8009cda:	ee18 0a10 	vmov	r0, s16
 8009cde:	f7ff fa77 	bl	80091d0 <quorem>
 8009ce2:	4641      	mov	r1, r8
 8009ce4:	9002      	str	r0, [sp, #8]
 8009ce6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009cea:	ee18 0a10 	vmov	r0, s16
 8009cee:	f000 fb77 	bl	800a3e0 <__mcmp>
 8009cf2:	463a      	mov	r2, r7
 8009cf4:	9003      	str	r0, [sp, #12]
 8009cf6:	4631      	mov	r1, r6
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	f000 fb8d 	bl	800a418 <__mdiff>
 8009cfe:	68c2      	ldr	r2, [r0, #12]
 8009d00:	f109 3bff 	add.w	fp, r9, #4294967295
 8009d04:	4605      	mov	r5, r0
 8009d06:	bb02      	cbnz	r2, 8009d4a <_dtoa_r+0xa62>
 8009d08:	4601      	mov	r1, r0
 8009d0a:	ee18 0a10 	vmov	r0, s16
 8009d0e:	f000 fb67 	bl	800a3e0 <__mcmp>
 8009d12:	4602      	mov	r2, r0
 8009d14:	4629      	mov	r1, r5
 8009d16:	4620      	mov	r0, r4
 8009d18:	9207      	str	r2, [sp, #28]
 8009d1a:	f000 f91f 	bl	8009f5c <_Bfree>
 8009d1e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009d22:	ea43 0102 	orr.w	r1, r3, r2
 8009d26:	9b04      	ldr	r3, [sp, #16]
 8009d28:	430b      	orrs	r3, r1
 8009d2a:	464d      	mov	r5, r9
 8009d2c:	d10f      	bne.n	8009d4e <_dtoa_r+0xa66>
 8009d2e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009d32:	d02a      	beq.n	8009d8a <_dtoa_r+0xaa2>
 8009d34:	9b03      	ldr	r3, [sp, #12]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	dd02      	ble.n	8009d40 <_dtoa_r+0xa58>
 8009d3a:	9b02      	ldr	r3, [sp, #8]
 8009d3c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009d40:	f88b a000 	strb.w	sl, [fp]
 8009d44:	e775      	b.n	8009c32 <_dtoa_r+0x94a>
 8009d46:	4638      	mov	r0, r7
 8009d48:	e7ba      	b.n	8009cc0 <_dtoa_r+0x9d8>
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	e7e2      	b.n	8009d14 <_dtoa_r+0xa2c>
 8009d4e:	9b03      	ldr	r3, [sp, #12]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	db04      	blt.n	8009d5e <_dtoa_r+0xa76>
 8009d54:	9906      	ldr	r1, [sp, #24]
 8009d56:	430b      	orrs	r3, r1
 8009d58:	9904      	ldr	r1, [sp, #16]
 8009d5a:	430b      	orrs	r3, r1
 8009d5c:	d122      	bne.n	8009da4 <_dtoa_r+0xabc>
 8009d5e:	2a00      	cmp	r2, #0
 8009d60:	ddee      	ble.n	8009d40 <_dtoa_r+0xa58>
 8009d62:	ee18 1a10 	vmov	r1, s16
 8009d66:	2201      	movs	r2, #1
 8009d68:	4620      	mov	r0, r4
 8009d6a:	f000 fac9 	bl	800a300 <__lshift>
 8009d6e:	4631      	mov	r1, r6
 8009d70:	ee08 0a10 	vmov	s16, r0
 8009d74:	f000 fb34 	bl	800a3e0 <__mcmp>
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	dc03      	bgt.n	8009d84 <_dtoa_r+0xa9c>
 8009d7c:	d1e0      	bne.n	8009d40 <_dtoa_r+0xa58>
 8009d7e:	f01a 0f01 	tst.w	sl, #1
 8009d82:	d0dd      	beq.n	8009d40 <_dtoa_r+0xa58>
 8009d84:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009d88:	d1d7      	bne.n	8009d3a <_dtoa_r+0xa52>
 8009d8a:	2339      	movs	r3, #57	; 0x39
 8009d8c:	f88b 3000 	strb.w	r3, [fp]
 8009d90:	462b      	mov	r3, r5
 8009d92:	461d      	mov	r5, r3
 8009d94:	3b01      	subs	r3, #1
 8009d96:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009d9a:	2a39      	cmp	r2, #57	; 0x39
 8009d9c:	d071      	beq.n	8009e82 <_dtoa_r+0xb9a>
 8009d9e:	3201      	adds	r2, #1
 8009da0:	701a      	strb	r2, [r3, #0]
 8009da2:	e746      	b.n	8009c32 <_dtoa_r+0x94a>
 8009da4:	2a00      	cmp	r2, #0
 8009da6:	dd07      	ble.n	8009db8 <_dtoa_r+0xad0>
 8009da8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009dac:	d0ed      	beq.n	8009d8a <_dtoa_r+0xaa2>
 8009dae:	f10a 0301 	add.w	r3, sl, #1
 8009db2:	f88b 3000 	strb.w	r3, [fp]
 8009db6:	e73c      	b.n	8009c32 <_dtoa_r+0x94a>
 8009db8:	9b05      	ldr	r3, [sp, #20]
 8009dba:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009dbe:	4599      	cmp	r9, r3
 8009dc0:	d047      	beq.n	8009e52 <_dtoa_r+0xb6a>
 8009dc2:	ee18 1a10 	vmov	r1, s16
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	220a      	movs	r2, #10
 8009dca:	4620      	mov	r0, r4
 8009dcc:	f000 f8e8 	bl	8009fa0 <__multadd>
 8009dd0:	45b8      	cmp	r8, r7
 8009dd2:	ee08 0a10 	vmov	s16, r0
 8009dd6:	f04f 0300 	mov.w	r3, #0
 8009dda:	f04f 020a 	mov.w	r2, #10
 8009dde:	4641      	mov	r1, r8
 8009de0:	4620      	mov	r0, r4
 8009de2:	d106      	bne.n	8009df2 <_dtoa_r+0xb0a>
 8009de4:	f000 f8dc 	bl	8009fa0 <__multadd>
 8009de8:	4680      	mov	r8, r0
 8009dea:	4607      	mov	r7, r0
 8009dec:	f109 0901 	add.w	r9, r9, #1
 8009df0:	e772      	b.n	8009cd8 <_dtoa_r+0x9f0>
 8009df2:	f000 f8d5 	bl	8009fa0 <__multadd>
 8009df6:	4639      	mov	r1, r7
 8009df8:	4680      	mov	r8, r0
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	220a      	movs	r2, #10
 8009dfe:	4620      	mov	r0, r4
 8009e00:	f000 f8ce 	bl	8009fa0 <__multadd>
 8009e04:	4607      	mov	r7, r0
 8009e06:	e7f1      	b.n	8009dec <_dtoa_r+0xb04>
 8009e08:	9b03      	ldr	r3, [sp, #12]
 8009e0a:	9302      	str	r3, [sp, #8]
 8009e0c:	9d01      	ldr	r5, [sp, #4]
 8009e0e:	ee18 0a10 	vmov	r0, s16
 8009e12:	4631      	mov	r1, r6
 8009e14:	f7ff f9dc 	bl	80091d0 <quorem>
 8009e18:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009e1c:	9b01      	ldr	r3, [sp, #4]
 8009e1e:	f805 ab01 	strb.w	sl, [r5], #1
 8009e22:	1aea      	subs	r2, r5, r3
 8009e24:	9b02      	ldr	r3, [sp, #8]
 8009e26:	4293      	cmp	r3, r2
 8009e28:	dd09      	ble.n	8009e3e <_dtoa_r+0xb56>
 8009e2a:	ee18 1a10 	vmov	r1, s16
 8009e2e:	2300      	movs	r3, #0
 8009e30:	220a      	movs	r2, #10
 8009e32:	4620      	mov	r0, r4
 8009e34:	f000 f8b4 	bl	8009fa0 <__multadd>
 8009e38:	ee08 0a10 	vmov	s16, r0
 8009e3c:	e7e7      	b.n	8009e0e <_dtoa_r+0xb26>
 8009e3e:	9b02      	ldr	r3, [sp, #8]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	bfc8      	it	gt
 8009e44:	461d      	movgt	r5, r3
 8009e46:	9b01      	ldr	r3, [sp, #4]
 8009e48:	bfd8      	it	le
 8009e4a:	2501      	movle	r5, #1
 8009e4c:	441d      	add	r5, r3
 8009e4e:	f04f 0800 	mov.w	r8, #0
 8009e52:	ee18 1a10 	vmov	r1, s16
 8009e56:	2201      	movs	r2, #1
 8009e58:	4620      	mov	r0, r4
 8009e5a:	f000 fa51 	bl	800a300 <__lshift>
 8009e5e:	4631      	mov	r1, r6
 8009e60:	ee08 0a10 	vmov	s16, r0
 8009e64:	f000 fabc 	bl	800a3e0 <__mcmp>
 8009e68:	2800      	cmp	r0, #0
 8009e6a:	dc91      	bgt.n	8009d90 <_dtoa_r+0xaa8>
 8009e6c:	d102      	bne.n	8009e74 <_dtoa_r+0xb8c>
 8009e6e:	f01a 0f01 	tst.w	sl, #1
 8009e72:	d18d      	bne.n	8009d90 <_dtoa_r+0xaa8>
 8009e74:	462b      	mov	r3, r5
 8009e76:	461d      	mov	r5, r3
 8009e78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e7c:	2a30      	cmp	r2, #48	; 0x30
 8009e7e:	d0fa      	beq.n	8009e76 <_dtoa_r+0xb8e>
 8009e80:	e6d7      	b.n	8009c32 <_dtoa_r+0x94a>
 8009e82:	9a01      	ldr	r2, [sp, #4]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d184      	bne.n	8009d92 <_dtoa_r+0xaaa>
 8009e88:	9b00      	ldr	r3, [sp, #0]
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	9300      	str	r3, [sp, #0]
 8009e8e:	2331      	movs	r3, #49	; 0x31
 8009e90:	7013      	strb	r3, [r2, #0]
 8009e92:	e6ce      	b.n	8009c32 <_dtoa_r+0x94a>
 8009e94:	4b09      	ldr	r3, [pc, #36]	; (8009ebc <_dtoa_r+0xbd4>)
 8009e96:	f7ff ba95 	b.w	80093c4 <_dtoa_r+0xdc>
 8009e9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f47f aa6e 	bne.w	800937e <_dtoa_r+0x96>
 8009ea2:	4b07      	ldr	r3, [pc, #28]	; (8009ec0 <_dtoa_r+0xbd8>)
 8009ea4:	f7ff ba8e 	b.w	80093c4 <_dtoa_r+0xdc>
 8009ea8:	9b02      	ldr	r3, [sp, #8]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	dcae      	bgt.n	8009e0c <_dtoa_r+0xb24>
 8009eae:	9b06      	ldr	r3, [sp, #24]
 8009eb0:	2b02      	cmp	r3, #2
 8009eb2:	f73f aea8 	bgt.w	8009c06 <_dtoa_r+0x91e>
 8009eb6:	e7a9      	b.n	8009e0c <_dtoa_r+0xb24>
 8009eb8:	0800ba3f 	.word	0x0800ba3f
 8009ebc:	0800b99c 	.word	0x0800b99c
 8009ec0:	0800b9c0 	.word	0x0800b9c0

08009ec4 <_localeconv_r>:
 8009ec4:	4800      	ldr	r0, [pc, #0]	; (8009ec8 <_localeconv_r+0x4>)
 8009ec6:	4770      	bx	lr
 8009ec8:	20000164 	.word	0x20000164

08009ecc <malloc>:
 8009ecc:	4b02      	ldr	r3, [pc, #8]	; (8009ed8 <malloc+0xc>)
 8009ece:	4601      	mov	r1, r0
 8009ed0:	6818      	ldr	r0, [r3, #0]
 8009ed2:	f000 bc09 	b.w	800a6e8 <_malloc_r>
 8009ed6:	bf00      	nop
 8009ed8:	20000010 	.word	0x20000010

08009edc <_Balloc>:
 8009edc:	b570      	push	{r4, r5, r6, lr}
 8009ede:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ee0:	4604      	mov	r4, r0
 8009ee2:	460d      	mov	r5, r1
 8009ee4:	b976      	cbnz	r6, 8009f04 <_Balloc+0x28>
 8009ee6:	2010      	movs	r0, #16
 8009ee8:	f7ff fff0 	bl	8009ecc <malloc>
 8009eec:	4602      	mov	r2, r0
 8009eee:	6260      	str	r0, [r4, #36]	; 0x24
 8009ef0:	b920      	cbnz	r0, 8009efc <_Balloc+0x20>
 8009ef2:	4b18      	ldr	r3, [pc, #96]	; (8009f54 <_Balloc+0x78>)
 8009ef4:	4818      	ldr	r0, [pc, #96]	; (8009f58 <_Balloc+0x7c>)
 8009ef6:	2166      	movs	r1, #102	; 0x66
 8009ef8:	f000 fdd6 	bl	800aaa8 <__assert_func>
 8009efc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f00:	6006      	str	r6, [r0, #0]
 8009f02:	60c6      	str	r6, [r0, #12]
 8009f04:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009f06:	68f3      	ldr	r3, [r6, #12]
 8009f08:	b183      	cbz	r3, 8009f2c <_Balloc+0x50>
 8009f0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f0c:	68db      	ldr	r3, [r3, #12]
 8009f0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009f12:	b9b8      	cbnz	r0, 8009f44 <_Balloc+0x68>
 8009f14:	2101      	movs	r1, #1
 8009f16:	fa01 f605 	lsl.w	r6, r1, r5
 8009f1a:	1d72      	adds	r2, r6, #5
 8009f1c:	0092      	lsls	r2, r2, #2
 8009f1e:	4620      	mov	r0, r4
 8009f20:	f000 fb60 	bl	800a5e4 <_calloc_r>
 8009f24:	b160      	cbz	r0, 8009f40 <_Balloc+0x64>
 8009f26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009f2a:	e00e      	b.n	8009f4a <_Balloc+0x6e>
 8009f2c:	2221      	movs	r2, #33	; 0x21
 8009f2e:	2104      	movs	r1, #4
 8009f30:	4620      	mov	r0, r4
 8009f32:	f000 fb57 	bl	800a5e4 <_calloc_r>
 8009f36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f38:	60f0      	str	r0, [r6, #12]
 8009f3a:	68db      	ldr	r3, [r3, #12]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d1e4      	bne.n	8009f0a <_Balloc+0x2e>
 8009f40:	2000      	movs	r0, #0
 8009f42:	bd70      	pop	{r4, r5, r6, pc}
 8009f44:	6802      	ldr	r2, [r0, #0]
 8009f46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f50:	e7f7      	b.n	8009f42 <_Balloc+0x66>
 8009f52:	bf00      	nop
 8009f54:	0800b9cd 	.word	0x0800b9cd
 8009f58:	0800ba50 	.word	0x0800ba50

08009f5c <_Bfree>:
 8009f5c:	b570      	push	{r4, r5, r6, lr}
 8009f5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009f60:	4605      	mov	r5, r0
 8009f62:	460c      	mov	r4, r1
 8009f64:	b976      	cbnz	r6, 8009f84 <_Bfree+0x28>
 8009f66:	2010      	movs	r0, #16
 8009f68:	f7ff ffb0 	bl	8009ecc <malloc>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	6268      	str	r0, [r5, #36]	; 0x24
 8009f70:	b920      	cbnz	r0, 8009f7c <_Bfree+0x20>
 8009f72:	4b09      	ldr	r3, [pc, #36]	; (8009f98 <_Bfree+0x3c>)
 8009f74:	4809      	ldr	r0, [pc, #36]	; (8009f9c <_Bfree+0x40>)
 8009f76:	218a      	movs	r1, #138	; 0x8a
 8009f78:	f000 fd96 	bl	800aaa8 <__assert_func>
 8009f7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f80:	6006      	str	r6, [r0, #0]
 8009f82:	60c6      	str	r6, [r0, #12]
 8009f84:	b13c      	cbz	r4, 8009f96 <_Bfree+0x3a>
 8009f86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009f88:	6862      	ldr	r2, [r4, #4]
 8009f8a:	68db      	ldr	r3, [r3, #12]
 8009f8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f90:	6021      	str	r1, [r4, #0]
 8009f92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f96:	bd70      	pop	{r4, r5, r6, pc}
 8009f98:	0800b9cd 	.word	0x0800b9cd
 8009f9c:	0800ba50 	.word	0x0800ba50

08009fa0 <__multadd>:
 8009fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fa4:	690d      	ldr	r5, [r1, #16]
 8009fa6:	4607      	mov	r7, r0
 8009fa8:	460c      	mov	r4, r1
 8009faa:	461e      	mov	r6, r3
 8009fac:	f101 0c14 	add.w	ip, r1, #20
 8009fb0:	2000      	movs	r0, #0
 8009fb2:	f8dc 3000 	ldr.w	r3, [ip]
 8009fb6:	b299      	uxth	r1, r3
 8009fb8:	fb02 6101 	mla	r1, r2, r1, r6
 8009fbc:	0c1e      	lsrs	r6, r3, #16
 8009fbe:	0c0b      	lsrs	r3, r1, #16
 8009fc0:	fb02 3306 	mla	r3, r2, r6, r3
 8009fc4:	b289      	uxth	r1, r1
 8009fc6:	3001      	adds	r0, #1
 8009fc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009fcc:	4285      	cmp	r5, r0
 8009fce:	f84c 1b04 	str.w	r1, [ip], #4
 8009fd2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009fd6:	dcec      	bgt.n	8009fb2 <__multadd+0x12>
 8009fd8:	b30e      	cbz	r6, 800a01e <__multadd+0x7e>
 8009fda:	68a3      	ldr	r3, [r4, #8]
 8009fdc:	42ab      	cmp	r3, r5
 8009fde:	dc19      	bgt.n	800a014 <__multadd+0x74>
 8009fe0:	6861      	ldr	r1, [r4, #4]
 8009fe2:	4638      	mov	r0, r7
 8009fe4:	3101      	adds	r1, #1
 8009fe6:	f7ff ff79 	bl	8009edc <_Balloc>
 8009fea:	4680      	mov	r8, r0
 8009fec:	b928      	cbnz	r0, 8009ffa <__multadd+0x5a>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	4b0c      	ldr	r3, [pc, #48]	; (800a024 <__multadd+0x84>)
 8009ff2:	480d      	ldr	r0, [pc, #52]	; (800a028 <__multadd+0x88>)
 8009ff4:	21b5      	movs	r1, #181	; 0xb5
 8009ff6:	f000 fd57 	bl	800aaa8 <__assert_func>
 8009ffa:	6922      	ldr	r2, [r4, #16]
 8009ffc:	3202      	adds	r2, #2
 8009ffe:	f104 010c 	add.w	r1, r4, #12
 800a002:	0092      	lsls	r2, r2, #2
 800a004:	300c      	adds	r0, #12
 800a006:	f7fe fc43 	bl	8008890 <memcpy>
 800a00a:	4621      	mov	r1, r4
 800a00c:	4638      	mov	r0, r7
 800a00e:	f7ff ffa5 	bl	8009f5c <_Bfree>
 800a012:	4644      	mov	r4, r8
 800a014:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a018:	3501      	adds	r5, #1
 800a01a:	615e      	str	r6, [r3, #20]
 800a01c:	6125      	str	r5, [r4, #16]
 800a01e:	4620      	mov	r0, r4
 800a020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a024:	0800ba3f 	.word	0x0800ba3f
 800a028:	0800ba50 	.word	0x0800ba50

0800a02c <__hi0bits>:
 800a02c:	0c03      	lsrs	r3, r0, #16
 800a02e:	041b      	lsls	r3, r3, #16
 800a030:	b9d3      	cbnz	r3, 800a068 <__hi0bits+0x3c>
 800a032:	0400      	lsls	r0, r0, #16
 800a034:	2310      	movs	r3, #16
 800a036:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a03a:	bf04      	itt	eq
 800a03c:	0200      	lsleq	r0, r0, #8
 800a03e:	3308      	addeq	r3, #8
 800a040:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a044:	bf04      	itt	eq
 800a046:	0100      	lsleq	r0, r0, #4
 800a048:	3304      	addeq	r3, #4
 800a04a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a04e:	bf04      	itt	eq
 800a050:	0080      	lsleq	r0, r0, #2
 800a052:	3302      	addeq	r3, #2
 800a054:	2800      	cmp	r0, #0
 800a056:	db05      	blt.n	800a064 <__hi0bits+0x38>
 800a058:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a05c:	f103 0301 	add.w	r3, r3, #1
 800a060:	bf08      	it	eq
 800a062:	2320      	moveq	r3, #32
 800a064:	4618      	mov	r0, r3
 800a066:	4770      	bx	lr
 800a068:	2300      	movs	r3, #0
 800a06a:	e7e4      	b.n	800a036 <__hi0bits+0xa>

0800a06c <__lo0bits>:
 800a06c:	6803      	ldr	r3, [r0, #0]
 800a06e:	f013 0207 	ands.w	r2, r3, #7
 800a072:	4601      	mov	r1, r0
 800a074:	d00b      	beq.n	800a08e <__lo0bits+0x22>
 800a076:	07da      	lsls	r2, r3, #31
 800a078:	d423      	bmi.n	800a0c2 <__lo0bits+0x56>
 800a07a:	0798      	lsls	r0, r3, #30
 800a07c:	bf49      	itett	mi
 800a07e:	085b      	lsrmi	r3, r3, #1
 800a080:	089b      	lsrpl	r3, r3, #2
 800a082:	2001      	movmi	r0, #1
 800a084:	600b      	strmi	r3, [r1, #0]
 800a086:	bf5c      	itt	pl
 800a088:	600b      	strpl	r3, [r1, #0]
 800a08a:	2002      	movpl	r0, #2
 800a08c:	4770      	bx	lr
 800a08e:	b298      	uxth	r0, r3
 800a090:	b9a8      	cbnz	r0, 800a0be <__lo0bits+0x52>
 800a092:	0c1b      	lsrs	r3, r3, #16
 800a094:	2010      	movs	r0, #16
 800a096:	b2da      	uxtb	r2, r3
 800a098:	b90a      	cbnz	r2, 800a09e <__lo0bits+0x32>
 800a09a:	3008      	adds	r0, #8
 800a09c:	0a1b      	lsrs	r3, r3, #8
 800a09e:	071a      	lsls	r2, r3, #28
 800a0a0:	bf04      	itt	eq
 800a0a2:	091b      	lsreq	r3, r3, #4
 800a0a4:	3004      	addeq	r0, #4
 800a0a6:	079a      	lsls	r2, r3, #30
 800a0a8:	bf04      	itt	eq
 800a0aa:	089b      	lsreq	r3, r3, #2
 800a0ac:	3002      	addeq	r0, #2
 800a0ae:	07da      	lsls	r2, r3, #31
 800a0b0:	d403      	bmi.n	800a0ba <__lo0bits+0x4e>
 800a0b2:	085b      	lsrs	r3, r3, #1
 800a0b4:	f100 0001 	add.w	r0, r0, #1
 800a0b8:	d005      	beq.n	800a0c6 <__lo0bits+0x5a>
 800a0ba:	600b      	str	r3, [r1, #0]
 800a0bc:	4770      	bx	lr
 800a0be:	4610      	mov	r0, r2
 800a0c0:	e7e9      	b.n	800a096 <__lo0bits+0x2a>
 800a0c2:	2000      	movs	r0, #0
 800a0c4:	4770      	bx	lr
 800a0c6:	2020      	movs	r0, #32
 800a0c8:	4770      	bx	lr
	...

0800a0cc <__i2b>:
 800a0cc:	b510      	push	{r4, lr}
 800a0ce:	460c      	mov	r4, r1
 800a0d0:	2101      	movs	r1, #1
 800a0d2:	f7ff ff03 	bl	8009edc <_Balloc>
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	b928      	cbnz	r0, 800a0e6 <__i2b+0x1a>
 800a0da:	4b05      	ldr	r3, [pc, #20]	; (800a0f0 <__i2b+0x24>)
 800a0dc:	4805      	ldr	r0, [pc, #20]	; (800a0f4 <__i2b+0x28>)
 800a0de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a0e2:	f000 fce1 	bl	800aaa8 <__assert_func>
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	6144      	str	r4, [r0, #20]
 800a0ea:	6103      	str	r3, [r0, #16]
 800a0ec:	bd10      	pop	{r4, pc}
 800a0ee:	bf00      	nop
 800a0f0:	0800ba3f 	.word	0x0800ba3f
 800a0f4:	0800ba50 	.word	0x0800ba50

0800a0f8 <__multiply>:
 800a0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0fc:	4691      	mov	r9, r2
 800a0fe:	690a      	ldr	r2, [r1, #16]
 800a100:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a104:	429a      	cmp	r2, r3
 800a106:	bfb8      	it	lt
 800a108:	460b      	movlt	r3, r1
 800a10a:	460c      	mov	r4, r1
 800a10c:	bfbc      	itt	lt
 800a10e:	464c      	movlt	r4, r9
 800a110:	4699      	movlt	r9, r3
 800a112:	6927      	ldr	r7, [r4, #16]
 800a114:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a118:	68a3      	ldr	r3, [r4, #8]
 800a11a:	6861      	ldr	r1, [r4, #4]
 800a11c:	eb07 060a 	add.w	r6, r7, sl
 800a120:	42b3      	cmp	r3, r6
 800a122:	b085      	sub	sp, #20
 800a124:	bfb8      	it	lt
 800a126:	3101      	addlt	r1, #1
 800a128:	f7ff fed8 	bl	8009edc <_Balloc>
 800a12c:	b930      	cbnz	r0, 800a13c <__multiply+0x44>
 800a12e:	4602      	mov	r2, r0
 800a130:	4b44      	ldr	r3, [pc, #272]	; (800a244 <__multiply+0x14c>)
 800a132:	4845      	ldr	r0, [pc, #276]	; (800a248 <__multiply+0x150>)
 800a134:	f240 115d 	movw	r1, #349	; 0x15d
 800a138:	f000 fcb6 	bl	800aaa8 <__assert_func>
 800a13c:	f100 0514 	add.w	r5, r0, #20
 800a140:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a144:	462b      	mov	r3, r5
 800a146:	2200      	movs	r2, #0
 800a148:	4543      	cmp	r3, r8
 800a14a:	d321      	bcc.n	800a190 <__multiply+0x98>
 800a14c:	f104 0314 	add.w	r3, r4, #20
 800a150:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a154:	f109 0314 	add.w	r3, r9, #20
 800a158:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a15c:	9202      	str	r2, [sp, #8]
 800a15e:	1b3a      	subs	r2, r7, r4
 800a160:	3a15      	subs	r2, #21
 800a162:	f022 0203 	bic.w	r2, r2, #3
 800a166:	3204      	adds	r2, #4
 800a168:	f104 0115 	add.w	r1, r4, #21
 800a16c:	428f      	cmp	r7, r1
 800a16e:	bf38      	it	cc
 800a170:	2204      	movcc	r2, #4
 800a172:	9201      	str	r2, [sp, #4]
 800a174:	9a02      	ldr	r2, [sp, #8]
 800a176:	9303      	str	r3, [sp, #12]
 800a178:	429a      	cmp	r2, r3
 800a17a:	d80c      	bhi.n	800a196 <__multiply+0x9e>
 800a17c:	2e00      	cmp	r6, #0
 800a17e:	dd03      	ble.n	800a188 <__multiply+0x90>
 800a180:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a184:	2b00      	cmp	r3, #0
 800a186:	d05a      	beq.n	800a23e <__multiply+0x146>
 800a188:	6106      	str	r6, [r0, #16]
 800a18a:	b005      	add	sp, #20
 800a18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a190:	f843 2b04 	str.w	r2, [r3], #4
 800a194:	e7d8      	b.n	800a148 <__multiply+0x50>
 800a196:	f8b3 a000 	ldrh.w	sl, [r3]
 800a19a:	f1ba 0f00 	cmp.w	sl, #0
 800a19e:	d024      	beq.n	800a1ea <__multiply+0xf2>
 800a1a0:	f104 0e14 	add.w	lr, r4, #20
 800a1a4:	46a9      	mov	r9, r5
 800a1a6:	f04f 0c00 	mov.w	ip, #0
 800a1aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a1ae:	f8d9 1000 	ldr.w	r1, [r9]
 800a1b2:	fa1f fb82 	uxth.w	fp, r2
 800a1b6:	b289      	uxth	r1, r1
 800a1b8:	fb0a 110b 	mla	r1, sl, fp, r1
 800a1bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a1c0:	f8d9 2000 	ldr.w	r2, [r9]
 800a1c4:	4461      	add	r1, ip
 800a1c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a1ca:	fb0a c20b 	mla	r2, sl, fp, ip
 800a1ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a1d2:	b289      	uxth	r1, r1
 800a1d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a1d8:	4577      	cmp	r7, lr
 800a1da:	f849 1b04 	str.w	r1, [r9], #4
 800a1de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a1e2:	d8e2      	bhi.n	800a1aa <__multiply+0xb2>
 800a1e4:	9a01      	ldr	r2, [sp, #4]
 800a1e6:	f845 c002 	str.w	ip, [r5, r2]
 800a1ea:	9a03      	ldr	r2, [sp, #12]
 800a1ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a1f0:	3304      	adds	r3, #4
 800a1f2:	f1b9 0f00 	cmp.w	r9, #0
 800a1f6:	d020      	beq.n	800a23a <__multiply+0x142>
 800a1f8:	6829      	ldr	r1, [r5, #0]
 800a1fa:	f104 0c14 	add.w	ip, r4, #20
 800a1fe:	46ae      	mov	lr, r5
 800a200:	f04f 0a00 	mov.w	sl, #0
 800a204:	f8bc b000 	ldrh.w	fp, [ip]
 800a208:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a20c:	fb09 220b 	mla	r2, r9, fp, r2
 800a210:	4492      	add	sl, r2
 800a212:	b289      	uxth	r1, r1
 800a214:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a218:	f84e 1b04 	str.w	r1, [lr], #4
 800a21c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a220:	f8be 1000 	ldrh.w	r1, [lr]
 800a224:	0c12      	lsrs	r2, r2, #16
 800a226:	fb09 1102 	mla	r1, r9, r2, r1
 800a22a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a22e:	4567      	cmp	r7, ip
 800a230:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a234:	d8e6      	bhi.n	800a204 <__multiply+0x10c>
 800a236:	9a01      	ldr	r2, [sp, #4]
 800a238:	50a9      	str	r1, [r5, r2]
 800a23a:	3504      	adds	r5, #4
 800a23c:	e79a      	b.n	800a174 <__multiply+0x7c>
 800a23e:	3e01      	subs	r6, #1
 800a240:	e79c      	b.n	800a17c <__multiply+0x84>
 800a242:	bf00      	nop
 800a244:	0800ba3f 	.word	0x0800ba3f
 800a248:	0800ba50 	.word	0x0800ba50

0800a24c <__pow5mult>:
 800a24c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a250:	4615      	mov	r5, r2
 800a252:	f012 0203 	ands.w	r2, r2, #3
 800a256:	4606      	mov	r6, r0
 800a258:	460f      	mov	r7, r1
 800a25a:	d007      	beq.n	800a26c <__pow5mult+0x20>
 800a25c:	4c25      	ldr	r4, [pc, #148]	; (800a2f4 <__pow5mult+0xa8>)
 800a25e:	3a01      	subs	r2, #1
 800a260:	2300      	movs	r3, #0
 800a262:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a266:	f7ff fe9b 	bl	8009fa0 <__multadd>
 800a26a:	4607      	mov	r7, r0
 800a26c:	10ad      	asrs	r5, r5, #2
 800a26e:	d03d      	beq.n	800a2ec <__pow5mult+0xa0>
 800a270:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a272:	b97c      	cbnz	r4, 800a294 <__pow5mult+0x48>
 800a274:	2010      	movs	r0, #16
 800a276:	f7ff fe29 	bl	8009ecc <malloc>
 800a27a:	4602      	mov	r2, r0
 800a27c:	6270      	str	r0, [r6, #36]	; 0x24
 800a27e:	b928      	cbnz	r0, 800a28c <__pow5mult+0x40>
 800a280:	4b1d      	ldr	r3, [pc, #116]	; (800a2f8 <__pow5mult+0xac>)
 800a282:	481e      	ldr	r0, [pc, #120]	; (800a2fc <__pow5mult+0xb0>)
 800a284:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a288:	f000 fc0e 	bl	800aaa8 <__assert_func>
 800a28c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a290:	6004      	str	r4, [r0, #0]
 800a292:	60c4      	str	r4, [r0, #12]
 800a294:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a298:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a29c:	b94c      	cbnz	r4, 800a2b2 <__pow5mult+0x66>
 800a29e:	f240 2171 	movw	r1, #625	; 0x271
 800a2a2:	4630      	mov	r0, r6
 800a2a4:	f7ff ff12 	bl	800a0cc <__i2b>
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800a2ae:	4604      	mov	r4, r0
 800a2b0:	6003      	str	r3, [r0, #0]
 800a2b2:	f04f 0900 	mov.w	r9, #0
 800a2b6:	07eb      	lsls	r3, r5, #31
 800a2b8:	d50a      	bpl.n	800a2d0 <__pow5mult+0x84>
 800a2ba:	4639      	mov	r1, r7
 800a2bc:	4622      	mov	r2, r4
 800a2be:	4630      	mov	r0, r6
 800a2c0:	f7ff ff1a 	bl	800a0f8 <__multiply>
 800a2c4:	4639      	mov	r1, r7
 800a2c6:	4680      	mov	r8, r0
 800a2c8:	4630      	mov	r0, r6
 800a2ca:	f7ff fe47 	bl	8009f5c <_Bfree>
 800a2ce:	4647      	mov	r7, r8
 800a2d0:	106d      	asrs	r5, r5, #1
 800a2d2:	d00b      	beq.n	800a2ec <__pow5mult+0xa0>
 800a2d4:	6820      	ldr	r0, [r4, #0]
 800a2d6:	b938      	cbnz	r0, 800a2e8 <__pow5mult+0x9c>
 800a2d8:	4622      	mov	r2, r4
 800a2da:	4621      	mov	r1, r4
 800a2dc:	4630      	mov	r0, r6
 800a2de:	f7ff ff0b 	bl	800a0f8 <__multiply>
 800a2e2:	6020      	str	r0, [r4, #0]
 800a2e4:	f8c0 9000 	str.w	r9, [r0]
 800a2e8:	4604      	mov	r4, r0
 800a2ea:	e7e4      	b.n	800a2b6 <__pow5mult+0x6a>
 800a2ec:	4638      	mov	r0, r7
 800a2ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2f2:	bf00      	nop
 800a2f4:	0800bba0 	.word	0x0800bba0
 800a2f8:	0800b9cd 	.word	0x0800b9cd
 800a2fc:	0800ba50 	.word	0x0800ba50

0800a300 <__lshift>:
 800a300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a304:	460c      	mov	r4, r1
 800a306:	6849      	ldr	r1, [r1, #4]
 800a308:	6923      	ldr	r3, [r4, #16]
 800a30a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a30e:	68a3      	ldr	r3, [r4, #8]
 800a310:	4607      	mov	r7, r0
 800a312:	4691      	mov	r9, r2
 800a314:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a318:	f108 0601 	add.w	r6, r8, #1
 800a31c:	42b3      	cmp	r3, r6
 800a31e:	db0b      	blt.n	800a338 <__lshift+0x38>
 800a320:	4638      	mov	r0, r7
 800a322:	f7ff fddb 	bl	8009edc <_Balloc>
 800a326:	4605      	mov	r5, r0
 800a328:	b948      	cbnz	r0, 800a33e <__lshift+0x3e>
 800a32a:	4602      	mov	r2, r0
 800a32c:	4b2a      	ldr	r3, [pc, #168]	; (800a3d8 <__lshift+0xd8>)
 800a32e:	482b      	ldr	r0, [pc, #172]	; (800a3dc <__lshift+0xdc>)
 800a330:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a334:	f000 fbb8 	bl	800aaa8 <__assert_func>
 800a338:	3101      	adds	r1, #1
 800a33a:	005b      	lsls	r3, r3, #1
 800a33c:	e7ee      	b.n	800a31c <__lshift+0x1c>
 800a33e:	2300      	movs	r3, #0
 800a340:	f100 0114 	add.w	r1, r0, #20
 800a344:	f100 0210 	add.w	r2, r0, #16
 800a348:	4618      	mov	r0, r3
 800a34a:	4553      	cmp	r3, sl
 800a34c:	db37      	blt.n	800a3be <__lshift+0xbe>
 800a34e:	6920      	ldr	r0, [r4, #16]
 800a350:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a354:	f104 0314 	add.w	r3, r4, #20
 800a358:	f019 091f 	ands.w	r9, r9, #31
 800a35c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a360:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a364:	d02f      	beq.n	800a3c6 <__lshift+0xc6>
 800a366:	f1c9 0e20 	rsb	lr, r9, #32
 800a36a:	468a      	mov	sl, r1
 800a36c:	f04f 0c00 	mov.w	ip, #0
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	fa02 f209 	lsl.w	r2, r2, r9
 800a376:	ea42 020c 	orr.w	r2, r2, ip
 800a37a:	f84a 2b04 	str.w	r2, [sl], #4
 800a37e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a382:	4298      	cmp	r0, r3
 800a384:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a388:	d8f2      	bhi.n	800a370 <__lshift+0x70>
 800a38a:	1b03      	subs	r3, r0, r4
 800a38c:	3b15      	subs	r3, #21
 800a38e:	f023 0303 	bic.w	r3, r3, #3
 800a392:	3304      	adds	r3, #4
 800a394:	f104 0215 	add.w	r2, r4, #21
 800a398:	4290      	cmp	r0, r2
 800a39a:	bf38      	it	cc
 800a39c:	2304      	movcc	r3, #4
 800a39e:	f841 c003 	str.w	ip, [r1, r3]
 800a3a2:	f1bc 0f00 	cmp.w	ip, #0
 800a3a6:	d001      	beq.n	800a3ac <__lshift+0xac>
 800a3a8:	f108 0602 	add.w	r6, r8, #2
 800a3ac:	3e01      	subs	r6, #1
 800a3ae:	4638      	mov	r0, r7
 800a3b0:	612e      	str	r6, [r5, #16]
 800a3b2:	4621      	mov	r1, r4
 800a3b4:	f7ff fdd2 	bl	8009f5c <_Bfree>
 800a3b8:	4628      	mov	r0, r5
 800a3ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3be:	f842 0f04 	str.w	r0, [r2, #4]!
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	e7c1      	b.n	800a34a <__lshift+0x4a>
 800a3c6:	3904      	subs	r1, #4
 800a3c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3cc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a3d0:	4298      	cmp	r0, r3
 800a3d2:	d8f9      	bhi.n	800a3c8 <__lshift+0xc8>
 800a3d4:	e7ea      	b.n	800a3ac <__lshift+0xac>
 800a3d6:	bf00      	nop
 800a3d8:	0800ba3f 	.word	0x0800ba3f
 800a3dc:	0800ba50 	.word	0x0800ba50

0800a3e0 <__mcmp>:
 800a3e0:	b530      	push	{r4, r5, lr}
 800a3e2:	6902      	ldr	r2, [r0, #16]
 800a3e4:	690c      	ldr	r4, [r1, #16]
 800a3e6:	1b12      	subs	r2, r2, r4
 800a3e8:	d10e      	bne.n	800a408 <__mcmp+0x28>
 800a3ea:	f100 0314 	add.w	r3, r0, #20
 800a3ee:	3114      	adds	r1, #20
 800a3f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a3f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a3f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a3fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a400:	42a5      	cmp	r5, r4
 800a402:	d003      	beq.n	800a40c <__mcmp+0x2c>
 800a404:	d305      	bcc.n	800a412 <__mcmp+0x32>
 800a406:	2201      	movs	r2, #1
 800a408:	4610      	mov	r0, r2
 800a40a:	bd30      	pop	{r4, r5, pc}
 800a40c:	4283      	cmp	r3, r0
 800a40e:	d3f3      	bcc.n	800a3f8 <__mcmp+0x18>
 800a410:	e7fa      	b.n	800a408 <__mcmp+0x28>
 800a412:	f04f 32ff 	mov.w	r2, #4294967295
 800a416:	e7f7      	b.n	800a408 <__mcmp+0x28>

0800a418 <__mdiff>:
 800a418:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a41c:	460c      	mov	r4, r1
 800a41e:	4606      	mov	r6, r0
 800a420:	4611      	mov	r1, r2
 800a422:	4620      	mov	r0, r4
 800a424:	4690      	mov	r8, r2
 800a426:	f7ff ffdb 	bl	800a3e0 <__mcmp>
 800a42a:	1e05      	subs	r5, r0, #0
 800a42c:	d110      	bne.n	800a450 <__mdiff+0x38>
 800a42e:	4629      	mov	r1, r5
 800a430:	4630      	mov	r0, r6
 800a432:	f7ff fd53 	bl	8009edc <_Balloc>
 800a436:	b930      	cbnz	r0, 800a446 <__mdiff+0x2e>
 800a438:	4b3a      	ldr	r3, [pc, #232]	; (800a524 <__mdiff+0x10c>)
 800a43a:	4602      	mov	r2, r0
 800a43c:	f240 2132 	movw	r1, #562	; 0x232
 800a440:	4839      	ldr	r0, [pc, #228]	; (800a528 <__mdiff+0x110>)
 800a442:	f000 fb31 	bl	800aaa8 <__assert_func>
 800a446:	2301      	movs	r3, #1
 800a448:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a44c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a450:	bfa4      	itt	ge
 800a452:	4643      	movge	r3, r8
 800a454:	46a0      	movge	r8, r4
 800a456:	4630      	mov	r0, r6
 800a458:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a45c:	bfa6      	itte	ge
 800a45e:	461c      	movge	r4, r3
 800a460:	2500      	movge	r5, #0
 800a462:	2501      	movlt	r5, #1
 800a464:	f7ff fd3a 	bl	8009edc <_Balloc>
 800a468:	b920      	cbnz	r0, 800a474 <__mdiff+0x5c>
 800a46a:	4b2e      	ldr	r3, [pc, #184]	; (800a524 <__mdiff+0x10c>)
 800a46c:	4602      	mov	r2, r0
 800a46e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a472:	e7e5      	b.n	800a440 <__mdiff+0x28>
 800a474:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a478:	6926      	ldr	r6, [r4, #16]
 800a47a:	60c5      	str	r5, [r0, #12]
 800a47c:	f104 0914 	add.w	r9, r4, #20
 800a480:	f108 0514 	add.w	r5, r8, #20
 800a484:	f100 0e14 	add.w	lr, r0, #20
 800a488:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a48c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a490:	f108 0210 	add.w	r2, r8, #16
 800a494:	46f2      	mov	sl, lr
 800a496:	2100      	movs	r1, #0
 800a498:	f859 3b04 	ldr.w	r3, [r9], #4
 800a49c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a4a0:	fa1f f883 	uxth.w	r8, r3
 800a4a4:	fa11 f18b 	uxtah	r1, r1, fp
 800a4a8:	0c1b      	lsrs	r3, r3, #16
 800a4aa:	eba1 0808 	sub.w	r8, r1, r8
 800a4ae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a4b2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a4b6:	fa1f f888 	uxth.w	r8, r8
 800a4ba:	1419      	asrs	r1, r3, #16
 800a4bc:	454e      	cmp	r6, r9
 800a4be:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a4c2:	f84a 3b04 	str.w	r3, [sl], #4
 800a4c6:	d8e7      	bhi.n	800a498 <__mdiff+0x80>
 800a4c8:	1b33      	subs	r3, r6, r4
 800a4ca:	3b15      	subs	r3, #21
 800a4cc:	f023 0303 	bic.w	r3, r3, #3
 800a4d0:	3304      	adds	r3, #4
 800a4d2:	3415      	adds	r4, #21
 800a4d4:	42a6      	cmp	r6, r4
 800a4d6:	bf38      	it	cc
 800a4d8:	2304      	movcc	r3, #4
 800a4da:	441d      	add	r5, r3
 800a4dc:	4473      	add	r3, lr
 800a4de:	469e      	mov	lr, r3
 800a4e0:	462e      	mov	r6, r5
 800a4e2:	4566      	cmp	r6, ip
 800a4e4:	d30e      	bcc.n	800a504 <__mdiff+0xec>
 800a4e6:	f10c 0203 	add.w	r2, ip, #3
 800a4ea:	1b52      	subs	r2, r2, r5
 800a4ec:	f022 0203 	bic.w	r2, r2, #3
 800a4f0:	3d03      	subs	r5, #3
 800a4f2:	45ac      	cmp	ip, r5
 800a4f4:	bf38      	it	cc
 800a4f6:	2200      	movcc	r2, #0
 800a4f8:	441a      	add	r2, r3
 800a4fa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a4fe:	b17b      	cbz	r3, 800a520 <__mdiff+0x108>
 800a500:	6107      	str	r7, [r0, #16]
 800a502:	e7a3      	b.n	800a44c <__mdiff+0x34>
 800a504:	f856 8b04 	ldr.w	r8, [r6], #4
 800a508:	fa11 f288 	uxtah	r2, r1, r8
 800a50c:	1414      	asrs	r4, r2, #16
 800a50e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a512:	b292      	uxth	r2, r2
 800a514:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a518:	f84e 2b04 	str.w	r2, [lr], #4
 800a51c:	1421      	asrs	r1, r4, #16
 800a51e:	e7e0      	b.n	800a4e2 <__mdiff+0xca>
 800a520:	3f01      	subs	r7, #1
 800a522:	e7ea      	b.n	800a4fa <__mdiff+0xe2>
 800a524:	0800ba3f 	.word	0x0800ba3f
 800a528:	0800ba50 	.word	0x0800ba50

0800a52c <__d2b>:
 800a52c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a530:	4689      	mov	r9, r1
 800a532:	2101      	movs	r1, #1
 800a534:	ec57 6b10 	vmov	r6, r7, d0
 800a538:	4690      	mov	r8, r2
 800a53a:	f7ff fccf 	bl	8009edc <_Balloc>
 800a53e:	4604      	mov	r4, r0
 800a540:	b930      	cbnz	r0, 800a550 <__d2b+0x24>
 800a542:	4602      	mov	r2, r0
 800a544:	4b25      	ldr	r3, [pc, #148]	; (800a5dc <__d2b+0xb0>)
 800a546:	4826      	ldr	r0, [pc, #152]	; (800a5e0 <__d2b+0xb4>)
 800a548:	f240 310a 	movw	r1, #778	; 0x30a
 800a54c:	f000 faac 	bl	800aaa8 <__assert_func>
 800a550:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a554:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a558:	bb35      	cbnz	r5, 800a5a8 <__d2b+0x7c>
 800a55a:	2e00      	cmp	r6, #0
 800a55c:	9301      	str	r3, [sp, #4]
 800a55e:	d028      	beq.n	800a5b2 <__d2b+0x86>
 800a560:	4668      	mov	r0, sp
 800a562:	9600      	str	r6, [sp, #0]
 800a564:	f7ff fd82 	bl	800a06c <__lo0bits>
 800a568:	9900      	ldr	r1, [sp, #0]
 800a56a:	b300      	cbz	r0, 800a5ae <__d2b+0x82>
 800a56c:	9a01      	ldr	r2, [sp, #4]
 800a56e:	f1c0 0320 	rsb	r3, r0, #32
 800a572:	fa02 f303 	lsl.w	r3, r2, r3
 800a576:	430b      	orrs	r3, r1
 800a578:	40c2      	lsrs	r2, r0
 800a57a:	6163      	str	r3, [r4, #20]
 800a57c:	9201      	str	r2, [sp, #4]
 800a57e:	9b01      	ldr	r3, [sp, #4]
 800a580:	61a3      	str	r3, [r4, #24]
 800a582:	2b00      	cmp	r3, #0
 800a584:	bf14      	ite	ne
 800a586:	2202      	movne	r2, #2
 800a588:	2201      	moveq	r2, #1
 800a58a:	6122      	str	r2, [r4, #16]
 800a58c:	b1d5      	cbz	r5, 800a5c4 <__d2b+0x98>
 800a58e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a592:	4405      	add	r5, r0
 800a594:	f8c9 5000 	str.w	r5, [r9]
 800a598:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a59c:	f8c8 0000 	str.w	r0, [r8]
 800a5a0:	4620      	mov	r0, r4
 800a5a2:	b003      	add	sp, #12
 800a5a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a5ac:	e7d5      	b.n	800a55a <__d2b+0x2e>
 800a5ae:	6161      	str	r1, [r4, #20]
 800a5b0:	e7e5      	b.n	800a57e <__d2b+0x52>
 800a5b2:	a801      	add	r0, sp, #4
 800a5b4:	f7ff fd5a 	bl	800a06c <__lo0bits>
 800a5b8:	9b01      	ldr	r3, [sp, #4]
 800a5ba:	6163      	str	r3, [r4, #20]
 800a5bc:	2201      	movs	r2, #1
 800a5be:	6122      	str	r2, [r4, #16]
 800a5c0:	3020      	adds	r0, #32
 800a5c2:	e7e3      	b.n	800a58c <__d2b+0x60>
 800a5c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a5c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a5cc:	f8c9 0000 	str.w	r0, [r9]
 800a5d0:	6918      	ldr	r0, [r3, #16]
 800a5d2:	f7ff fd2b 	bl	800a02c <__hi0bits>
 800a5d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a5da:	e7df      	b.n	800a59c <__d2b+0x70>
 800a5dc:	0800ba3f 	.word	0x0800ba3f
 800a5e0:	0800ba50 	.word	0x0800ba50

0800a5e4 <_calloc_r>:
 800a5e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5e6:	fba1 2402 	umull	r2, r4, r1, r2
 800a5ea:	b94c      	cbnz	r4, 800a600 <_calloc_r+0x1c>
 800a5ec:	4611      	mov	r1, r2
 800a5ee:	9201      	str	r2, [sp, #4]
 800a5f0:	f000 f87a 	bl	800a6e8 <_malloc_r>
 800a5f4:	9a01      	ldr	r2, [sp, #4]
 800a5f6:	4605      	mov	r5, r0
 800a5f8:	b930      	cbnz	r0, 800a608 <_calloc_r+0x24>
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	b003      	add	sp, #12
 800a5fe:	bd30      	pop	{r4, r5, pc}
 800a600:	220c      	movs	r2, #12
 800a602:	6002      	str	r2, [r0, #0]
 800a604:	2500      	movs	r5, #0
 800a606:	e7f8      	b.n	800a5fa <_calloc_r+0x16>
 800a608:	4621      	mov	r1, r4
 800a60a:	f7fe f94f 	bl	80088ac <memset>
 800a60e:	e7f4      	b.n	800a5fa <_calloc_r+0x16>

0800a610 <_free_r>:
 800a610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a612:	2900      	cmp	r1, #0
 800a614:	d044      	beq.n	800a6a0 <_free_r+0x90>
 800a616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a61a:	9001      	str	r0, [sp, #4]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	f1a1 0404 	sub.w	r4, r1, #4
 800a622:	bfb8      	it	lt
 800a624:	18e4      	addlt	r4, r4, r3
 800a626:	f000 fa9b 	bl	800ab60 <__malloc_lock>
 800a62a:	4a1e      	ldr	r2, [pc, #120]	; (800a6a4 <_free_r+0x94>)
 800a62c:	9801      	ldr	r0, [sp, #4]
 800a62e:	6813      	ldr	r3, [r2, #0]
 800a630:	b933      	cbnz	r3, 800a640 <_free_r+0x30>
 800a632:	6063      	str	r3, [r4, #4]
 800a634:	6014      	str	r4, [r2, #0]
 800a636:	b003      	add	sp, #12
 800a638:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a63c:	f000 ba96 	b.w	800ab6c <__malloc_unlock>
 800a640:	42a3      	cmp	r3, r4
 800a642:	d908      	bls.n	800a656 <_free_r+0x46>
 800a644:	6825      	ldr	r5, [r4, #0]
 800a646:	1961      	adds	r1, r4, r5
 800a648:	428b      	cmp	r3, r1
 800a64a:	bf01      	itttt	eq
 800a64c:	6819      	ldreq	r1, [r3, #0]
 800a64e:	685b      	ldreq	r3, [r3, #4]
 800a650:	1949      	addeq	r1, r1, r5
 800a652:	6021      	streq	r1, [r4, #0]
 800a654:	e7ed      	b.n	800a632 <_free_r+0x22>
 800a656:	461a      	mov	r2, r3
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	b10b      	cbz	r3, 800a660 <_free_r+0x50>
 800a65c:	42a3      	cmp	r3, r4
 800a65e:	d9fa      	bls.n	800a656 <_free_r+0x46>
 800a660:	6811      	ldr	r1, [r2, #0]
 800a662:	1855      	adds	r5, r2, r1
 800a664:	42a5      	cmp	r5, r4
 800a666:	d10b      	bne.n	800a680 <_free_r+0x70>
 800a668:	6824      	ldr	r4, [r4, #0]
 800a66a:	4421      	add	r1, r4
 800a66c:	1854      	adds	r4, r2, r1
 800a66e:	42a3      	cmp	r3, r4
 800a670:	6011      	str	r1, [r2, #0]
 800a672:	d1e0      	bne.n	800a636 <_free_r+0x26>
 800a674:	681c      	ldr	r4, [r3, #0]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	6053      	str	r3, [r2, #4]
 800a67a:	4421      	add	r1, r4
 800a67c:	6011      	str	r1, [r2, #0]
 800a67e:	e7da      	b.n	800a636 <_free_r+0x26>
 800a680:	d902      	bls.n	800a688 <_free_r+0x78>
 800a682:	230c      	movs	r3, #12
 800a684:	6003      	str	r3, [r0, #0]
 800a686:	e7d6      	b.n	800a636 <_free_r+0x26>
 800a688:	6825      	ldr	r5, [r4, #0]
 800a68a:	1961      	adds	r1, r4, r5
 800a68c:	428b      	cmp	r3, r1
 800a68e:	bf04      	itt	eq
 800a690:	6819      	ldreq	r1, [r3, #0]
 800a692:	685b      	ldreq	r3, [r3, #4]
 800a694:	6063      	str	r3, [r4, #4]
 800a696:	bf04      	itt	eq
 800a698:	1949      	addeq	r1, r1, r5
 800a69a:	6021      	streq	r1, [r4, #0]
 800a69c:	6054      	str	r4, [r2, #4]
 800a69e:	e7ca      	b.n	800a636 <_free_r+0x26>
 800a6a0:	b003      	add	sp, #12
 800a6a2:	bd30      	pop	{r4, r5, pc}
 800a6a4:	20004360 	.word	0x20004360

0800a6a8 <sbrk_aligned>:
 800a6a8:	b570      	push	{r4, r5, r6, lr}
 800a6aa:	4e0e      	ldr	r6, [pc, #56]	; (800a6e4 <sbrk_aligned+0x3c>)
 800a6ac:	460c      	mov	r4, r1
 800a6ae:	6831      	ldr	r1, [r6, #0]
 800a6b0:	4605      	mov	r5, r0
 800a6b2:	b911      	cbnz	r1, 800a6ba <sbrk_aligned+0x12>
 800a6b4:	f000 f9e8 	bl	800aa88 <_sbrk_r>
 800a6b8:	6030      	str	r0, [r6, #0]
 800a6ba:	4621      	mov	r1, r4
 800a6bc:	4628      	mov	r0, r5
 800a6be:	f000 f9e3 	bl	800aa88 <_sbrk_r>
 800a6c2:	1c43      	adds	r3, r0, #1
 800a6c4:	d00a      	beq.n	800a6dc <sbrk_aligned+0x34>
 800a6c6:	1cc4      	adds	r4, r0, #3
 800a6c8:	f024 0403 	bic.w	r4, r4, #3
 800a6cc:	42a0      	cmp	r0, r4
 800a6ce:	d007      	beq.n	800a6e0 <sbrk_aligned+0x38>
 800a6d0:	1a21      	subs	r1, r4, r0
 800a6d2:	4628      	mov	r0, r5
 800a6d4:	f000 f9d8 	bl	800aa88 <_sbrk_r>
 800a6d8:	3001      	adds	r0, #1
 800a6da:	d101      	bne.n	800a6e0 <sbrk_aligned+0x38>
 800a6dc:	f04f 34ff 	mov.w	r4, #4294967295
 800a6e0:	4620      	mov	r0, r4
 800a6e2:	bd70      	pop	{r4, r5, r6, pc}
 800a6e4:	20004364 	.word	0x20004364

0800a6e8 <_malloc_r>:
 800a6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ec:	1ccd      	adds	r5, r1, #3
 800a6ee:	f025 0503 	bic.w	r5, r5, #3
 800a6f2:	3508      	adds	r5, #8
 800a6f4:	2d0c      	cmp	r5, #12
 800a6f6:	bf38      	it	cc
 800a6f8:	250c      	movcc	r5, #12
 800a6fa:	2d00      	cmp	r5, #0
 800a6fc:	4607      	mov	r7, r0
 800a6fe:	db01      	blt.n	800a704 <_malloc_r+0x1c>
 800a700:	42a9      	cmp	r1, r5
 800a702:	d905      	bls.n	800a710 <_malloc_r+0x28>
 800a704:	230c      	movs	r3, #12
 800a706:	603b      	str	r3, [r7, #0]
 800a708:	2600      	movs	r6, #0
 800a70a:	4630      	mov	r0, r6
 800a70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a710:	4e2e      	ldr	r6, [pc, #184]	; (800a7cc <_malloc_r+0xe4>)
 800a712:	f000 fa25 	bl	800ab60 <__malloc_lock>
 800a716:	6833      	ldr	r3, [r6, #0]
 800a718:	461c      	mov	r4, r3
 800a71a:	bb34      	cbnz	r4, 800a76a <_malloc_r+0x82>
 800a71c:	4629      	mov	r1, r5
 800a71e:	4638      	mov	r0, r7
 800a720:	f7ff ffc2 	bl	800a6a8 <sbrk_aligned>
 800a724:	1c43      	adds	r3, r0, #1
 800a726:	4604      	mov	r4, r0
 800a728:	d14d      	bne.n	800a7c6 <_malloc_r+0xde>
 800a72a:	6834      	ldr	r4, [r6, #0]
 800a72c:	4626      	mov	r6, r4
 800a72e:	2e00      	cmp	r6, #0
 800a730:	d140      	bne.n	800a7b4 <_malloc_r+0xcc>
 800a732:	6823      	ldr	r3, [r4, #0]
 800a734:	4631      	mov	r1, r6
 800a736:	4638      	mov	r0, r7
 800a738:	eb04 0803 	add.w	r8, r4, r3
 800a73c:	f000 f9a4 	bl	800aa88 <_sbrk_r>
 800a740:	4580      	cmp	r8, r0
 800a742:	d13a      	bne.n	800a7ba <_malloc_r+0xd2>
 800a744:	6821      	ldr	r1, [r4, #0]
 800a746:	3503      	adds	r5, #3
 800a748:	1a6d      	subs	r5, r5, r1
 800a74a:	f025 0503 	bic.w	r5, r5, #3
 800a74e:	3508      	adds	r5, #8
 800a750:	2d0c      	cmp	r5, #12
 800a752:	bf38      	it	cc
 800a754:	250c      	movcc	r5, #12
 800a756:	4629      	mov	r1, r5
 800a758:	4638      	mov	r0, r7
 800a75a:	f7ff ffa5 	bl	800a6a8 <sbrk_aligned>
 800a75e:	3001      	adds	r0, #1
 800a760:	d02b      	beq.n	800a7ba <_malloc_r+0xd2>
 800a762:	6823      	ldr	r3, [r4, #0]
 800a764:	442b      	add	r3, r5
 800a766:	6023      	str	r3, [r4, #0]
 800a768:	e00e      	b.n	800a788 <_malloc_r+0xa0>
 800a76a:	6822      	ldr	r2, [r4, #0]
 800a76c:	1b52      	subs	r2, r2, r5
 800a76e:	d41e      	bmi.n	800a7ae <_malloc_r+0xc6>
 800a770:	2a0b      	cmp	r2, #11
 800a772:	d916      	bls.n	800a7a2 <_malloc_r+0xba>
 800a774:	1961      	adds	r1, r4, r5
 800a776:	42a3      	cmp	r3, r4
 800a778:	6025      	str	r5, [r4, #0]
 800a77a:	bf18      	it	ne
 800a77c:	6059      	strne	r1, [r3, #4]
 800a77e:	6863      	ldr	r3, [r4, #4]
 800a780:	bf08      	it	eq
 800a782:	6031      	streq	r1, [r6, #0]
 800a784:	5162      	str	r2, [r4, r5]
 800a786:	604b      	str	r3, [r1, #4]
 800a788:	4638      	mov	r0, r7
 800a78a:	f104 060b 	add.w	r6, r4, #11
 800a78e:	f000 f9ed 	bl	800ab6c <__malloc_unlock>
 800a792:	f026 0607 	bic.w	r6, r6, #7
 800a796:	1d23      	adds	r3, r4, #4
 800a798:	1af2      	subs	r2, r6, r3
 800a79a:	d0b6      	beq.n	800a70a <_malloc_r+0x22>
 800a79c:	1b9b      	subs	r3, r3, r6
 800a79e:	50a3      	str	r3, [r4, r2]
 800a7a0:	e7b3      	b.n	800a70a <_malloc_r+0x22>
 800a7a2:	6862      	ldr	r2, [r4, #4]
 800a7a4:	42a3      	cmp	r3, r4
 800a7a6:	bf0c      	ite	eq
 800a7a8:	6032      	streq	r2, [r6, #0]
 800a7aa:	605a      	strne	r2, [r3, #4]
 800a7ac:	e7ec      	b.n	800a788 <_malloc_r+0xa0>
 800a7ae:	4623      	mov	r3, r4
 800a7b0:	6864      	ldr	r4, [r4, #4]
 800a7b2:	e7b2      	b.n	800a71a <_malloc_r+0x32>
 800a7b4:	4634      	mov	r4, r6
 800a7b6:	6876      	ldr	r6, [r6, #4]
 800a7b8:	e7b9      	b.n	800a72e <_malloc_r+0x46>
 800a7ba:	230c      	movs	r3, #12
 800a7bc:	603b      	str	r3, [r7, #0]
 800a7be:	4638      	mov	r0, r7
 800a7c0:	f000 f9d4 	bl	800ab6c <__malloc_unlock>
 800a7c4:	e7a1      	b.n	800a70a <_malloc_r+0x22>
 800a7c6:	6025      	str	r5, [r4, #0]
 800a7c8:	e7de      	b.n	800a788 <_malloc_r+0xa0>
 800a7ca:	bf00      	nop
 800a7cc:	20004360 	.word	0x20004360

0800a7d0 <__ssputs_r>:
 800a7d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7d4:	688e      	ldr	r6, [r1, #8]
 800a7d6:	429e      	cmp	r6, r3
 800a7d8:	4682      	mov	sl, r0
 800a7da:	460c      	mov	r4, r1
 800a7dc:	4690      	mov	r8, r2
 800a7de:	461f      	mov	r7, r3
 800a7e0:	d838      	bhi.n	800a854 <__ssputs_r+0x84>
 800a7e2:	898a      	ldrh	r2, [r1, #12]
 800a7e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a7e8:	d032      	beq.n	800a850 <__ssputs_r+0x80>
 800a7ea:	6825      	ldr	r5, [r4, #0]
 800a7ec:	6909      	ldr	r1, [r1, #16]
 800a7ee:	eba5 0901 	sub.w	r9, r5, r1
 800a7f2:	6965      	ldr	r5, [r4, #20]
 800a7f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a7fc:	3301      	adds	r3, #1
 800a7fe:	444b      	add	r3, r9
 800a800:	106d      	asrs	r5, r5, #1
 800a802:	429d      	cmp	r5, r3
 800a804:	bf38      	it	cc
 800a806:	461d      	movcc	r5, r3
 800a808:	0553      	lsls	r3, r2, #21
 800a80a:	d531      	bpl.n	800a870 <__ssputs_r+0xa0>
 800a80c:	4629      	mov	r1, r5
 800a80e:	f7ff ff6b 	bl	800a6e8 <_malloc_r>
 800a812:	4606      	mov	r6, r0
 800a814:	b950      	cbnz	r0, 800a82c <__ssputs_r+0x5c>
 800a816:	230c      	movs	r3, #12
 800a818:	f8ca 3000 	str.w	r3, [sl]
 800a81c:	89a3      	ldrh	r3, [r4, #12]
 800a81e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a822:	81a3      	strh	r3, [r4, #12]
 800a824:	f04f 30ff 	mov.w	r0, #4294967295
 800a828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a82c:	6921      	ldr	r1, [r4, #16]
 800a82e:	464a      	mov	r2, r9
 800a830:	f7fe f82e 	bl	8008890 <memcpy>
 800a834:	89a3      	ldrh	r3, [r4, #12]
 800a836:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a83a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a83e:	81a3      	strh	r3, [r4, #12]
 800a840:	6126      	str	r6, [r4, #16]
 800a842:	6165      	str	r5, [r4, #20]
 800a844:	444e      	add	r6, r9
 800a846:	eba5 0509 	sub.w	r5, r5, r9
 800a84a:	6026      	str	r6, [r4, #0]
 800a84c:	60a5      	str	r5, [r4, #8]
 800a84e:	463e      	mov	r6, r7
 800a850:	42be      	cmp	r6, r7
 800a852:	d900      	bls.n	800a856 <__ssputs_r+0x86>
 800a854:	463e      	mov	r6, r7
 800a856:	6820      	ldr	r0, [r4, #0]
 800a858:	4632      	mov	r2, r6
 800a85a:	4641      	mov	r1, r8
 800a85c:	f000 f966 	bl	800ab2c <memmove>
 800a860:	68a3      	ldr	r3, [r4, #8]
 800a862:	1b9b      	subs	r3, r3, r6
 800a864:	60a3      	str	r3, [r4, #8]
 800a866:	6823      	ldr	r3, [r4, #0]
 800a868:	4433      	add	r3, r6
 800a86a:	6023      	str	r3, [r4, #0]
 800a86c:	2000      	movs	r0, #0
 800a86e:	e7db      	b.n	800a828 <__ssputs_r+0x58>
 800a870:	462a      	mov	r2, r5
 800a872:	f000 f981 	bl	800ab78 <_realloc_r>
 800a876:	4606      	mov	r6, r0
 800a878:	2800      	cmp	r0, #0
 800a87a:	d1e1      	bne.n	800a840 <__ssputs_r+0x70>
 800a87c:	6921      	ldr	r1, [r4, #16]
 800a87e:	4650      	mov	r0, sl
 800a880:	f7ff fec6 	bl	800a610 <_free_r>
 800a884:	e7c7      	b.n	800a816 <__ssputs_r+0x46>
	...

0800a888 <_svfiprintf_r>:
 800a888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a88c:	4698      	mov	r8, r3
 800a88e:	898b      	ldrh	r3, [r1, #12]
 800a890:	061b      	lsls	r3, r3, #24
 800a892:	b09d      	sub	sp, #116	; 0x74
 800a894:	4607      	mov	r7, r0
 800a896:	460d      	mov	r5, r1
 800a898:	4614      	mov	r4, r2
 800a89a:	d50e      	bpl.n	800a8ba <_svfiprintf_r+0x32>
 800a89c:	690b      	ldr	r3, [r1, #16]
 800a89e:	b963      	cbnz	r3, 800a8ba <_svfiprintf_r+0x32>
 800a8a0:	2140      	movs	r1, #64	; 0x40
 800a8a2:	f7ff ff21 	bl	800a6e8 <_malloc_r>
 800a8a6:	6028      	str	r0, [r5, #0]
 800a8a8:	6128      	str	r0, [r5, #16]
 800a8aa:	b920      	cbnz	r0, 800a8b6 <_svfiprintf_r+0x2e>
 800a8ac:	230c      	movs	r3, #12
 800a8ae:	603b      	str	r3, [r7, #0]
 800a8b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b4:	e0d1      	b.n	800aa5a <_svfiprintf_r+0x1d2>
 800a8b6:	2340      	movs	r3, #64	; 0x40
 800a8b8:	616b      	str	r3, [r5, #20]
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	9309      	str	r3, [sp, #36]	; 0x24
 800a8be:	2320      	movs	r3, #32
 800a8c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a8c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8c8:	2330      	movs	r3, #48	; 0x30
 800a8ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aa74 <_svfiprintf_r+0x1ec>
 800a8ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a8d2:	f04f 0901 	mov.w	r9, #1
 800a8d6:	4623      	mov	r3, r4
 800a8d8:	469a      	mov	sl, r3
 800a8da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8de:	b10a      	cbz	r2, 800a8e4 <_svfiprintf_r+0x5c>
 800a8e0:	2a25      	cmp	r2, #37	; 0x25
 800a8e2:	d1f9      	bne.n	800a8d8 <_svfiprintf_r+0x50>
 800a8e4:	ebba 0b04 	subs.w	fp, sl, r4
 800a8e8:	d00b      	beq.n	800a902 <_svfiprintf_r+0x7a>
 800a8ea:	465b      	mov	r3, fp
 800a8ec:	4622      	mov	r2, r4
 800a8ee:	4629      	mov	r1, r5
 800a8f0:	4638      	mov	r0, r7
 800a8f2:	f7ff ff6d 	bl	800a7d0 <__ssputs_r>
 800a8f6:	3001      	adds	r0, #1
 800a8f8:	f000 80aa 	beq.w	800aa50 <_svfiprintf_r+0x1c8>
 800a8fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8fe:	445a      	add	r2, fp
 800a900:	9209      	str	r2, [sp, #36]	; 0x24
 800a902:	f89a 3000 	ldrb.w	r3, [sl]
 800a906:	2b00      	cmp	r3, #0
 800a908:	f000 80a2 	beq.w	800aa50 <_svfiprintf_r+0x1c8>
 800a90c:	2300      	movs	r3, #0
 800a90e:	f04f 32ff 	mov.w	r2, #4294967295
 800a912:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a916:	f10a 0a01 	add.w	sl, sl, #1
 800a91a:	9304      	str	r3, [sp, #16]
 800a91c:	9307      	str	r3, [sp, #28]
 800a91e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a922:	931a      	str	r3, [sp, #104]	; 0x68
 800a924:	4654      	mov	r4, sl
 800a926:	2205      	movs	r2, #5
 800a928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a92c:	4851      	ldr	r0, [pc, #324]	; (800aa74 <_svfiprintf_r+0x1ec>)
 800a92e:	f7f5 fc6f 	bl	8000210 <memchr>
 800a932:	9a04      	ldr	r2, [sp, #16]
 800a934:	b9d8      	cbnz	r0, 800a96e <_svfiprintf_r+0xe6>
 800a936:	06d0      	lsls	r0, r2, #27
 800a938:	bf44      	itt	mi
 800a93a:	2320      	movmi	r3, #32
 800a93c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a940:	0711      	lsls	r1, r2, #28
 800a942:	bf44      	itt	mi
 800a944:	232b      	movmi	r3, #43	; 0x2b
 800a946:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a94a:	f89a 3000 	ldrb.w	r3, [sl]
 800a94e:	2b2a      	cmp	r3, #42	; 0x2a
 800a950:	d015      	beq.n	800a97e <_svfiprintf_r+0xf6>
 800a952:	9a07      	ldr	r2, [sp, #28]
 800a954:	4654      	mov	r4, sl
 800a956:	2000      	movs	r0, #0
 800a958:	f04f 0c0a 	mov.w	ip, #10
 800a95c:	4621      	mov	r1, r4
 800a95e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a962:	3b30      	subs	r3, #48	; 0x30
 800a964:	2b09      	cmp	r3, #9
 800a966:	d94e      	bls.n	800aa06 <_svfiprintf_r+0x17e>
 800a968:	b1b0      	cbz	r0, 800a998 <_svfiprintf_r+0x110>
 800a96a:	9207      	str	r2, [sp, #28]
 800a96c:	e014      	b.n	800a998 <_svfiprintf_r+0x110>
 800a96e:	eba0 0308 	sub.w	r3, r0, r8
 800a972:	fa09 f303 	lsl.w	r3, r9, r3
 800a976:	4313      	orrs	r3, r2
 800a978:	9304      	str	r3, [sp, #16]
 800a97a:	46a2      	mov	sl, r4
 800a97c:	e7d2      	b.n	800a924 <_svfiprintf_r+0x9c>
 800a97e:	9b03      	ldr	r3, [sp, #12]
 800a980:	1d19      	adds	r1, r3, #4
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	9103      	str	r1, [sp, #12]
 800a986:	2b00      	cmp	r3, #0
 800a988:	bfbb      	ittet	lt
 800a98a:	425b      	neglt	r3, r3
 800a98c:	f042 0202 	orrlt.w	r2, r2, #2
 800a990:	9307      	strge	r3, [sp, #28]
 800a992:	9307      	strlt	r3, [sp, #28]
 800a994:	bfb8      	it	lt
 800a996:	9204      	strlt	r2, [sp, #16]
 800a998:	7823      	ldrb	r3, [r4, #0]
 800a99a:	2b2e      	cmp	r3, #46	; 0x2e
 800a99c:	d10c      	bne.n	800a9b8 <_svfiprintf_r+0x130>
 800a99e:	7863      	ldrb	r3, [r4, #1]
 800a9a0:	2b2a      	cmp	r3, #42	; 0x2a
 800a9a2:	d135      	bne.n	800aa10 <_svfiprintf_r+0x188>
 800a9a4:	9b03      	ldr	r3, [sp, #12]
 800a9a6:	1d1a      	adds	r2, r3, #4
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	9203      	str	r2, [sp, #12]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	bfb8      	it	lt
 800a9b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a9b4:	3402      	adds	r4, #2
 800a9b6:	9305      	str	r3, [sp, #20]
 800a9b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aa84 <_svfiprintf_r+0x1fc>
 800a9bc:	7821      	ldrb	r1, [r4, #0]
 800a9be:	2203      	movs	r2, #3
 800a9c0:	4650      	mov	r0, sl
 800a9c2:	f7f5 fc25 	bl	8000210 <memchr>
 800a9c6:	b140      	cbz	r0, 800a9da <_svfiprintf_r+0x152>
 800a9c8:	2340      	movs	r3, #64	; 0x40
 800a9ca:	eba0 000a 	sub.w	r0, r0, sl
 800a9ce:	fa03 f000 	lsl.w	r0, r3, r0
 800a9d2:	9b04      	ldr	r3, [sp, #16]
 800a9d4:	4303      	orrs	r3, r0
 800a9d6:	3401      	adds	r4, #1
 800a9d8:	9304      	str	r3, [sp, #16]
 800a9da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9de:	4826      	ldr	r0, [pc, #152]	; (800aa78 <_svfiprintf_r+0x1f0>)
 800a9e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9e4:	2206      	movs	r2, #6
 800a9e6:	f7f5 fc13 	bl	8000210 <memchr>
 800a9ea:	2800      	cmp	r0, #0
 800a9ec:	d038      	beq.n	800aa60 <_svfiprintf_r+0x1d8>
 800a9ee:	4b23      	ldr	r3, [pc, #140]	; (800aa7c <_svfiprintf_r+0x1f4>)
 800a9f0:	bb1b      	cbnz	r3, 800aa3a <_svfiprintf_r+0x1b2>
 800a9f2:	9b03      	ldr	r3, [sp, #12]
 800a9f4:	3307      	adds	r3, #7
 800a9f6:	f023 0307 	bic.w	r3, r3, #7
 800a9fa:	3308      	adds	r3, #8
 800a9fc:	9303      	str	r3, [sp, #12]
 800a9fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa00:	4433      	add	r3, r6
 800aa02:	9309      	str	r3, [sp, #36]	; 0x24
 800aa04:	e767      	b.n	800a8d6 <_svfiprintf_r+0x4e>
 800aa06:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa0a:	460c      	mov	r4, r1
 800aa0c:	2001      	movs	r0, #1
 800aa0e:	e7a5      	b.n	800a95c <_svfiprintf_r+0xd4>
 800aa10:	2300      	movs	r3, #0
 800aa12:	3401      	adds	r4, #1
 800aa14:	9305      	str	r3, [sp, #20]
 800aa16:	4619      	mov	r1, r3
 800aa18:	f04f 0c0a 	mov.w	ip, #10
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa22:	3a30      	subs	r2, #48	; 0x30
 800aa24:	2a09      	cmp	r2, #9
 800aa26:	d903      	bls.n	800aa30 <_svfiprintf_r+0x1a8>
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d0c5      	beq.n	800a9b8 <_svfiprintf_r+0x130>
 800aa2c:	9105      	str	r1, [sp, #20]
 800aa2e:	e7c3      	b.n	800a9b8 <_svfiprintf_r+0x130>
 800aa30:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa34:	4604      	mov	r4, r0
 800aa36:	2301      	movs	r3, #1
 800aa38:	e7f0      	b.n	800aa1c <_svfiprintf_r+0x194>
 800aa3a:	ab03      	add	r3, sp, #12
 800aa3c:	9300      	str	r3, [sp, #0]
 800aa3e:	462a      	mov	r2, r5
 800aa40:	4b0f      	ldr	r3, [pc, #60]	; (800aa80 <_svfiprintf_r+0x1f8>)
 800aa42:	a904      	add	r1, sp, #16
 800aa44:	4638      	mov	r0, r7
 800aa46:	f7fd ffd9 	bl	80089fc <_printf_float>
 800aa4a:	1c42      	adds	r2, r0, #1
 800aa4c:	4606      	mov	r6, r0
 800aa4e:	d1d6      	bne.n	800a9fe <_svfiprintf_r+0x176>
 800aa50:	89ab      	ldrh	r3, [r5, #12]
 800aa52:	065b      	lsls	r3, r3, #25
 800aa54:	f53f af2c 	bmi.w	800a8b0 <_svfiprintf_r+0x28>
 800aa58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa5a:	b01d      	add	sp, #116	; 0x74
 800aa5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa60:	ab03      	add	r3, sp, #12
 800aa62:	9300      	str	r3, [sp, #0]
 800aa64:	462a      	mov	r2, r5
 800aa66:	4b06      	ldr	r3, [pc, #24]	; (800aa80 <_svfiprintf_r+0x1f8>)
 800aa68:	a904      	add	r1, sp, #16
 800aa6a:	4638      	mov	r0, r7
 800aa6c:	f7fe fa6a 	bl	8008f44 <_printf_i>
 800aa70:	e7eb      	b.n	800aa4a <_svfiprintf_r+0x1c2>
 800aa72:	bf00      	nop
 800aa74:	0800bbac 	.word	0x0800bbac
 800aa78:	0800bbb6 	.word	0x0800bbb6
 800aa7c:	080089fd 	.word	0x080089fd
 800aa80:	0800a7d1 	.word	0x0800a7d1
 800aa84:	0800bbb2 	.word	0x0800bbb2

0800aa88 <_sbrk_r>:
 800aa88:	b538      	push	{r3, r4, r5, lr}
 800aa8a:	4d06      	ldr	r5, [pc, #24]	; (800aaa4 <_sbrk_r+0x1c>)
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	4604      	mov	r4, r0
 800aa90:	4608      	mov	r0, r1
 800aa92:	602b      	str	r3, [r5, #0]
 800aa94:	f7f7 fd0e 	bl	80024b4 <_sbrk>
 800aa98:	1c43      	adds	r3, r0, #1
 800aa9a:	d102      	bne.n	800aaa2 <_sbrk_r+0x1a>
 800aa9c:	682b      	ldr	r3, [r5, #0]
 800aa9e:	b103      	cbz	r3, 800aaa2 <_sbrk_r+0x1a>
 800aaa0:	6023      	str	r3, [r4, #0]
 800aaa2:	bd38      	pop	{r3, r4, r5, pc}
 800aaa4:	20004368 	.word	0x20004368

0800aaa8 <__assert_func>:
 800aaa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aaaa:	4614      	mov	r4, r2
 800aaac:	461a      	mov	r2, r3
 800aaae:	4b09      	ldr	r3, [pc, #36]	; (800aad4 <__assert_func+0x2c>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4605      	mov	r5, r0
 800aab4:	68d8      	ldr	r0, [r3, #12]
 800aab6:	b14c      	cbz	r4, 800aacc <__assert_func+0x24>
 800aab8:	4b07      	ldr	r3, [pc, #28]	; (800aad8 <__assert_func+0x30>)
 800aaba:	9100      	str	r1, [sp, #0]
 800aabc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aac0:	4906      	ldr	r1, [pc, #24]	; (800aadc <__assert_func+0x34>)
 800aac2:	462b      	mov	r3, r5
 800aac4:	f000 f80e 	bl	800aae4 <fiprintf>
 800aac8:	f000 faac 	bl	800b024 <abort>
 800aacc:	4b04      	ldr	r3, [pc, #16]	; (800aae0 <__assert_func+0x38>)
 800aace:	461c      	mov	r4, r3
 800aad0:	e7f3      	b.n	800aaba <__assert_func+0x12>
 800aad2:	bf00      	nop
 800aad4:	20000010 	.word	0x20000010
 800aad8:	0800bbbd 	.word	0x0800bbbd
 800aadc:	0800bbca 	.word	0x0800bbca
 800aae0:	0800bbf8 	.word	0x0800bbf8

0800aae4 <fiprintf>:
 800aae4:	b40e      	push	{r1, r2, r3}
 800aae6:	b503      	push	{r0, r1, lr}
 800aae8:	4601      	mov	r1, r0
 800aaea:	ab03      	add	r3, sp, #12
 800aaec:	4805      	ldr	r0, [pc, #20]	; (800ab04 <fiprintf+0x20>)
 800aaee:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaf2:	6800      	ldr	r0, [r0, #0]
 800aaf4:	9301      	str	r3, [sp, #4]
 800aaf6:	f000 f897 	bl	800ac28 <_vfiprintf_r>
 800aafa:	b002      	add	sp, #8
 800aafc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab00:	b003      	add	sp, #12
 800ab02:	4770      	bx	lr
 800ab04:	20000010 	.word	0x20000010

0800ab08 <__ascii_mbtowc>:
 800ab08:	b082      	sub	sp, #8
 800ab0a:	b901      	cbnz	r1, 800ab0e <__ascii_mbtowc+0x6>
 800ab0c:	a901      	add	r1, sp, #4
 800ab0e:	b142      	cbz	r2, 800ab22 <__ascii_mbtowc+0x1a>
 800ab10:	b14b      	cbz	r3, 800ab26 <__ascii_mbtowc+0x1e>
 800ab12:	7813      	ldrb	r3, [r2, #0]
 800ab14:	600b      	str	r3, [r1, #0]
 800ab16:	7812      	ldrb	r2, [r2, #0]
 800ab18:	1e10      	subs	r0, r2, #0
 800ab1a:	bf18      	it	ne
 800ab1c:	2001      	movne	r0, #1
 800ab1e:	b002      	add	sp, #8
 800ab20:	4770      	bx	lr
 800ab22:	4610      	mov	r0, r2
 800ab24:	e7fb      	b.n	800ab1e <__ascii_mbtowc+0x16>
 800ab26:	f06f 0001 	mvn.w	r0, #1
 800ab2a:	e7f8      	b.n	800ab1e <__ascii_mbtowc+0x16>

0800ab2c <memmove>:
 800ab2c:	4288      	cmp	r0, r1
 800ab2e:	b510      	push	{r4, lr}
 800ab30:	eb01 0402 	add.w	r4, r1, r2
 800ab34:	d902      	bls.n	800ab3c <memmove+0x10>
 800ab36:	4284      	cmp	r4, r0
 800ab38:	4623      	mov	r3, r4
 800ab3a:	d807      	bhi.n	800ab4c <memmove+0x20>
 800ab3c:	1e43      	subs	r3, r0, #1
 800ab3e:	42a1      	cmp	r1, r4
 800ab40:	d008      	beq.n	800ab54 <memmove+0x28>
 800ab42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab46:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab4a:	e7f8      	b.n	800ab3e <memmove+0x12>
 800ab4c:	4402      	add	r2, r0
 800ab4e:	4601      	mov	r1, r0
 800ab50:	428a      	cmp	r2, r1
 800ab52:	d100      	bne.n	800ab56 <memmove+0x2a>
 800ab54:	bd10      	pop	{r4, pc}
 800ab56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab5e:	e7f7      	b.n	800ab50 <memmove+0x24>

0800ab60 <__malloc_lock>:
 800ab60:	4801      	ldr	r0, [pc, #4]	; (800ab68 <__malloc_lock+0x8>)
 800ab62:	f000 bc1f 	b.w	800b3a4 <__retarget_lock_acquire_recursive>
 800ab66:	bf00      	nop
 800ab68:	2000436c 	.word	0x2000436c

0800ab6c <__malloc_unlock>:
 800ab6c:	4801      	ldr	r0, [pc, #4]	; (800ab74 <__malloc_unlock+0x8>)
 800ab6e:	f000 bc1a 	b.w	800b3a6 <__retarget_lock_release_recursive>
 800ab72:	bf00      	nop
 800ab74:	2000436c 	.word	0x2000436c

0800ab78 <_realloc_r>:
 800ab78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab7c:	4680      	mov	r8, r0
 800ab7e:	4614      	mov	r4, r2
 800ab80:	460e      	mov	r6, r1
 800ab82:	b921      	cbnz	r1, 800ab8e <_realloc_r+0x16>
 800ab84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab88:	4611      	mov	r1, r2
 800ab8a:	f7ff bdad 	b.w	800a6e8 <_malloc_r>
 800ab8e:	b92a      	cbnz	r2, 800ab9c <_realloc_r+0x24>
 800ab90:	f7ff fd3e 	bl	800a610 <_free_r>
 800ab94:	4625      	mov	r5, r4
 800ab96:	4628      	mov	r0, r5
 800ab98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab9c:	f000 fc6a 	bl	800b474 <_malloc_usable_size_r>
 800aba0:	4284      	cmp	r4, r0
 800aba2:	4607      	mov	r7, r0
 800aba4:	d802      	bhi.n	800abac <_realloc_r+0x34>
 800aba6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800abaa:	d812      	bhi.n	800abd2 <_realloc_r+0x5a>
 800abac:	4621      	mov	r1, r4
 800abae:	4640      	mov	r0, r8
 800abb0:	f7ff fd9a 	bl	800a6e8 <_malloc_r>
 800abb4:	4605      	mov	r5, r0
 800abb6:	2800      	cmp	r0, #0
 800abb8:	d0ed      	beq.n	800ab96 <_realloc_r+0x1e>
 800abba:	42bc      	cmp	r4, r7
 800abbc:	4622      	mov	r2, r4
 800abbe:	4631      	mov	r1, r6
 800abc0:	bf28      	it	cs
 800abc2:	463a      	movcs	r2, r7
 800abc4:	f7fd fe64 	bl	8008890 <memcpy>
 800abc8:	4631      	mov	r1, r6
 800abca:	4640      	mov	r0, r8
 800abcc:	f7ff fd20 	bl	800a610 <_free_r>
 800abd0:	e7e1      	b.n	800ab96 <_realloc_r+0x1e>
 800abd2:	4635      	mov	r5, r6
 800abd4:	e7df      	b.n	800ab96 <_realloc_r+0x1e>

0800abd6 <__sfputc_r>:
 800abd6:	6893      	ldr	r3, [r2, #8]
 800abd8:	3b01      	subs	r3, #1
 800abda:	2b00      	cmp	r3, #0
 800abdc:	b410      	push	{r4}
 800abde:	6093      	str	r3, [r2, #8]
 800abe0:	da08      	bge.n	800abf4 <__sfputc_r+0x1e>
 800abe2:	6994      	ldr	r4, [r2, #24]
 800abe4:	42a3      	cmp	r3, r4
 800abe6:	db01      	blt.n	800abec <__sfputc_r+0x16>
 800abe8:	290a      	cmp	r1, #10
 800abea:	d103      	bne.n	800abf4 <__sfputc_r+0x1e>
 800abec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abf0:	f000 b94a 	b.w	800ae88 <__swbuf_r>
 800abf4:	6813      	ldr	r3, [r2, #0]
 800abf6:	1c58      	adds	r0, r3, #1
 800abf8:	6010      	str	r0, [r2, #0]
 800abfa:	7019      	strb	r1, [r3, #0]
 800abfc:	4608      	mov	r0, r1
 800abfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac02:	4770      	bx	lr

0800ac04 <__sfputs_r>:
 800ac04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac06:	4606      	mov	r6, r0
 800ac08:	460f      	mov	r7, r1
 800ac0a:	4614      	mov	r4, r2
 800ac0c:	18d5      	adds	r5, r2, r3
 800ac0e:	42ac      	cmp	r4, r5
 800ac10:	d101      	bne.n	800ac16 <__sfputs_r+0x12>
 800ac12:	2000      	movs	r0, #0
 800ac14:	e007      	b.n	800ac26 <__sfputs_r+0x22>
 800ac16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac1a:	463a      	mov	r2, r7
 800ac1c:	4630      	mov	r0, r6
 800ac1e:	f7ff ffda 	bl	800abd6 <__sfputc_r>
 800ac22:	1c43      	adds	r3, r0, #1
 800ac24:	d1f3      	bne.n	800ac0e <__sfputs_r+0xa>
 800ac26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ac28 <_vfiprintf_r>:
 800ac28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac2c:	460d      	mov	r5, r1
 800ac2e:	b09d      	sub	sp, #116	; 0x74
 800ac30:	4614      	mov	r4, r2
 800ac32:	4698      	mov	r8, r3
 800ac34:	4606      	mov	r6, r0
 800ac36:	b118      	cbz	r0, 800ac40 <_vfiprintf_r+0x18>
 800ac38:	6983      	ldr	r3, [r0, #24]
 800ac3a:	b90b      	cbnz	r3, 800ac40 <_vfiprintf_r+0x18>
 800ac3c:	f000 fb14 	bl	800b268 <__sinit>
 800ac40:	4b89      	ldr	r3, [pc, #548]	; (800ae68 <_vfiprintf_r+0x240>)
 800ac42:	429d      	cmp	r5, r3
 800ac44:	d11b      	bne.n	800ac7e <_vfiprintf_r+0x56>
 800ac46:	6875      	ldr	r5, [r6, #4]
 800ac48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac4a:	07d9      	lsls	r1, r3, #31
 800ac4c:	d405      	bmi.n	800ac5a <_vfiprintf_r+0x32>
 800ac4e:	89ab      	ldrh	r3, [r5, #12]
 800ac50:	059a      	lsls	r2, r3, #22
 800ac52:	d402      	bmi.n	800ac5a <_vfiprintf_r+0x32>
 800ac54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac56:	f000 fba5 	bl	800b3a4 <__retarget_lock_acquire_recursive>
 800ac5a:	89ab      	ldrh	r3, [r5, #12]
 800ac5c:	071b      	lsls	r3, r3, #28
 800ac5e:	d501      	bpl.n	800ac64 <_vfiprintf_r+0x3c>
 800ac60:	692b      	ldr	r3, [r5, #16]
 800ac62:	b9eb      	cbnz	r3, 800aca0 <_vfiprintf_r+0x78>
 800ac64:	4629      	mov	r1, r5
 800ac66:	4630      	mov	r0, r6
 800ac68:	f000 f96e 	bl	800af48 <__swsetup_r>
 800ac6c:	b1c0      	cbz	r0, 800aca0 <_vfiprintf_r+0x78>
 800ac6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac70:	07dc      	lsls	r4, r3, #31
 800ac72:	d50e      	bpl.n	800ac92 <_vfiprintf_r+0x6a>
 800ac74:	f04f 30ff 	mov.w	r0, #4294967295
 800ac78:	b01d      	add	sp, #116	; 0x74
 800ac7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac7e:	4b7b      	ldr	r3, [pc, #492]	; (800ae6c <_vfiprintf_r+0x244>)
 800ac80:	429d      	cmp	r5, r3
 800ac82:	d101      	bne.n	800ac88 <_vfiprintf_r+0x60>
 800ac84:	68b5      	ldr	r5, [r6, #8]
 800ac86:	e7df      	b.n	800ac48 <_vfiprintf_r+0x20>
 800ac88:	4b79      	ldr	r3, [pc, #484]	; (800ae70 <_vfiprintf_r+0x248>)
 800ac8a:	429d      	cmp	r5, r3
 800ac8c:	bf08      	it	eq
 800ac8e:	68f5      	ldreq	r5, [r6, #12]
 800ac90:	e7da      	b.n	800ac48 <_vfiprintf_r+0x20>
 800ac92:	89ab      	ldrh	r3, [r5, #12]
 800ac94:	0598      	lsls	r0, r3, #22
 800ac96:	d4ed      	bmi.n	800ac74 <_vfiprintf_r+0x4c>
 800ac98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac9a:	f000 fb84 	bl	800b3a6 <__retarget_lock_release_recursive>
 800ac9e:	e7e9      	b.n	800ac74 <_vfiprintf_r+0x4c>
 800aca0:	2300      	movs	r3, #0
 800aca2:	9309      	str	r3, [sp, #36]	; 0x24
 800aca4:	2320      	movs	r3, #32
 800aca6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800acaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800acae:	2330      	movs	r3, #48	; 0x30
 800acb0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ae74 <_vfiprintf_r+0x24c>
 800acb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800acb8:	f04f 0901 	mov.w	r9, #1
 800acbc:	4623      	mov	r3, r4
 800acbe:	469a      	mov	sl, r3
 800acc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acc4:	b10a      	cbz	r2, 800acca <_vfiprintf_r+0xa2>
 800acc6:	2a25      	cmp	r2, #37	; 0x25
 800acc8:	d1f9      	bne.n	800acbe <_vfiprintf_r+0x96>
 800acca:	ebba 0b04 	subs.w	fp, sl, r4
 800acce:	d00b      	beq.n	800ace8 <_vfiprintf_r+0xc0>
 800acd0:	465b      	mov	r3, fp
 800acd2:	4622      	mov	r2, r4
 800acd4:	4629      	mov	r1, r5
 800acd6:	4630      	mov	r0, r6
 800acd8:	f7ff ff94 	bl	800ac04 <__sfputs_r>
 800acdc:	3001      	adds	r0, #1
 800acde:	f000 80aa 	beq.w	800ae36 <_vfiprintf_r+0x20e>
 800ace2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ace4:	445a      	add	r2, fp
 800ace6:	9209      	str	r2, [sp, #36]	; 0x24
 800ace8:	f89a 3000 	ldrb.w	r3, [sl]
 800acec:	2b00      	cmp	r3, #0
 800acee:	f000 80a2 	beq.w	800ae36 <_vfiprintf_r+0x20e>
 800acf2:	2300      	movs	r3, #0
 800acf4:	f04f 32ff 	mov.w	r2, #4294967295
 800acf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acfc:	f10a 0a01 	add.w	sl, sl, #1
 800ad00:	9304      	str	r3, [sp, #16]
 800ad02:	9307      	str	r3, [sp, #28]
 800ad04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad08:	931a      	str	r3, [sp, #104]	; 0x68
 800ad0a:	4654      	mov	r4, sl
 800ad0c:	2205      	movs	r2, #5
 800ad0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad12:	4858      	ldr	r0, [pc, #352]	; (800ae74 <_vfiprintf_r+0x24c>)
 800ad14:	f7f5 fa7c 	bl	8000210 <memchr>
 800ad18:	9a04      	ldr	r2, [sp, #16]
 800ad1a:	b9d8      	cbnz	r0, 800ad54 <_vfiprintf_r+0x12c>
 800ad1c:	06d1      	lsls	r1, r2, #27
 800ad1e:	bf44      	itt	mi
 800ad20:	2320      	movmi	r3, #32
 800ad22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad26:	0713      	lsls	r3, r2, #28
 800ad28:	bf44      	itt	mi
 800ad2a:	232b      	movmi	r3, #43	; 0x2b
 800ad2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad30:	f89a 3000 	ldrb.w	r3, [sl]
 800ad34:	2b2a      	cmp	r3, #42	; 0x2a
 800ad36:	d015      	beq.n	800ad64 <_vfiprintf_r+0x13c>
 800ad38:	9a07      	ldr	r2, [sp, #28]
 800ad3a:	4654      	mov	r4, sl
 800ad3c:	2000      	movs	r0, #0
 800ad3e:	f04f 0c0a 	mov.w	ip, #10
 800ad42:	4621      	mov	r1, r4
 800ad44:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad48:	3b30      	subs	r3, #48	; 0x30
 800ad4a:	2b09      	cmp	r3, #9
 800ad4c:	d94e      	bls.n	800adec <_vfiprintf_r+0x1c4>
 800ad4e:	b1b0      	cbz	r0, 800ad7e <_vfiprintf_r+0x156>
 800ad50:	9207      	str	r2, [sp, #28]
 800ad52:	e014      	b.n	800ad7e <_vfiprintf_r+0x156>
 800ad54:	eba0 0308 	sub.w	r3, r0, r8
 800ad58:	fa09 f303 	lsl.w	r3, r9, r3
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	9304      	str	r3, [sp, #16]
 800ad60:	46a2      	mov	sl, r4
 800ad62:	e7d2      	b.n	800ad0a <_vfiprintf_r+0xe2>
 800ad64:	9b03      	ldr	r3, [sp, #12]
 800ad66:	1d19      	adds	r1, r3, #4
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	9103      	str	r1, [sp, #12]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	bfbb      	ittet	lt
 800ad70:	425b      	neglt	r3, r3
 800ad72:	f042 0202 	orrlt.w	r2, r2, #2
 800ad76:	9307      	strge	r3, [sp, #28]
 800ad78:	9307      	strlt	r3, [sp, #28]
 800ad7a:	bfb8      	it	lt
 800ad7c:	9204      	strlt	r2, [sp, #16]
 800ad7e:	7823      	ldrb	r3, [r4, #0]
 800ad80:	2b2e      	cmp	r3, #46	; 0x2e
 800ad82:	d10c      	bne.n	800ad9e <_vfiprintf_r+0x176>
 800ad84:	7863      	ldrb	r3, [r4, #1]
 800ad86:	2b2a      	cmp	r3, #42	; 0x2a
 800ad88:	d135      	bne.n	800adf6 <_vfiprintf_r+0x1ce>
 800ad8a:	9b03      	ldr	r3, [sp, #12]
 800ad8c:	1d1a      	adds	r2, r3, #4
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	9203      	str	r2, [sp, #12]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	bfb8      	it	lt
 800ad96:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad9a:	3402      	adds	r4, #2
 800ad9c:	9305      	str	r3, [sp, #20]
 800ad9e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ae84 <_vfiprintf_r+0x25c>
 800ada2:	7821      	ldrb	r1, [r4, #0]
 800ada4:	2203      	movs	r2, #3
 800ada6:	4650      	mov	r0, sl
 800ada8:	f7f5 fa32 	bl	8000210 <memchr>
 800adac:	b140      	cbz	r0, 800adc0 <_vfiprintf_r+0x198>
 800adae:	2340      	movs	r3, #64	; 0x40
 800adb0:	eba0 000a 	sub.w	r0, r0, sl
 800adb4:	fa03 f000 	lsl.w	r0, r3, r0
 800adb8:	9b04      	ldr	r3, [sp, #16]
 800adba:	4303      	orrs	r3, r0
 800adbc:	3401      	adds	r4, #1
 800adbe:	9304      	str	r3, [sp, #16]
 800adc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adc4:	482c      	ldr	r0, [pc, #176]	; (800ae78 <_vfiprintf_r+0x250>)
 800adc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800adca:	2206      	movs	r2, #6
 800adcc:	f7f5 fa20 	bl	8000210 <memchr>
 800add0:	2800      	cmp	r0, #0
 800add2:	d03f      	beq.n	800ae54 <_vfiprintf_r+0x22c>
 800add4:	4b29      	ldr	r3, [pc, #164]	; (800ae7c <_vfiprintf_r+0x254>)
 800add6:	bb1b      	cbnz	r3, 800ae20 <_vfiprintf_r+0x1f8>
 800add8:	9b03      	ldr	r3, [sp, #12]
 800adda:	3307      	adds	r3, #7
 800addc:	f023 0307 	bic.w	r3, r3, #7
 800ade0:	3308      	adds	r3, #8
 800ade2:	9303      	str	r3, [sp, #12]
 800ade4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ade6:	443b      	add	r3, r7
 800ade8:	9309      	str	r3, [sp, #36]	; 0x24
 800adea:	e767      	b.n	800acbc <_vfiprintf_r+0x94>
 800adec:	fb0c 3202 	mla	r2, ip, r2, r3
 800adf0:	460c      	mov	r4, r1
 800adf2:	2001      	movs	r0, #1
 800adf4:	e7a5      	b.n	800ad42 <_vfiprintf_r+0x11a>
 800adf6:	2300      	movs	r3, #0
 800adf8:	3401      	adds	r4, #1
 800adfa:	9305      	str	r3, [sp, #20]
 800adfc:	4619      	mov	r1, r3
 800adfe:	f04f 0c0a 	mov.w	ip, #10
 800ae02:	4620      	mov	r0, r4
 800ae04:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae08:	3a30      	subs	r2, #48	; 0x30
 800ae0a:	2a09      	cmp	r2, #9
 800ae0c:	d903      	bls.n	800ae16 <_vfiprintf_r+0x1ee>
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d0c5      	beq.n	800ad9e <_vfiprintf_r+0x176>
 800ae12:	9105      	str	r1, [sp, #20]
 800ae14:	e7c3      	b.n	800ad9e <_vfiprintf_r+0x176>
 800ae16:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae1a:	4604      	mov	r4, r0
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	e7f0      	b.n	800ae02 <_vfiprintf_r+0x1da>
 800ae20:	ab03      	add	r3, sp, #12
 800ae22:	9300      	str	r3, [sp, #0]
 800ae24:	462a      	mov	r2, r5
 800ae26:	4b16      	ldr	r3, [pc, #88]	; (800ae80 <_vfiprintf_r+0x258>)
 800ae28:	a904      	add	r1, sp, #16
 800ae2a:	4630      	mov	r0, r6
 800ae2c:	f7fd fde6 	bl	80089fc <_printf_float>
 800ae30:	4607      	mov	r7, r0
 800ae32:	1c78      	adds	r0, r7, #1
 800ae34:	d1d6      	bne.n	800ade4 <_vfiprintf_r+0x1bc>
 800ae36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae38:	07d9      	lsls	r1, r3, #31
 800ae3a:	d405      	bmi.n	800ae48 <_vfiprintf_r+0x220>
 800ae3c:	89ab      	ldrh	r3, [r5, #12]
 800ae3e:	059a      	lsls	r2, r3, #22
 800ae40:	d402      	bmi.n	800ae48 <_vfiprintf_r+0x220>
 800ae42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae44:	f000 faaf 	bl	800b3a6 <__retarget_lock_release_recursive>
 800ae48:	89ab      	ldrh	r3, [r5, #12]
 800ae4a:	065b      	lsls	r3, r3, #25
 800ae4c:	f53f af12 	bmi.w	800ac74 <_vfiprintf_r+0x4c>
 800ae50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae52:	e711      	b.n	800ac78 <_vfiprintf_r+0x50>
 800ae54:	ab03      	add	r3, sp, #12
 800ae56:	9300      	str	r3, [sp, #0]
 800ae58:	462a      	mov	r2, r5
 800ae5a:	4b09      	ldr	r3, [pc, #36]	; (800ae80 <_vfiprintf_r+0x258>)
 800ae5c:	a904      	add	r1, sp, #16
 800ae5e:	4630      	mov	r0, r6
 800ae60:	f7fe f870 	bl	8008f44 <_printf_i>
 800ae64:	e7e4      	b.n	800ae30 <_vfiprintf_r+0x208>
 800ae66:	bf00      	nop
 800ae68:	0800bd24 	.word	0x0800bd24
 800ae6c:	0800bd44 	.word	0x0800bd44
 800ae70:	0800bd04 	.word	0x0800bd04
 800ae74:	0800bbac 	.word	0x0800bbac
 800ae78:	0800bbb6 	.word	0x0800bbb6
 800ae7c:	080089fd 	.word	0x080089fd
 800ae80:	0800ac05 	.word	0x0800ac05
 800ae84:	0800bbb2 	.word	0x0800bbb2

0800ae88 <__swbuf_r>:
 800ae88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae8a:	460e      	mov	r6, r1
 800ae8c:	4614      	mov	r4, r2
 800ae8e:	4605      	mov	r5, r0
 800ae90:	b118      	cbz	r0, 800ae9a <__swbuf_r+0x12>
 800ae92:	6983      	ldr	r3, [r0, #24]
 800ae94:	b90b      	cbnz	r3, 800ae9a <__swbuf_r+0x12>
 800ae96:	f000 f9e7 	bl	800b268 <__sinit>
 800ae9a:	4b21      	ldr	r3, [pc, #132]	; (800af20 <__swbuf_r+0x98>)
 800ae9c:	429c      	cmp	r4, r3
 800ae9e:	d12b      	bne.n	800aef8 <__swbuf_r+0x70>
 800aea0:	686c      	ldr	r4, [r5, #4]
 800aea2:	69a3      	ldr	r3, [r4, #24]
 800aea4:	60a3      	str	r3, [r4, #8]
 800aea6:	89a3      	ldrh	r3, [r4, #12]
 800aea8:	071a      	lsls	r2, r3, #28
 800aeaa:	d52f      	bpl.n	800af0c <__swbuf_r+0x84>
 800aeac:	6923      	ldr	r3, [r4, #16]
 800aeae:	b36b      	cbz	r3, 800af0c <__swbuf_r+0x84>
 800aeb0:	6923      	ldr	r3, [r4, #16]
 800aeb2:	6820      	ldr	r0, [r4, #0]
 800aeb4:	1ac0      	subs	r0, r0, r3
 800aeb6:	6963      	ldr	r3, [r4, #20]
 800aeb8:	b2f6      	uxtb	r6, r6
 800aeba:	4283      	cmp	r3, r0
 800aebc:	4637      	mov	r7, r6
 800aebe:	dc04      	bgt.n	800aeca <__swbuf_r+0x42>
 800aec0:	4621      	mov	r1, r4
 800aec2:	4628      	mov	r0, r5
 800aec4:	f000 f93c 	bl	800b140 <_fflush_r>
 800aec8:	bb30      	cbnz	r0, 800af18 <__swbuf_r+0x90>
 800aeca:	68a3      	ldr	r3, [r4, #8]
 800aecc:	3b01      	subs	r3, #1
 800aece:	60a3      	str	r3, [r4, #8]
 800aed0:	6823      	ldr	r3, [r4, #0]
 800aed2:	1c5a      	adds	r2, r3, #1
 800aed4:	6022      	str	r2, [r4, #0]
 800aed6:	701e      	strb	r6, [r3, #0]
 800aed8:	6963      	ldr	r3, [r4, #20]
 800aeda:	3001      	adds	r0, #1
 800aedc:	4283      	cmp	r3, r0
 800aede:	d004      	beq.n	800aeea <__swbuf_r+0x62>
 800aee0:	89a3      	ldrh	r3, [r4, #12]
 800aee2:	07db      	lsls	r3, r3, #31
 800aee4:	d506      	bpl.n	800aef4 <__swbuf_r+0x6c>
 800aee6:	2e0a      	cmp	r6, #10
 800aee8:	d104      	bne.n	800aef4 <__swbuf_r+0x6c>
 800aeea:	4621      	mov	r1, r4
 800aeec:	4628      	mov	r0, r5
 800aeee:	f000 f927 	bl	800b140 <_fflush_r>
 800aef2:	b988      	cbnz	r0, 800af18 <__swbuf_r+0x90>
 800aef4:	4638      	mov	r0, r7
 800aef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aef8:	4b0a      	ldr	r3, [pc, #40]	; (800af24 <__swbuf_r+0x9c>)
 800aefa:	429c      	cmp	r4, r3
 800aefc:	d101      	bne.n	800af02 <__swbuf_r+0x7a>
 800aefe:	68ac      	ldr	r4, [r5, #8]
 800af00:	e7cf      	b.n	800aea2 <__swbuf_r+0x1a>
 800af02:	4b09      	ldr	r3, [pc, #36]	; (800af28 <__swbuf_r+0xa0>)
 800af04:	429c      	cmp	r4, r3
 800af06:	bf08      	it	eq
 800af08:	68ec      	ldreq	r4, [r5, #12]
 800af0a:	e7ca      	b.n	800aea2 <__swbuf_r+0x1a>
 800af0c:	4621      	mov	r1, r4
 800af0e:	4628      	mov	r0, r5
 800af10:	f000 f81a 	bl	800af48 <__swsetup_r>
 800af14:	2800      	cmp	r0, #0
 800af16:	d0cb      	beq.n	800aeb0 <__swbuf_r+0x28>
 800af18:	f04f 37ff 	mov.w	r7, #4294967295
 800af1c:	e7ea      	b.n	800aef4 <__swbuf_r+0x6c>
 800af1e:	bf00      	nop
 800af20:	0800bd24 	.word	0x0800bd24
 800af24:	0800bd44 	.word	0x0800bd44
 800af28:	0800bd04 	.word	0x0800bd04

0800af2c <__ascii_wctomb>:
 800af2c:	b149      	cbz	r1, 800af42 <__ascii_wctomb+0x16>
 800af2e:	2aff      	cmp	r2, #255	; 0xff
 800af30:	bf85      	ittet	hi
 800af32:	238a      	movhi	r3, #138	; 0x8a
 800af34:	6003      	strhi	r3, [r0, #0]
 800af36:	700a      	strbls	r2, [r1, #0]
 800af38:	f04f 30ff 	movhi.w	r0, #4294967295
 800af3c:	bf98      	it	ls
 800af3e:	2001      	movls	r0, #1
 800af40:	4770      	bx	lr
 800af42:	4608      	mov	r0, r1
 800af44:	4770      	bx	lr
	...

0800af48 <__swsetup_r>:
 800af48:	4b32      	ldr	r3, [pc, #200]	; (800b014 <__swsetup_r+0xcc>)
 800af4a:	b570      	push	{r4, r5, r6, lr}
 800af4c:	681d      	ldr	r5, [r3, #0]
 800af4e:	4606      	mov	r6, r0
 800af50:	460c      	mov	r4, r1
 800af52:	b125      	cbz	r5, 800af5e <__swsetup_r+0x16>
 800af54:	69ab      	ldr	r3, [r5, #24]
 800af56:	b913      	cbnz	r3, 800af5e <__swsetup_r+0x16>
 800af58:	4628      	mov	r0, r5
 800af5a:	f000 f985 	bl	800b268 <__sinit>
 800af5e:	4b2e      	ldr	r3, [pc, #184]	; (800b018 <__swsetup_r+0xd0>)
 800af60:	429c      	cmp	r4, r3
 800af62:	d10f      	bne.n	800af84 <__swsetup_r+0x3c>
 800af64:	686c      	ldr	r4, [r5, #4]
 800af66:	89a3      	ldrh	r3, [r4, #12]
 800af68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af6c:	0719      	lsls	r1, r3, #28
 800af6e:	d42c      	bmi.n	800afca <__swsetup_r+0x82>
 800af70:	06dd      	lsls	r5, r3, #27
 800af72:	d411      	bmi.n	800af98 <__swsetup_r+0x50>
 800af74:	2309      	movs	r3, #9
 800af76:	6033      	str	r3, [r6, #0]
 800af78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800af7c:	81a3      	strh	r3, [r4, #12]
 800af7e:	f04f 30ff 	mov.w	r0, #4294967295
 800af82:	e03e      	b.n	800b002 <__swsetup_r+0xba>
 800af84:	4b25      	ldr	r3, [pc, #148]	; (800b01c <__swsetup_r+0xd4>)
 800af86:	429c      	cmp	r4, r3
 800af88:	d101      	bne.n	800af8e <__swsetup_r+0x46>
 800af8a:	68ac      	ldr	r4, [r5, #8]
 800af8c:	e7eb      	b.n	800af66 <__swsetup_r+0x1e>
 800af8e:	4b24      	ldr	r3, [pc, #144]	; (800b020 <__swsetup_r+0xd8>)
 800af90:	429c      	cmp	r4, r3
 800af92:	bf08      	it	eq
 800af94:	68ec      	ldreq	r4, [r5, #12]
 800af96:	e7e6      	b.n	800af66 <__swsetup_r+0x1e>
 800af98:	0758      	lsls	r0, r3, #29
 800af9a:	d512      	bpl.n	800afc2 <__swsetup_r+0x7a>
 800af9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af9e:	b141      	cbz	r1, 800afb2 <__swsetup_r+0x6a>
 800afa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afa4:	4299      	cmp	r1, r3
 800afa6:	d002      	beq.n	800afae <__swsetup_r+0x66>
 800afa8:	4630      	mov	r0, r6
 800afaa:	f7ff fb31 	bl	800a610 <_free_r>
 800afae:	2300      	movs	r3, #0
 800afb0:	6363      	str	r3, [r4, #52]	; 0x34
 800afb2:	89a3      	ldrh	r3, [r4, #12]
 800afb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800afb8:	81a3      	strh	r3, [r4, #12]
 800afba:	2300      	movs	r3, #0
 800afbc:	6063      	str	r3, [r4, #4]
 800afbe:	6923      	ldr	r3, [r4, #16]
 800afc0:	6023      	str	r3, [r4, #0]
 800afc2:	89a3      	ldrh	r3, [r4, #12]
 800afc4:	f043 0308 	orr.w	r3, r3, #8
 800afc8:	81a3      	strh	r3, [r4, #12]
 800afca:	6923      	ldr	r3, [r4, #16]
 800afcc:	b94b      	cbnz	r3, 800afe2 <__swsetup_r+0x9a>
 800afce:	89a3      	ldrh	r3, [r4, #12]
 800afd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800afd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afd8:	d003      	beq.n	800afe2 <__swsetup_r+0x9a>
 800afda:	4621      	mov	r1, r4
 800afdc:	4630      	mov	r0, r6
 800afde:	f000 fa09 	bl	800b3f4 <__smakebuf_r>
 800afe2:	89a0      	ldrh	r0, [r4, #12]
 800afe4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800afe8:	f010 0301 	ands.w	r3, r0, #1
 800afec:	d00a      	beq.n	800b004 <__swsetup_r+0xbc>
 800afee:	2300      	movs	r3, #0
 800aff0:	60a3      	str	r3, [r4, #8]
 800aff2:	6963      	ldr	r3, [r4, #20]
 800aff4:	425b      	negs	r3, r3
 800aff6:	61a3      	str	r3, [r4, #24]
 800aff8:	6923      	ldr	r3, [r4, #16]
 800affa:	b943      	cbnz	r3, 800b00e <__swsetup_r+0xc6>
 800affc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b000:	d1ba      	bne.n	800af78 <__swsetup_r+0x30>
 800b002:	bd70      	pop	{r4, r5, r6, pc}
 800b004:	0781      	lsls	r1, r0, #30
 800b006:	bf58      	it	pl
 800b008:	6963      	ldrpl	r3, [r4, #20]
 800b00a:	60a3      	str	r3, [r4, #8]
 800b00c:	e7f4      	b.n	800aff8 <__swsetup_r+0xb0>
 800b00e:	2000      	movs	r0, #0
 800b010:	e7f7      	b.n	800b002 <__swsetup_r+0xba>
 800b012:	bf00      	nop
 800b014:	20000010 	.word	0x20000010
 800b018:	0800bd24 	.word	0x0800bd24
 800b01c:	0800bd44 	.word	0x0800bd44
 800b020:	0800bd04 	.word	0x0800bd04

0800b024 <abort>:
 800b024:	b508      	push	{r3, lr}
 800b026:	2006      	movs	r0, #6
 800b028:	f000 fa54 	bl	800b4d4 <raise>
 800b02c:	2001      	movs	r0, #1
 800b02e:	f7f7 f9c9 	bl	80023c4 <_exit>
	...

0800b034 <__sflush_r>:
 800b034:	898a      	ldrh	r2, [r1, #12]
 800b036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b03a:	4605      	mov	r5, r0
 800b03c:	0710      	lsls	r0, r2, #28
 800b03e:	460c      	mov	r4, r1
 800b040:	d458      	bmi.n	800b0f4 <__sflush_r+0xc0>
 800b042:	684b      	ldr	r3, [r1, #4]
 800b044:	2b00      	cmp	r3, #0
 800b046:	dc05      	bgt.n	800b054 <__sflush_r+0x20>
 800b048:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	dc02      	bgt.n	800b054 <__sflush_r+0x20>
 800b04e:	2000      	movs	r0, #0
 800b050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b054:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b056:	2e00      	cmp	r6, #0
 800b058:	d0f9      	beq.n	800b04e <__sflush_r+0x1a>
 800b05a:	2300      	movs	r3, #0
 800b05c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b060:	682f      	ldr	r7, [r5, #0]
 800b062:	602b      	str	r3, [r5, #0]
 800b064:	d032      	beq.n	800b0cc <__sflush_r+0x98>
 800b066:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b068:	89a3      	ldrh	r3, [r4, #12]
 800b06a:	075a      	lsls	r2, r3, #29
 800b06c:	d505      	bpl.n	800b07a <__sflush_r+0x46>
 800b06e:	6863      	ldr	r3, [r4, #4]
 800b070:	1ac0      	subs	r0, r0, r3
 800b072:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b074:	b10b      	cbz	r3, 800b07a <__sflush_r+0x46>
 800b076:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b078:	1ac0      	subs	r0, r0, r3
 800b07a:	2300      	movs	r3, #0
 800b07c:	4602      	mov	r2, r0
 800b07e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b080:	6a21      	ldr	r1, [r4, #32]
 800b082:	4628      	mov	r0, r5
 800b084:	47b0      	blx	r6
 800b086:	1c43      	adds	r3, r0, #1
 800b088:	89a3      	ldrh	r3, [r4, #12]
 800b08a:	d106      	bne.n	800b09a <__sflush_r+0x66>
 800b08c:	6829      	ldr	r1, [r5, #0]
 800b08e:	291d      	cmp	r1, #29
 800b090:	d82c      	bhi.n	800b0ec <__sflush_r+0xb8>
 800b092:	4a2a      	ldr	r2, [pc, #168]	; (800b13c <__sflush_r+0x108>)
 800b094:	40ca      	lsrs	r2, r1
 800b096:	07d6      	lsls	r6, r2, #31
 800b098:	d528      	bpl.n	800b0ec <__sflush_r+0xb8>
 800b09a:	2200      	movs	r2, #0
 800b09c:	6062      	str	r2, [r4, #4]
 800b09e:	04d9      	lsls	r1, r3, #19
 800b0a0:	6922      	ldr	r2, [r4, #16]
 800b0a2:	6022      	str	r2, [r4, #0]
 800b0a4:	d504      	bpl.n	800b0b0 <__sflush_r+0x7c>
 800b0a6:	1c42      	adds	r2, r0, #1
 800b0a8:	d101      	bne.n	800b0ae <__sflush_r+0x7a>
 800b0aa:	682b      	ldr	r3, [r5, #0]
 800b0ac:	b903      	cbnz	r3, 800b0b0 <__sflush_r+0x7c>
 800b0ae:	6560      	str	r0, [r4, #84]	; 0x54
 800b0b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0b2:	602f      	str	r7, [r5, #0]
 800b0b4:	2900      	cmp	r1, #0
 800b0b6:	d0ca      	beq.n	800b04e <__sflush_r+0x1a>
 800b0b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0bc:	4299      	cmp	r1, r3
 800b0be:	d002      	beq.n	800b0c6 <__sflush_r+0x92>
 800b0c0:	4628      	mov	r0, r5
 800b0c2:	f7ff faa5 	bl	800a610 <_free_r>
 800b0c6:	2000      	movs	r0, #0
 800b0c8:	6360      	str	r0, [r4, #52]	; 0x34
 800b0ca:	e7c1      	b.n	800b050 <__sflush_r+0x1c>
 800b0cc:	6a21      	ldr	r1, [r4, #32]
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	4628      	mov	r0, r5
 800b0d2:	47b0      	blx	r6
 800b0d4:	1c41      	adds	r1, r0, #1
 800b0d6:	d1c7      	bne.n	800b068 <__sflush_r+0x34>
 800b0d8:	682b      	ldr	r3, [r5, #0]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d0c4      	beq.n	800b068 <__sflush_r+0x34>
 800b0de:	2b1d      	cmp	r3, #29
 800b0e0:	d001      	beq.n	800b0e6 <__sflush_r+0xb2>
 800b0e2:	2b16      	cmp	r3, #22
 800b0e4:	d101      	bne.n	800b0ea <__sflush_r+0xb6>
 800b0e6:	602f      	str	r7, [r5, #0]
 800b0e8:	e7b1      	b.n	800b04e <__sflush_r+0x1a>
 800b0ea:	89a3      	ldrh	r3, [r4, #12]
 800b0ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0f0:	81a3      	strh	r3, [r4, #12]
 800b0f2:	e7ad      	b.n	800b050 <__sflush_r+0x1c>
 800b0f4:	690f      	ldr	r7, [r1, #16]
 800b0f6:	2f00      	cmp	r7, #0
 800b0f8:	d0a9      	beq.n	800b04e <__sflush_r+0x1a>
 800b0fa:	0793      	lsls	r3, r2, #30
 800b0fc:	680e      	ldr	r6, [r1, #0]
 800b0fe:	bf08      	it	eq
 800b100:	694b      	ldreq	r3, [r1, #20]
 800b102:	600f      	str	r7, [r1, #0]
 800b104:	bf18      	it	ne
 800b106:	2300      	movne	r3, #0
 800b108:	eba6 0807 	sub.w	r8, r6, r7
 800b10c:	608b      	str	r3, [r1, #8]
 800b10e:	f1b8 0f00 	cmp.w	r8, #0
 800b112:	dd9c      	ble.n	800b04e <__sflush_r+0x1a>
 800b114:	6a21      	ldr	r1, [r4, #32]
 800b116:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b118:	4643      	mov	r3, r8
 800b11a:	463a      	mov	r2, r7
 800b11c:	4628      	mov	r0, r5
 800b11e:	47b0      	blx	r6
 800b120:	2800      	cmp	r0, #0
 800b122:	dc06      	bgt.n	800b132 <__sflush_r+0xfe>
 800b124:	89a3      	ldrh	r3, [r4, #12]
 800b126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b12a:	81a3      	strh	r3, [r4, #12]
 800b12c:	f04f 30ff 	mov.w	r0, #4294967295
 800b130:	e78e      	b.n	800b050 <__sflush_r+0x1c>
 800b132:	4407      	add	r7, r0
 800b134:	eba8 0800 	sub.w	r8, r8, r0
 800b138:	e7e9      	b.n	800b10e <__sflush_r+0xda>
 800b13a:	bf00      	nop
 800b13c:	20400001 	.word	0x20400001

0800b140 <_fflush_r>:
 800b140:	b538      	push	{r3, r4, r5, lr}
 800b142:	690b      	ldr	r3, [r1, #16]
 800b144:	4605      	mov	r5, r0
 800b146:	460c      	mov	r4, r1
 800b148:	b913      	cbnz	r3, 800b150 <_fflush_r+0x10>
 800b14a:	2500      	movs	r5, #0
 800b14c:	4628      	mov	r0, r5
 800b14e:	bd38      	pop	{r3, r4, r5, pc}
 800b150:	b118      	cbz	r0, 800b15a <_fflush_r+0x1a>
 800b152:	6983      	ldr	r3, [r0, #24]
 800b154:	b90b      	cbnz	r3, 800b15a <_fflush_r+0x1a>
 800b156:	f000 f887 	bl	800b268 <__sinit>
 800b15a:	4b14      	ldr	r3, [pc, #80]	; (800b1ac <_fflush_r+0x6c>)
 800b15c:	429c      	cmp	r4, r3
 800b15e:	d11b      	bne.n	800b198 <_fflush_r+0x58>
 800b160:	686c      	ldr	r4, [r5, #4]
 800b162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d0ef      	beq.n	800b14a <_fflush_r+0xa>
 800b16a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b16c:	07d0      	lsls	r0, r2, #31
 800b16e:	d404      	bmi.n	800b17a <_fflush_r+0x3a>
 800b170:	0599      	lsls	r1, r3, #22
 800b172:	d402      	bmi.n	800b17a <_fflush_r+0x3a>
 800b174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b176:	f000 f915 	bl	800b3a4 <__retarget_lock_acquire_recursive>
 800b17a:	4628      	mov	r0, r5
 800b17c:	4621      	mov	r1, r4
 800b17e:	f7ff ff59 	bl	800b034 <__sflush_r>
 800b182:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b184:	07da      	lsls	r2, r3, #31
 800b186:	4605      	mov	r5, r0
 800b188:	d4e0      	bmi.n	800b14c <_fflush_r+0xc>
 800b18a:	89a3      	ldrh	r3, [r4, #12]
 800b18c:	059b      	lsls	r3, r3, #22
 800b18e:	d4dd      	bmi.n	800b14c <_fflush_r+0xc>
 800b190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b192:	f000 f908 	bl	800b3a6 <__retarget_lock_release_recursive>
 800b196:	e7d9      	b.n	800b14c <_fflush_r+0xc>
 800b198:	4b05      	ldr	r3, [pc, #20]	; (800b1b0 <_fflush_r+0x70>)
 800b19a:	429c      	cmp	r4, r3
 800b19c:	d101      	bne.n	800b1a2 <_fflush_r+0x62>
 800b19e:	68ac      	ldr	r4, [r5, #8]
 800b1a0:	e7df      	b.n	800b162 <_fflush_r+0x22>
 800b1a2:	4b04      	ldr	r3, [pc, #16]	; (800b1b4 <_fflush_r+0x74>)
 800b1a4:	429c      	cmp	r4, r3
 800b1a6:	bf08      	it	eq
 800b1a8:	68ec      	ldreq	r4, [r5, #12]
 800b1aa:	e7da      	b.n	800b162 <_fflush_r+0x22>
 800b1ac:	0800bd24 	.word	0x0800bd24
 800b1b0:	0800bd44 	.word	0x0800bd44
 800b1b4:	0800bd04 	.word	0x0800bd04

0800b1b8 <std>:
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	b510      	push	{r4, lr}
 800b1bc:	4604      	mov	r4, r0
 800b1be:	e9c0 3300 	strd	r3, r3, [r0]
 800b1c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b1c6:	6083      	str	r3, [r0, #8]
 800b1c8:	8181      	strh	r1, [r0, #12]
 800b1ca:	6643      	str	r3, [r0, #100]	; 0x64
 800b1cc:	81c2      	strh	r2, [r0, #14]
 800b1ce:	6183      	str	r3, [r0, #24]
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	2208      	movs	r2, #8
 800b1d4:	305c      	adds	r0, #92	; 0x5c
 800b1d6:	f7fd fb69 	bl	80088ac <memset>
 800b1da:	4b05      	ldr	r3, [pc, #20]	; (800b1f0 <std+0x38>)
 800b1dc:	6263      	str	r3, [r4, #36]	; 0x24
 800b1de:	4b05      	ldr	r3, [pc, #20]	; (800b1f4 <std+0x3c>)
 800b1e0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b1e2:	4b05      	ldr	r3, [pc, #20]	; (800b1f8 <std+0x40>)
 800b1e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b1e6:	4b05      	ldr	r3, [pc, #20]	; (800b1fc <std+0x44>)
 800b1e8:	6224      	str	r4, [r4, #32]
 800b1ea:	6323      	str	r3, [r4, #48]	; 0x30
 800b1ec:	bd10      	pop	{r4, pc}
 800b1ee:	bf00      	nop
 800b1f0:	0800b50d 	.word	0x0800b50d
 800b1f4:	0800b52f 	.word	0x0800b52f
 800b1f8:	0800b567 	.word	0x0800b567
 800b1fc:	0800b58b 	.word	0x0800b58b

0800b200 <_cleanup_r>:
 800b200:	4901      	ldr	r1, [pc, #4]	; (800b208 <_cleanup_r+0x8>)
 800b202:	f000 b8af 	b.w	800b364 <_fwalk_reent>
 800b206:	bf00      	nop
 800b208:	0800b141 	.word	0x0800b141

0800b20c <__sfmoreglue>:
 800b20c:	b570      	push	{r4, r5, r6, lr}
 800b20e:	2268      	movs	r2, #104	; 0x68
 800b210:	1e4d      	subs	r5, r1, #1
 800b212:	4355      	muls	r5, r2
 800b214:	460e      	mov	r6, r1
 800b216:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b21a:	f7ff fa65 	bl	800a6e8 <_malloc_r>
 800b21e:	4604      	mov	r4, r0
 800b220:	b140      	cbz	r0, 800b234 <__sfmoreglue+0x28>
 800b222:	2100      	movs	r1, #0
 800b224:	e9c0 1600 	strd	r1, r6, [r0]
 800b228:	300c      	adds	r0, #12
 800b22a:	60a0      	str	r0, [r4, #8]
 800b22c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b230:	f7fd fb3c 	bl	80088ac <memset>
 800b234:	4620      	mov	r0, r4
 800b236:	bd70      	pop	{r4, r5, r6, pc}

0800b238 <__sfp_lock_acquire>:
 800b238:	4801      	ldr	r0, [pc, #4]	; (800b240 <__sfp_lock_acquire+0x8>)
 800b23a:	f000 b8b3 	b.w	800b3a4 <__retarget_lock_acquire_recursive>
 800b23e:	bf00      	nop
 800b240:	2000436d 	.word	0x2000436d

0800b244 <__sfp_lock_release>:
 800b244:	4801      	ldr	r0, [pc, #4]	; (800b24c <__sfp_lock_release+0x8>)
 800b246:	f000 b8ae 	b.w	800b3a6 <__retarget_lock_release_recursive>
 800b24a:	bf00      	nop
 800b24c:	2000436d 	.word	0x2000436d

0800b250 <__sinit_lock_acquire>:
 800b250:	4801      	ldr	r0, [pc, #4]	; (800b258 <__sinit_lock_acquire+0x8>)
 800b252:	f000 b8a7 	b.w	800b3a4 <__retarget_lock_acquire_recursive>
 800b256:	bf00      	nop
 800b258:	2000436e 	.word	0x2000436e

0800b25c <__sinit_lock_release>:
 800b25c:	4801      	ldr	r0, [pc, #4]	; (800b264 <__sinit_lock_release+0x8>)
 800b25e:	f000 b8a2 	b.w	800b3a6 <__retarget_lock_release_recursive>
 800b262:	bf00      	nop
 800b264:	2000436e 	.word	0x2000436e

0800b268 <__sinit>:
 800b268:	b510      	push	{r4, lr}
 800b26a:	4604      	mov	r4, r0
 800b26c:	f7ff fff0 	bl	800b250 <__sinit_lock_acquire>
 800b270:	69a3      	ldr	r3, [r4, #24]
 800b272:	b11b      	cbz	r3, 800b27c <__sinit+0x14>
 800b274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b278:	f7ff bff0 	b.w	800b25c <__sinit_lock_release>
 800b27c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b280:	6523      	str	r3, [r4, #80]	; 0x50
 800b282:	4b13      	ldr	r3, [pc, #76]	; (800b2d0 <__sinit+0x68>)
 800b284:	4a13      	ldr	r2, [pc, #76]	; (800b2d4 <__sinit+0x6c>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	62a2      	str	r2, [r4, #40]	; 0x28
 800b28a:	42a3      	cmp	r3, r4
 800b28c:	bf04      	itt	eq
 800b28e:	2301      	moveq	r3, #1
 800b290:	61a3      	streq	r3, [r4, #24]
 800b292:	4620      	mov	r0, r4
 800b294:	f000 f820 	bl	800b2d8 <__sfp>
 800b298:	6060      	str	r0, [r4, #4]
 800b29a:	4620      	mov	r0, r4
 800b29c:	f000 f81c 	bl	800b2d8 <__sfp>
 800b2a0:	60a0      	str	r0, [r4, #8]
 800b2a2:	4620      	mov	r0, r4
 800b2a4:	f000 f818 	bl	800b2d8 <__sfp>
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	60e0      	str	r0, [r4, #12]
 800b2ac:	2104      	movs	r1, #4
 800b2ae:	6860      	ldr	r0, [r4, #4]
 800b2b0:	f7ff ff82 	bl	800b1b8 <std>
 800b2b4:	68a0      	ldr	r0, [r4, #8]
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	2109      	movs	r1, #9
 800b2ba:	f7ff ff7d 	bl	800b1b8 <std>
 800b2be:	68e0      	ldr	r0, [r4, #12]
 800b2c0:	2202      	movs	r2, #2
 800b2c2:	2112      	movs	r1, #18
 800b2c4:	f7ff ff78 	bl	800b1b8 <std>
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	61a3      	str	r3, [r4, #24]
 800b2cc:	e7d2      	b.n	800b274 <__sinit+0xc>
 800b2ce:	bf00      	nop
 800b2d0:	0800b988 	.word	0x0800b988
 800b2d4:	0800b201 	.word	0x0800b201

0800b2d8 <__sfp>:
 800b2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2da:	4607      	mov	r7, r0
 800b2dc:	f7ff ffac 	bl	800b238 <__sfp_lock_acquire>
 800b2e0:	4b1e      	ldr	r3, [pc, #120]	; (800b35c <__sfp+0x84>)
 800b2e2:	681e      	ldr	r6, [r3, #0]
 800b2e4:	69b3      	ldr	r3, [r6, #24]
 800b2e6:	b913      	cbnz	r3, 800b2ee <__sfp+0x16>
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	f7ff ffbd 	bl	800b268 <__sinit>
 800b2ee:	3648      	adds	r6, #72	; 0x48
 800b2f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b2f4:	3b01      	subs	r3, #1
 800b2f6:	d503      	bpl.n	800b300 <__sfp+0x28>
 800b2f8:	6833      	ldr	r3, [r6, #0]
 800b2fa:	b30b      	cbz	r3, 800b340 <__sfp+0x68>
 800b2fc:	6836      	ldr	r6, [r6, #0]
 800b2fe:	e7f7      	b.n	800b2f0 <__sfp+0x18>
 800b300:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b304:	b9d5      	cbnz	r5, 800b33c <__sfp+0x64>
 800b306:	4b16      	ldr	r3, [pc, #88]	; (800b360 <__sfp+0x88>)
 800b308:	60e3      	str	r3, [r4, #12]
 800b30a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b30e:	6665      	str	r5, [r4, #100]	; 0x64
 800b310:	f000 f847 	bl	800b3a2 <__retarget_lock_init_recursive>
 800b314:	f7ff ff96 	bl	800b244 <__sfp_lock_release>
 800b318:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b31c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b320:	6025      	str	r5, [r4, #0]
 800b322:	61a5      	str	r5, [r4, #24]
 800b324:	2208      	movs	r2, #8
 800b326:	4629      	mov	r1, r5
 800b328:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b32c:	f7fd fabe 	bl	80088ac <memset>
 800b330:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b334:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b338:	4620      	mov	r0, r4
 800b33a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b33c:	3468      	adds	r4, #104	; 0x68
 800b33e:	e7d9      	b.n	800b2f4 <__sfp+0x1c>
 800b340:	2104      	movs	r1, #4
 800b342:	4638      	mov	r0, r7
 800b344:	f7ff ff62 	bl	800b20c <__sfmoreglue>
 800b348:	4604      	mov	r4, r0
 800b34a:	6030      	str	r0, [r6, #0]
 800b34c:	2800      	cmp	r0, #0
 800b34e:	d1d5      	bne.n	800b2fc <__sfp+0x24>
 800b350:	f7ff ff78 	bl	800b244 <__sfp_lock_release>
 800b354:	230c      	movs	r3, #12
 800b356:	603b      	str	r3, [r7, #0]
 800b358:	e7ee      	b.n	800b338 <__sfp+0x60>
 800b35a:	bf00      	nop
 800b35c:	0800b988 	.word	0x0800b988
 800b360:	ffff0001 	.word	0xffff0001

0800b364 <_fwalk_reent>:
 800b364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b368:	4606      	mov	r6, r0
 800b36a:	4688      	mov	r8, r1
 800b36c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b370:	2700      	movs	r7, #0
 800b372:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b376:	f1b9 0901 	subs.w	r9, r9, #1
 800b37a:	d505      	bpl.n	800b388 <_fwalk_reent+0x24>
 800b37c:	6824      	ldr	r4, [r4, #0]
 800b37e:	2c00      	cmp	r4, #0
 800b380:	d1f7      	bne.n	800b372 <_fwalk_reent+0xe>
 800b382:	4638      	mov	r0, r7
 800b384:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b388:	89ab      	ldrh	r3, [r5, #12]
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	d907      	bls.n	800b39e <_fwalk_reent+0x3a>
 800b38e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b392:	3301      	adds	r3, #1
 800b394:	d003      	beq.n	800b39e <_fwalk_reent+0x3a>
 800b396:	4629      	mov	r1, r5
 800b398:	4630      	mov	r0, r6
 800b39a:	47c0      	blx	r8
 800b39c:	4307      	orrs	r7, r0
 800b39e:	3568      	adds	r5, #104	; 0x68
 800b3a0:	e7e9      	b.n	800b376 <_fwalk_reent+0x12>

0800b3a2 <__retarget_lock_init_recursive>:
 800b3a2:	4770      	bx	lr

0800b3a4 <__retarget_lock_acquire_recursive>:
 800b3a4:	4770      	bx	lr

0800b3a6 <__retarget_lock_release_recursive>:
 800b3a6:	4770      	bx	lr

0800b3a8 <__swhatbuf_r>:
 800b3a8:	b570      	push	{r4, r5, r6, lr}
 800b3aa:	460e      	mov	r6, r1
 800b3ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3b0:	2900      	cmp	r1, #0
 800b3b2:	b096      	sub	sp, #88	; 0x58
 800b3b4:	4614      	mov	r4, r2
 800b3b6:	461d      	mov	r5, r3
 800b3b8:	da08      	bge.n	800b3cc <__swhatbuf_r+0x24>
 800b3ba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	602a      	str	r2, [r5, #0]
 800b3c2:	061a      	lsls	r2, r3, #24
 800b3c4:	d410      	bmi.n	800b3e8 <__swhatbuf_r+0x40>
 800b3c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3ca:	e00e      	b.n	800b3ea <__swhatbuf_r+0x42>
 800b3cc:	466a      	mov	r2, sp
 800b3ce:	f000 f903 	bl	800b5d8 <_fstat_r>
 800b3d2:	2800      	cmp	r0, #0
 800b3d4:	dbf1      	blt.n	800b3ba <__swhatbuf_r+0x12>
 800b3d6:	9a01      	ldr	r2, [sp, #4]
 800b3d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b3dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b3e0:	425a      	negs	r2, r3
 800b3e2:	415a      	adcs	r2, r3
 800b3e4:	602a      	str	r2, [r5, #0]
 800b3e6:	e7ee      	b.n	800b3c6 <__swhatbuf_r+0x1e>
 800b3e8:	2340      	movs	r3, #64	; 0x40
 800b3ea:	2000      	movs	r0, #0
 800b3ec:	6023      	str	r3, [r4, #0]
 800b3ee:	b016      	add	sp, #88	; 0x58
 800b3f0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b3f4 <__smakebuf_r>:
 800b3f4:	898b      	ldrh	r3, [r1, #12]
 800b3f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3f8:	079d      	lsls	r5, r3, #30
 800b3fa:	4606      	mov	r6, r0
 800b3fc:	460c      	mov	r4, r1
 800b3fe:	d507      	bpl.n	800b410 <__smakebuf_r+0x1c>
 800b400:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b404:	6023      	str	r3, [r4, #0]
 800b406:	6123      	str	r3, [r4, #16]
 800b408:	2301      	movs	r3, #1
 800b40a:	6163      	str	r3, [r4, #20]
 800b40c:	b002      	add	sp, #8
 800b40e:	bd70      	pop	{r4, r5, r6, pc}
 800b410:	ab01      	add	r3, sp, #4
 800b412:	466a      	mov	r2, sp
 800b414:	f7ff ffc8 	bl	800b3a8 <__swhatbuf_r>
 800b418:	9900      	ldr	r1, [sp, #0]
 800b41a:	4605      	mov	r5, r0
 800b41c:	4630      	mov	r0, r6
 800b41e:	f7ff f963 	bl	800a6e8 <_malloc_r>
 800b422:	b948      	cbnz	r0, 800b438 <__smakebuf_r+0x44>
 800b424:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b428:	059a      	lsls	r2, r3, #22
 800b42a:	d4ef      	bmi.n	800b40c <__smakebuf_r+0x18>
 800b42c:	f023 0303 	bic.w	r3, r3, #3
 800b430:	f043 0302 	orr.w	r3, r3, #2
 800b434:	81a3      	strh	r3, [r4, #12]
 800b436:	e7e3      	b.n	800b400 <__smakebuf_r+0xc>
 800b438:	4b0d      	ldr	r3, [pc, #52]	; (800b470 <__smakebuf_r+0x7c>)
 800b43a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b43c:	89a3      	ldrh	r3, [r4, #12]
 800b43e:	6020      	str	r0, [r4, #0]
 800b440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b444:	81a3      	strh	r3, [r4, #12]
 800b446:	9b00      	ldr	r3, [sp, #0]
 800b448:	6163      	str	r3, [r4, #20]
 800b44a:	9b01      	ldr	r3, [sp, #4]
 800b44c:	6120      	str	r0, [r4, #16]
 800b44e:	b15b      	cbz	r3, 800b468 <__smakebuf_r+0x74>
 800b450:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b454:	4630      	mov	r0, r6
 800b456:	f000 f8d1 	bl	800b5fc <_isatty_r>
 800b45a:	b128      	cbz	r0, 800b468 <__smakebuf_r+0x74>
 800b45c:	89a3      	ldrh	r3, [r4, #12]
 800b45e:	f023 0303 	bic.w	r3, r3, #3
 800b462:	f043 0301 	orr.w	r3, r3, #1
 800b466:	81a3      	strh	r3, [r4, #12]
 800b468:	89a0      	ldrh	r0, [r4, #12]
 800b46a:	4305      	orrs	r5, r0
 800b46c:	81a5      	strh	r5, [r4, #12]
 800b46e:	e7cd      	b.n	800b40c <__smakebuf_r+0x18>
 800b470:	0800b201 	.word	0x0800b201

0800b474 <_malloc_usable_size_r>:
 800b474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b478:	1f18      	subs	r0, r3, #4
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	bfbc      	itt	lt
 800b47e:	580b      	ldrlt	r3, [r1, r0]
 800b480:	18c0      	addlt	r0, r0, r3
 800b482:	4770      	bx	lr

0800b484 <_raise_r>:
 800b484:	291f      	cmp	r1, #31
 800b486:	b538      	push	{r3, r4, r5, lr}
 800b488:	4604      	mov	r4, r0
 800b48a:	460d      	mov	r5, r1
 800b48c:	d904      	bls.n	800b498 <_raise_r+0x14>
 800b48e:	2316      	movs	r3, #22
 800b490:	6003      	str	r3, [r0, #0]
 800b492:	f04f 30ff 	mov.w	r0, #4294967295
 800b496:	bd38      	pop	{r3, r4, r5, pc}
 800b498:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b49a:	b112      	cbz	r2, 800b4a2 <_raise_r+0x1e>
 800b49c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b4a0:	b94b      	cbnz	r3, 800b4b6 <_raise_r+0x32>
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	f000 f830 	bl	800b508 <_getpid_r>
 800b4a8:	462a      	mov	r2, r5
 800b4aa:	4601      	mov	r1, r0
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4b2:	f000 b817 	b.w	800b4e4 <_kill_r>
 800b4b6:	2b01      	cmp	r3, #1
 800b4b8:	d00a      	beq.n	800b4d0 <_raise_r+0x4c>
 800b4ba:	1c59      	adds	r1, r3, #1
 800b4bc:	d103      	bne.n	800b4c6 <_raise_r+0x42>
 800b4be:	2316      	movs	r3, #22
 800b4c0:	6003      	str	r3, [r0, #0]
 800b4c2:	2001      	movs	r0, #1
 800b4c4:	e7e7      	b.n	800b496 <_raise_r+0x12>
 800b4c6:	2400      	movs	r4, #0
 800b4c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b4cc:	4628      	mov	r0, r5
 800b4ce:	4798      	blx	r3
 800b4d0:	2000      	movs	r0, #0
 800b4d2:	e7e0      	b.n	800b496 <_raise_r+0x12>

0800b4d4 <raise>:
 800b4d4:	4b02      	ldr	r3, [pc, #8]	; (800b4e0 <raise+0xc>)
 800b4d6:	4601      	mov	r1, r0
 800b4d8:	6818      	ldr	r0, [r3, #0]
 800b4da:	f7ff bfd3 	b.w	800b484 <_raise_r>
 800b4de:	bf00      	nop
 800b4e0:	20000010 	.word	0x20000010

0800b4e4 <_kill_r>:
 800b4e4:	b538      	push	{r3, r4, r5, lr}
 800b4e6:	4d07      	ldr	r5, [pc, #28]	; (800b504 <_kill_r+0x20>)
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	4604      	mov	r4, r0
 800b4ec:	4608      	mov	r0, r1
 800b4ee:	4611      	mov	r1, r2
 800b4f0:	602b      	str	r3, [r5, #0]
 800b4f2:	f7f6 ff57 	bl	80023a4 <_kill>
 800b4f6:	1c43      	adds	r3, r0, #1
 800b4f8:	d102      	bne.n	800b500 <_kill_r+0x1c>
 800b4fa:	682b      	ldr	r3, [r5, #0]
 800b4fc:	b103      	cbz	r3, 800b500 <_kill_r+0x1c>
 800b4fe:	6023      	str	r3, [r4, #0]
 800b500:	bd38      	pop	{r3, r4, r5, pc}
 800b502:	bf00      	nop
 800b504:	20004368 	.word	0x20004368

0800b508 <_getpid_r>:
 800b508:	f7f6 bf44 	b.w	8002394 <_getpid>

0800b50c <__sread>:
 800b50c:	b510      	push	{r4, lr}
 800b50e:	460c      	mov	r4, r1
 800b510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b514:	f000 f894 	bl	800b640 <_read_r>
 800b518:	2800      	cmp	r0, #0
 800b51a:	bfab      	itete	ge
 800b51c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b51e:	89a3      	ldrhlt	r3, [r4, #12]
 800b520:	181b      	addge	r3, r3, r0
 800b522:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b526:	bfac      	ite	ge
 800b528:	6563      	strge	r3, [r4, #84]	; 0x54
 800b52a:	81a3      	strhlt	r3, [r4, #12]
 800b52c:	bd10      	pop	{r4, pc}

0800b52e <__swrite>:
 800b52e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b532:	461f      	mov	r7, r3
 800b534:	898b      	ldrh	r3, [r1, #12]
 800b536:	05db      	lsls	r3, r3, #23
 800b538:	4605      	mov	r5, r0
 800b53a:	460c      	mov	r4, r1
 800b53c:	4616      	mov	r6, r2
 800b53e:	d505      	bpl.n	800b54c <__swrite+0x1e>
 800b540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b544:	2302      	movs	r3, #2
 800b546:	2200      	movs	r2, #0
 800b548:	f000 f868 	bl	800b61c <_lseek_r>
 800b54c:	89a3      	ldrh	r3, [r4, #12]
 800b54e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b552:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b556:	81a3      	strh	r3, [r4, #12]
 800b558:	4632      	mov	r2, r6
 800b55a:	463b      	mov	r3, r7
 800b55c:	4628      	mov	r0, r5
 800b55e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b562:	f000 b817 	b.w	800b594 <_write_r>

0800b566 <__sseek>:
 800b566:	b510      	push	{r4, lr}
 800b568:	460c      	mov	r4, r1
 800b56a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b56e:	f000 f855 	bl	800b61c <_lseek_r>
 800b572:	1c43      	adds	r3, r0, #1
 800b574:	89a3      	ldrh	r3, [r4, #12]
 800b576:	bf15      	itete	ne
 800b578:	6560      	strne	r0, [r4, #84]	; 0x54
 800b57a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b57e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b582:	81a3      	strheq	r3, [r4, #12]
 800b584:	bf18      	it	ne
 800b586:	81a3      	strhne	r3, [r4, #12]
 800b588:	bd10      	pop	{r4, pc}

0800b58a <__sclose>:
 800b58a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b58e:	f000 b813 	b.w	800b5b8 <_close_r>
	...

0800b594 <_write_r>:
 800b594:	b538      	push	{r3, r4, r5, lr}
 800b596:	4d07      	ldr	r5, [pc, #28]	; (800b5b4 <_write_r+0x20>)
 800b598:	4604      	mov	r4, r0
 800b59a:	4608      	mov	r0, r1
 800b59c:	4611      	mov	r1, r2
 800b59e:	2200      	movs	r2, #0
 800b5a0:	602a      	str	r2, [r5, #0]
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	f7f6 ff35 	bl	8002412 <_write>
 800b5a8:	1c43      	adds	r3, r0, #1
 800b5aa:	d102      	bne.n	800b5b2 <_write_r+0x1e>
 800b5ac:	682b      	ldr	r3, [r5, #0]
 800b5ae:	b103      	cbz	r3, 800b5b2 <_write_r+0x1e>
 800b5b0:	6023      	str	r3, [r4, #0]
 800b5b2:	bd38      	pop	{r3, r4, r5, pc}
 800b5b4:	20004368 	.word	0x20004368

0800b5b8 <_close_r>:
 800b5b8:	b538      	push	{r3, r4, r5, lr}
 800b5ba:	4d06      	ldr	r5, [pc, #24]	; (800b5d4 <_close_r+0x1c>)
 800b5bc:	2300      	movs	r3, #0
 800b5be:	4604      	mov	r4, r0
 800b5c0:	4608      	mov	r0, r1
 800b5c2:	602b      	str	r3, [r5, #0]
 800b5c4:	f7f6 ff41 	bl	800244a <_close>
 800b5c8:	1c43      	adds	r3, r0, #1
 800b5ca:	d102      	bne.n	800b5d2 <_close_r+0x1a>
 800b5cc:	682b      	ldr	r3, [r5, #0]
 800b5ce:	b103      	cbz	r3, 800b5d2 <_close_r+0x1a>
 800b5d0:	6023      	str	r3, [r4, #0]
 800b5d2:	bd38      	pop	{r3, r4, r5, pc}
 800b5d4:	20004368 	.word	0x20004368

0800b5d8 <_fstat_r>:
 800b5d8:	b538      	push	{r3, r4, r5, lr}
 800b5da:	4d07      	ldr	r5, [pc, #28]	; (800b5f8 <_fstat_r+0x20>)
 800b5dc:	2300      	movs	r3, #0
 800b5de:	4604      	mov	r4, r0
 800b5e0:	4608      	mov	r0, r1
 800b5e2:	4611      	mov	r1, r2
 800b5e4:	602b      	str	r3, [r5, #0]
 800b5e6:	f7f6 ff3c 	bl	8002462 <_fstat>
 800b5ea:	1c43      	adds	r3, r0, #1
 800b5ec:	d102      	bne.n	800b5f4 <_fstat_r+0x1c>
 800b5ee:	682b      	ldr	r3, [r5, #0]
 800b5f0:	b103      	cbz	r3, 800b5f4 <_fstat_r+0x1c>
 800b5f2:	6023      	str	r3, [r4, #0]
 800b5f4:	bd38      	pop	{r3, r4, r5, pc}
 800b5f6:	bf00      	nop
 800b5f8:	20004368 	.word	0x20004368

0800b5fc <_isatty_r>:
 800b5fc:	b538      	push	{r3, r4, r5, lr}
 800b5fe:	4d06      	ldr	r5, [pc, #24]	; (800b618 <_isatty_r+0x1c>)
 800b600:	2300      	movs	r3, #0
 800b602:	4604      	mov	r4, r0
 800b604:	4608      	mov	r0, r1
 800b606:	602b      	str	r3, [r5, #0]
 800b608:	f7f6 ff3b 	bl	8002482 <_isatty>
 800b60c:	1c43      	adds	r3, r0, #1
 800b60e:	d102      	bne.n	800b616 <_isatty_r+0x1a>
 800b610:	682b      	ldr	r3, [r5, #0]
 800b612:	b103      	cbz	r3, 800b616 <_isatty_r+0x1a>
 800b614:	6023      	str	r3, [r4, #0]
 800b616:	bd38      	pop	{r3, r4, r5, pc}
 800b618:	20004368 	.word	0x20004368

0800b61c <_lseek_r>:
 800b61c:	b538      	push	{r3, r4, r5, lr}
 800b61e:	4d07      	ldr	r5, [pc, #28]	; (800b63c <_lseek_r+0x20>)
 800b620:	4604      	mov	r4, r0
 800b622:	4608      	mov	r0, r1
 800b624:	4611      	mov	r1, r2
 800b626:	2200      	movs	r2, #0
 800b628:	602a      	str	r2, [r5, #0]
 800b62a:	461a      	mov	r2, r3
 800b62c:	f7f6 ff34 	bl	8002498 <_lseek>
 800b630:	1c43      	adds	r3, r0, #1
 800b632:	d102      	bne.n	800b63a <_lseek_r+0x1e>
 800b634:	682b      	ldr	r3, [r5, #0]
 800b636:	b103      	cbz	r3, 800b63a <_lseek_r+0x1e>
 800b638:	6023      	str	r3, [r4, #0]
 800b63a:	bd38      	pop	{r3, r4, r5, pc}
 800b63c:	20004368 	.word	0x20004368

0800b640 <_read_r>:
 800b640:	b538      	push	{r3, r4, r5, lr}
 800b642:	4d07      	ldr	r5, [pc, #28]	; (800b660 <_read_r+0x20>)
 800b644:	4604      	mov	r4, r0
 800b646:	4608      	mov	r0, r1
 800b648:	4611      	mov	r1, r2
 800b64a:	2200      	movs	r2, #0
 800b64c:	602a      	str	r2, [r5, #0]
 800b64e:	461a      	mov	r2, r3
 800b650:	f7f6 fec2 	bl	80023d8 <_read>
 800b654:	1c43      	adds	r3, r0, #1
 800b656:	d102      	bne.n	800b65e <_read_r+0x1e>
 800b658:	682b      	ldr	r3, [r5, #0]
 800b65a:	b103      	cbz	r3, 800b65e <_read_r+0x1e>
 800b65c:	6023      	str	r3, [r4, #0]
 800b65e:	bd38      	pop	{r3, r4, r5, pc}
 800b660:	20004368 	.word	0x20004368

0800b664 <_init>:
 800b664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b666:	bf00      	nop
 800b668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b66a:	bc08      	pop	{r3}
 800b66c:	469e      	mov	lr, r3
 800b66e:	4770      	bx	lr

0800b670 <_fini>:
 800b670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b672:	bf00      	nop
 800b674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b676:	bc08      	pop	{r3}
 800b678:	469e      	mov	lr, r3
 800b67a:	4770      	bx	lr
