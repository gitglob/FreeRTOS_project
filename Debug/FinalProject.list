
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b65c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000073c  0800b800  0800b800  0001b800  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf3c  0800bf3c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf3c  0800bf3c  0001bf3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf44  0800bf44  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf44  0800bf44  0001bf44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf48  0800bf48  0001bf48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800bf4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004190  200001e0  0800c12c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004370  0800c12c  00024370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e6e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000314f  00000000  00000000  0003607e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  000391d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001208  00000000  00000000  0003a510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e97  00000000  00000000  0003b718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ccc  00000000  00000000  000545af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098a67  00000000  00000000  0006927b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00101ce2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061f0  00000000  00000000  00101d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b7e4 	.word	0x0800b7e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800b7e4 	.word	0x0800b7e4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b974 	b.w	8000f18 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	4604      	mov	r4, r0
 8000c50:	468e      	mov	lr, r1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d14d      	bne.n	8000cf2 <__udivmoddi4+0xaa>
 8000c56:	428a      	cmp	r2, r1
 8000c58:	4694      	mov	ip, r2
 8000c5a:	d969      	bls.n	8000d30 <__udivmoddi4+0xe8>
 8000c5c:	fab2 f282 	clz	r2, r2
 8000c60:	b152      	cbz	r2, 8000c78 <__udivmoddi4+0x30>
 8000c62:	fa01 f302 	lsl.w	r3, r1, r2
 8000c66:	f1c2 0120 	rsb	r1, r2, #32
 8000c6a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c6e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c72:	ea41 0e03 	orr.w	lr, r1, r3
 8000c76:	4094      	lsls	r4, r2
 8000c78:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c7c:	0c21      	lsrs	r1, r4, #16
 8000c7e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c82:	fa1f f78c 	uxth.w	r7, ip
 8000c86:	fb08 e316 	mls	r3, r8, r6, lr
 8000c8a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c8e:	fb06 f107 	mul.w	r1, r6, r7
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x64>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c9e:	f080 811f 	bcs.w	8000ee0 <__udivmoddi4+0x298>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 811c 	bls.w	8000ee0 <__udivmoddi4+0x298>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 f707 	mul.w	r7, r0, r7
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x92>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ccc:	f080 810a 	bcs.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	f240 8107 	bls.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd6:	4464      	add	r4, ip
 8000cd8:	3802      	subs	r0, #2
 8000cda:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cde:	1be4      	subs	r4, r4, r7
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	b11d      	cbz	r5, 8000cec <__udivmoddi4+0xa4>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0xc2>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	f000 80ef 	beq.w	8000eda <__udivmoddi4+0x292>
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000d02:	4630      	mov	r0, r6
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f683 	clz	r6, r3
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d14a      	bne.n	8000da8 <__udivmoddi4+0x160>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0xd4>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80f9 	bhi.w	8000f0e <__udivmoddi4+0x2c6>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	469e      	mov	lr, r3
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d0e0      	beq.n	8000cec <__udivmoddi4+0xa4>
 8000d2a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d2e:	e7dd      	b.n	8000cec <__udivmoddi4+0xa4>
 8000d30:	b902      	cbnz	r2, 8000d34 <__udivmoddi4+0xec>
 8000d32:	deff      	udf	#255	; 0xff
 8000d34:	fab2 f282 	clz	r2, r2
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	f040 8092 	bne.w	8000e62 <__udivmoddi4+0x21a>
 8000d3e:	eba1 010c 	sub.w	r1, r1, ip
 8000d42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d46:	fa1f fe8c 	uxth.w	lr, ip
 8000d4a:	2601      	movs	r6, #1
 8000d4c:	0c20      	lsrs	r0, r4, #16
 8000d4e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d52:	fb07 1113 	mls	r1, r7, r3, r1
 8000d56:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5a:	fb0e f003 	mul.w	r0, lr, r3
 8000d5e:	4288      	cmp	r0, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x12c>
 8000d62:	eb1c 0101 	adds.w	r1, ip, r1
 8000d66:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x12a>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f200 80cb 	bhi.w	8000f08 <__udivmoddi4+0x2c0>
 8000d72:	4643      	mov	r3, r8
 8000d74:	1a09      	subs	r1, r1, r0
 8000d76:	b2a4      	uxth	r4, r4
 8000d78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d7c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d80:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d84:	fb0e fe00 	mul.w	lr, lr, r0
 8000d88:	45a6      	cmp	lr, r4
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x156>
 8000d8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d94:	d202      	bcs.n	8000d9c <__udivmoddi4+0x154>
 8000d96:	45a6      	cmp	lr, r4
 8000d98:	f200 80bb 	bhi.w	8000f12 <__udivmoddi4+0x2ca>
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000da6:	e79c      	b.n	8000ce2 <__udivmoddi4+0x9a>
 8000da8:	f1c6 0720 	rsb	r7, r6, #32
 8000dac:	40b3      	lsls	r3, r6
 8000dae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000db2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000db6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dba:	fa01 f306 	lsl.w	r3, r1, r6
 8000dbe:	431c      	orrs	r4, r3
 8000dc0:	40f9      	lsrs	r1, r7
 8000dc2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dc6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dca:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dce:	0c20      	lsrs	r0, r4, #16
 8000dd0:	fa1f fe8c 	uxth.w	lr, ip
 8000dd4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ddc:	fb08 f00e 	mul.w	r0, r8, lr
 8000de0:	4288      	cmp	r0, r1
 8000de2:	fa02 f206 	lsl.w	r2, r2, r6
 8000de6:	d90b      	bls.n	8000e00 <__udivmoddi4+0x1b8>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f108 3aff 	add.w	sl, r8, #4294967295
 8000df0:	f080 8088 	bcs.w	8000f04 <__udivmoddi4+0x2bc>
 8000df4:	4288      	cmp	r0, r1
 8000df6:	f240 8085 	bls.w	8000f04 <__udivmoddi4+0x2bc>
 8000dfa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e08:	fb09 1110 	mls	r1, r9, r0, r1
 8000e0c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e10:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e14:	458e      	cmp	lr, r1
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x1e2>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e20:	d26c      	bcs.n	8000efc <__udivmoddi4+0x2b4>
 8000e22:	458e      	cmp	lr, r1
 8000e24:	d96a      	bls.n	8000efc <__udivmoddi4+0x2b4>
 8000e26:	3802      	subs	r0, #2
 8000e28:	4461      	add	r1, ip
 8000e2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e2e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e32:	eba1 010e 	sub.w	r1, r1, lr
 8000e36:	42a1      	cmp	r1, r4
 8000e38:	46c8      	mov	r8, r9
 8000e3a:	46a6      	mov	lr, r4
 8000e3c:	d356      	bcc.n	8000eec <__udivmoddi4+0x2a4>
 8000e3e:	d053      	beq.n	8000ee8 <__udivmoddi4+0x2a0>
 8000e40:	b15d      	cbz	r5, 8000e5a <__udivmoddi4+0x212>
 8000e42:	ebb3 0208 	subs.w	r2, r3, r8
 8000e46:	eb61 010e 	sbc.w	r1, r1, lr
 8000e4a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e4e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e52:	40f1      	lsrs	r1, r6
 8000e54:	431f      	orrs	r7, r3
 8000e56:	e9c5 7100 	strd	r7, r1, [r5]
 8000e5a:	2600      	movs	r6, #0
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	f1c2 0320 	rsb	r3, r2, #32
 8000e66:	40d8      	lsrs	r0, r3
 8000e68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e6c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e70:	4091      	lsls	r1, r2
 8000e72:	4301      	orrs	r1, r0
 8000e74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e78:	fa1f fe8c 	uxth.w	lr, ip
 8000e7c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e80:	fb07 3610 	mls	r6, r7, r0, r3
 8000e84:	0c0b      	lsrs	r3, r1, #16
 8000e86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e8a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	fa04 f402 	lsl.w	r4, r4, r2
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x260>
 8000e96:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e9e:	d22f      	bcs.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea0:	429e      	cmp	r6, r3
 8000ea2:	d92d      	bls.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	1b9b      	subs	r3, r3, r6
 8000eaa:	b289      	uxth	r1, r1
 8000eac:	fbb3 f6f7 	udiv	r6, r3, r7
 8000eb0:	fb07 3316 	mls	r3, r7, r6, r3
 8000eb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ebc:	428b      	cmp	r3, r1
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x28a>
 8000ec0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ec8:	d216      	bcs.n	8000ef8 <__udivmoddi4+0x2b0>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d914      	bls.n	8000ef8 <__udivmoddi4+0x2b0>
 8000ece:	3e02      	subs	r6, #2
 8000ed0:	4461      	add	r1, ip
 8000ed2:	1ac9      	subs	r1, r1, r3
 8000ed4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ed8:	e738      	b.n	8000d4c <__udivmoddi4+0x104>
 8000eda:	462e      	mov	r6, r5
 8000edc:	4628      	mov	r0, r5
 8000ede:	e705      	b.n	8000cec <__udivmoddi4+0xa4>
 8000ee0:	4606      	mov	r6, r0
 8000ee2:	e6e3      	b.n	8000cac <__udivmoddi4+0x64>
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	e6f8      	b.n	8000cda <__udivmoddi4+0x92>
 8000ee8:	454b      	cmp	r3, r9
 8000eea:	d2a9      	bcs.n	8000e40 <__udivmoddi4+0x1f8>
 8000eec:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ef4:	3801      	subs	r0, #1
 8000ef6:	e7a3      	b.n	8000e40 <__udivmoddi4+0x1f8>
 8000ef8:	4646      	mov	r6, r8
 8000efa:	e7ea      	b.n	8000ed2 <__udivmoddi4+0x28a>
 8000efc:	4620      	mov	r0, r4
 8000efe:	e794      	b.n	8000e2a <__udivmoddi4+0x1e2>
 8000f00:	4640      	mov	r0, r8
 8000f02:	e7d1      	b.n	8000ea8 <__udivmoddi4+0x260>
 8000f04:	46d0      	mov	r8, sl
 8000f06:	e77b      	b.n	8000e00 <__udivmoddi4+0x1b8>
 8000f08:	3b02      	subs	r3, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	e732      	b.n	8000d74 <__udivmoddi4+0x12c>
 8000f0e:	4630      	mov	r0, r6
 8000f10:	e709      	b.n	8000d26 <__udivmoddi4+0xde>
 8000f12:	4464      	add	r4, ip
 8000f14:	3802      	subs	r0, #2
 8000f16:	e742      	b.n	8000d9e <__udivmoddi4+0x156>

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4a07      	ldr	r2, [pc, #28]	; (8000f48 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	4a06      	ldr	r2, [pc, #24]	; (8000f4c <vApplicationGetIdleTaskMemory+0x30>)
 8000f32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2280      	movs	r2, #128	; 0x80
 8000f38:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f3a:	bf00      	nop
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	200001fc 	.word	0x200001fc
 8000f4c:	20000250 	.word	0x20000250

08000f50 <EmptyBuffer>:
// UART callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim);

// empty a string buffer
void EmptyBuffer(uint8_t* buf){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t s = strlen(buf);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff f94b 	bl	80001f4 <strlen>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	73bb      	strb	r3, [r7, #14]

	for (i=0; i<s; i++) {
 8000f62:	2300      	movs	r3, #0
 8000f64:	73fb      	strb	r3, [r7, #15]
 8000f66:	e007      	b.n	8000f78 <EmptyBuffer+0x28>
		buf[i] = 0;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
	for (i=0; i<s; i++) {
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	3301      	adds	r3, #1
 8000f76:	73fb      	strb	r3, [r7, #15]
 8000f78:	7bfa      	ldrb	r2, [r7, #15]
 8000f7a:	7bbb      	ldrb	r3, [r7, #14]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d3f3      	bcc.n	8000f68 <EmptyBuffer+0x18>
	}
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <delay>:
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
}

// delay function for the supersonic sensor
void delay(uint16_t time)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <delay+0x30>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 8000f9e:	bf00      	nop
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <delay+0x30>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fa6:	88fb      	ldrh	r3, [r7, #6]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d3f9      	bcc.n	8000fa0 <delay+0x14>
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000450 	.word	0x20000450

08000fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc0:	b5b0      	push	{r4, r5, r7, lr}
 8000fc2:	b0d4      	sub	sp, #336	; 0x150
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc6:	f001 fba7 	bl	8002718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fca:	f000 f957 	bl	800127c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fce:	f000 fa49 	bl	8001464 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fd2:	f000 fa1d 	bl	8001410 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000fd6:	f000 f9c5 	bl	8001364 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000fda:	f000 f9b7 	bl	800134c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000fde:	488b      	ldr	r0, [pc, #556]	; (800120c <main+0x24c>)
 8000fe0:	f002 fc42 	bl	8003868 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); // to get IC_CaptureCallback
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4889      	ldr	r0, [pc, #548]	; (800120c <main+0x24c>)
 8000fe8:	f002 fcf0 	bl	80039cc <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of PrintMtx */
  osMutexDef(PrintMtx);
 8000fec:	2300      	movs	r3, #0
 8000fee:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  PrintMtxHandle = osMutexCreate(osMutex(PrintMtx));
 8000ff8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f004 fbed 	bl	80057dc <osMutexCreate>
 8001002:	4603      	mov	r3, r0
 8001004:	4a82      	ldr	r2, [pc, #520]	; (8001210 <main+0x250>)
 8001006:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of VelSemaphore */
  osSemaphoreDef(VelSemaphore);
 8001008:	2300      	movs	r3, #0
 800100a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800100e:	2300      	movs	r3, #0
 8001010:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  VelSemaphoreHandle = osSemaphoreCreate(osSemaphore(VelSemaphore), 1);
 8001014:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001018:	2101      	movs	r1, #1
 800101a:	4618      	mov	r0, r3
 800101c:	f004 fc7a 	bl	8005914 <osSemaphoreCreate>
 8001020:	4603      	mov	r3, r0
 8001022:	4a7c      	ldr	r2, [pc, #496]	; (8001214 <main+0x254>)
 8001024:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of UartQueue */
  osMessageQDef(UartQueue, 1, int8_t);
 8001026:	4b7c      	ldr	r3, [pc, #496]	; (8001218 <main+0x258>)
 8001028:	f507 7498 	add.w	r4, r7, #304	; 0x130
 800102c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800102e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UartQueueHandle = osMessageCreate(osMessageQ(UartQueue), NULL);
 8001032:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f004 fd21 	bl	8005a80 <osMessageCreate>
 800103e:	4603      	mov	r3, r0
 8001040:	4a76      	ldr	r2, [pc, #472]	; (800121c <main+0x25c>)
 8001042:	6013      	str	r3, [r2, #0]

  /* definition and creation of ImuQueue */
  osMessageQDef(ImuQueue, 1, ImuData);
 8001044:	4b76      	ldr	r3, [pc, #472]	; (8001220 <main+0x260>)
 8001046:	f507 7490 	add.w	r4, r7, #288	; 0x120
 800104a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800104c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ImuQueueHandle = osMessageCreate(osMessageQ(ImuQueue), NULL);
 8001050:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f004 fd12 	bl	8005a80 <osMessageCreate>
 800105c:	4603      	mov	r3, r0
 800105e:	4a71      	ldr	r2, [pc, #452]	; (8001224 <main+0x264>)
 8001060:	6013      	str	r3, [r2, #0]

  /* definition and creation of GpsQueue */
  osMessageQDef(GpsQueue, 1, GpsData);
 8001062:	4b71      	ldr	r3, [pc, #452]	; (8001228 <main+0x268>)
 8001064:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8001068:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800106a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  GpsQueueHandle = osMessageCreate(osMessageQ(GpsQueue), NULL);
 800106e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f004 fd03 	bl	8005a80 <osMessageCreate>
 800107a:	4603      	mov	r3, r0
 800107c:	4a6b      	ldr	r2, [pc, #428]	; (800122c <main+0x26c>)
 800107e:	6013      	str	r3, [r2, #0]

  /* definition and creation of ButtonQueue */
  osMessageQDef(ButtonQueue, 1, uint8_t);
 8001080:	4b65      	ldr	r3, [pc, #404]	; (8001218 <main+0x258>)
 8001082:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8001086:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001088:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ButtonQueueHandle = osMessageCreate(osMessageQ(ButtonQueue), NULL);
 800108c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f004 fcf4 	bl	8005a80 <osMessageCreate>
 8001098:	4603      	mov	r3, r0
 800109a:	4a65      	ldr	r2, [pc, #404]	; (8001230 <main+0x270>)
 800109c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ImuTask */
  osThreadDef(ImuTask, StartImuTask, osPriorityLow, 0, 128);
 800109e:	4b65      	ldr	r3, [pc, #404]	; (8001234 <main+0x274>)
 80010a0:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 80010a4:	461d      	mov	r5, r3
 80010a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ImuTaskHandle = osThreadCreate(osThread(ImuTask), NULL);
 80010b2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f004 faa2 	bl	8005602 <osThreadCreate>
 80010be:	4603      	mov	r3, r0
 80010c0:	4a5d      	ldr	r2, [pc, #372]	; (8001238 <main+0x278>)
 80010c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of GpsTask */
  osThreadDef(GpsTask, StartGpsTask, osPriorityLow, 0, 128);
 80010c4:	4b5d      	ldr	r3, [pc, #372]	; (800123c <main+0x27c>)
 80010c6:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 80010ca:	461d      	mov	r5, r3
 80010cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GpsTaskHandle = osThreadCreate(osThread(GpsTask), NULL);
 80010d8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f004 fa8f 	bl	8005602 <osThreadCreate>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4a56      	ldr	r2, [pc, #344]	; (8001240 <main+0x280>)
 80010e8:	6013      	str	r3, [r2, #0]

  /* definition and creation of KFTask */
  osThreadDef(KFTask, StartKFTask, osPriorityLow, 0, 128);
 80010ea:	4b56      	ldr	r3, [pc, #344]	; (8001244 <main+0x284>)
 80010ec:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 80010f0:	461d      	mov	r5, r3
 80010f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  KFTaskHandle = osThreadCreate(osThread(KFTask), NULL);
 80010fe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f004 fa7c 	bl	8005602 <osThreadCreate>
 800110a:	4603      	mov	r3, r0
 800110c:	4a4e      	ldr	r2, [pc, #312]	; (8001248 <main+0x288>)
 800110e:	6013      	str	r3, [r2, #0]

  /* definition and creation of RadarTask */
  osThreadDef(RadarTask, StartRadarTask, osPriorityLow, 0, 128);
 8001110:	4b4e      	ldr	r3, [pc, #312]	; (800124c <main+0x28c>)
 8001112:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001116:	461d      	mov	r5, r3
 8001118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800111a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800111c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001120:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RadarTaskHandle = osThreadCreate(osThread(RadarTask), NULL);
 8001124:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f004 fa69 	bl	8005602 <osThreadCreate>
 8001130:	4603      	mov	r3, r0
 8001132:	4a47      	ldr	r2, [pc, #284]	; (8001250 <main+0x290>)
 8001134:	6013      	str	r3, [r2, #0]

  /* definition and creation of ExButtonIntTask */
  osThreadDef(ExButtonIntTask, StartExButtonIntTask, osPriorityAboveNormal, 0, 128);
 8001136:	4b47      	ldr	r3, [pc, #284]	; (8001254 <main+0x294>)
 8001138:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800113c:	461d      	mov	r5, r3
 800113e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001140:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001142:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001146:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ExButtonIntTaskHandle = osThreadCreate(osThread(ExButtonIntTask), NULL);
 800114a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f004 fa56 	bl	8005602 <osThreadCreate>
 8001156:	4603      	mov	r3, r0
 8001158:	4a3f      	ldr	r2, [pc, #252]	; (8001258 <main+0x298>)
 800115a:	6013      	str	r3, [r2, #0]

  /* definition and creation of MotorTask */
  osThreadDef(MotorTask, StartMotorTask, osPriorityNormal, 0, 128);
 800115c:	4b3f      	ldr	r3, [pc, #252]	; (800125c <main+0x29c>)
 800115e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001162:	461d      	mov	r5, r3
 8001164:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001168:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800116c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotorTaskHandle = osThreadCreate(osThread(MotorTask), NULL);
 8001170:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f004 fa43 	bl	8005602 <osThreadCreate>
 800117c:	4603      	mov	r3, r0
 800117e:	4a38      	ldr	r2, [pc, #224]	; (8001260 <main+0x2a0>)
 8001180:	6013      	str	r3, [r2, #0]

  /* definition and creation of MainTask */
  osThreadDef(MainTask, StartMainTask, osPriorityHigh, 0, 128);
 8001182:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001186:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800118a:	4a36      	ldr	r2, [pc, #216]	; (8001264 <main+0x2a4>)
 800118c:	461c      	mov	r4, r3
 800118e:	4615      	mov	r5, r2
 8001190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001192:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001194:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001198:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 800119c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f004 fa2d 	bl	8005602 <osThreadCreate>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4a2f      	ldr	r2, [pc, #188]	; (8001268 <main+0x2a8>)
 80011ac:	6013      	str	r3, [r2, #0]

  /* definition and creation of ObjectDetectTas */
  osThreadDef(ObjectDetectTas, StartObjectDetectTask, osPriorityAboveNormal, 0, 128);
 80011ae:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80011b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80011b6:	4a2d      	ldr	r2, [pc, #180]	; (800126c <main+0x2ac>)
 80011b8:	461c      	mov	r4, r3
 80011ba:	4615      	mov	r5, r2
 80011bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ObjectDetectTasHandle = osThreadCreate(osThread(ObjectDetectTas), NULL);
 80011c8:	f107 0320 	add.w	r3, r7, #32
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f004 fa17 	bl	8005602 <osThreadCreate>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a26      	ldr	r2, [pc, #152]	; (8001270 <main+0x2b0>)
 80011d8:	6013      	str	r3, [r2, #0]

  /* definition and creation of UartTask */
  osThreadDef(UartTask, StartUartTask, osPriorityNormal, 0, 128);
 80011da:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80011de:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80011e2:	4a24      	ldr	r2, [pc, #144]	; (8001274 <main+0x2b4>)
 80011e4:	461c      	mov	r4, r3
 80011e6:	4615      	mov	r5, r2
 80011e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UartTaskHandle = osThreadCreate(osThread(UartTask), NULL);
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f004 fa02 	bl	8005602 <osThreadCreate>
 80011fe:	4603      	mov	r3, r0
 8001200:	4a1d      	ldr	r2, [pc, #116]	; (8001278 <main+0x2b8>)
 8001202:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001204:	f004 f9e6 	bl	80055d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001208:	e7fe      	b.n	8001208 <main+0x248>
 800120a:	bf00      	nop
 800120c:	20000450 	.word	0x20000450
 8001210:	20000510 	.word	0x20000510
 8001214:	20000514 	.word	0x20000514
 8001218:	0800b868 	.word	0x0800b868
 800121c:	20000500 	.word	0x20000500
 8001220:	0800b878 	.word	0x0800b878
 8001224:	20000504 	.word	0x20000504
 8001228:	0800b888 	.word	0x0800b888
 800122c:	20000508 	.word	0x20000508
 8001230:	2000050c 	.word	0x2000050c
 8001234:	0800b898 	.word	0x0800b898
 8001238:	200004dc 	.word	0x200004dc
 800123c:	0800b8b4 	.word	0x0800b8b4
 8001240:	200004e0 	.word	0x200004e0
 8001244:	0800b8d0 	.word	0x0800b8d0
 8001248:	200004e4 	.word	0x200004e4
 800124c:	0800b8ec 	.word	0x0800b8ec
 8001250:	200004e8 	.word	0x200004e8
 8001254:	0800b908 	.word	0x0800b908
 8001258:	200004ec 	.word	0x200004ec
 800125c:	0800b924 	.word	0x0800b924
 8001260:	200004f0 	.word	0x200004f0
 8001264:	0800b940 	.word	0x0800b940
 8001268:	200004f4 	.word	0x200004f4
 800126c:	0800b95c 	.word	0x0800b95c
 8001270:	200004f8 	.word	0x200004f8
 8001274:	0800b978 	.word	0x0800b978
 8001278:	200004fc 	.word	0x200004fc

0800127c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b094      	sub	sp, #80	; 0x50
 8001280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001282:	f107 0320 	add.w	r3, r7, #32
 8001286:	2230      	movs	r2, #48	; 0x30
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f007 fbce 	bl	8008a2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a0:	2300      	movs	r3, #0
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	4b27      	ldr	r3, [pc, #156]	; (8001344 <SystemClock_Config+0xc8>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	4a26      	ldr	r2, [pc, #152]	; (8001344 <SystemClock_Config+0xc8>)
 80012aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ae:	6413      	str	r3, [r2, #64]	; 0x40
 80012b0:	4b24      	ldr	r3, [pc, #144]	; (8001344 <SystemClock_Config+0xc8>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012bc:	2300      	movs	r3, #0
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	4b21      	ldr	r3, [pc, #132]	; (8001348 <SystemClock_Config+0xcc>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a20      	ldr	r2, [pc, #128]	; (8001348 <SystemClock_Config+0xcc>)
 80012c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <SystemClock_Config+0xcc>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d8:	2302      	movs	r3, #2
 80012da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012dc:	2301      	movs	r3, #1
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e0:	2310      	movs	r3, #16
 80012e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e4:	2302      	movs	r3, #2
 80012e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012e8:	2300      	movs	r3, #0
 80012ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012ec:	2308      	movs	r3, #8
 80012ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80012f0:	2354      	movs	r3, #84	; 0x54
 80012f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012f4:	2302      	movs	r3, #2
 80012f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012f8:	2304      	movs	r3, #4
 80012fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fc:	f107 0320 	add.w	r3, r7, #32
 8001300:	4618      	mov	r0, r3
 8001302:	f001 fd8d 	bl	8002e20 <HAL_RCC_OscConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800130c:	f000 ff8c 	bl	8002228 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001310:	230f      	movs	r3, #15
 8001312:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001314:	2302      	movs	r3, #2
 8001316:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800131c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001320:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001326:	f107 030c 	add.w	r3, r7, #12
 800132a:	2102      	movs	r1, #2
 800132c:	4618      	mov	r0, r3
 800132e:	f001 ffef 	bl	8003310 <HAL_RCC_ClockConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001338:	f000 ff76 	bl	8002228 <Error_Handler>
  }
}
 800133c:	bf00      	nop
 800133e:	3750      	adds	r7, #80	; 0x50
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40023800 	.word	0x40023800
 8001348:	40007000 	.word	0x40007000

0800134c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001350:	2200      	movs	r2, #0
 8001352:	2105      	movs	r1, #5
 8001354:	2028      	movs	r0, #40	; 0x28
 8001356:	f001 fad9 	bl	800290c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800135a:	2028      	movs	r0, #40	; 0x28
 800135c:	f001 faf2 	bl	8002944 <HAL_NVIC_EnableIRQ>
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}

08001364 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136a:	f107 0310 	add.w	r3, r7, #16
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001374:	463b      	mov	r3, r7
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001380:	4b21      	ldr	r3, [pc, #132]	; (8001408 <MX_TIM1_Init+0xa4>)
 8001382:	4a22      	ldr	r2, [pc, #136]	; (800140c <MX_TIM1_Init+0xa8>)
 8001384:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8001386:	4b20      	ldr	r3, [pc, #128]	; (8001408 <MX_TIM1_Init+0xa4>)
 8001388:	2263      	movs	r2, #99	; 0x63
 800138a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138c:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <MX_TIM1_Init+0xa4>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65536-1;
 8001392:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <MX_TIM1_Init+0xa4>)
 8001394:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001398:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139a:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <MX_TIM1_Init+0xa4>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013a0:	4b19      	ldr	r3, [pc, #100]	; (8001408 <MX_TIM1_Init+0xa4>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a6:	4b18      	ldr	r3, [pc, #96]	; (8001408 <MX_TIM1_Init+0xa4>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80013ac:	4816      	ldr	r0, [pc, #88]	; (8001408 <MX_TIM1_Init+0xa4>)
 80013ae:	f002 fabd 	bl	800392c <HAL_TIM_IC_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80013b8:	f000 ff36 	bl	8002228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013c4:	f107 0310 	add.w	r3, r7, #16
 80013c8:	4619      	mov	r1, r3
 80013ca:	480f      	ldr	r0, [pc, #60]	; (8001408 <MX_TIM1_Init+0xa4>)
 80013cc:	f002 ffe2 	bl	8004394 <HAL_TIMEx_MasterConfigSynchronization>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80013d6:	f000 ff27 	bl	8002228 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013da:	2300      	movs	r3, #0
 80013dc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013de:	2301      	movs	r3, #1
 80013e0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013ea:	463b      	mov	r3, r7
 80013ec:	2200      	movs	r2, #0
 80013ee:	4619      	mov	r1, r3
 80013f0:	4805      	ldr	r0, [pc, #20]	; (8001408 <MX_TIM1_Init+0xa4>)
 80013f2:	f002 fd0d 	bl	8003e10 <HAL_TIM_IC_ConfigChannel>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80013fc:	f000 ff14 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001400:	bf00      	nop
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000450 	.word	0x20000450
 800140c:	40010000 	.word	0x40010000

08001410 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <MX_USART2_UART_Init+0x4c>)
 8001416:	4a12      	ldr	r2, [pc, #72]	; (8001460 <MX_USART2_UART_Init+0x50>)
 8001418:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <MX_USART2_UART_Init+0x4c>)
 800141c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001420:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <MX_USART2_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <MX_USART2_UART_Init+0x4c>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <MX_USART2_UART_Init+0x4c>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_USART2_UART_Init+0x4c>)
 8001436:	220c      	movs	r2, #12
 8001438:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <MX_USART2_UART_Init+0x4c>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <MX_USART2_UART_Init+0x4c>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_USART2_UART_Init+0x4c>)
 8001448:	f003 f826 	bl	8004498 <HAL_UART_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001452:	f000 fee9 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000498 	.word	0x20000498
 8001460:	40004400 	.word	0x40004400

08001464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	4b40      	ldr	r3, [pc, #256]	; (8001580 <MX_GPIO_Init+0x11c>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a3f      	ldr	r2, [pc, #252]	; (8001580 <MX_GPIO_Init+0x11c>)
 8001484:	f043 0304 	orr.w	r3, r3, #4
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b3d      	ldr	r3, [pc, #244]	; (8001580 <MX_GPIO_Init+0x11c>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0304 	and.w	r3, r3, #4
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	4b39      	ldr	r3, [pc, #228]	; (8001580 <MX_GPIO_Init+0x11c>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a38      	ldr	r2, [pc, #224]	; (8001580 <MX_GPIO_Init+0x11c>)
 80014a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b36      	ldr	r3, [pc, #216]	; (8001580 <MX_GPIO_Init+0x11c>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	4b32      	ldr	r3, [pc, #200]	; (8001580 <MX_GPIO_Init+0x11c>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a31      	ldr	r2, [pc, #196]	; (8001580 <MX_GPIO_Init+0x11c>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <MX_GPIO_Init+0x11c>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	4b2b      	ldr	r3, [pc, #172]	; (8001580 <MX_GPIO_Init+0x11c>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a2a      	ldr	r2, [pc, #168]	; (8001580 <MX_GPIO_Init+0x11c>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b28      	ldr	r3, [pc, #160]	; (8001580 <MX_GPIO_Init+0x11c>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Trig_Pin, GPIO_PIN_RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	f44f 7108 	mov.w	r1, #544	; 0x220
 80014f0:	4824      	ldr	r0, [pc, #144]	; (8001584 <MX_GPIO_Init+0x120>)
 80014f2:	f001 fc63 	bl	8002dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, YellowLed_Pin|RedLed_Pin|GreenLed_Pin|BlueLed_Pin, GPIO_PIN_RESET);
 80014f6:	2200      	movs	r2, #0
 80014f8:	f24e 0102 	movw	r1, #57346	; 0xe002
 80014fc:	4822      	ldr	r0, [pc, #136]	; (8001588 <MX_GPIO_Init+0x124>)
 80014fe:	f001 fc5d 	bl	8002dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001502:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001508:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800150c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	4619      	mov	r1, r3
 8001518:	481c      	ldr	r0, [pc, #112]	; (800158c <MX_GPIO_Init+0x128>)
 800151a:	f001 fab3 	bl	8002a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Trig_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Trig_Pin;
 800151e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001524:	2301      	movs	r3, #1
 8001526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2300      	movs	r3, #0
 800152e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	4619      	mov	r1, r3
 8001536:	4813      	ldr	r0, [pc, #76]	; (8001584 <MX_GPIO_Init+0x120>)
 8001538:	f001 faa4 	bl	8002a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : YellowLed_Pin RedLed_Pin GreenLed_Pin BlueLed_Pin */
  GPIO_InitStruct.Pin = YellowLed_Pin|RedLed_Pin|GreenLed_Pin|BlueLed_Pin;
 800153c:	f24e 0302 	movw	r3, #57346	; 0xe002
 8001540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001542:	2301      	movs	r3, #1
 8001544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4619      	mov	r1, r3
 8001554:	480c      	ldr	r0, [pc, #48]	; (8001588 <MX_GPIO_Init+0x124>)
 8001556:	f001 fa95 	bl	8002a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ExButton_Pin */
  GPIO_InitStruct.Pin = ExButton_Pin;
 800155a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800155e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001560:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ExButton_GPIO_Port, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	4805      	ldr	r0, [pc, #20]	; (8001588 <MX_GPIO_Init+0x124>)
 8001572:	f001 fa87 	bl	8002a84 <HAL_GPIO_Init>

}
 8001576:	bf00      	nop
 8001578:	3728      	adds	r7, #40	; 0x28
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800
 8001584:	40020000 	.word	0x40020000
 8001588:	40020400 	.word	0x40020400
 800158c:	40020800 	.word	0x40020800

08001590 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// overwrite the HAL_GPIO_EXTI_Callback function
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == ExButton_Pin) {
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015a0:	d105      	bne.n	80015ae <HAL_GPIO_EXTI_Callback+0x1e>
  	osSignalSet(ExButtonIntTaskHandle, SIGNAL_BUTTON_PRESS);
 80015a2:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <HAL_GPIO_EXTI_Callback+0x3c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2101      	movs	r1, #1
 80015a8:	4618      	mov	r0, r3
 80015aa:	f004 f88b 	bl	80056c4 <osSignalSet>
  }
  if(GPIO_Pin == B1_Pin) {
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015b4:	d105      	bne.n	80015c2 <HAL_GPIO_EXTI_Callback+0x32>
  	osSignalSet(ExButtonIntTaskHandle, SIGNAL_BUTTON_PRESS);
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <HAL_GPIO_EXTI_Callback+0x3c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2101      	movs	r1, #1
 80015bc:	4618      	mov	r0, r3
 80015be:	f004 f881 	bl	80056c4 <osSignalSet>
  }
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200004ec 	.word	0x200004ec

080015d0 <HAL_UART_RxCpltCallback>:

// interrupt callback method - when the data reception is complete, this is called
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	uint8_t flag; // accelerate -> 1, decelerate -> 0, else -> don't do anything

	 // current UART
	if (huart->Instance == USART2) {
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a3b      	ldr	r2, [pc, #236]	; (80016cc <HAL_UART_RxCpltCallback+0xfc>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d16f      	bne.n	80016c2 <HAL_UART_RxCpltCallback+0xf2>
  	// Clear Rx_Buffer prior to use
  	if (Rx_indx == 0) {
 80015e2:	4b3b      	ldr	r3, [pc, #236]	; (80016d0 <HAL_UART_RxCpltCallback+0x100>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d107      	bne.n	80015fa <HAL_UART_RxCpltCallback+0x2a>
    	// turn on the yellow led
    	HAL_GPIO_WritePin(YellowLed_GPIO_Port, YellowLed_Pin, GPIO_PIN_SET);
 80015ea:	2201      	movs	r2, #1
 80015ec:	2102      	movs	r1, #2
 80015ee:	4839      	ldr	r0, [pc, #228]	; (80016d4 <HAL_UART_RxCpltCallback+0x104>)
 80015f0:	f001 fbe4 	bl	8002dbc <HAL_GPIO_WritePin>
    	EmptyBuffer(Rx_Buffer);
 80015f4:	4838      	ldr	r0, [pc, #224]	; (80016d8 <HAL_UART_RxCpltCallback+0x108>)
 80015f6:	f7ff fcab 	bl	8000f50 <EmptyBuffer>
  	}

  	// check for carriage return (ASCII: 13 == \r)
  	if (Rx_byte != 13) {
 80015fa:	4b38      	ldr	r3, [pc, #224]	; (80016dc <HAL_UART_RxCpltCallback+0x10c>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b0d      	cmp	r3, #13
 8001600:	d00b      	beq.n	800161a <HAL_UART_RxCpltCallback+0x4a>
  		Rx_Buffer[Rx_indx++] = Rx_byte; // add data to Rx_Buffer
 8001602:	4b33      	ldr	r3, [pc, #204]	; (80016d0 <HAL_UART_RxCpltCallback+0x100>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	b2d1      	uxtb	r1, r2
 800160a:	4a31      	ldr	r2, [pc, #196]	; (80016d0 <HAL_UART_RxCpltCallback+0x100>)
 800160c:	7011      	strb	r1, [r2, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	4b32      	ldr	r3, [pc, #200]	; (80016dc <HAL_UART_RxCpltCallback+0x10c>)
 8001612:	7819      	ldrb	r1, [r3, #0]
 8001614:	4b30      	ldr	r3, [pc, #192]	; (80016d8 <HAL_UART_RxCpltCallback+0x108>)
 8001616:	5499      	strb	r1, [r3, r2]
 8001618:	e048      	b.n	80016ac <HAL_UART_RxCpltCallback+0xdc>
  	} else {
  		Rx_indx = 0;
 800161a:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <HAL_UART_RxCpltCallback+0x100>)
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
  		Transfer_cplt = 1; // transfer complete, data is ready
 8001620:	4b2f      	ldr	r3, [pc, #188]	; (80016e0 <HAL_UART_RxCpltCallback+0x110>)
 8001622:	2201      	movs	r2, #1
 8001624:	701a      	strb	r2, [r3, #0]

  		// LED trigger phrase
  		if (strcmp(Rx_Buffer, "faster") == 0) {
 8001626:	492f      	ldr	r1, [pc, #188]	; (80016e4 <HAL_UART_RxCpltCallback+0x114>)
 8001628:	482b      	ldr	r0, [pc, #172]	; (80016d8 <HAL_UART_RxCpltCallback+0x108>)
 800162a:	f7fe fdd9 	bl	80001e0 <strcmp>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d106      	bne.n	8001642 <HAL_UART_RxCpltCallback+0x72>
  			sprintf(msg, "Accelerating!");
 8001634:	492c      	ldr	r1, [pc, #176]	; (80016e8 <HAL_UART_RxCpltCallback+0x118>)
 8001636:	482d      	ldr	r0, [pc, #180]	; (80016ec <HAL_UART_RxCpltCallback+0x11c>)
 8001638:	f007 fe6a 	bl	8009310 <siprintf>
  			flag = 1;
 800163c:	2301      	movs	r3, #1
 800163e:	73fb      	strb	r3, [r7, #15]
 8001640:	e013      	b.n	800166a <HAL_UART_RxCpltCallback+0x9a>
  		} else if (strcmp(Rx_Buffer, "slower")  == 0) {
 8001642:	492b      	ldr	r1, [pc, #172]	; (80016f0 <HAL_UART_RxCpltCallback+0x120>)
 8001644:	4824      	ldr	r0, [pc, #144]	; (80016d8 <HAL_UART_RxCpltCallback+0x108>)
 8001646:	f7fe fdcb 	bl	80001e0 <strcmp>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d106      	bne.n	800165e <HAL_UART_RxCpltCallback+0x8e>
  			sprintf(msg, "Decelerating!");
 8001650:	4928      	ldr	r1, [pc, #160]	; (80016f4 <HAL_UART_RxCpltCallback+0x124>)
 8001652:	4826      	ldr	r0, [pc, #152]	; (80016ec <HAL_UART_RxCpltCallback+0x11c>)
 8001654:	f007 fe5c 	bl	8009310 <siprintf>
  			flag = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	73fb      	strb	r3, [r7, #15]
 800165c:	e005      	b.n	800166a <HAL_UART_RxCpltCallback+0x9a>
  		} else {
  			sprintf(msg, "Unknown command.");
 800165e:	4926      	ldr	r1, [pc, #152]	; (80016f8 <HAL_UART_RxCpltCallback+0x128>)
 8001660:	4822      	ldr	r0, [pc, #136]	; (80016ec <HAL_UART_RxCpltCallback+0x11c>)
 8001662:	f007 fe55 	bl	8009310 <siprintf>
  			flag = 2;
 8001666:	2302      	movs	r3, #2
 8001668:	73fb      	strb	r3, [r7, #15]
  		}

  		// send to UART
  		HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 800166a:	2364      	movs	r3, #100	; 0x64
 800166c:	2202      	movs	r2, #2
 800166e:	4923      	ldr	r1, [pc, #140]	; (80016fc <HAL_UART_RxCpltCallback+0x12c>)
 8001670:	4823      	ldr	r0, [pc, #140]	; (8001700 <HAL_UART_RxCpltCallback+0x130>)
 8001672:	f002 ff5e 	bl	8004532 <HAL_UART_Transmit>
  		HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001676:	2364      	movs	r3, #100	; 0x64
 8001678:	2228      	movs	r2, #40	; 0x28
 800167a:	491c      	ldr	r1, [pc, #112]	; (80016ec <HAL_UART_RxCpltCallback+0x11c>)
 800167c:	4820      	ldr	r0, [pc, #128]	; (8001700 <HAL_UART_RxCpltCallback+0x130>)
 800167e:	f002 ff58 	bl	8004532 <HAL_UART_Transmit>
  		HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 8001682:	2364      	movs	r3, #100	; 0x64
 8001684:	2202      	movs	r2, #2
 8001686:	491d      	ldr	r1, [pc, #116]	; (80016fc <HAL_UART_RxCpltCallback+0x12c>)
 8001688:	481d      	ldr	r0, [pc, #116]	; (8001700 <HAL_UART_RxCpltCallback+0x130>)
 800168a:	f002 ff52 	bl	8004532 <HAL_UART_Transmit>
    	EmptyBuffer(msg);
 800168e:	4817      	ldr	r0, [pc, #92]	; (80016ec <HAL_UART_RxCpltCallback+0x11c>)
 8001690:	f7ff fc5e 	bl	8000f50 <EmptyBuffer>

    	// send flag to the UartThread via a queue
	  	osMessagePut(UartQueueHandle, flag, 100);
 8001694:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <HAL_UART_RxCpltCallback+0x134>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	7bf9      	ldrb	r1, [r7, #15]
 800169a:	2264      	movs	r2, #100	; 0x64
 800169c:	4618      	mov	r0, r3
 800169e:	f004 fa17 	bl	8005ad0 <osMessagePut>

    	// turn off the yellow led
    	HAL_GPIO_WritePin(YellowLed_GPIO_Port, YellowLed_Pin, GPIO_PIN_RESET);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2102      	movs	r1, #2
 80016a6:	480b      	ldr	r0, [pc, #44]	; (80016d4 <HAL_UART_RxCpltCallback+0x104>)
 80016a8:	f001 fb88 	bl	8002dbc <HAL_GPIO_WritePin>
  	}

  	// activate UART
  	HAL_UART_Receive_IT(&huart2, &Rx_byte, 1);
 80016ac:	2201      	movs	r2, #1
 80016ae:	490b      	ldr	r1, [pc, #44]	; (80016dc <HAL_UART_RxCpltCallback+0x10c>)
 80016b0:	4813      	ldr	r0, [pc, #76]	; (8001700 <HAL_UART_RxCpltCallback+0x130>)
 80016b2:	f002 ffd0 	bl	8004656 <HAL_UART_Receive_IT>
  	// send to UART
  	HAL_UART_Transmit(&huart2, &Rx_byte, 1, 100);
 80016b6:	2364      	movs	r3, #100	; 0x64
 80016b8:	2201      	movs	r2, #1
 80016ba:	4908      	ldr	r1, [pc, #32]	; (80016dc <HAL_UART_RxCpltCallback+0x10c>)
 80016bc:	4810      	ldr	r0, [pc, #64]	; (8001700 <HAL_UART_RxCpltCallback+0x130>)
 80016be:	f002 ff38 	bl	8004532 <HAL_UART_Transmit>
	}
}
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40004400 	.word	0x40004400
 80016d0:	20000519 	.word	0x20000519
 80016d4:	40020400 	.word	0x40020400
 80016d8:	2000051c 	.word	0x2000051c
 80016dc:	20000518 	.word	0x20000518
 80016e0:	2000051a 	.word	0x2000051a
 80016e4:	0800b994 	.word	0x0800b994
 80016e8:	0800b99c 	.word	0x0800b99c
 80016ec:	20000580 	.word	0x20000580
 80016f0:	0800b9ac 	.word	0x0800b9ac
 80016f4:	0800b9b4 	.word	0x0800b9b4
 80016f8:	0800b9c4 	.word	0x0800b9c4
 80016fc:	0800b9d8 	.word	0x0800b9d8
 8001700:	20000498 	.word	0x20000498
 8001704:	20000500 	.word	0x20000500

08001708 <HAL_TIM_IC_CaptureCallback>:
// Second Timestamp will be captured on the falling edge
// Difference between the Timestamps will be calculated. This Difference will be microseconds, as the timer is running at 1 MHz
// Based on the Difference value, the distance is calculated using the formula given in the datasheet
// Finally, the Interrupt will be disabled, so that we don’t capture any unwanted signals.
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	7f1b      	ldrb	r3, [r3, #28]
 8001714:	2b01      	cmp	r3, #1
 8001716:	f040 809d 	bne.w	8001854 <HAL_TIM_IC_CaptureCallback+0x14c>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 800171a:	4b53      	ldr	r3, [pc, #332]	; (8001868 <HAL_TIM_IC_CaptureCallback+0x160>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d11a      	bne.n	8001758 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001722:	2100      	movs	r1, #0
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f002 fc0f 	bl	8003f48 <HAL_TIM_ReadCapturedValue>
 800172a:	4603      	mov	r3, r0
 800172c:	4a4f      	ldr	r2, [pc, #316]	; (800186c <HAL_TIM_IC_CaptureCallback+0x164>)
 800172e:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001730:	4b4d      	ldr	r3, [pc, #308]	; (8001868 <HAL_TIM_IC_CaptureCallback+0x160>)
 8001732:	2201      	movs	r2, #1
 8001734:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6a1a      	ldr	r2, [r3, #32]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 020a 	bic.w	r2, r2, #10
 8001744:	621a      	str	r2, [r3, #32]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6a1a      	ldr	r2, [r3, #32]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f042 0202 	orr.w	r2, r2, #2
 8001754:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8001756:	e07d      	b.n	8001854 <HAL_TIM_IC_CaptureCallback+0x14c>
		else if (Is_First_Captured==1)   // if the first is already captured
 8001758:	4b43      	ldr	r3, [pc, #268]	; (8001868 <HAL_TIM_IC_CaptureCallback+0x160>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d179      	bne.n	8001854 <HAL_TIM_IC_CaptureCallback+0x14c>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001760:	2100      	movs	r1, #0
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f002 fbf0 	bl	8003f48 <HAL_TIM_ReadCapturedValue>
 8001768:	4603      	mov	r3, r0
 800176a:	4a41      	ldr	r2, [pc, #260]	; (8001870 <HAL_TIM_IC_CaptureCallback+0x168>)
 800176c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2200      	movs	r2, #0
 8001774:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8001776:	4b3e      	ldr	r3, [pc, #248]	; (8001870 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	4b3c      	ldr	r3, [pc, #240]	; (800186c <HAL_TIM_IC_CaptureCallback+0x164>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d907      	bls.n	8001792 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8001782:	4b3b      	ldr	r3, [pc, #236]	; (8001870 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	4b39      	ldr	r3, [pc, #228]	; (800186c <HAL_TIM_IC_CaptureCallback+0x164>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	4a39      	ldr	r2, [pc, #228]	; (8001874 <HAL_TIM_IC_CaptureCallback+0x16c>)
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	e00f      	b.n	80017b2 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8001792:	4b36      	ldr	r3, [pc, #216]	; (800186c <HAL_TIM_IC_CaptureCallback+0x164>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	4b36      	ldr	r3, [pc, #216]	; (8001870 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	d909      	bls.n	80017b2 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 800179e:	4b34      	ldr	r3, [pc, #208]	; (8001870 <HAL_TIM_IC_CaptureCallback+0x168>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	4b32      	ldr	r3, [pc, #200]	; (800186c <HAL_TIM_IC_CaptureCallback+0x164>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80017ac:	33ff      	adds	r3, #255	; 0xff
 80017ae:	4a31      	ldr	r2, [pc, #196]	; (8001874 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80017b0:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 80017b2:	4b30      	ldr	r3, [pc, #192]	; (8001874 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe febc 	bl	8000534 <__aeabi_ui2d>
 80017bc:	a328      	add	r3, pc, #160	; (adr r3, 8001860 <HAL_TIM_IC_CaptureCallback+0x158>)
 80017be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c2:	f7fe ff31 	bl	8000628 <__aeabi_dmul>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4610      	mov	r0, r2
 80017cc:	4619      	mov	r1, r3
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017d6:	f7ff f851 	bl	800087c <__aeabi_ddiv>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	f7ff f9f9 	bl	8000bd8 <__aeabi_d2uiz>
 80017e6:	4603      	mov	r3, r0
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4b23      	ldr	r3, [pc, #140]	; (8001878 <HAL_TIM_IC_CaptureCallback+0x170>)
 80017ec:	701a      	strb	r2, [r3, #0]
	  	if (Distance < 20){
 80017ee:	4b22      	ldr	r3, [pc, #136]	; (8001878 <HAL_TIM_IC_CaptureCallback+0x170>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b13      	cmp	r3, #19
 80017f4:	d808      	bhi.n	8001808 <HAL_TIM_IC_CaptureCallback+0x100>
				detect = 1;
 80017f6:	4b21      	ldr	r3, [pc, #132]	; (800187c <HAL_TIM_IC_CaptureCallback+0x174>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	701a      	strb	r2, [r3, #0]
	    	osSignalSet(ObjectDetectTasHandle, SIGNAL_OBJECT_DETECT);
 80017fc:	4b20      	ldr	r3, [pc, #128]	; (8001880 <HAL_TIM_IC_CaptureCallback+0x178>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2101      	movs	r1, #1
 8001802:	4618      	mov	r0, r3
 8001804:	f003 ff5e 	bl	80056c4 <osSignalSet>
	  	if (Distance >=20){
 8001808:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <HAL_TIM_IC_CaptureCallback+0x170>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b13      	cmp	r3, #19
 800180e:	d908      	bls.n	8001822 <HAL_TIM_IC_CaptureCallback+0x11a>
				detect = 0;
 8001810:	4b1a      	ldr	r3, [pc, #104]	; (800187c <HAL_TIM_IC_CaptureCallback+0x174>)
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
				osSignalSet(ObjectDetectTasHandle, SIGNAL_OBJECT_DETECT);
 8001816:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2101      	movs	r1, #1
 800181c:	4618      	mov	r0, r3
 800181e:	f003 ff51 	bl	80056c4 <osSignalSet>
			Is_First_Captured = 0; // set it back to false
 8001822:	4b11      	ldr	r3, [pc, #68]	; (8001868 <HAL_TIM_IC_CaptureCallback+0x160>)
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6a1a      	ldr	r2, [r3, #32]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 020a 	bic.w	r2, r2, #10
 8001836:	621a      	str	r2, [r3, #32]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6a12      	ldr	r2, [r2, #32]
 8001842:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8001844:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68da      	ldr	r2, [r3, #12]
 800184a:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <HAL_TIM_IC_CaptureCallback+0x17c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f022 0202 	bic.w	r2, r2, #2
 8001852:	60da      	str	r2, [r3, #12]
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	f3af 8000 	nop.w
 8001860:	b020c49c 	.word	0xb020c49c
 8001864:	3fa16872 	.word	0x3fa16872
 8001868:	200005b8 	.word	0x200005b8
 800186c:	200005ac 	.word	0x200005ac
 8001870:	200005b0 	.word	0x200005b0
 8001874:	200005b4 	.word	0x200005b4
 8001878:	200005b9 	.word	0x200005b9
 800187c:	200005ba 	.word	0x200005ba
 8001880:	200004f8 	.word	0x200004f8
 8001884:	20000450 	.word	0x20000450

08001888 <StartImuTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartImuTask */
void StartImuTask(void const * argument)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08c      	sub	sp, #48	; 0x30
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8001890:	4b31      	ldr	r3, [pc, #196]	; (8001958 <StartImuTask+0xd0>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f04f 31ff 	mov.w	r1, #4294967295
 8001898:	4618      	mov	r0, r3
 800189a:	f003 ffb7 	bl	800580c <osMutexWait>
	sprintf(msg, "IMU GO\r\n");
 800189e:	492f      	ldr	r1, [pc, #188]	; (800195c <StartImuTask+0xd4>)
 80018a0:	482f      	ldr	r0, [pc, #188]	; (8001960 <StartImuTask+0xd8>)
 80018a2:	f007 fd35 	bl	8009310 <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 80018a6:	2364      	movs	r3, #100	; 0x64
 80018a8:	2228      	movs	r2, #40	; 0x28
 80018aa:	492d      	ldr	r1, [pc, #180]	; (8001960 <StartImuTask+0xd8>)
 80018ac:	482d      	ldr	r0, [pc, #180]	; (8001964 <StartImuTask+0xdc>)
 80018ae:	f002 fe40 	bl	8004532 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 80018b2:	482b      	ldr	r0, [pc, #172]	; (8001960 <StartImuTask+0xd8>)
 80018b4:	f7ff fb4c 	bl	8000f50 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 80018b8:	4b27      	ldr	r3, [pc, #156]	; (8001958 <StartImuTask+0xd0>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f003 fff3 	bl	80058a8 <osMutexRelease>

  /* Infinite loop */
  for(;;)
  {
  	// print that an imu signal arrived
  	osMutexWait(PrintMtxHandle, osWaitForever);
 80018c2:	4b25      	ldr	r3, [pc, #148]	; (8001958 <StartImuTask+0xd0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f04f 31ff 	mov.w	r1, #4294967295
 80018ca:	4618      	mov	r0, r3
 80018cc:	f003 ff9e 	bl	800580c <osMutexWait>
  	sprintf(msg, "<- IMU\r\n");
 80018d0:	4925      	ldr	r1, [pc, #148]	; (8001968 <StartImuTask+0xe0>)
 80018d2:	4823      	ldr	r0, [pc, #140]	; (8001960 <StartImuTask+0xd8>)
 80018d4:	f007 fd1c 	bl	8009310 <siprintf>
  	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 80018d8:	2364      	movs	r3, #100	; 0x64
 80018da:	2228      	movs	r2, #40	; 0x28
 80018dc:	4920      	ldr	r1, [pc, #128]	; (8001960 <StartImuTask+0xd8>)
 80018de:	4821      	ldr	r0, [pc, #132]	; (8001964 <StartImuTask+0xdc>)
 80018e0:	f002 fe27 	bl	8004532 <HAL_UART_Transmit>
  	EmptyBuffer(msg);
 80018e4:	481e      	ldr	r0, [pc, #120]	; (8001960 <StartImuTask+0xd8>)
 80018e6:	f7ff fb33 	bl	8000f50 <EmptyBuffer>
  	osMutexRelease(PrintMtxHandle);
 80018ea:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <StartImuTask+0xd0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f003 ffda 	bl	80058a8 <osMutexRelease>

  	// Get the RTOS kernel tick count
  	uint32_t t =  osKernelSysTick();
 80018f4:	f003 fe75 	bl	80055e2 <osKernelSysTick>
 80018f8:	62f8      	str	r0, [r7, #44]	; 0x2c

  	// pseudo-measurements -  we assume that the the IMU gives perfect measurements that indicate that the vehicle moves in a circle with constant speeds
  	AngVel imu_ang_vel = {0, 0, 20}; // rad/(100*sec)
 80018fa:	2300      	movs	r3, #0
 80018fc:	84bb      	strh	r3, [r7, #36]	; 0x24
 80018fe:	2300      	movs	r3, #0
 8001900:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001902:	2314      	movs	r3, #20
 8001904:	853b      	strh	r3, [r7, #40]	; 0x28
  	LinAcc imu_lin_acc = {10, 0, 0}; // m/(100*sec^2)
 8001906:	230a      	movs	r3, #10
 8001908:	83bb      	strh	r3, [r7, #28]
 800190a:	2300      	movs	r3, #0
 800190c:	83fb      	strh	r3, [r7, #30]
 800190e:	2300      	movs	r3, #0
 8001910:	843b      	strh	r3, [r7, #32]
  	ImuData imu_readings = {t, imu_ang_vel, imu_lin_acc};
 8001912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	f107 0310 	add.w	r3, r7, #16
 800191a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800191e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001922:	6018      	str	r0, [r3, #0]
 8001924:	3304      	adds	r3, #4
 8001926:	8019      	strh	r1, [r3, #0]
 8001928:	f107 0316 	add.w	r3, r7, #22
 800192c:	f107 021c 	add.w	r2, r7, #28
 8001930:	6810      	ldr	r0, [r2, #0]
 8001932:	6018      	str	r0, [r3, #0]
 8001934:	8892      	ldrh	r2, [r2, #4]
 8001936:	809a      	strh	r2, [r3, #4]

  	// send the data to the queue
  	uint8_t ret = osMessagePut(ImuQueueHandle, (uint32_t) &imu_readings, osWaitForever);
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <StartImuTask+0xe4>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f107 010c 	add.w	r1, r7, #12
 8001940:	f04f 32ff 	mov.w	r2, #4294967295
 8001944:	4618      	mov	r0, r3
 8001946:	f004 f8c3 	bl	8005ad0 <osMessagePut>
 800194a:	4603      	mov	r3, r0
 800194c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
//  	sprintf(msg, "IMU put return : %d\r\n", ret);
//  	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
//  	EmptyBuffer(msg);
//  	osMutexRelease(PrintMtxHandle);

  	osDelay(10); // IMU signal every 0.01 sec
 8001950:	200a      	movs	r0, #10
 8001952:	f003 fea2 	bl	800569a <osDelay>
  {
 8001956:	e7b4      	b.n	80018c2 <StartImuTask+0x3a>
 8001958:	20000510 	.word	0x20000510
 800195c:	0800b9dc 	.word	0x0800b9dc
 8001960:	20000580 	.word	0x20000580
 8001964:	20000498 	.word	0x20000498
 8001968:	0800b9e8 	.word	0x0800b9e8
 800196c:	20000504 	.word	0x20000504

08001970 <StartGpsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGpsTask */
void StartGpsTask(void const * argument)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGpsTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8001978:	4b28      	ldr	r3, [pc, #160]	; (8001a1c <StartGpsTask+0xac>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f04f 31ff 	mov.w	r1, #4294967295
 8001980:	4618      	mov	r0, r3
 8001982:	f003 ff43 	bl	800580c <osMutexWait>
	sprintf(msg, "GPS GO\r\n");
 8001986:	4926      	ldr	r1, [pc, #152]	; (8001a20 <StartGpsTask+0xb0>)
 8001988:	4826      	ldr	r0, [pc, #152]	; (8001a24 <StartGpsTask+0xb4>)
 800198a:	f007 fcc1 	bl	8009310 <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 800198e:	2364      	movs	r3, #100	; 0x64
 8001990:	2228      	movs	r2, #40	; 0x28
 8001992:	4924      	ldr	r1, [pc, #144]	; (8001a24 <StartGpsTask+0xb4>)
 8001994:	4824      	ldr	r0, [pc, #144]	; (8001a28 <StartGpsTask+0xb8>)
 8001996:	f002 fdcc 	bl	8004532 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 800199a:	4822      	ldr	r0, [pc, #136]	; (8001a24 <StartGpsTask+0xb4>)
 800199c:	f7ff fad8 	bl	8000f50 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 80019a0:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <StartGpsTask+0xac>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f003 ff7f 	bl	80058a8 <osMutexRelease>

	/* Infinite loop */
  for(;;)
  {
  	// print that a gps signal arrived
  	osMutexWait(PrintMtxHandle, osWaitForever);
 80019aa:	4b1c      	ldr	r3, [pc, #112]	; (8001a1c <StartGpsTask+0xac>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f04f 31ff 	mov.w	r1, #4294967295
 80019b2:	4618      	mov	r0, r3
 80019b4:	f003 ff2a 	bl	800580c <osMutexWait>
  	sprintf(msg, "<- GPS\r\n");
 80019b8:	491c      	ldr	r1, [pc, #112]	; (8001a2c <StartGpsTask+0xbc>)
 80019ba:	481a      	ldr	r0, [pc, #104]	; (8001a24 <StartGpsTask+0xb4>)
 80019bc:	f007 fca8 	bl	8009310 <siprintf>
  	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 80019c0:	2364      	movs	r3, #100	; 0x64
 80019c2:	2228      	movs	r2, #40	; 0x28
 80019c4:	4917      	ldr	r1, [pc, #92]	; (8001a24 <StartGpsTask+0xb4>)
 80019c6:	4818      	ldr	r0, [pc, #96]	; (8001a28 <StartGpsTask+0xb8>)
 80019c8:	f002 fdb3 	bl	8004532 <HAL_UART_Transmit>
  	EmptyBuffer(msg);
 80019cc:	4815      	ldr	r0, [pc, #84]	; (8001a24 <StartGpsTask+0xb4>)
 80019ce:	f7ff fabf 	bl	8000f50 <EmptyBuffer>
  	osMutexRelease(PrintMtxHandle);
 80019d2:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <StartGpsTask+0xac>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f003 ff66 	bl	80058a8 <osMutexRelease>

  	// Get the RTOS kernel tick count
  	uint32_t  t =  osKernelSysTick();
 80019dc:	f003 fe01 	bl	80055e2 <osKernelSysTick>
 80019e0:	61f8      	str	r0, [r7, #28]

  	// GPS pseudo-measurements
  	uint16_t gps_x = 110; // in m/100
 80019e2:	236e      	movs	r3, #110	; 0x6e
 80019e4:	837b      	strh	r3, [r7, #26]
  	uint16_t gps_y = 220; // in m/100
 80019e6:	23dc      	movs	r3, #220	; 0xdc
 80019e8:	833b      	strh	r3, [r7, #24]
  	uint16_t gps_z = 330; // in m/100
 80019ea:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 80019ee:	82fb      	strh	r3, [r7, #22]
  	GpsData gps_readings = {t, gps_x, gps_y, gps_z};
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	8b7b      	ldrh	r3, [r7, #26]
 80019f6:	81bb      	strh	r3, [r7, #12]
 80019f8:	8b3b      	ldrh	r3, [r7, #24]
 80019fa:	81fb      	strh	r3, [r7, #14]
 80019fc:	8afb      	ldrh	r3, [r7, #22]
 80019fe:	823b      	strh	r3, [r7, #16]

  	// send the data to the queue
  	osMessagePut(GpsQueueHandle, (uint32_t) &gps_readings, osWaitForever);
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <StartGpsTask+0xc0>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f107 0108 	add.w	r1, r7, #8
 8001a08:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f004 f85f 	bl	8005ad0 <osMessagePut>

  	osDelay(100); // GPS signal every 0.1 sec
 8001a12:	2064      	movs	r0, #100	; 0x64
 8001a14:	f003 fe41 	bl	800569a <osDelay>
  {
 8001a18:	e7c7      	b.n	80019aa <StartGpsTask+0x3a>
 8001a1a:	bf00      	nop
 8001a1c:	20000510 	.word	0x20000510
 8001a20:	0800b9f4 	.word	0x0800b9f4
 8001a24:	20000580 	.word	0x20000580
 8001a28:	20000498 	.word	0x20000498
 8001a2c:	0800ba00 	.word	0x0800ba00
 8001a30:	20000508 	.word	0x20000508

08001a34 <StartKFTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartKFTask */
void StartKFTask(void const * argument)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartKFTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8001a3c:	4b30      	ldr	r3, [pc, #192]	; (8001b00 <StartKFTask+0xcc>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f04f 31ff 	mov.w	r1, #4294967295
 8001a44:	4618      	mov	r0, r3
 8001a46:	f003 fee1 	bl	800580c <osMutexWait>
	sprintf(msg, "KF GO\r\n");
 8001a4a:	492e      	ldr	r1, [pc, #184]	; (8001b04 <StartKFTask+0xd0>)
 8001a4c:	482e      	ldr	r0, [pc, #184]	; (8001b08 <StartKFTask+0xd4>)
 8001a4e:	f007 fc5f 	bl	8009310 <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001a52:	2364      	movs	r3, #100	; 0x64
 8001a54:	2228      	movs	r2, #40	; 0x28
 8001a56:	492c      	ldr	r1, [pc, #176]	; (8001b08 <StartKFTask+0xd4>)
 8001a58:	482c      	ldr	r0, [pc, #176]	; (8001b0c <StartKFTask+0xd8>)
 8001a5a:	f002 fd6a 	bl	8004532 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8001a5e:	482a      	ldr	r0, [pc, #168]	; (8001b08 <StartKFTask+0xd4>)
 8001a60:	f7ff fa76 	bl	8000f50 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8001a64:	4b26      	ldr	r3, [pc, #152]	; (8001b00 <StartKFTask+0xcc>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f003 ff1d 	bl	80058a8 <osMutexRelease>
	/* Infinite loop */
  for(;;)
  {
  	// receive GPS and IMU data from queues
  	// osStatus -> 0:osOK, 64:osEventTimeout, 16:osEventMessage 128:osErrorParameter
  	osEvent retval_imu = osMessageGet(ImuQueueHandle, 0);
 8001a6e:	4b28      	ldr	r3, [pc, #160]	; (8001b10 <StartKFTask+0xdc>)
 8001a70:	6819      	ldr	r1, [r3, #0]
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	2200      	movs	r2, #0
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f004 f869 	bl	8005b50 <osMessageGet>
//  	((ImuData*)retval_imu.value.p)->timestamp;
//  	((ImuData*)retval_imu.value.p)->lin_acc;
//  	((ImuData*)retval_imu.value.p)->ang_vel;

  	if (retval_imu.status == osEventMessage ) {
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	2b10      	cmp	r3, #16
 8001a82:	d118      	bne.n	8001ab6 <StartKFTask+0x82>
			// Kalman filter corrections based on the GPS global position
			osMutexWait(PrintMtxHandle, osWaitForever);
 8001a84:	4b1e      	ldr	r3, [pc, #120]	; (8001b00 <StartKFTask+0xcc>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f04f 31ff 	mov.w	r1, #4294967295
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f003 febd 	bl	800580c <osMutexWait>
			sprintf(msg, "IMU - KF update...\r\n");
 8001a92:	4920      	ldr	r1, [pc, #128]	; (8001b14 <StartKFTask+0xe0>)
 8001a94:	481c      	ldr	r0, [pc, #112]	; (8001b08 <StartKFTask+0xd4>)
 8001a96:	f007 fc3b 	bl	8009310 <siprintf>
			HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001a9a:	2364      	movs	r3, #100	; 0x64
 8001a9c:	2228      	movs	r2, #40	; 0x28
 8001a9e:	491a      	ldr	r1, [pc, #104]	; (8001b08 <StartKFTask+0xd4>)
 8001aa0:	481a      	ldr	r0, [pc, #104]	; (8001b0c <StartKFTask+0xd8>)
 8001aa2:	f002 fd46 	bl	8004532 <HAL_UART_Transmit>
			EmptyBuffer(msg);
 8001aa6:	4818      	ldr	r0, [pc, #96]	; (8001b08 <StartKFTask+0xd4>)
 8001aa8:	f7ff fa52 	bl	8000f50 <EmptyBuffer>
			osMutexRelease(PrintMtxHandle);
 8001aac:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <StartKFTask+0xcc>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f003 fef9 	bl	80058a8 <osMutexRelease>
  	}

  	osEvent retval_gps = osMessageGet(GpsQueueHandle, 0);
 8001ab6:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <StartKFTask+0xe4>)
 8001ab8:	6819      	ldr	r1, [r3, #0]
 8001aba:	f107 0308 	add.w	r3, r7, #8
 8001abe:	2200      	movs	r2, #0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f004 f845 	bl	8005b50 <osMessageGet>
//  	((GpsData*)retval_imu.value.p)->timestamp;
//  	((GpsData*)retval_imu.value.p)->x;
//  	((GpsData*)retval_imu.value.p)->y;
//  	((GpsData*)retval_imu.value.p)->z;

  	if (retval_gps.status == osEventMessage ) {
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	2b10      	cmp	r3, #16
 8001aca:	d1d0      	bne.n	8001a6e <StartKFTask+0x3a>
			// Kalman filter corrections based on the GPS global position
			osMutexWait(PrintMtxHandle, osWaitForever);
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <StartKFTask+0xcc>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f003 fe99 	bl	800580c <osMutexWait>
			sprintf(msg, "GPS - KF correction...\r\n");
 8001ada:	4910      	ldr	r1, [pc, #64]	; (8001b1c <StartKFTask+0xe8>)
 8001adc:	480a      	ldr	r0, [pc, #40]	; (8001b08 <StartKFTask+0xd4>)
 8001ade:	f007 fc17 	bl	8009310 <siprintf>
			HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001ae2:	2364      	movs	r3, #100	; 0x64
 8001ae4:	2228      	movs	r2, #40	; 0x28
 8001ae6:	4908      	ldr	r1, [pc, #32]	; (8001b08 <StartKFTask+0xd4>)
 8001ae8:	4808      	ldr	r0, [pc, #32]	; (8001b0c <StartKFTask+0xd8>)
 8001aea:	f002 fd22 	bl	8004532 <HAL_UART_Transmit>
			EmptyBuffer(msg);
 8001aee:	4806      	ldr	r0, [pc, #24]	; (8001b08 <StartKFTask+0xd4>)
 8001af0:	f7ff fa2e 	bl	8000f50 <EmptyBuffer>
			osMutexRelease(PrintMtxHandle);
 8001af4:	4b02      	ldr	r3, [pc, #8]	; (8001b00 <StartKFTask+0xcc>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f003 fed5 	bl	80058a8 <osMutexRelease>
  {
 8001afe:	e7b6      	b.n	8001a6e <StartKFTask+0x3a>
 8001b00:	20000510 	.word	0x20000510
 8001b04:	0800ba0c 	.word	0x0800ba0c
 8001b08:	20000580 	.word	0x20000580
 8001b0c:	20000498 	.word	0x20000498
 8001b10:	20000504 	.word	0x20000504
 8001b14:	0800ba14 	.word	0x0800ba14
 8001b18:	20000508 	.word	0x20000508
 8001b1c:	0800ba2c 	.word	0x0800ba2c

08001b20 <StartRadarTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRadarTask */
void StartRadarTask(void const * argument)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRadarTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8001b28:	4b1a      	ldr	r3, [pc, #104]	; (8001b94 <StartRadarTask+0x74>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b30:	4618      	mov	r0, r3
 8001b32:	f003 fe6b 	bl	800580c <osMutexWait>
	sprintf(msg, "Radar GO\r\n");
 8001b36:	4918      	ldr	r1, [pc, #96]	; (8001b98 <StartRadarTask+0x78>)
 8001b38:	4818      	ldr	r0, [pc, #96]	; (8001b9c <StartRadarTask+0x7c>)
 8001b3a:	f007 fbe9 	bl	8009310 <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001b3e:	2364      	movs	r3, #100	; 0x64
 8001b40:	2228      	movs	r2, #40	; 0x28
 8001b42:	4916      	ldr	r1, [pc, #88]	; (8001b9c <StartRadarTask+0x7c>)
 8001b44:	4816      	ldr	r0, [pc, #88]	; (8001ba0 <StartRadarTask+0x80>)
 8001b46:	f002 fcf4 	bl	8004532 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8001b4a:	4814      	ldr	r0, [pc, #80]	; (8001b9c <StartRadarTask+0x7c>)
 8001b4c:	f7ff fa00 	bl	8000f50 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8001b50:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <StartRadarTask+0x74>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f003 fea7 	bl	80058a8 <osMutexRelease>

	// counter to periodically pseudo-detect an object
	uint8_t i = 0; // 8 bits means that after 256 it goes back to 0
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	73fb      	strb	r3, [r7, #15]
  for(;;)
  {
  	// read from the supersonic sensor
  	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b64:	480f      	ldr	r0, [pc, #60]	; (8001ba4 <StartRadarTask+0x84>)
 8001b66:	f001 f929 	bl	8002dbc <HAL_GPIO_WritePin>
  	delay(10);  // wait for 10 us
 8001b6a:	200a      	movs	r0, #10
 8001b6c:	f7ff fa0e 	bl	8000f8c <delay>
  	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001b70:	2200      	movs	r2, #0
 8001b72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b76:	480b      	ldr	r0, [pc, #44]	; (8001ba4 <StartRadarTask+0x84>)
 8001b78:	f001 f920 	bl	8002dbc <HAL_GPIO_WritePin>

  	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001b7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <StartRadarTask+0x88>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <StartRadarTask+0x88>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 0202 	orr.w	r2, r2, #2
 8001b8a:	60da      	str	r2, [r3, #12]
  	// delay for 0.05 sec -> pretty normal radar frequency
  	osDelay(50);
 8001b8c:	2032      	movs	r0, #50	; 0x32
 8001b8e:	f003 fd84 	bl	800569a <osDelay>
  	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001b92:	e7e4      	b.n	8001b5e <StartRadarTask+0x3e>
 8001b94:	20000510 	.word	0x20000510
 8001b98:	0800ba48 	.word	0x0800ba48
 8001b9c:	20000580 	.word	0x20000580
 8001ba0:	20000498 	.word	0x20000498
 8001ba4:	40020000 	.word	0x40020000
 8001ba8:	20000450 	.word	0x20000450

08001bac <StartExButtonIntTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartExButtonIntTask */
void StartExButtonIntTask(void const * argument)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartExButtonIntTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8001bb4:	4b62      	ldr	r3, [pc, #392]	; (8001d40 <StartExButtonIntTask+0x194>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f003 fe25 	bl	800580c <osMutexWait>
	sprintf(msg, "ExButton GO\r\n");
 8001bc2:	4960      	ldr	r1, [pc, #384]	; (8001d44 <StartExButtonIntTask+0x198>)
 8001bc4:	4860      	ldr	r0, [pc, #384]	; (8001d48 <StartExButtonIntTask+0x19c>)
 8001bc6:	f007 fba3 	bl	8009310 <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001bca:	2364      	movs	r3, #100	; 0x64
 8001bcc:	2228      	movs	r2, #40	; 0x28
 8001bce:	495e      	ldr	r1, [pc, #376]	; (8001d48 <StartExButtonIntTask+0x19c>)
 8001bd0:	485e      	ldr	r0, [pc, #376]	; (8001d4c <StartExButtonIntTask+0x1a0>)
 8001bd2:	f002 fcae 	bl	8004532 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8001bd6:	485c      	ldr	r0, [pc, #368]	; (8001d48 <StartExButtonIntTask+0x19c>)
 8001bd8:	f7ff f9ba 	bl	8000f50 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8001bdc:	4b58      	ldr	r3, [pc, #352]	; (8001d40 <StartExButtonIntTask+0x194>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f003 fe61 	bl	80058a8 <osMutexRelease>
  /* Infinite loop */
  for(;;)
  {
  	//wait for signal
  	osSignalWait(SIGNAL_BUTTON_PRESS, osWaitForever);
 8001be6:	463b      	mov	r3, r7
 8001be8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bec:	2101      	movs	r1, #1
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f003 fda8 	bl	8005744 <osSignalWait>

  	// print to uart
  	osMutexWait(PrintMtxHandle, osWaitForever);
 8001bf4:	4b52      	ldr	r3, [pc, #328]	; (8001d40 <StartExButtonIntTask+0x194>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f003 fe05 	bl	800580c <osMutexWait>
  	sprintf(msg, "Emergency button pressed...\r\n");
 8001c02:	4953      	ldr	r1, [pc, #332]	; (8001d50 <StartExButtonIntTask+0x1a4>)
 8001c04:	4850      	ldr	r0, [pc, #320]	; (8001d48 <StartExButtonIntTask+0x19c>)
 8001c06:	f007 fb83 	bl	8009310 <siprintf>
  	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001c0a:	2364      	movs	r3, #100	; 0x64
 8001c0c:	2228      	movs	r2, #40	; 0x28
 8001c0e:	494e      	ldr	r1, [pc, #312]	; (8001d48 <StartExButtonIntTask+0x19c>)
 8001c10:	484e      	ldr	r0, [pc, #312]	; (8001d4c <StartExButtonIntTask+0x1a0>)
 8001c12:	f002 fc8e 	bl	8004532 <HAL_UART_Transmit>
  	EmptyBuffer(msg);
 8001c16:	484c      	ldr	r0, [pc, #304]	; (8001d48 <StartExButtonIntTask+0x19c>)
 8001c18:	f7ff f99a 	bl	8000f50 <EmptyBuffer>
  	osMutexRelease(PrintMtxHandle);
 8001c1c:	4b48      	ldr	r3, [pc, #288]	; (8001d40 <StartExButtonIntTask+0x194>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f003 fe41 	bl	80058a8 <osMutexRelease>

  	// only if there are no detected objects the emergency button should do something
  	if (detect == 0) {
 8001c26:	4b4b      	ldr	r3, [pc, #300]	; (8001d54 <StartExButtonIntTask+0x1a8>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1db      	bne.n	8001be6 <StartExButtonIntTask+0x3a>
    	// read redled state
  	  GPIO_PinState red_trig = HAL_GPIO_ReadPin(RedLed_GPIO_Port, RedLed_Pin);
 8001c2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c32:	4849      	ldr	r0, [pc, #292]	; (8001d58 <StartExButtonIntTask+0x1ac>)
 8001c34:	f001 f8aa 	bl	8002d8c <HAL_GPIO_ReadPin>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	77fb      	strb	r3, [r7, #31]
  	  if (red_trig == GPIO_PIN_RESET){
 8001c3c:	7ffb      	ldrb	r3, [r7, #31]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d13e      	bne.n	8001cc0 <StartExButtonIntTask+0x114>
  	  	// stop the vehicle!!
  	  	osSemaphoreWait(VelSemaphoreHandle, osWaitForever);
 8001c42:	4b46      	ldr	r3, [pc, #280]	; (8001d5c <StartExButtonIntTask+0x1b0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f04f 31ff 	mov.w	r1, #4294967295
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f003 fe94 	bl	8005978 <osSemaphoreWait>
  	  	v = 0; // update the velocity references
 8001c50:	4b43      	ldr	r3, [pc, #268]	; (8001d60 <StartExButtonIntTask+0x1b4>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	701a      	strb	r2, [r3, #0]
  	  	w = 0;
 8001c56:	4b43      	ldr	r3, [pc, #268]	; (8001d64 <StartExButtonIntTask+0x1b8>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	701a      	strb	r2, [r3, #0]
  	  	osSemaphoreRelease(VelSemaphoreHandle);
 8001c5c:	4b3f      	ldr	r3, [pc, #252]	; (8001d5c <StartExButtonIntTask+0x1b0>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f003 fed7 	bl	8005a14 <osSemaphoreRelease>

  	  	osMutexWait(PrintMtxHandle, osWaitForever);
 8001c66:	4b36      	ldr	r3, [pc, #216]	; (8001d40 <StartExButtonIntTask+0x194>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f04f 31ff 	mov.w	r1, #4294967295
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f003 fdcc 	bl	800580c <osMutexWait>
  	  	sprintf(msg, "Lin. vel: %d Ang vel: %d\r\n", v, w);
 8001c74:	4b3a      	ldr	r3, [pc, #232]	; (8001d60 <StartExButtonIntTask+0x1b4>)
 8001c76:	f993 3000 	ldrsb.w	r3, [r3]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	4b39      	ldr	r3, [pc, #228]	; (8001d64 <StartExButtonIntTask+0x1b8>)
 8001c7e:	f993 3000 	ldrsb.w	r3, [r3]
 8001c82:	4939      	ldr	r1, [pc, #228]	; (8001d68 <StartExButtonIntTask+0x1bc>)
 8001c84:	4830      	ldr	r0, [pc, #192]	; (8001d48 <StartExButtonIntTask+0x19c>)
 8001c86:	f007 fb43 	bl	8009310 <siprintf>
  	  	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001c8a:	2364      	movs	r3, #100	; 0x64
 8001c8c:	2228      	movs	r2, #40	; 0x28
 8001c8e:	492e      	ldr	r1, [pc, #184]	; (8001d48 <StartExButtonIntTask+0x19c>)
 8001c90:	482e      	ldr	r0, [pc, #184]	; (8001d4c <StartExButtonIntTask+0x1a0>)
 8001c92:	f002 fc4e 	bl	8004532 <HAL_UART_Transmit>
  	  	EmptyBuffer(msg);
 8001c96:	482c      	ldr	r0, [pc, #176]	; (8001d48 <StartExButtonIntTask+0x19c>)
 8001c98:	f7ff f95a 	bl	8000f50 <EmptyBuffer>
  	  	osMutexRelease(PrintMtxHandle);
 8001c9c:	4b28      	ldr	r3, [pc, #160]	; (8001d40 <StartExButtonIntTask+0x194>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f003 fe01 	bl	80058a8 <osMutexRelease>

  	  	// turn on red light
  		  HAL_GPIO_WritePin(RedLed_GPIO_Port, RedLed_Pin, GPIO_PIN_SET);
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cac:	482a      	ldr	r0, [pc, #168]	; (8001d58 <StartExButtonIntTask+0x1ac>)
 8001cae:	f001 f885 	bl	8002dbc <HAL_GPIO_WritePin>
  	  	// turn off green light
  		  HAL_GPIO_WritePin(GreenLed_GPIO_Port, GreenLed_Pin, GPIO_PIN_RESET);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cb8:	4827      	ldr	r0, [pc, #156]	; (8001d58 <StartExButtonIntTask+0x1ac>)
 8001cba:	f001 f87f 	bl	8002dbc <HAL_GPIO_WritePin>
 8001cbe:	e792      	b.n	8001be6 <StartExButtonIntTask+0x3a>
  	  } else {
  	  	// start the vehicle
  	  	osSemaphoreWait(VelSemaphoreHandle, osWaitForever);
 8001cc0:	4b26      	ldr	r3, [pc, #152]	; (8001d5c <StartExButtonIntTask+0x1b0>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f003 fe55 	bl	8005978 <osSemaphoreWait>
  	  	v = 10; // update the velocity references
 8001cce:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <StartExButtonIntTask+0x1b4>)
 8001cd0:	220a      	movs	r2, #10
 8001cd2:	701a      	strb	r2, [r3, #0]
  	  	w = 0;
 8001cd4:	4b23      	ldr	r3, [pc, #140]	; (8001d64 <StartExButtonIntTask+0x1b8>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
  	  	osSemaphoreRelease(VelSemaphoreHandle);
 8001cda:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <StartExButtonIntTask+0x1b0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f003 fe98 	bl	8005a14 <osSemaphoreRelease>

  	  	osMutexWait(PrintMtxHandle, osWaitForever);
 8001ce4:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <StartExButtonIntTask+0x194>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cec:	4618      	mov	r0, r3
 8001cee:	f003 fd8d 	bl	800580c <osMutexWait>
  	  	sprintf(msg, "Lin. vel: %d Ang vel: %d\r\n", v, w);
 8001cf2:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <StartExButtonIntTask+0x1b4>)
 8001cf4:	f993 3000 	ldrsb.w	r3, [r3]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <StartExButtonIntTask+0x1b8>)
 8001cfc:	f993 3000 	ldrsb.w	r3, [r3]
 8001d00:	4919      	ldr	r1, [pc, #100]	; (8001d68 <StartExButtonIntTask+0x1bc>)
 8001d02:	4811      	ldr	r0, [pc, #68]	; (8001d48 <StartExButtonIntTask+0x19c>)
 8001d04:	f007 fb04 	bl	8009310 <siprintf>
  	  	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001d08:	2364      	movs	r3, #100	; 0x64
 8001d0a:	2228      	movs	r2, #40	; 0x28
 8001d0c:	490e      	ldr	r1, [pc, #56]	; (8001d48 <StartExButtonIntTask+0x19c>)
 8001d0e:	480f      	ldr	r0, [pc, #60]	; (8001d4c <StartExButtonIntTask+0x1a0>)
 8001d10:	f002 fc0f 	bl	8004532 <HAL_UART_Transmit>
  	  	EmptyBuffer(msg);
 8001d14:	480c      	ldr	r0, [pc, #48]	; (8001d48 <StartExButtonIntTask+0x19c>)
 8001d16:	f7ff f91b 	bl	8000f50 <EmptyBuffer>
  	  	osMutexRelease(PrintMtxHandle);
 8001d1a:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <StartExButtonIntTask+0x194>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f003 fdc2 	bl	80058a8 <osMutexRelease>

  	  	// turn on the green light
  		  HAL_GPIO_WritePin(GreenLed_GPIO_Port, GreenLed_Pin, GPIO_PIN_SET);
 8001d24:	2201      	movs	r2, #1
 8001d26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d2a:	480b      	ldr	r0, [pc, #44]	; (8001d58 <StartExButtonIntTask+0x1ac>)
 8001d2c:	f001 f846 	bl	8002dbc <HAL_GPIO_WritePin>
  	  	// turn off the red light
  		  HAL_GPIO_WritePin(RedLed_GPIO_Port, RedLed_Pin, GPIO_PIN_RESET);
 8001d30:	2200      	movs	r2, #0
 8001d32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d36:	4808      	ldr	r0, [pc, #32]	; (8001d58 <StartExButtonIntTask+0x1ac>)
 8001d38:	f001 f840 	bl	8002dbc <HAL_GPIO_WritePin>
  	osSignalWait(SIGNAL_BUTTON_PRESS, osWaitForever);
 8001d3c:	e753      	b.n	8001be6 <StartExButtonIntTask+0x3a>
 8001d3e:	bf00      	nop
 8001d40:	20000510 	.word	0x20000510
 8001d44:	0800ba54 	.word	0x0800ba54
 8001d48:	20000580 	.word	0x20000580
 8001d4c:	20000498 	.word	0x20000498
 8001d50:	0800ba64 	.word	0x0800ba64
 8001d54:	200005ba 	.word	0x200005ba
 8001d58:	40020400 	.word	0x40020400
 8001d5c:	20000514 	.word	0x20000514
 8001d60:	200005a8 	.word	0x200005a8
 8001d64:	200005a9 	.word	0x200005a9
 8001d68:	0800ba84 	.word	0x0800ba84

08001d6c <StartMotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void const * argument)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTask */
  /* Infinite loop */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8001d74:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <StartMotorTask+0x50>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f04f 31ff 	mov.w	r1, #4294967295
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f003 fd45 	bl	800580c <osMutexWait>
	sprintf(msg, "Motor GO\r\n");
 8001d82:	490f      	ldr	r1, [pc, #60]	; (8001dc0 <StartMotorTask+0x54>)
 8001d84:	480f      	ldr	r0, [pc, #60]	; (8001dc4 <StartMotorTask+0x58>)
 8001d86:	f007 fac3 	bl	8009310 <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001d8a:	2364      	movs	r3, #100	; 0x64
 8001d8c:	2228      	movs	r2, #40	; 0x28
 8001d8e:	490d      	ldr	r1, [pc, #52]	; (8001dc4 <StartMotorTask+0x58>)
 8001d90:	480d      	ldr	r0, [pc, #52]	; (8001dc8 <StartMotorTask+0x5c>)
 8001d92:	f002 fbce 	bl	8004532 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8001d96:	480b      	ldr	r0, [pc, #44]	; (8001dc4 <StartMotorTask+0x58>)
 8001d98:	f7ff f8da 	bl	8000f50 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8001d9c:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <StartMotorTask+0x50>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f003 fd81 	bl	80058a8 <osMutexRelease>
	v = 0; // 14 m/sec linear velocity
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <StartMotorTask+0x60>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	701a      	strb	r2, [r3, #0]
	w = 0; // 0.2 rad/sec angular velocity
 8001dac:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <StartMotorTask+0x64>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	701a      	strb	r2, [r3, #0]
  for(;;)
  {
  	// block until resumed
  	osThreadSuspend(NULL);
 8001db2:	2000      	movs	r0, #0
 8001db4:	f003 ff40 	bl	8005c38 <osThreadSuspend>
 8001db8:	e7fb      	b.n	8001db2 <StartMotorTask+0x46>
 8001dba:	bf00      	nop
 8001dbc:	20000510 	.word	0x20000510
 8001dc0:	0800baa0 	.word	0x0800baa0
 8001dc4:	20000580 	.word	0x20000580
 8001dc8:	20000498 	.word	0x20000498
 8001dcc:	200005a8 	.word	0x200005a8
 8001dd0:	200005a9 	.word	0x200005a9

08001dd4 <StartMainTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMainTask */
void StartMainTask(void const * argument)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMainTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8001ddc:	4b1f      	ldr	r3, [pc, #124]	; (8001e5c <StartMainTask+0x88>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f04f 31ff 	mov.w	r1, #4294967295
 8001de4:	4618      	mov	r0, r3
 8001de6:	f003 fd11 	bl	800580c <osMutexWait>
	sprintf(msg, "Main GO\r\n");
 8001dea:	491d      	ldr	r1, [pc, #116]	; (8001e60 <StartMainTask+0x8c>)
 8001dec:	481d      	ldr	r0, [pc, #116]	; (8001e64 <StartMainTask+0x90>)
 8001dee:	f007 fa8f 	bl	8009310 <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 200);
 8001df2:	23c8      	movs	r3, #200	; 0xc8
 8001df4:	2228      	movs	r2, #40	; 0x28
 8001df6:	491b      	ldr	r1, [pc, #108]	; (8001e64 <StartMainTask+0x90>)
 8001df8:	481b      	ldr	r0, [pc, #108]	; (8001e68 <StartMainTask+0x94>)
 8001dfa:	f002 fb9a 	bl	8004532 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8001dfe:	4819      	ldr	r0, [pc, #100]	; (8001e64 <StartMainTask+0x90>)
 8001e00:	f7ff f8a6 	bl	8000f50 <EmptyBuffer>
	sprintf(msg, "Enabling UART...\r\n");
 8001e04:	4919      	ldr	r1, [pc, #100]	; (8001e6c <StartMainTask+0x98>)
 8001e06:	4817      	ldr	r0, [pc, #92]	; (8001e64 <StartMainTask+0x90>)
 8001e08:	f007 fa82 	bl	8009310 <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001e0c:	2364      	movs	r3, #100	; 0x64
 8001e0e:	2228      	movs	r2, #40	; 0x28
 8001e10:	4914      	ldr	r1, [pc, #80]	; (8001e64 <StartMainTask+0x90>)
 8001e12:	4815      	ldr	r0, [pc, #84]	; (8001e68 <StartMainTask+0x94>)
 8001e14:	f002 fb8d 	bl	8004532 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8001e18:	4812      	ldr	r0, [pc, #72]	; (8001e64 <StartMainTask+0x90>)
 8001e1a:	f7ff f899 	bl	8000f50 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8001e1e:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <StartMainTask+0x88>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f003 fd40 	bl	80058a8 <osMutexRelease>

	// enable UART receive
	HAL_UART_Receive_IT(&huart2, &Rx_byte, 1);
 8001e28:	2201      	movs	r2, #1
 8001e2a:	4911      	ldr	r1, [pc, #68]	; (8001e70 <StartMainTask+0x9c>)
 8001e2c:	480e      	ldr	r0, [pc, #56]	; (8001e68 <StartMainTask+0x94>)
 8001e2e:	f002 fc12 	bl	8004656 <HAL_UART_Receive_IT>
	// enable tim1 IT for radar object detection
  HAL_TIM_Base_Start_IT(&htim1);
 8001e32:	4810      	ldr	r0, [pc, #64]	; (8001e74 <StartMainTask+0xa0>)
 8001e34:	f001 fd18 	bl	8003868 <HAL_TIM_Base_Start_IT>
//  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); // to get IC_CaptureCallback

  /* Infinite loop */
  for(;;)
  {
  	sprintf(msg, "-Main\r\n");
 8001e38:	490f      	ldr	r1, [pc, #60]	; (8001e78 <StartMainTask+0xa4>)
 8001e3a:	480a      	ldr	r0, [pc, #40]	; (8001e64 <StartMainTask+0x90>)
 8001e3c:	f007 fa68 	bl	8009310 <siprintf>
  	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001e40:	2364      	movs	r3, #100	; 0x64
 8001e42:	2228      	movs	r2, #40	; 0x28
 8001e44:	4907      	ldr	r1, [pc, #28]	; (8001e64 <StartMainTask+0x90>)
 8001e46:	4808      	ldr	r0, [pc, #32]	; (8001e68 <StartMainTask+0x94>)
 8001e48:	f002 fb73 	bl	8004532 <HAL_UART_Transmit>
  	EmptyBuffer(msg);
 8001e4c:	4805      	ldr	r0, [pc, #20]	; (8001e64 <StartMainTask+0x90>)
 8001e4e:	f7ff f87f 	bl	8000f50 <EmptyBuffer>

  	// suspend main until it is resumed
  	osThreadSuspend(NULL);
 8001e52:	2000      	movs	r0, #0
 8001e54:	f003 fef0 	bl	8005c38 <osThreadSuspend>
  	sprintf(msg, "-Main\r\n");
 8001e58:	e7ee      	b.n	8001e38 <StartMainTask+0x64>
 8001e5a:	bf00      	nop
 8001e5c:	20000510 	.word	0x20000510
 8001e60:	0800baac 	.word	0x0800baac
 8001e64:	20000580 	.word	0x20000580
 8001e68:	20000498 	.word	0x20000498
 8001e6c:	0800bab8 	.word	0x0800bab8
 8001e70:	20000518 	.word	0x20000518
 8001e74:	20000450 	.word	0x20000450
 8001e78:	0800bacc 	.word	0x0800bacc

08001e7c <StartObjectDetectTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartObjectDetectTask */
void StartObjectDetectTask(void const * argument)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartObjectDetectTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8001e84:	4b59      	ldr	r3, [pc, #356]	; (8001fec <StartObjectDetectTask+0x170>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f04f 31ff 	mov.w	r1, #4294967295
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f003 fcbd 	bl	800580c <osMutexWait>
	sprintf(msg, "ObjDetect GO\r\n");
 8001e92:	4957      	ldr	r1, [pc, #348]	; (8001ff0 <StartObjectDetectTask+0x174>)
 8001e94:	4857      	ldr	r0, [pc, #348]	; (8001ff4 <StartObjectDetectTask+0x178>)
 8001e96:	f007 fa3b 	bl	8009310 <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8001e9a:	2364      	movs	r3, #100	; 0x64
 8001e9c:	2228      	movs	r2, #40	; 0x28
 8001e9e:	4955      	ldr	r1, [pc, #340]	; (8001ff4 <StartObjectDetectTask+0x178>)
 8001ea0:	4855      	ldr	r0, [pc, #340]	; (8001ff8 <StartObjectDetectTask+0x17c>)
 8001ea2:	f002 fb46 	bl	8004532 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8001ea6:	4853      	ldr	r0, [pc, #332]	; (8001ff4 <StartObjectDetectTask+0x178>)
 8001ea8:	f7ff f852 	bl	8000f50 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8001eac:	4b4f      	ldr	r3, [pc, #316]	; (8001fec <StartObjectDetectTask+0x170>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f003 fcf9 	bl	80058a8 <osMutexRelease>

	// previous detections flag
	uint8_t prev_detect = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	77fb      	strb	r3, [r7, #31]
  /* Infinite loop */
  for(;;)
  {
  	//wait for signal
  	osSignalWait(SIGNAL_OBJECT_DETECT, osWaitForever);
 8001eba:	463b      	mov	r3, r7
 8001ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f003 fc3e 	bl	8005744 <osSignalWait>

  	// print to uart if something changed
  	if (detect != prev_detect) {
 8001ec8:	4b4c      	ldr	r3, [pc, #304]	; (8001ffc <StartObjectDetectTask+0x180>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	7ffa      	ldrb	r2, [r7, #31]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d0f3      	beq.n	8001eba <StartObjectDetectTask+0x3e>
    	if (detect == 1) {
 8001ed2:	4b4a      	ldr	r3, [pc, #296]	; (8001ffc <StartObjectDetectTask+0x180>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d161      	bne.n	8001f9e <StartObjectDetectTask+0x122>
    		osMutexWait(PrintMtxHandle, osWaitForever);
 8001eda:	4b44      	ldr	r3, [pc, #272]	; (8001fec <StartObjectDetectTask+0x170>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f003 fc92 	bl	800580c <osMutexWait>
      	sprintf(msg, "~~ DANGER! Object! ~~\r\n");
 8001ee8:	4945      	ldr	r1, [pc, #276]	; (8002000 <StartObjectDetectTask+0x184>)
 8001eea:	4842      	ldr	r0, [pc, #264]	; (8001ff4 <StartObjectDetectTask+0x178>)
 8001eec:	f007 fa10 	bl	8009310 <siprintf>
      	HAL_UART_Transmit(&huart2, msg, strlen(msg), 100);
 8001ef0:	4840      	ldr	r0, [pc, #256]	; (8001ff4 <StartObjectDetectTask+0x178>)
 8001ef2:	f7fe f97f 	bl	80001f4 <strlen>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	2364      	movs	r3, #100	; 0x64
 8001efc:	493d      	ldr	r1, [pc, #244]	; (8001ff4 <StartObjectDetectTask+0x178>)
 8001efe:	483e      	ldr	r0, [pc, #248]	; (8001ff8 <StartObjectDetectTask+0x17c>)
 8001f00:	f002 fb17 	bl	8004532 <HAL_UART_Transmit>
      	EmptyBuffer(msg);
 8001f04:	483b      	ldr	r0, [pc, #236]	; (8001ff4 <StartObjectDetectTask+0x178>)
 8001f06:	f7ff f823 	bl	8000f50 <EmptyBuffer>
      	osMutexRelease(PrintMtxHandle);
 8001f0a:	4b38      	ldr	r3, [pc, #224]	; (8001fec <StartObjectDetectTask+0x170>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f003 fcca 	bl	80058a8 <osMutexRelease>

      	// turn on blue light
      	HAL_GPIO_WritePin(BlueLed_GPIO_Port, BlueLed_Pin, GPIO_PIN_SET);
 8001f14:	2201      	movs	r2, #1
 8001f16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f1a:	483a      	ldr	r0, [pc, #232]	; (8002004 <StartObjectDetectTask+0x188>)
 8001f1c:	f000 ff4e 	bl	8002dbc <HAL_GPIO_WritePin>

      	// stop the vehicle!!
      	osSemaphoreWait(VelSemaphoreHandle, osWaitForever);
 8001f20:	4b39      	ldr	r3, [pc, #228]	; (8002008 <StartObjectDetectTask+0x18c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f04f 31ff 	mov.w	r1, #4294967295
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f003 fd25 	bl	8005978 <osSemaphoreWait>
      	v = 0; // update the velocity references
 8001f2e:	4b37      	ldr	r3, [pc, #220]	; (800200c <StartObjectDetectTask+0x190>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]
      	w = 0;
 8001f34:	4b36      	ldr	r3, [pc, #216]	; (8002010 <StartObjectDetectTask+0x194>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	701a      	strb	r2, [r3, #0]
      	osSemaphoreRelease(VelSemaphoreHandle);
 8001f3a:	4b33      	ldr	r3, [pc, #204]	; (8002008 <StartObjectDetectTask+0x18c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f003 fd68 	bl	8005a14 <osSemaphoreRelease>

      	// turn on red light
      	HAL_GPIO_WritePin(RedLed_GPIO_Port, RedLed_Pin, GPIO_PIN_SET);
 8001f44:	2201      	movs	r2, #1
 8001f46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f4a:	482e      	ldr	r0, [pc, #184]	; (8002004 <StartObjectDetectTask+0x188>)
 8001f4c:	f000 ff36 	bl	8002dbc <HAL_GPIO_WritePin>
      	// turn off green light
      	HAL_GPIO_WritePin(GreenLed_GPIO_Port, GreenLed_Pin, GPIO_PIN_RESET);
 8001f50:	2200      	movs	r2, #0
 8001f52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f56:	482b      	ldr	r0, [pc, #172]	; (8002004 <StartObjectDetectTask+0x188>)
 8001f58:	f000 ff30 	bl	8002dbc <HAL_GPIO_WritePin>

    		osMutexWait(PrintMtxHandle, osWaitForever);
 8001f5c:	4b23      	ldr	r3, [pc, #140]	; (8001fec <StartObjectDetectTask+0x170>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f04f 31ff 	mov.w	r1, #4294967295
 8001f64:	4618      	mov	r0, r3
 8001f66:	f003 fc51 	bl	800580c <osMutexWait>
      	sprintf(msg, "Lin. vel: %d Ang vel: %d\r\n", v, w);
 8001f6a:	4b28      	ldr	r3, [pc, #160]	; (800200c <StartObjectDetectTask+0x190>)
 8001f6c:	f993 3000 	ldrsb.w	r3, [r3]
 8001f70:	461a      	mov	r2, r3
 8001f72:	4b27      	ldr	r3, [pc, #156]	; (8002010 <StartObjectDetectTask+0x194>)
 8001f74:	f993 3000 	ldrsb.w	r3, [r3]
 8001f78:	4926      	ldr	r1, [pc, #152]	; (8002014 <StartObjectDetectTask+0x198>)
 8001f7a:	481e      	ldr	r0, [pc, #120]	; (8001ff4 <StartObjectDetectTask+0x178>)
 8001f7c:	f007 f9c8 	bl	8009310 <siprintf>
      	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 200);
 8001f80:	23c8      	movs	r3, #200	; 0xc8
 8001f82:	2228      	movs	r2, #40	; 0x28
 8001f84:	491b      	ldr	r1, [pc, #108]	; (8001ff4 <StartObjectDetectTask+0x178>)
 8001f86:	481c      	ldr	r0, [pc, #112]	; (8001ff8 <StartObjectDetectTask+0x17c>)
 8001f88:	f002 fad3 	bl	8004532 <HAL_UART_Transmit>
      	EmptyBuffer(msg);
 8001f8c:	4819      	ldr	r0, [pc, #100]	; (8001ff4 <StartObjectDetectTask+0x178>)
 8001f8e:	f7fe ffdf 	bl	8000f50 <EmptyBuffer>
      	osMutexRelease(PrintMtxHandle);
 8001f92:	4b16      	ldr	r3, [pc, #88]	; (8001fec <StartObjectDetectTask+0x170>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f003 fc86 	bl	80058a8 <osMutexRelease>
 8001f9c:	e022      	b.n	8001fe4 <StartObjectDetectTask+0x168>

    	} else {
    		osMutexWait(PrintMtxHandle, osWaitForever);
 8001f9e:	4b13      	ldr	r3, [pc, #76]	; (8001fec <StartObjectDetectTask+0x170>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f003 fc30 	bl	800580c <osMutexWait>
      	sprintf(msg, "~~ Clear path. No objects. ~~\r\n");
 8001fac:	491a      	ldr	r1, [pc, #104]	; (8002018 <StartObjectDetectTask+0x19c>)
 8001fae:	4811      	ldr	r0, [pc, #68]	; (8001ff4 <StartObjectDetectTask+0x178>)
 8001fb0:	f007 f9ae 	bl	8009310 <siprintf>
      	HAL_UART_Transmit(&huart2, msg, strlen(msg), 100);
 8001fb4:	480f      	ldr	r0, [pc, #60]	; (8001ff4 <StartObjectDetectTask+0x178>)
 8001fb6:	f7fe f91d 	bl	80001f4 <strlen>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	2364      	movs	r3, #100	; 0x64
 8001fc0:	490c      	ldr	r1, [pc, #48]	; (8001ff4 <StartObjectDetectTask+0x178>)
 8001fc2:	480d      	ldr	r0, [pc, #52]	; (8001ff8 <StartObjectDetectTask+0x17c>)
 8001fc4:	f002 fab5 	bl	8004532 <HAL_UART_Transmit>
      	EmptyBuffer(msg);
 8001fc8:	480a      	ldr	r0, [pc, #40]	; (8001ff4 <StartObjectDetectTask+0x178>)
 8001fca:	f7fe ffc1 	bl	8000f50 <EmptyBuffer>
      	osMutexRelease(PrintMtxHandle);
 8001fce:	4b07      	ldr	r3, [pc, #28]	; (8001fec <StartObjectDetectTask+0x170>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f003 fc68 	bl	80058a8 <osMutexRelease>

      	// turn off blue light
      	HAL_GPIO_WritePin(BlueLed_GPIO_Port, BlueLed_Pin, GPIO_PIN_RESET);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fde:	4809      	ldr	r0, [pc, #36]	; (8002004 <StartObjectDetectTask+0x188>)
 8001fe0:	f000 feec 	bl	8002dbc <HAL_GPIO_WritePin>
    	}

    	// update previous detection
    	prev_detect = detect;
 8001fe4:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <StartObjectDetectTask+0x180>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	77fb      	strb	r3, [r7, #31]
  	osSignalWait(SIGNAL_OBJECT_DETECT, osWaitForever);
 8001fea:	e766      	b.n	8001eba <StartObjectDetectTask+0x3e>
 8001fec:	20000510 	.word	0x20000510
 8001ff0:	0800bad4 	.word	0x0800bad4
 8001ff4:	20000580 	.word	0x20000580
 8001ff8:	20000498 	.word	0x20000498
 8001ffc:	200005ba 	.word	0x200005ba
 8002000:	0800bae4 	.word	0x0800bae4
 8002004:	40020400 	.word	0x40020400
 8002008:	20000514 	.word	0x20000514
 800200c:	200005a8 	.word	0x200005a8
 8002010:	200005a9 	.word	0x200005a9
 8002014:	0800ba84 	.word	0x0800ba84
 8002018:	0800bafc 	.word	0x0800bafc
 800201c:	00000000 	.word	0x00000000

08002020 <StartUartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUartTask */
void StartUartTask(void const * argument)
{
 8002020:	b5b0      	push	{r4, r5, r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af02      	add	r7, sp, #8
 8002026:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUartTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8002028:	4b6b      	ldr	r3, [pc, #428]	; (80021d8 <StartUartTask+0x1b8>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f04f 31ff 	mov.w	r1, #4294967295
 8002030:	4618      	mov	r0, r3
 8002032:	f003 fbeb 	bl	800580c <osMutexWait>
	sprintf(msg, "ObjDetect GO\r\n");
 8002036:	4969      	ldr	r1, [pc, #420]	; (80021dc <StartUartTask+0x1bc>)
 8002038:	4869      	ldr	r0, [pc, #420]	; (80021e0 <StartUartTask+0x1c0>)
 800203a:	f007 f969 	bl	8009310 <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 800203e:	2364      	movs	r3, #100	; 0x64
 8002040:	2228      	movs	r2, #40	; 0x28
 8002042:	4967      	ldr	r1, [pc, #412]	; (80021e0 <StartUartTask+0x1c0>)
 8002044:	4867      	ldr	r0, [pc, #412]	; (80021e4 <StartUartTask+0x1c4>)
 8002046:	f002 fa74 	bl	8004532 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 800204a:	4865      	ldr	r0, [pc, #404]	; (80021e0 <StartUartTask+0x1c0>)
 800204c:	f7fe ff80 	bl	8000f50 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8002050:	4b61      	ldr	r3, [pc, #388]	; (80021d8 <StartUartTask+0x1b8>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f003 fc27 	bl	80058a8 <osMutexRelease>
  /* Infinite loop */
  for(;;)
  {
  	//wait for signal
  	osEvent retval_uart = osMessageGet(UartQueueHandle, osWaitForever);
 800205a:	4b63      	ldr	r3, [pc, #396]	; (80021e8 <StartUartTask+0x1c8>)
 800205c:	6819      	ldr	r1, [r3, #0]
 800205e:	f107 0308 	add.w	r3, r7, #8
 8002062:	f04f 32ff 	mov.w	r2, #4294967295
 8002066:	4618      	mov	r0, r3
 8002068:	f003 fd72 	bl	8005b50 <osMessageGet>
  	uint8_t accel_flag = retval_uart.value.p;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	75fb      	strb	r3, [r7, #23]

  	// if the passed flag is 1, we accelerate by 10%, otherwise, we decelerate by 10%
  	osSemaphoreWait(VelSemaphoreHandle, osWaitForever);
 8002070:	4b5e      	ldr	r3, [pc, #376]	; (80021ec <StartUartTask+0x1cc>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f04f 31ff 	mov.w	r1, #4294967295
 8002078:	4618      	mov	r0, r3
 800207a:	f003 fc7d 	bl	8005978 <osSemaphoreWait>
  	if (accel_flag == 1) {
 800207e:	7dfb      	ldrb	r3, [r7, #23]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d12a      	bne.n	80020da <StartUartTask+0xba>
  		if ( v == 0 ) {
 8002084:	4b5a      	ldr	r3, [pc, #360]	; (80021f0 <StartUartTask+0x1d0>)
 8002086:	f993 3000 	ldrsb.w	r3, [r3]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10f      	bne.n	80020ae <StartUartTask+0x8e>
  			v = 10;
 800208e:	4b58      	ldr	r3, [pc, #352]	; (80021f0 <StartUartTask+0x1d0>)
 8002090:	220a      	movs	r2, #10
 8002092:	701a      	strb	r2, [r3, #0]
      	// turn off red light
      	HAL_GPIO_WritePin(RedLed_GPIO_Port, RedLed_Pin, GPIO_PIN_RESET);
 8002094:	2200      	movs	r2, #0
 8002096:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800209a:	4856      	ldr	r0, [pc, #344]	; (80021f4 <StartUartTask+0x1d4>)
 800209c:	f000 fe8e 	bl	8002dbc <HAL_GPIO_WritePin>
      	// turn on green light
      	HAL_GPIO_WritePin(GreenLed_GPIO_Port, GreenLed_Pin, GPIO_PIN_SET);
 80020a0:	2201      	movs	r2, #1
 80020a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020a6:	4853      	ldr	r0, [pc, #332]	; (80021f4 <StartUartTask+0x1d4>)
 80020a8:	f000 fe88 	bl	8002dbc <HAL_GPIO_WritePin>
 80020ac:	e032      	b.n	8002114 <StartUartTask+0xf4>
  		} else {
    		v = v*1.1;
 80020ae:	4b50      	ldr	r3, [pc, #320]	; (80021f0 <StartUartTask+0x1d0>)
 80020b0:	f993 3000 	ldrsb.w	r3, [r3]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7fe fa4d 	bl	8000554 <__aeabi_i2d>
 80020ba:	a343      	add	r3, pc, #268	; (adr r3, 80021c8 <StartUartTask+0x1a8>)
 80020bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c0:	f7fe fab2 	bl	8000628 <__aeabi_dmul>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4610      	mov	r0, r2
 80020ca:	4619      	mov	r1, r3
 80020cc:	f7fe fd5c 	bl	8000b88 <__aeabi_d2iz>
 80020d0:	4603      	mov	r3, r0
 80020d2:	b25a      	sxtb	r2, r3
 80020d4:	4b46      	ldr	r3, [pc, #280]	; (80021f0 <StartUartTask+0x1d0>)
 80020d6:	701a      	strb	r2, [r3, #0]
 80020d8:	e01c      	b.n	8002114 <StartUartTask+0xf4>
  		}
  	} else if (accel_flag == 0){
 80020da:	7dfb      	ldrb	r3, [r7, #23]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d119      	bne.n	8002114 <StartUartTask+0xf4>
			if ( v != 0 ) {
 80020e0:	4b43      	ldr	r3, [pc, #268]	; (80021f0 <StartUartTask+0x1d0>)
 80020e2:	f993 3000 	ldrsb.w	r3, [r3]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d014      	beq.n	8002114 <StartUartTask+0xf4>
				v = v*0.9;
 80020ea:	4b41      	ldr	r3, [pc, #260]	; (80021f0 <StartUartTask+0x1d0>)
 80020ec:	f993 3000 	ldrsb.w	r3, [r3]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe fa2f 	bl	8000554 <__aeabi_i2d>
 80020f6:	a336      	add	r3, pc, #216	; (adr r3, 80021d0 <StartUartTask+0x1b0>)
 80020f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fc:	f7fe fa94 	bl	8000628 <__aeabi_dmul>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4610      	mov	r0, r2
 8002106:	4619      	mov	r1, r3
 8002108:	f7fe fd3e 	bl	8000b88 <__aeabi_d2iz>
 800210c:	4603      	mov	r3, r0
 800210e:	b25a      	sxtb	r2, r3
 8002110:	4b37      	ldr	r3, [pc, #220]	; (80021f0 <StartUartTask+0x1d0>)
 8002112:	701a      	strb	r2, [r3, #0]
			}
  	}
  	osSemaphoreRelease(VelSemaphoreHandle);
 8002114:	4b35      	ldr	r3, [pc, #212]	; (80021ec <StartUartTask+0x1cc>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f003 fc7b 	bl	8005a14 <osSemaphoreRelease>

  	osMutexWait(PrintMtxHandle, osWaitForever);
 800211e:	4b2e      	ldr	r3, [pc, #184]	; (80021d8 <StartUartTask+0x1b8>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f04f 31ff 	mov.w	r1, #4294967295
 8002126:	4618      	mov	r0, r3
 8002128:	f003 fb70 	bl	800580c <osMutexWait>
  	sprintf(msg, "Lin. vel: %d.%d Ang vel: %d.%d\r\n", v/10, v%10, w/10, w%10);
 800212c:	4b30      	ldr	r3, [pc, #192]	; (80021f0 <StartUartTask+0x1d0>)
 800212e:	f993 3000 	ldrsb.w	r3, [r3]
 8002132:	4a31      	ldr	r2, [pc, #196]	; (80021f8 <StartUartTask+0x1d8>)
 8002134:	fb82 1203 	smull	r1, r2, r2, r3
 8002138:	1092      	asrs	r2, r2, #2
 800213a:	17db      	asrs	r3, r3, #31
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	b25b      	sxtb	r3, r3
 8002140:	461c      	mov	r4, r3
 8002142:	4b2b      	ldr	r3, [pc, #172]	; (80021f0 <StartUartTask+0x1d0>)
 8002144:	f993 2000 	ldrsb.w	r2, [r3]
 8002148:	4b2b      	ldr	r3, [pc, #172]	; (80021f8 <StartUartTask+0x1d8>)
 800214a:	fb83 1302 	smull	r1, r3, r3, r2
 800214e:	1099      	asrs	r1, r3, #2
 8002150:	17d3      	asrs	r3, r2, #31
 8002152:	1ac9      	subs	r1, r1, r3
 8002154:	460b      	mov	r3, r1
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	b25b      	sxtb	r3, r3
 8002160:	461d      	mov	r5, r3
 8002162:	4b26      	ldr	r3, [pc, #152]	; (80021fc <StartUartTask+0x1dc>)
 8002164:	f993 3000 	ldrsb.w	r3, [r3]
 8002168:	4a23      	ldr	r2, [pc, #140]	; (80021f8 <StartUartTask+0x1d8>)
 800216a:	fb82 1203 	smull	r1, r2, r2, r3
 800216e:	1092      	asrs	r2, r2, #2
 8002170:	17db      	asrs	r3, r3, #31
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	b25b      	sxtb	r3, r3
 8002176:	4618      	mov	r0, r3
 8002178:	4b20      	ldr	r3, [pc, #128]	; (80021fc <StartUartTask+0x1dc>)
 800217a:	f993 2000 	ldrsb.w	r2, [r3]
 800217e:	4b1e      	ldr	r3, [pc, #120]	; (80021f8 <StartUartTask+0x1d8>)
 8002180:	fb83 1302 	smull	r1, r3, r3, r2
 8002184:	1099      	asrs	r1, r3, #2
 8002186:	17d3      	asrs	r3, r2, #31
 8002188:	1ac9      	subs	r1, r1, r3
 800218a:	460b      	mov	r3, r1
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	440b      	add	r3, r1
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	b25b      	sxtb	r3, r3
 8002196:	9301      	str	r3, [sp, #4]
 8002198:	9000      	str	r0, [sp, #0]
 800219a:	462b      	mov	r3, r5
 800219c:	4622      	mov	r2, r4
 800219e:	4918      	ldr	r1, [pc, #96]	; (8002200 <StartUartTask+0x1e0>)
 80021a0:	480f      	ldr	r0, [pc, #60]	; (80021e0 <StartUartTask+0x1c0>)
 80021a2:	f007 f8b5 	bl	8009310 <siprintf>
  	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 80021a6:	2364      	movs	r3, #100	; 0x64
 80021a8:	2228      	movs	r2, #40	; 0x28
 80021aa:	490d      	ldr	r1, [pc, #52]	; (80021e0 <StartUartTask+0x1c0>)
 80021ac:	480d      	ldr	r0, [pc, #52]	; (80021e4 <StartUartTask+0x1c4>)
 80021ae:	f002 f9c0 	bl	8004532 <HAL_UART_Transmit>
  	EmptyBuffer(msg);
 80021b2:	480b      	ldr	r0, [pc, #44]	; (80021e0 <StartUartTask+0x1c0>)
 80021b4:	f7fe fecc 	bl	8000f50 <EmptyBuffer>
  	osMutexRelease(PrintMtxHandle);
 80021b8:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <StartUartTask+0x1b8>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f003 fb73 	bl	80058a8 <osMutexRelease>
  {
 80021c2:	e74a      	b.n	800205a <StartUartTask+0x3a>
 80021c4:	f3af 8000 	nop.w
 80021c8:	9999999a 	.word	0x9999999a
 80021cc:	3ff19999 	.word	0x3ff19999
 80021d0:	cccccccd 	.word	0xcccccccd
 80021d4:	3feccccc 	.word	0x3feccccc
 80021d8:	20000510 	.word	0x20000510
 80021dc:	0800bad4 	.word	0x0800bad4
 80021e0:	20000580 	.word	0x20000580
 80021e4:	20000498 	.word	0x20000498
 80021e8:	20000500 	.word	0x20000500
 80021ec:	20000514 	.word	0x20000514
 80021f0:	200005a8 	.word	0x200005a8
 80021f4:	40020400 	.word	0x40020400
 80021f8:	66666667 	.word	0x66666667
 80021fc:	200005a9 	.word	0x200005a9
 8002200:	0800bb1c 	.word	0x0800bb1c

08002204 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a04      	ldr	r2, [pc, #16]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d101      	bne.n	800221a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002216:	f000 faa1 	bl	800275c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40014400 	.word	0x40014400

08002228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800222c:	b672      	cpsid	i
}
 800222e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002230:	e7fe      	b.n	8002230 <Error_Handler+0x8>
	...

08002234 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	607b      	str	r3, [r7, #4]
 800223e:	4b12      	ldr	r3, [pc, #72]	; (8002288 <HAL_MspInit+0x54>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	4a11      	ldr	r2, [pc, #68]	; (8002288 <HAL_MspInit+0x54>)
 8002244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002248:	6453      	str	r3, [r2, #68]	; 0x44
 800224a:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <HAL_MspInit+0x54>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002252:	607b      	str	r3, [r7, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	603b      	str	r3, [r7, #0]
 800225a:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <HAL_MspInit+0x54>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	4a0a      	ldr	r2, [pc, #40]	; (8002288 <HAL_MspInit+0x54>)
 8002260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002264:	6413      	str	r3, [r2, #64]	; 0x40
 8002266:	4b08      	ldr	r3, [pc, #32]	; (8002288 <HAL_MspInit+0x54>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226e:	603b      	str	r3, [r7, #0]
 8002270:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002272:	2200      	movs	r2, #0
 8002274:	210f      	movs	r1, #15
 8002276:	f06f 0001 	mvn.w	r0, #1
 800227a:	f000 fb47 	bl	800290c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40023800 	.word	0x40023800

0800228c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08a      	sub	sp, #40	; 0x28
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a21      	ldr	r2, [pc, #132]	; (8002330 <HAL_TIM_IC_MspInit+0xa4>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d13c      	bne.n	8002328 <HAL_TIM_IC_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	4b20      	ldr	r3, [pc, #128]	; (8002334 <HAL_TIM_IC_MspInit+0xa8>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	4a1f      	ldr	r2, [pc, #124]	; (8002334 <HAL_TIM_IC_MspInit+0xa8>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6453      	str	r3, [r2, #68]	; 0x44
 80022be:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <HAL_TIM_IC_MspInit+0xa8>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	4b19      	ldr	r3, [pc, #100]	; (8002334 <HAL_TIM_IC_MspInit+0xa8>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	4a18      	ldr	r2, [pc, #96]	; (8002334 <HAL_TIM_IC_MspInit+0xa8>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	6313      	str	r3, [r2, #48]	; 0x30
 80022da:	4b16      	ldr	r3, [pc, #88]	; (8002334 <HAL_TIM_IC_MspInit+0xa8>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 80022e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ec:	2302      	movs	r3, #2
 80022ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f4:	2300      	movs	r3, #0
 80022f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022f8:	2301      	movs	r3, #1
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	4619      	mov	r1, r3
 8002302:	480d      	ldr	r0, [pc, #52]	; (8002338 <HAL_TIM_IC_MspInit+0xac>)
 8002304:	f000 fbbe 	bl	8002a84 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8002308:	2200      	movs	r2, #0
 800230a:	2105      	movs	r1, #5
 800230c:	2019      	movs	r0, #25
 800230e:	f000 fafd 	bl	800290c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002312:	2019      	movs	r0, #25
 8002314:	f000 fb16 	bl	8002944 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002318:	2200      	movs	r2, #0
 800231a:	2105      	movs	r1, #5
 800231c:	201b      	movs	r0, #27
 800231e:	f000 faf5 	bl	800290c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002322:	201b      	movs	r0, #27
 8002324:	f000 fb0e 	bl	8002944 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002328:	bf00      	nop
 800232a:	3728      	adds	r7, #40	; 0x28
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40010000 	.word	0x40010000
 8002334:	40023800 	.word	0x40023800
 8002338:	40020000 	.word	0x40020000

0800233c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08a      	sub	sp, #40	; 0x28
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a1d      	ldr	r2, [pc, #116]	; (80023d0 <HAL_UART_MspInit+0x94>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d133      	bne.n	80023c6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	4b1c      	ldr	r3, [pc, #112]	; (80023d4 <HAL_UART_MspInit+0x98>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	4a1b      	ldr	r2, [pc, #108]	; (80023d4 <HAL_UART_MspInit+0x98>)
 8002368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800236c:	6413      	str	r3, [r2, #64]	; 0x40
 800236e:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <HAL_UART_MspInit+0x98>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <HAL_UART_MspInit+0x98>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	4a14      	ldr	r2, [pc, #80]	; (80023d4 <HAL_UART_MspInit+0x98>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	6313      	str	r3, [r2, #48]	; 0x30
 800238a:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <HAL_UART_MspInit+0x98>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002396:	230c      	movs	r3, #12
 8002398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239a:	2302      	movs	r3, #2
 800239c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a2:	2303      	movs	r3, #3
 80023a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023a6:	2307      	movs	r3, #7
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023aa:	f107 0314 	add.w	r3, r7, #20
 80023ae:	4619      	mov	r1, r3
 80023b0:	4809      	ldr	r0, [pc, #36]	; (80023d8 <HAL_UART_MspInit+0x9c>)
 80023b2:	f000 fb67 	bl	8002a84 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80023b6:	2200      	movs	r2, #0
 80023b8:	2105      	movs	r1, #5
 80023ba:	2026      	movs	r0, #38	; 0x26
 80023bc:	f000 faa6 	bl	800290c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023c0:	2026      	movs	r0, #38	; 0x26
 80023c2:	f000 fabf 	bl	8002944 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80023c6:	bf00      	nop
 80023c8:	3728      	adds	r7, #40	; 0x28
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40004400 	.word	0x40004400
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40020000 	.word	0x40020000

080023dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08c      	sub	sp, #48	; 0x30
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80023ec:	2200      	movs	r2, #0
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	2019      	movs	r0, #25
 80023f2:	f000 fa8b 	bl	800290c <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80023f6:	2019      	movs	r0, #25
 80023f8:	f000 faa4 	bl	8002944 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80023fc:	2300      	movs	r3, #0
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	4b1e      	ldr	r3, [pc, #120]	; (800247c <HAL_InitTick+0xa0>)
 8002402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002404:	4a1d      	ldr	r2, [pc, #116]	; (800247c <HAL_InitTick+0xa0>)
 8002406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800240a:	6453      	str	r3, [r2, #68]	; 0x44
 800240c:	4b1b      	ldr	r3, [pc, #108]	; (800247c <HAL_InitTick+0xa0>)
 800240e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002418:	f107 0210 	add.w	r2, r7, #16
 800241c:	f107 0314 	add.w	r3, r7, #20
 8002420:	4611      	mov	r1, r2
 8002422:	4618      	mov	r0, r3
 8002424:	f001 f994 	bl	8003750 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002428:	f001 f97e 	bl	8003728 <HAL_RCC_GetPCLK2Freq>
 800242c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800242e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002430:	4a13      	ldr	r2, [pc, #76]	; (8002480 <HAL_InitTick+0xa4>)
 8002432:	fba2 2303 	umull	r2, r3, r2, r3
 8002436:	0c9b      	lsrs	r3, r3, #18
 8002438:	3b01      	subs	r3, #1
 800243a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 800243c:	4b11      	ldr	r3, [pc, #68]	; (8002484 <HAL_InitTick+0xa8>)
 800243e:	4a12      	ldr	r2, [pc, #72]	; (8002488 <HAL_InitTick+0xac>)
 8002440:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8002442:	4b10      	ldr	r3, [pc, #64]	; (8002484 <HAL_InitTick+0xa8>)
 8002444:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002448:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800244a:	4a0e      	ldr	r2, [pc, #56]	; (8002484 <HAL_InitTick+0xa8>)
 800244c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <HAL_InitTick+0xa8>)
 8002452:	2200      	movs	r2, #0
 8002454:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002456:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_InitTick+0xa8>)
 8002458:	2200      	movs	r2, #0
 800245a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 800245c:	4809      	ldr	r0, [pc, #36]	; (8002484 <HAL_InitTick+0xa8>)
 800245e:	f001 f9a9 	bl	80037b4 <HAL_TIM_Base_Init>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d104      	bne.n	8002472 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8002468:	4806      	ldr	r0, [pc, #24]	; (8002484 <HAL_InitTick+0xa8>)
 800246a:	f001 f9fd 	bl	8003868 <HAL_TIM_Base_Start_IT>
 800246e:	4603      	mov	r3, r0
 8002470:	e000      	b.n	8002474 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
}
 8002474:	4618      	mov	r0, r3
 8002476:	3730      	adds	r7, #48	; 0x30
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40023800 	.word	0x40023800
 8002480:	431bde83 	.word	0x431bde83
 8002484:	200005bc 	.word	0x200005bc
 8002488:	40014400 	.word	0x40014400

0800248c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002490:	e7fe      	b.n	8002490 <NMI_Handler+0x4>

08002492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002496:	e7fe      	b.n	8002496 <HardFault_Handler+0x4>

08002498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800249c:	e7fe      	b.n	800249c <MemManage_Handler+0x4>

0800249e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800249e:	b480      	push	{r7}
 80024a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024a2:	e7fe      	b.n	80024a2 <BusFault_Handler+0x4>

080024a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024a8:	e7fe      	b.n	80024a8 <UsageFault_Handler+0x4>

080024aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024bc:	4803      	ldr	r0, [pc, #12]	; (80024cc <TIM1_UP_TIM10_IRQHandler+0x14>)
 80024be:	f001 fb9f 	bl	8003c00 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80024c2:	4803      	ldr	r0, [pc, #12]	; (80024d0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80024c4:	f001 fb9c 	bl	8003c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80024c8:	bf00      	nop
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	20000450 	.word	0x20000450
 80024d0:	200005bc 	.word	0x200005bc

080024d4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024d8:	4802      	ldr	r0, [pc, #8]	; (80024e4 <TIM1_CC_IRQHandler+0x10>)
 80024da:	f001 fb91 	bl	8003c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000450 	.word	0x20000450

080024e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024ec:	4802      	ldr	r0, [pc, #8]	; (80024f8 <USART2_IRQHandler+0x10>)
 80024ee:	f002 f8e3 	bl	80046b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000498 	.word	0x20000498

080024fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ExButton_Pin);
 8002500:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002504:	f000 fc74 	bl	8002df0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002508:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800250c:	f000 fc70 	bl	8002df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002510:	bf00      	nop
 8002512:	bd80      	pop	{r7, pc}

08002514 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
	return 1;
 8002518:	2301      	movs	r3, #1
}
 800251a:	4618      	mov	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <_kill>:

int _kill(int pid, int sig)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800252e:	f006 fa45 	bl	80089bc <__errno>
 8002532:	4603      	mov	r3, r0
 8002534:	2216      	movs	r2, #22
 8002536:	601a      	str	r2, [r3, #0]
	return -1;
 8002538:	f04f 33ff 	mov.w	r3, #4294967295
}
 800253c:	4618      	mov	r0, r3
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <_exit>:

void _exit (int status)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800254c:	f04f 31ff 	mov.w	r1, #4294967295
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff ffe7 	bl	8002524 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002556:	e7fe      	b.n	8002556 <_exit+0x12>

08002558 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	e00a      	b.n	8002580 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800256a:	f3af 8000 	nop.w
 800256e:	4601      	mov	r1, r0
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	60ba      	str	r2, [r7, #8]
 8002576:	b2ca      	uxtb	r2, r1
 8002578:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	3301      	adds	r3, #1
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	429a      	cmp	r2, r3
 8002586:	dbf0      	blt.n	800256a <_read+0x12>
	}

return len;
 8002588:	687b      	ldr	r3, [r7, #4]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b086      	sub	sp, #24
 8002596:	af00      	add	r7, sp, #0
 8002598:	60f8      	str	r0, [r7, #12]
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	e009      	b.n	80025b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	60ba      	str	r2, [r7, #8]
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	3301      	adds	r3, #1
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	429a      	cmp	r2, r3
 80025be:	dbf1      	blt.n	80025a4 <_write+0x12>
	}
	return len;
 80025c0:	687b      	ldr	r3, [r7, #4]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <_close>:

int _close(int file)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
	return -1;
 80025d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025f2:	605a      	str	r2, [r3, #4]
	return 0;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <_isatty>:

int _isatty(int file)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
	return 1;
 800260a:	2301      	movs	r3, #1
}
 800260c:	4618      	mov	r0, r3
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
	return 0;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
	...

08002634 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800263c:	4a14      	ldr	r2, [pc, #80]	; (8002690 <_sbrk+0x5c>)
 800263e:	4b15      	ldr	r3, [pc, #84]	; (8002694 <_sbrk+0x60>)
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002648:	4b13      	ldr	r3, [pc, #76]	; (8002698 <_sbrk+0x64>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d102      	bne.n	8002656 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002650:	4b11      	ldr	r3, [pc, #68]	; (8002698 <_sbrk+0x64>)
 8002652:	4a12      	ldr	r2, [pc, #72]	; (800269c <_sbrk+0x68>)
 8002654:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <_sbrk+0x64>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4413      	add	r3, r2
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	429a      	cmp	r2, r3
 8002662:	d207      	bcs.n	8002674 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002664:	f006 f9aa 	bl	80089bc <__errno>
 8002668:	4603      	mov	r3, r0
 800266a:	220c      	movs	r2, #12
 800266c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800266e:	f04f 33ff 	mov.w	r3, #4294967295
 8002672:	e009      	b.n	8002688 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002674:	4b08      	ldr	r3, [pc, #32]	; (8002698 <_sbrk+0x64>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800267a:	4b07      	ldr	r3, [pc, #28]	; (8002698 <_sbrk+0x64>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4413      	add	r3, r2
 8002682:	4a05      	ldr	r2, [pc, #20]	; (8002698 <_sbrk+0x64>)
 8002684:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002686:	68fb      	ldr	r3, [r7, #12]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20020000 	.word	0x20020000
 8002694:	00000400 	.word	0x00000400
 8002698:	20000604 	.word	0x20000604
 800269c:	20004370 	.word	0x20004370

080026a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026a4:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <SystemInit+0x20>)
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026aa:	4a05      	ldr	r2, [pc, #20]	; (80026c0 <SystemInit+0x20>)
 80026ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
	}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80026c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026c8:	480d      	ldr	r0, [pc, #52]	; (8002700 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026ca:	490e      	ldr	r1, [pc, #56]	; (8002704 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026cc:	4a0e      	ldr	r2, [pc, #56]	; (8002708 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026d0:	e002      	b.n	80026d8 <LoopCopyDataInit>

080026d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026d6:	3304      	adds	r3, #4

080026d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026dc:	d3f9      	bcc.n	80026d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026de:	4a0b      	ldr	r2, [pc, #44]	; (800270c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026e0:	4c0b      	ldr	r4, [pc, #44]	; (8002710 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e4:	e001      	b.n	80026ea <LoopFillZerobss>

080026e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e8:	3204      	adds	r2, #4

080026ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026ec:	d3fb      	bcc.n	80026e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026ee:	f7ff ffd7 	bl	80026a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026f2:	f006 f969 	bl	80089c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026f6:	f7fe fc63 	bl	8000fc0 <main>
  bx  lr    
 80026fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002704:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002708:	0800bf4c 	.word	0x0800bf4c
  ldr r2, =_sbss
 800270c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002710:	20004370 	.word	0x20004370

08002714 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002714:	e7fe      	b.n	8002714 <ADC_IRQHandler>
	...

08002718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800271c:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <HAL_Init+0x40>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a0d      	ldr	r2, [pc, #52]	; (8002758 <HAL_Init+0x40>)
 8002722:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002726:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_Init+0x40>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <HAL_Init+0x40>)
 800272e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002732:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002734:	4b08      	ldr	r3, [pc, #32]	; (8002758 <HAL_Init+0x40>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a07      	ldr	r2, [pc, #28]	; (8002758 <HAL_Init+0x40>)
 800273a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800273e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002740:	2003      	movs	r0, #3
 8002742:	f000 f8d8 	bl	80028f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002746:	2005      	movs	r0, #5
 8002748:	f7ff fe48 	bl	80023dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800274c:	f7ff fd72 	bl	8002234 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40023c00 	.word	0x40023c00

0800275c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002760:	4b06      	ldr	r3, [pc, #24]	; (800277c <HAL_IncTick+0x20>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	461a      	mov	r2, r3
 8002766:	4b06      	ldr	r3, [pc, #24]	; (8002780 <HAL_IncTick+0x24>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4413      	add	r3, r2
 800276c:	4a04      	ldr	r2, [pc, #16]	; (8002780 <HAL_IncTick+0x24>)
 800276e:	6013      	str	r3, [r2, #0]
}
 8002770:	bf00      	nop
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	20000008 	.word	0x20000008
 8002780:	20000608 	.word	0x20000608

08002784 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  return uwTick;
 8002788:	4b03      	ldr	r3, [pc, #12]	; (8002798 <HAL_GetTick+0x14>)
 800278a:	681b      	ldr	r3, [r3, #0]
}
 800278c:	4618      	mov	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	20000608 	.word	0x20000608

0800279c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027ac:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <__NVIC_SetPriorityGrouping+0x44>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027b8:	4013      	ands	r3, r2
 80027ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ce:	4a04      	ldr	r2, [pc, #16]	; (80027e0 <__NVIC_SetPriorityGrouping+0x44>)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	60d3      	str	r3, [r2, #12]
}
 80027d4:	bf00      	nop
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027e8:	4b04      	ldr	r3, [pc, #16]	; (80027fc <__NVIC_GetPriorityGrouping+0x18>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	0a1b      	lsrs	r3, r3, #8
 80027ee:	f003 0307 	and.w	r3, r3, #7
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	2b00      	cmp	r3, #0
 8002810:	db0b      	blt.n	800282a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	f003 021f 	and.w	r2, r3, #31
 8002818:	4907      	ldr	r1, [pc, #28]	; (8002838 <__NVIC_EnableIRQ+0x38>)
 800281a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	2001      	movs	r0, #1
 8002822:	fa00 f202 	lsl.w	r2, r0, r2
 8002826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	e000e100 	.word	0xe000e100

0800283c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	6039      	str	r1, [r7, #0]
 8002846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284c:	2b00      	cmp	r3, #0
 800284e:	db0a      	blt.n	8002866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	b2da      	uxtb	r2, r3
 8002854:	490c      	ldr	r1, [pc, #48]	; (8002888 <__NVIC_SetPriority+0x4c>)
 8002856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285a:	0112      	lsls	r2, r2, #4
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	440b      	add	r3, r1
 8002860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002864:	e00a      	b.n	800287c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	b2da      	uxtb	r2, r3
 800286a:	4908      	ldr	r1, [pc, #32]	; (800288c <__NVIC_SetPriority+0x50>)
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	3b04      	subs	r3, #4
 8002874:	0112      	lsls	r2, r2, #4
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	440b      	add	r3, r1
 800287a:	761a      	strb	r2, [r3, #24]
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	e000e100 	.word	0xe000e100
 800288c:	e000ed00 	.word	0xe000ed00

08002890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002890:	b480      	push	{r7}
 8002892:	b089      	sub	sp, #36	; 0x24
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f1c3 0307 	rsb	r3, r3, #7
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	bf28      	it	cs
 80028ae:	2304      	movcs	r3, #4
 80028b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	3304      	adds	r3, #4
 80028b6:	2b06      	cmp	r3, #6
 80028b8:	d902      	bls.n	80028c0 <NVIC_EncodePriority+0x30>
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3b03      	subs	r3, #3
 80028be:	e000      	b.n	80028c2 <NVIC_EncodePriority+0x32>
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c4:	f04f 32ff 	mov.w	r2, #4294967295
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43da      	mvns	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	401a      	ands	r2, r3
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028d8:	f04f 31ff 	mov.w	r1, #4294967295
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	fa01 f303 	lsl.w	r3, r1, r3
 80028e2:	43d9      	mvns	r1, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e8:	4313      	orrs	r3, r2
         );
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3724      	adds	r7, #36	; 0x24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff ff4c 	bl	800279c <__NVIC_SetPriorityGrouping>
}
 8002904:	bf00      	nop
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
 8002918:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800291e:	f7ff ff61 	bl	80027e4 <__NVIC_GetPriorityGrouping>
 8002922:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	68b9      	ldr	r1, [r7, #8]
 8002928:	6978      	ldr	r0, [r7, #20]
 800292a:	f7ff ffb1 	bl	8002890 <NVIC_EncodePriority>
 800292e:	4602      	mov	r2, r0
 8002930:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002934:	4611      	mov	r1, r2
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff ff80 	bl	800283c <__NVIC_SetPriority>
}
 800293c:	bf00      	nop
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800294e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff ff54 	bl	8002800 <__NVIC_EnableIRQ>
}
 8002958:	bf00      	nop
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800296e:	f7ff ff09 	bl	8002784 <HAL_GetTick>
 8002972:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d008      	beq.n	8002992 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2280      	movs	r2, #128	; 0x80
 8002984:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e052      	b.n	8002a38 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0216 	bic.w	r2, r2, #22
 80029a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695a      	ldr	r2, [r3, #20]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d103      	bne.n	80029c2 <HAL_DMA_Abort+0x62>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d007      	beq.n	80029d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0208 	bic.w	r2, r2, #8
 80029d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0201 	bic.w	r2, r2, #1
 80029e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029e2:	e013      	b.n	8002a0c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029e4:	f7ff fece 	bl	8002784 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b05      	cmp	r3, #5
 80029f0:	d90c      	bls.n	8002a0c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2220      	movs	r2, #32
 80029f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2203      	movs	r2, #3
 80029fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e015      	b.n	8002a38 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1e4      	bne.n	80029e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1e:	223f      	movs	r2, #63	; 0x3f
 8002a20:	409a      	lsls	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d004      	beq.n	8002a5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2280      	movs	r2, #128	; 0x80
 8002a58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e00c      	b.n	8002a78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2205      	movs	r2, #5
 8002a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0201 	bic.w	r2, r2, #1
 8002a74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b089      	sub	sp, #36	; 0x24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	e159      	b.n	8002d54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	f040 8148 	bne.w	8002d4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d005      	beq.n	8002ad6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d130      	bne.n	8002b38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	091b      	lsrs	r3, r3, #4
 8002b22:	f003 0201 	and.w	r2, r3, #1
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	2b03      	cmp	r3, #3
 8002b42:	d017      	beq.n	8002b74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	2203      	movs	r2, #3
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 0303 	and.w	r3, r3, #3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d123      	bne.n	8002bc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	08da      	lsrs	r2, r3, #3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3208      	adds	r2, #8
 8002b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	220f      	movs	r2, #15
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	691a      	ldr	r2, [r3, #16]
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	08da      	lsrs	r2, r3, #3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	3208      	adds	r2, #8
 8002bc2:	69b9      	ldr	r1, [r7, #24]
 8002bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 0203 	and.w	r2, r3, #3
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 80a2 	beq.w	8002d4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	4b57      	ldr	r3, [pc, #348]	; (8002d6c <HAL_GPIO_Init+0x2e8>)
 8002c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c12:	4a56      	ldr	r2, [pc, #344]	; (8002d6c <HAL_GPIO_Init+0x2e8>)
 8002c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c18:	6453      	str	r3, [r2, #68]	; 0x44
 8002c1a:	4b54      	ldr	r3, [pc, #336]	; (8002d6c <HAL_GPIO_Init+0x2e8>)
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c26:	4a52      	ldr	r2, [pc, #328]	; (8002d70 <HAL_GPIO_Init+0x2ec>)
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	089b      	lsrs	r3, r3, #2
 8002c2c:	3302      	adds	r3, #2
 8002c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	220f      	movs	r2, #15
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a49      	ldr	r2, [pc, #292]	; (8002d74 <HAL_GPIO_Init+0x2f0>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d019      	beq.n	8002c86 <HAL_GPIO_Init+0x202>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a48      	ldr	r2, [pc, #288]	; (8002d78 <HAL_GPIO_Init+0x2f4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d013      	beq.n	8002c82 <HAL_GPIO_Init+0x1fe>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a47      	ldr	r2, [pc, #284]	; (8002d7c <HAL_GPIO_Init+0x2f8>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00d      	beq.n	8002c7e <HAL_GPIO_Init+0x1fa>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a46      	ldr	r2, [pc, #280]	; (8002d80 <HAL_GPIO_Init+0x2fc>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d007      	beq.n	8002c7a <HAL_GPIO_Init+0x1f6>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a45      	ldr	r2, [pc, #276]	; (8002d84 <HAL_GPIO_Init+0x300>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d101      	bne.n	8002c76 <HAL_GPIO_Init+0x1f2>
 8002c72:	2304      	movs	r3, #4
 8002c74:	e008      	b.n	8002c88 <HAL_GPIO_Init+0x204>
 8002c76:	2307      	movs	r3, #7
 8002c78:	e006      	b.n	8002c88 <HAL_GPIO_Init+0x204>
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e004      	b.n	8002c88 <HAL_GPIO_Init+0x204>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	e002      	b.n	8002c88 <HAL_GPIO_Init+0x204>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <HAL_GPIO_Init+0x204>
 8002c86:	2300      	movs	r3, #0
 8002c88:	69fa      	ldr	r2, [r7, #28]
 8002c8a:	f002 0203 	and.w	r2, r2, #3
 8002c8e:	0092      	lsls	r2, r2, #2
 8002c90:	4093      	lsls	r3, r2
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c98:	4935      	ldr	r1, [pc, #212]	; (8002d70 <HAL_GPIO_Init+0x2ec>)
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	089b      	lsrs	r3, r3, #2
 8002c9e:	3302      	adds	r3, #2
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ca6:	4b38      	ldr	r3, [pc, #224]	; (8002d88 <HAL_GPIO_Init+0x304>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cca:	4a2f      	ldr	r2, [pc, #188]	; (8002d88 <HAL_GPIO_Init+0x304>)
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002cd0:	4b2d      	ldr	r3, [pc, #180]	; (8002d88 <HAL_GPIO_Init+0x304>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cf4:	4a24      	ldr	r2, [pc, #144]	; (8002d88 <HAL_GPIO_Init+0x304>)
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cfa:	4b23      	ldr	r3, [pc, #140]	; (8002d88 <HAL_GPIO_Init+0x304>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	43db      	mvns	r3, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4013      	ands	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d1e:	4a1a      	ldr	r2, [pc, #104]	; (8002d88 <HAL_GPIO_Init+0x304>)
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d24:	4b18      	ldr	r3, [pc, #96]	; (8002d88 <HAL_GPIO_Init+0x304>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4013      	ands	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d48:	4a0f      	ldr	r2, [pc, #60]	; (8002d88 <HAL_GPIO_Init+0x304>)
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	3301      	adds	r3, #1
 8002d52:	61fb      	str	r3, [r7, #28]
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	2b0f      	cmp	r3, #15
 8002d58:	f67f aea2 	bls.w	8002aa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d5c:	bf00      	nop
 8002d5e:	bf00      	nop
 8002d60:	3724      	adds	r7, #36	; 0x24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	40013800 	.word	0x40013800
 8002d74:	40020000 	.word	0x40020000
 8002d78:	40020400 	.word	0x40020400
 8002d7c:	40020800 	.word	0x40020800
 8002d80:	40020c00 	.word	0x40020c00
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40013c00 	.word	0x40013c00

08002d8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	460b      	mov	r3, r1
 8002d96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	887b      	ldrh	r3, [r7, #2]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002da4:	2301      	movs	r3, #1
 8002da6:	73fb      	strb	r3, [r7, #15]
 8002da8:	e001      	b.n	8002dae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002daa:	2300      	movs	r3, #0
 8002dac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	807b      	strh	r3, [r7, #2]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dcc:	787b      	ldrb	r3, [r7, #1]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dd2:	887a      	ldrh	r2, [r7, #2]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dd8:	e003      	b.n	8002de2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dda:	887b      	ldrh	r3, [r7, #2]
 8002ddc:	041a      	lsls	r2, r3, #16
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	619a      	str	r2, [r3, #24]
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
	...

08002df0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4603      	mov	r3, r0
 8002df8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002dfa:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dfc:	695a      	ldr	r2, [r3, #20]
 8002dfe:	88fb      	ldrh	r3, [r7, #6]
 8002e00:	4013      	ands	r3, r2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d006      	beq.n	8002e14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e06:	4a05      	ldr	r2, [pc, #20]	; (8002e1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e08:	88fb      	ldrh	r3, [r7, #6]
 8002e0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e0c:	88fb      	ldrh	r3, [r7, #6]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fe fbbe 	bl	8001590 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e14:	bf00      	nop
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40013c00 	.word	0x40013c00

08002e20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e267      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d075      	beq.n	8002f2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e3e:	4b88      	ldr	r3, [pc, #544]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 030c 	and.w	r3, r3, #12
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d00c      	beq.n	8002e64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e4a:	4b85      	ldr	r3, [pc, #532]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d112      	bne.n	8002e7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e56:	4b82      	ldr	r3, [pc, #520]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e62:	d10b      	bne.n	8002e7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e64:	4b7e      	ldr	r3, [pc, #504]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d05b      	beq.n	8002f28 <HAL_RCC_OscConfig+0x108>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d157      	bne.n	8002f28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e242      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e84:	d106      	bne.n	8002e94 <HAL_RCC_OscConfig+0x74>
 8002e86:	4b76      	ldr	r3, [pc, #472]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a75      	ldr	r2, [pc, #468]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	e01d      	b.n	8002ed0 <HAL_RCC_OscConfig+0xb0>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e9c:	d10c      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x98>
 8002e9e:	4b70      	ldr	r3, [pc, #448]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a6f      	ldr	r2, [pc, #444]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	4b6d      	ldr	r3, [pc, #436]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a6c      	ldr	r2, [pc, #432]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	e00b      	b.n	8002ed0 <HAL_RCC_OscConfig+0xb0>
 8002eb8:	4b69      	ldr	r3, [pc, #420]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a68      	ldr	r2, [pc, #416]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec2:	6013      	str	r3, [r2, #0]
 8002ec4:	4b66      	ldr	r3, [pc, #408]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a65      	ldr	r2, [pc, #404]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d013      	beq.n	8002f00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed8:	f7ff fc54 	bl	8002784 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ee0:	f7ff fc50 	bl	8002784 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b64      	cmp	r3, #100	; 0x64
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e207      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef2:	4b5b      	ldr	r3, [pc, #364]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCC_OscConfig+0xc0>
 8002efe:	e014      	b.n	8002f2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f00:	f7ff fc40 	bl	8002784 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f08:	f7ff fc3c 	bl	8002784 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b64      	cmp	r3, #100	; 0x64
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e1f3      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1a:	4b51      	ldr	r3, [pc, #324]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f0      	bne.n	8002f08 <HAL_RCC_OscConfig+0xe8>
 8002f26:	e000      	b.n	8002f2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d063      	beq.n	8002ffe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f36:	4b4a      	ldr	r3, [pc, #296]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00b      	beq.n	8002f5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f42:	4b47      	ldr	r3, [pc, #284]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f4a:	2b08      	cmp	r3, #8
 8002f4c:	d11c      	bne.n	8002f88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f4e:	4b44      	ldr	r3, [pc, #272]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d116      	bne.n	8002f88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5a:	4b41      	ldr	r3, [pc, #260]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d005      	beq.n	8002f72 <HAL_RCC_OscConfig+0x152>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d001      	beq.n	8002f72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e1c7      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f72:	4b3b      	ldr	r3, [pc, #236]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	4937      	ldr	r1, [pc, #220]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f86:	e03a      	b.n	8002ffe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d020      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f90:	4b34      	ldr	r3, [pc, #208]	; (8003064 <HAL_RCC_OscConfig+0x244>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f96:	f7ff fbf5 	bl	8002784 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f9e:	f7ff fbf1 	bl	8002784 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e1a8      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb0:	4b2b      	ldr	r3, [pc, #172]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0f0      	beq.n	8002f9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fbc:	4b28      	ldr	r3, [pc, #160]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	4925      	ldr	r1, [pc, #148]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	600b      	str	r3, [r1, #0]
 8002fd0:	e015      	b.n	8002ffe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fd2:	4b24      	ldr	r3, [pc, #144]	; (8003064 <HAL_RCC_OscConfig+0x244>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd8:	f7ff fbd4 	bl	8002784 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fe0:	f7ff fbd0 	bl	8002784 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e187      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff2:	4b1b      	ldr	r3, [pc, #108]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d036      	beq.n	8003078 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d016      	beq.n	8003040 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003012:	4b15      	ldr	r3, [pc, #84]	; (8003068 <HAL_RCC_OscConfig+0x248>)
 8003014:	2201      	movs	r2, #1
 8003016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003018:	f7ff fbb4 	bl	8002784 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003020:	f7ff fbb0 	bl	8002784 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e167      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003032:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8003034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0f0      	beq.n	8003020 <HAL_RCC_OscConfig+0x200>
 800303e:	e01b      	b.n	8003078 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003040:	4b09      	ldr	r3, [pc, #36]	; (8003068 <HAL_RCC_OscConfig+0x248>)
 8003042:	2200      	movs	r2, #0
 8003044:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003046:	f7ff fb9d 	bl	8002784 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800304c:	e00e      	b.n	800306c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800304e:	f7ff fb99 	bl	8002784 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d907      	bls.n	800306c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e150      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
 8003060:	40023800 	.word	0x40023800
 8003064:	42470000 	.word	0x42470000
 8003068:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800306c:	4b88      	ldr	r3, [pc, #544]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 800306e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1ea      	bne.n	800304e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 8097 	beq.w	80031b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003086:	2300      	movs	r3, #0
 8003088:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800308a:	4b81      	ldr	r3, [pc, #516]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10f      	bne.n	80030b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003096:	2300      	movs	r3, #0
 8003098:	60bb      	str	r3, [r7, #8]
 800309a:	4b7d      	ldr	r3, [pc, #500]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	4a7c      	ldr	r2, [pc, #496]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 80030a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a4:	6413      	str	r3, [r2, #64]	; 0x40
 80030a6:	4b7a      	ldr	r3, [pc, #488]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ae:	60bb      	str	r3, [r7, #8]
 80030b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030b2:	2301      	movs	r3, #1
 80030b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b6:	4b77      	ldr	r3, [pc, #476]	; (8003294 <HAL_RCC_OscConfig+0x474>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d118      	bne.n	80030f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030c2:	4b74      	ldr	r3, [pc, #464]	; (8003294 <HAL_RCC_OscConfig+0x474>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a73      	ldr	r2, [pc, #460]	; (8003294 <HAL_RCC_OscConfig+0x474>)
 80030c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ce:	f7ff fb59 	bl	8002784 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d6:	f7ff fb55 	bl	8002784 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e10c      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e8:	4b6a      	ldr	r3, [pc, #424]	; (8003294 <HAL_RCC_OscConfig+0x474>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0f0      	beq.n	80030d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d106      	bne.n	800310a <HAL_RCC_OscConfig+0x2ea>
 80030fc:	4b64      	ldr	r3, [pc, #400]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 80030fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003100:	4a63      	ldr	r2, [pc, #396]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	6713      	str	r3, [r2, #112]	; 0x70
 8003108:	e01c      	b.n	8003144 <HAL_RCC_OscConfig+0x324>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	2b05      	cmp	r3, #5
 8003110:	d10c      	bne.n	800312c <HAL_RCC_OscConfig+0x30c>
 8003112:	4b5f      	ldr	r3, [pc, #380]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 8003114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003116:	4a5e      	ldr	r2, [pc, #376]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 8003118:	f043 0304 	orr.w	r3, r3, #4
 800311c:	6713      	str	r3, [r2, #112]	; 0x70
 800311e:	4b5c      	ldr	r3, [pc, #368]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 8003120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003122:	4a5b      	ldr	r2, [pc, #364]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	6713      	str	r3, [r2, #112]	; 0x70
 800312a:	e00b      	b.n	8003144 <HAL_RCC_OscConfig+0x324>
 800312c:	4b58      	ldr	r3, [pc, #352]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 800312e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003130:	4a57      	ldr	r2, [pc, #348]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 8003132:	f023 0301 	bic.w	r3, r3, #1
 8003136:	6713      	str	r3, [r2, #112]	; 0x70
 8003138:	4b55      	ldr	r3, [pc, #340]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 800313a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313c:	4a54      	ldr	r2, [pc, #336]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 800313e:	f023 0304 	bic.w	r3, r3, #4
 8003142:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d015      	beq.n	8003178 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314c:	f7ff fb1a 	bl	8002784 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003152:	e00a      	b.n	800316a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003154:	f7ff fb16 	bl	8002784 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003162:	4293      	cmp	r3, r2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e0cb      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800316a:	4b49      	ldr	r3, [pc, #292]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 800316c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0ee      	beq.n	8003154 <HAL_RCC_OscConfig+0x334>
 8003176:	e014      	b.n	80031a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003178:	f7ff fb04 	bl	8002784 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800317e:	e00a      	b.n	8003196 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003180:	f7ff fb00 	bl	8002784 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	f241 3288 	movw	r2, #5000	; 0x1388
 800318e:	4293      	cmp	r3, r2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e0b5      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003196:	4b3e      	ldr	r3, [pc, #248]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 8003198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1ee      	bne.n	8003180 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031a2:	7dfb      	ldrb	r3, [r7, #23]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d105      	bne.n	80031b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a8:	4b39      	ldr	r3, [pc, #228]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	4a38      	ldr	r2, [pc, #224]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 80031ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 80a1 	beq.w	8003300 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031be:	4b34      	ldr	r3, [pc, #208]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 030c 	and.w	r3, r3, #12
 80031c6:	2b08      	cmp	r3, #8
 80031c8:	d05c      	beq.n	8003284 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d141      	bne.n	8003256 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d2:	4b31      	ldr	r3, [pc, #196]	; (8003298 <HAL_RCC_OscConfig+0x478>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d8:	f7ff fad4 	bl	8002784 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e0:	f7ff fad0 	bl	8002784 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e087      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f2:	4b27      	ldr	r3, [pc, #156]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f0      	bne.n	80031e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	69da      	ldr	r2, [r3, #28]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	019b      	lsls	r3, r3, #6
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003214:	085b      	lsrs	r3, r3, #1
 8003216:	3b01      	subs	r3, #1
 8003218:	041b      	lsls	r3, r3, #16
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	061b      	lsls	r3, r3, #24
 8003222:	491b      	ldr	r1, [pc, #108]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 8003224:	4313      	orrs	r3, r2
 8003226:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003228:	4b1b      	ldr	r3, [pc, #108]	; (8003298 <HAL_RCC_OscConfig+0x478>)
 800322a:	2201      	movs	r2, #1
 800322c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322e:	f7ff faa9 	bl	8002784 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003236:	f7ff faa5 	bl	8002784 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e05c      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003248:	4b11      	ldr	r3, [pc, #68]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0f0      	beq.n	8003236 <HAL_RCC_OscConfig+0x416>
 8003254:	e054      	b.n	8003300 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003256:	4b10      	ldr	r3, [pc, #64]	; (8003298 <HAL_RCC_OscConfig+0x478>)
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325c:	f7ff fa92 	bl	8002784 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003264:	f7ff fa8e 	bl	8002784 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e045      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003276:	4b06      	ldr	r3, [pc, #24]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0x444>
 8003282:	e03d      	b.n	8003300 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d107      	bne.n	800329c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e038      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
 8003290:	40023800 	.word	0x40023800
 8003294:	40007000 	.word	0x40007000
 8003298:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800329c:	4b1b      	ldr	r3, [pc, #108]	; (800330c <HAL_RCC_OscConfig+0x4ec>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d028      	beq.n	80032fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d121      	bne.n	80032fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d11a      	bne.n	80032fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032cc:	4013      	ands	r3, r2
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d111      	bne.n	80032fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e2:	085b      	lsrs	r3, r3, #1
 80032e4:	3b01      	subs	r3, #1
 80032e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d107      	bne.n	80032fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d001      	beq.n	8003300 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e000      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40023800 	.word	0x40023800

08003310 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e0cc      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003324:	4b68      	ldr	r3, [pc, #416]	; (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d90c      	bls.n	800334c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003332:	4b65      	ldr	r3, [pc, #404]	; (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800333a:	4b63      	ldr	r3, [pc, #396]	; (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0307 	and.w	r3, r3, #7
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	429a      	cmp	r2, r3
 8003346:	d001      	beq.n	800334c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e0b8      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d020      	beq.n	800339a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003364:	4b59      	ldr	r3, [pc, #356]	; (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	4a58      	ldr	r2, [pc, #352]	; (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800336e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0308 	and.w	r3, r3, #8
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800337c:	4b53      	ldr	r3, [pc, #332]	; (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	4a52      	ldr	r2, [pc, #328]	; (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003386:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003388:	4b50      	ldr	r3, [pc, #320]	; (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	494d      	ldr	r1, [pc, #308]	; (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	4313      	orrs	r3, r2
 8003398:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d044      	beq.n	8003430 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d107      	bne.n	80033be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ae:	4b47      	ldr	r3, [pc, #284]	; (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d119      	bne.n	80033ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e07f      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d003      	beq.n	80033ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d107      	bne.n	80033de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ce:	4b3f      	ldr	r3, [pc, #252]	; (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d109      	bne.n	80033ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e06f      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033de:	4b3b      	ldr	r3, [pc, #236]	; (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e067      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ee:	4b37      	ldr	r3, [pc, #220]	; (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f023 0203 	bic.w	r2, r3, #3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	4934      	ldr	r1, [pc, #208]	; (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003400:	f7ff f9c0 	bl	8002784 <HAL_GetTick>
 8003404:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003406:	e00a      	b.n	800341e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003408:	f7ff f9bc 	bl	8002784 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	f241 3288 	movw	r2, #5000	; 0x1388
 8003416:	4293      	cmp	r3, r2
 8003418:	d901      	bls.n	800341e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e04f      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341e:	4b2b      	ldr	r3, [pc, #172]	; (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 020c 	and.w	r2, r3, #12
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	429a      	cmp	r2, r3
 800342e:	d1eb      	bne.n	8003408 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003430:	4b25      	ldr	r3, [pc, #148]	; (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d20c      	bcs.n	8003458 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343e:	4b22      	ldr	r3, [pc, #136]	; (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003446:	4b20      	ldr	r3, [pc, #128]	; (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d001      	beq.n	8003458 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e032      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	d008      	beq.n	8003476 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003464:	4b19      	ldr	r3, [pc, #100]	; (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	4916      	ldr	r1, [pc, #88]	; (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003472:	4313      	orrs	r3, r2
 8003474:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d009      	beq.n	8003496 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003482:	4b12      	ldr	r3, [pc, #72]	; (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	490e      	ldr	r1, [pc, #56]	; (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003492:	4313      	orrs	r3, r2
 8003494:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003496:	f000 f821 	bl	80034dc <HAL_RCC_GetSysClockFreq>
 800349a:	4602      	mov	r2, r0
 800349c:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	091b      	lsrs	r3, r3, #4
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	490a      	ldr	r1, [pc, #40]	; (80034d0 <HAL_RCC_ClockConfig+0x1c0>)
 80034a8:	5ccb      	ldrb	r3, [r1, r3]
 80034aa:	fa22 f303 	lsr.w	r3, r2, r3
 80034ae:	4a09      	ldr	r2, [pc, #36]	; (80034d4 <HAL_RCC_ClockConfig+0x1c4>)
 80034b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034b2:	4b09      	ldr	r3, [pc, #36]	; (80034d8 <HAL_RCC_ClockConfig+0x1c8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fe ff90 	bl	80023dc <HAL_InitTick>

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40023c00 	.word	0x40023c00
 80034cc:	40023800 	.word	0x40023800
 80034d0:	0800bb48 	.word	0x0800bb48
 80034d4:	20000000 	.word	0x20000000
 80034d8:	20000004 	.word	0x20000004

080034dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034e0:	b094      	sub	sp, #80	; 0x50
 80034e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	647b      	str	r3, [r7, #68]	; 0x44
 80034e8:	2300      	movs	r3, #0
 80034ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034ec:	2300      	movs	r3, #0
 80034ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034f4:	4b79      	ldr	r3, [pc, #484]	; (80036dc <HAL_RCC_GetSysClockFreq+0x200>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 030c 	and.w	r3, r3, #12
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d00d      	beq.n	800351c <HAL_RCC_GetSysClockFreq+0x40>
 8003500:	2b08      	cmp	r3, #8
 8003502:	f200 80e1 	bhi.w	80036c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <HAL_RCC_GetSysClockFreq+0x34>
 800350a:	2b04      	cmp	r3, #4
 800350c:	d003      	beq.n	8003516 <HAL_RCC_GetSysClockFreq+0x3a>
 800350e:	e0db      	b.n	80036c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003510:	4b73      	ldr	r3, [pc, #460]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003512:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003514:	e0db      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003516:	4b73      	ldr	r3, [pc, #460]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003518:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800351a:	e0d8      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800351c:	4b6f      	ldr	r3, [pc, #444]	; (80036dc <HAL_RCC_GetSysClockFreq+0x200>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003524:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003526:	4b6d      	ldr	r3, [pc, #436]	; (80036dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d063      	beq.n	80035fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003532:	4b6a      	ldr	r3, [pc, #424]	; (80036dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	099b      	lsrs	r3, r3, #6
 8003538:	2200      	movs	r2, #0
 800353a:	63bb      	str	r3, [r7, #56]	; 0x38
 800353c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800353e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003544:	633b      	str	r3, [r7, #48]	; 0x30
 8003546:	2300      	movs	r3, #0
 8003548:	637b      	str	r3, [r7, #52]	; 0x34
 800354a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800354e:	4622      	mov	r2, r4
 8003550:	462b      	mov	r3, r5
 8003552:	f04f 0000 	mov.w	r0, #0
 8003556:	f04f 0100 	mov.w	r1, #0
 800355a:	0159      	lsls	r1, r3, #5
 800355c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003560:	0150      	lsls	r0, r2, #5
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
 8003566:	4621      	mov	r1, r4
 8003568:	1a51      	subs	r1, r2, r1
 800356a:	6139      	str	r1, [r7, #16]
 800356c:	4629      	mov	r1, r5
 800356e:	eb63 0301 	sbc.w	r3, r3, r1
 8003572:	617b      	str	r3, [r7, #20]
 8003574:	f04f 0200 	mov.w	r2, #0
 8003578:	f04f 0300 	mov.w	r3, #0
 800357c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003580:	4659      	mov	r1, fp
 8003582:	018b      	lsls	r3, r1, #6
 8003584:	4651      	mov	r1, sl
 8003586:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800358a:	4651      	mov	r1, sl
 800358c:	018a      	lsls	r2, r1, #6
 800358e:	4651      	mov	r1, sl
 8003590:	ebb2 0801 	subs.w	r8, r2, r1
 8003594:	4659      	mov	r1, fp
 8003596:	eb63 0901 	sbc.w	r9, r3, r1
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	f04f 0300 	mov.w	r3, #0
 80035a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035ae:	4690      	mov	r8, r2
 80035b0:	4699      	mov	r9, r3
 80035b2:	4623      	mov	r3, r4
 80035b4:	eb18 0303 	adds.w	r3, r8, r3
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	462b      	mov	r3, r5
 80035bc:	eb49 0303 	adc.w	r3, r9, r3
 80035c0:	60fb      	str	r3, [r7, #12]
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	f04f 0300 	mov.w	r3, #0
 80035ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035ce:	4629      	mov	r1, r5
 80035d0:	024b      	lsls	r3, r1, #9
 80035d2:	4621      	mov	r1, r4
 80035d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035d8:	4621      	mov	r1, r4
 80035da:	024a      	lsls	r2, r1, #9
 80035dc:	4610      	mov	r0, r2
 80035de:	4619      	mov	r1, r3
 80035e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035e2:	2200      	movs	r2, #0
 80035e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80035e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035ec:	f7fd fb14 	bl	8000c18 <__aeabi_uldivmod>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4613      	mov	r3, r2
 80035f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035f8:	e058      	b.n	80036ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035fa:	4b38      	ldr	r3, [pc, #224]	; (80036dc <HAL_RCC_GetSysClockFreq+0x200>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	099b      	lsrs	r3, r3, #6
 8003600:	2200      	movs	r2, #0
 8003602:	4618      	mov	r0, r3
 8003604:	4611      	mov	r1, r2
 8003606:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800360a:	623b      	str	r3, [r7, #32]
 800360c:	2300      	movs	r3, #0
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
 8003610:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003614:	4642      	mov	r2, r8
 8003616:	464b      	mov	r3, r9
 8003618:	f04f 0000 	mov.w	r0, #0
 800361c:	f04f 0100 	mov.w	r1, #0
 8003620:	0159      	lsls	r1, r3, #5
 8003622:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003626:	0150      	lsls	r0, r2, #5
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	4641      	mov	r1, r8
 800362e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003632:	4649      	mov	r1, r9
 8003634:	eb63 0b01 	sbc.w	fp, r3, r1
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003644:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003648:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800364c:	ebb2 040a 	subs.w	r4, r2, sl
 8003650:	eb63 050b 	sbc.w	r5, r3, fp
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	00eb      	lsls	r3, r5, #3
 800365e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003662:	00e2      	lsls	r2, r4, #3
 8003664:	4614      	mov	r4, r2
 8003666:	461d      	mov	r5, r3
 8003668:	4643      	mov	r3, r8
 800366a:	18e3      	adds	r3, r4, r3
 800366c:	603b      	str	r3, [r7, #0]
 800366e:	464b      	mov	r3, r9
 8003670:	eb45 0303 	adc.w	r3, r5, r3
 8003674:	607b      	str	r3, [r7, #4]
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	f04f 0300 	mov.w	r3, #0
 800367e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003682:	4629      	mov	r1, r5
 8003684:	028b      	lsls	r3, r1, #10
 8003686:	4621      	mov	r1, r4
 8003688:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800368c:	4621      	mov	r1, r4
 800368e:	028a      	lsls	r2, r1, #10
 8003690:	4610      	mov	r0, r2
 8003692:	4619      	mov	r1, r3
 8003694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003696:	2200      	movs	r2, #0
 8003698:	61bb      	str	r3, [r7, #24]
 800369a:	61fa      	str	r2, [r7, #28]
 800369c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036a0:	f7fd faba 	bl	8000c18 <__aeabi_uldivmod>
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	4613      	mov	r3, r2
 80036aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036ac:	4b0b      	ldr	r3, [pc, #44]	; (80036dc <HAL_RCC_GetSysClockFreq+0x200>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	0c1b      	lsrs	r3, r3, #16
 80036b2:	f003 0303 	and.w	r3, r3, #3
 80036b6:	3301      	adds	r3, #1
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80036bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036c6:	e002      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036c8:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80036ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3750      	adds	r7, #80	; 0x50
 80036d4:	46bd      	mov	sp, r7
 80036d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036da:	bf00      	nop
 80036dc:	40023800 	.word	0x40023800
 80036e0:	00f42400 	.word	0x00f42400
 80036e4:	007a1200 	.word	0x007a1200

080036e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036ec:	4b03      	ldr	r3, [pc, #12]	; (80036fc <HAL_RCC_GetHCLKFreq+0x14>)
 80036ee:	681b      	ldr	r3, [r3, #0]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	20000000 	.word	0x20000000

08003700 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003704:	f7ff fff0 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 8003708:	4602      	mov	r2, r0
 800370a:	4b05      	ldr	r3, [pc, #20]	; (8003720 <HAL_RCC_GetPCLK1Freq+0x20>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	0a9b      	lsrs	r3, r3, #10
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	4903      	ldr	r1, [pc, #12]	; (8003724 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003716:	5ccb      	ldrb	r3, [r1, r3]
 8003718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800371c:	4618      	mov	r0, r3
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40023800 	.word	0x40023800
 8003724:	0800bb58 	.word	0x0800bb58

08003728 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800372c:	f7ff ffdc 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 8003730:	4602      	mov	r2, r0
 8003732:	4b05      	ldr	r3, [pc, #20]	; (8003748 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	0b5b      	lsrs	r3, r3, #13
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	4903      	ldr	r1, [pc, #12]	; (800374c <HAL_RCC_GetPCLK2Freq+0x24>)
 800373e:	5ccb      	ldrb	r3, [r1, r3]
 8003740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003744:	4618      	mov	r0, r3
 8003746:	bd80      	pop	{r7, pc}
 8003748:	40023800 	.word	0x40023800
 800374c:	0800bb58 	.word	0x0800bb58

08003750 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	220f      	movs	r2, #15
 800375e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003760:	4b12      	ldr	r3, [pc, #72]	; (80037ac <HAL_RCC_GetClockConfig+0x5c>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f003 0203 	and.w	r2, r3, #3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800376c:	4b0f      	ldr	r3, [pc, #60]	; (80037ac <HAL_RCC_GetClockConfig+0x5c>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003778:	4b0c      	ldr	r3, [pc, #48]	; (80037ac <HAL_RCC_GetClockConfig+0x5c>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003784:	4b09      	ldr	r3, [pc, #36]	; (80037ac <HAL_RCC_GetClockConfig+0x5c>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	08db      	lsrs	r3, r3, #3
 800378a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003792:	4b07      	ldr	r3, [pc, #28]	; (80037b0 <HAL_RCC_GetClockConfig+0x60>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0207 	and.w	r2, r3, #7
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	601a      	str	r2, [r3, #0]
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	40023800 	.word	0x40023800
 80037b0:	40023c00 	.word	0x40023c00

080037b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e041      	b.n	800384a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d106      	bne.n	80037e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f839 	bl	8003852 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3304      	adds	r3, #4
 80037f0:	4619      	mov	r1, r3
 80037f2:	4610      	mov	r0, r2
 80037f4:	f000 fc0a 	bl	800400c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
	...

08003868 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b01      	cmp	r3, #1
 800387a:	d001      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e044      	b.n	800390a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f042 0201 	orr.w	r2, r2, #1
 8003896:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a1e      	ldr	r2, [pc, #120]	; (8003918 <HAL_TIM_Base_Start_IT+0xb0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d018      	beq.n	80038d4 <HAL_TIM_Base_Start_IT+0x6c>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038aa:	d013      	beq.n	80038d4 <HAL_TIM_Base_Start_IT+0x6c>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a1a      	ldr	r2, [pc, #104]	; (800391c <HAL_TIM_Base_Start_IT+0xb4>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d00e      	beq.n	80038d4 <HAL_TIM_Base_Start_IT+0x6c>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a19      	ldr	r2, [pc, #100]	; (8003920 <HAL_TIM_Base_Start_IT+0xb8>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d009      	beq.n	80038d4 <HAL_TIM_Base_Start_IT+0x6c>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a17      	ldr	r2, [pc, #92]	; (8003924 <HAL_TIM_Base_Start_IT+0xbc>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d004      	beq.n	80038d4 <HAL_TIM_Base_Start_IT+0x6c>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a16      	ldr	r2, [pc, #88]	; (8003928 <HAL_TIM_Base_Start_IT+0xc0>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d111      	bne.n	80038f8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2b06      	cmp	r3, #6
 80038e4:	d010      	beq.n	8003908 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f042 0201 	orr.w	r2, r2, #1
 80038f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f6:	e007      	b.n	8003908 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0201 	orr.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	40010000 	.word	0x40010000
 800391c:	40000400 	.word	0x40000400
 8003920:	40000800 	.word	0x40000800
 8003924:	40000c00 	.word	0x40000c00
 8003928:	40014000 	.word	0x40014000

0800392c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e041      	b.n	80039c2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d106      	bne.n	8003958 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7fe fc9a 	bl	800228c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2202      	movs	r2, #2
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3304      	adds	r3, #4
 8003968:	4619      	mov	r1, r3
 800396a:	4610      	mov	r0, r2
 800396c:	f000 fb4e 	bl	800400c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039d6:	2300      	movs	r3, #0
 80039d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d104      	bne.n	80039ea <HAL_TIM_IC_Start_IT+0x1e>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	e013      	b.n	8003a12 <HAL_TIM_IC_Start_IT+0x46>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b04      	cmp	r3, #4
 80039ee:	d104      	bne.n	80039fa <HAL_TIM_IC_Start_IT+0x2e>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	e00b      	b.n	8003a12 <HAL_TIM_IC_Start_IT+0x46>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d104      	bne.n	8003a0a <HAL_TIM_IC_Start_IT+0x3e>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	e003      	b.n	8003a12 <HAL_TIM_IC_Start_IT+0x46>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d104      	bne.n	8003a24 <HAL_TIM_IC_Start_IT+0x58>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	e013      	b.n	8003a4c <HAL_TIM_IC_Start_IT+0x80>
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	2b04      	cmp	r3, #4
 8003a28:	d104      	bne.n	8003a34 <HAL_TIM_IC_Start_IT+0x68>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	e00b      	b.n	8003a4c <HAL_TIM_IC_Start_IT+0x80>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d104      	bne.n	8003a44 <HAL_TIM_IC_Start_IT+0x78>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	e003      	b.n	8003a4c <HAL_TIM_IC_Start_IT+0x80>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a4e:	7bbb      	ldrb	r3, [r7, #14]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d102      	bne.n	8003a5a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a54:	7b7b      	ldrb	r3, [r7, #13]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d001      	beq.n	8003a5e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e0c2      	b.n	8003be4 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d104      	bne.n	8003a6e <HAL_TIM_IC_Start_IT+0xa2>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a6c:	e013      	b.n	8003a96 <HAL_TIM_IC_Start_IT+0xca>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b04      	cmp	r3, #4
 8003a72:	d104      	bne.n	8003a7e <HAL_TIM_IC_Start_IT+0xb2>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a7c:	e00b      	b.n	8003a96 <HAL_TIM_IC_Start_IT+0xca>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d104      	bne.n	8003a8e <HAL_TIM_IC_Start_IT+0xc2>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a8c:	e003      	b.n	8003a96 <HAL_TIM_IC_Start_IT+0xca>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2202      	movs	r2, #2
 8003a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d104      	bne.n	8003aa6 <HAL_TIM_IC_Start_IT+0xda>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aa4:	e013      	b.n	8003ace <HAL_TIM_IC_Start_IT+0x102>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d104      	bne.n	8003ab6 <HAL_TIM_IC_Start_IT+0xea>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ab4:	e00b      	b.n	8003ace <HAL_TIM_IC_Start_IT+0x102>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d104      	bne.n	8003ac6 <HAL_TIM_IC_Start_IT+0xfa>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ac4:	e003      	b.n	8003ace <HAL_TIM_IC_Start_IT+0x102>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2202      	movs	r2, #2
 8003aca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b0c      	cmp	r3, #12
 8003ad2:	d841      	bhi.n	8003b58 <HAL_TIM_IC_Start_IT+0x18c>
 8003ad4:	a201      	add	r2, pc, #4	; (adr r2, 8003adc <HAL_TIM_IC_Start_IT+0x110>)
 8003ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ada:	bf00      	nop
 8003adc:	08003b11 	.word	0x08003b11
 8003ae0:	08003b59 	.word	0x08003b59
 8003ae4:	08003b59 	.word	0x08003b59
 8003ae8:	08003b59 	.word	0x08003b59
 8003aec:	08003b23 	.word	0x08003b23
 8003af0:	08003b59 	.word	0x08003b59
 8003af4:	08003b59 	.word	0x08003b59
 8003af8:	08003b59 	.word	0x08003b59
 8003afc:	08003b35 	.word	0x08003b35
 8003b00:	08003b59 	.word	0x08003b59
 8003b04:	08003b59 	.word	0x08003b59
 8003b08:	08003b59 	.word	0x08003b59
 8003b0c:	08003b47 	.word	0x08003b47
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0202 	orr.w	r2, r2, #2
 8003b1e:	60da      	str	r2, [r3, #12]
      break;
 8003b20:	e01d      	b.n	8003b5e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0204 	orr.w	r2, r2, #4
 8003b30:	60da      	str	r2, [r3, #12]
      break;
 8003b32:	e014      	b.n	8003b5e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0208 	orr.w	r2, r2, #8
 8003b42:	60da      	str	r2, [r3, #12]
      break;
 8003b44:	e00b      	b.n	8003b5e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f042 0210 	orr.w	r2, r2, #16
 8003b54:	60da      	str	r2, [r3, #12]
      break;
 8003b56:	e002      	b.n	8003b5e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b5c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003b5e:	7bfb      	ldrb	r3, [r7, #15]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d13e      	bne.n	8003be2 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	6839      	ldr	r1, [r7, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 fbeb 	bl	8004348 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a1d      	ldr	r2, [pc, #116]	; (8003bec <HAL_TIM_IC_Start_IT+0x220>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d018      	beq.n	8003bae <HAL_TIM_IC_Start_IT+0x1e2>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b84:	d013      	beq.n	8003bae <HAL_TIM_IC_Start_IT+0x1e2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a19      	ldr	r2, [pc, #100]	; (8003bf0 <HAL_TIM_IC_Start_IT+0x224>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d00e      	beq.n	8003bae <HAL_TIM_IC_Start_IT+0x1e2>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a17      	ldr	r2, [pc, #92]	; (8003bf4 <HAL_TIM_IC_Start_IT+0x228>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d009      	beq.n	8003bae <HAL_TIM_IC_Start_IT+0x1e2>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a16      	ldr	r2, [pc, #88]	; (8003bf8 <HAL_TIM_IC_Start_IT+0x22c>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d004      	beq.n	8003bae <HAL_TIM_IC_Start_IT+0x1e2>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a14      	ldr	r2, [pc, #80]	; (8003bfc <HAL_TIM_IC_Start_IT+0x230>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d111      	bne.n	8003bd2 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2b06      	cmp	r3, #6
 8003bbe:	d010      	beq.n	8003be2 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bd0:	e007      	b.n	8003be2 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f042 0201 	orr.w	r2, r2, #1
 8003be0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40010000 	.word	0x40010000
 8003bf0:	40000400 	.word	0x40000400
 8003bf4:	40000800 	.word	0x40000800
 8003bf8:	40000c00 	.word	0x40000c00
 8003bfc:	40014000 	.word	0x40014000

08003c00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d122      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d11b      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f06f 0202 	mvn.w	r2, #2
 8003c2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7fd fd60 	bl	8001708 <HAL_TIM_IC_CaptureCallback>
 8003c48:	e005      	b.n	8003c56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f9c0 	bl	8003fd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f9c7 	bl	8003fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f003 0304 	and.w	r3, r3, #4
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d122      	bne.n	8003cb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d11b      	bne.n	8003cb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f06f 0204 	mvn.w	r2, #4
 8003c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2202      	movs	r2, #2
 8003c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7fd fd36 	bl	8001708 <HAL_TIM_IC_CaptureCallback>
 8003c9c:	e005      	b.n	8003caa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f996 	bl	8003fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f99d 	bl	8003fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b08      	cmp	r3, #8
 8003cbc:	d122      	bne.n	8003d04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f003 0308 	and.w	r3, r3, #8
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d11b      	bne.n	8003d04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f06f 0208 	mvn.w	r2, #8
 8003cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2204      	movs	r2, #4
 8003cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7fd fd0c 	bl	8001708 <HAL_TIM_IC_CaptureCallback>
 8003cf0:	e005      	b.n	8003cfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f96c 	bl	8003fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 f973 	bl	8003fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	f003 0310 	and.w	r3, r3, #16
 8003d0e:	2b10      	cmp	r3, #16
 8003d10:	d122      	bne.n	8003d58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f003 0310 	and.w	r3, r3, #16
 8003d1c:	2b10      	cmp	r3, #16
 8003d1e:	d11b      	bne.n	8003d58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f06f 0210 	mvn.w	r2, #16
 8003d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2208      	movs	r2, #8
 8003d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7fd fce2 	bl	8001708 <HAL_TIM_IC_CaptureCallback>
 8003d44:	e005      	b.n	8003d52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f942 	bl	8003fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f949 	bl	8003fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d10e      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d107      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f06f 0201 	mvn.w	r2, #1
 8003d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7fe fa40 	bl	8002204 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8e:	2b80      	cmp	r3, #128	; 0x80
 8003d90:	d10e      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9c:	2b80      	cmp	r3, #128	; 0x80
 8003d9e:	d107      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 fb6a 	bl	8004484 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dba:	2b40      	cmp	r3, #64	; 0x40
 8003dbc:	d10e      	bne.n	8003ddc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc8:	2b40      	cmp	r3, #64	; 0x40
 8003dca:	d107      	bne.n	8003ddc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f90e 	bl	8003ff8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f003 0320 	and.w	r3, r3, #32
 8003de6:	2b20      	cmp	r3, #32
 8003de8:	d10e      	bne.n	8003e08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f003 0320 	and.w	r3, r3, #32
 8003df4:	2b20      	cmp	r3, #32
 8003df6:	d107      	bne.n	8003e08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f06f 0220 	mvn.w	r2, #32
 8003e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fb34 	bl	8004470 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e08:	bf00      	nop
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d101      	bne.n	8003e2e <HAL_TIM_IC_ConfigChannel+0x1e>
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	e088      	b.n	8003f40 <HAL_TIM_IC_ConfigChannel+0x130>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d11b      	bne.n	8003e74 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6818      	ldr	r0, [r3, #0]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	6819      	ldr	r1, [r3, #0]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f000 f95e 	bl	800410c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699a      	ldr	r2, [r3, #24]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 020c 	bic.w	r2, r2, #12
 8003e5e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6999      	ldr	r1, [r3, #24]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	689a      	ldr	r2, [r3, #8]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	619a      	str	r2, [r3, #24]
 8003e72:	e060      	b.n	8003f36 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d11c      	bne.n	8003eb4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6818      	ldr	r0, [r3, #0]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	6819      	ldr	r1, [r3, #0]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f000 f9a7 	bl	80041dc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	699a      	ldr	r2, [r3, #24]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003e9c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6999      	ldr	r1, [r3, #24]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	021a      	lsls	r2, r3, #8
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	619a      	str	r2, [r3, #24]
 8003eb2:	e040      	b.n	8003f36 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b08      	cmp	r3, #8
 8003eb8:	d11b      	bne.n	8003ef2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6818      	ldr	r0, [r3, #0]
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	6819      	ldr	r1, [r3, #0]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f000 f9c4 	bl	8004256 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	69da      	ldr	r2, [r3, #28]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 020c 	bic.w	r2, r2, #12
 8003edc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	69d9      	ldr	r1, [r3, #28]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	61da      	str	r2, [r3, #28]
 8003ef0:	e021      	b.n	8003f36 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b0c      	cmp	r3, #12
 8003ef6:	d11c      	bne.n	8003f32 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6818      	ldr	r0, [r3, #0]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	6819      	ldr	r1, [r3, #0]
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f000 f9e1 	bl	80042ce <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	69da      	ldr	r2, [r3, #28]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003f1a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	69d9      	ldr	r1, [r3, #28]
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	021a      	lsls	r2, r3, #8
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	61da      	str	r2, [r3, #28]
 8003f30:	e001      	b.n	8003f36 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3718      	adds	r7, #24
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b0c      	cmp	r3, #12
 8003f5a:	d831      	bhi.n	8003fc0 <HAL_TIM_ReadCapturedValue+0x78>
 8003f5c:	a201      	add	r2, pc, #4	; (adr r2, 8003f64 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f62:	bf00      	nop
 8003f64:	08003f99 	.word	0x08003f99
 8003f68:	08003fc1 	.word	0x08003fc1
 8003f6c:	08003fc1 	.word	0x08003fc1
 8003f70:	08003fc1 	.word	0x08003fc1
 8003f74:	08003fa3 	.word	0x08003fa3
 8003f78:	08003fc1 	.word	0x08003fc1
 8003f7c:	08003fc1 	.word	0x08003fc1
 8003f80:	08003fc1 	.word	0x08003fc1
 8003f84:	08003fad 	.word	0x08003fad
 8003f88:	08003fc1 	.word	0x08003fc1
 8003f8c:	08003fc1 	.word	0x08003fc1
 8003f90:	08003fc1 	.word	0x08003fc1
 8003f94:	08003fb7 	.word	0x08003fb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9e:	60fb      	str	r3, [r7, #12]

      break;
 8003fa0:	e00f      	b.n	8003fc2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa8:	60fb      	str	r3, [r7, #12]

      break;
 8003faa:	e00a      	b.n	8003fc2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb2:	60fb      	str	r3, [r7, #12]

      break;
 8003fb4:	e005      	b.n	8003fc2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	60fb      	str	r3, [r7, #12]

      break;
 8003fbe:	e000      	b.n	8003fc2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003fc0:	bf00      	nop
  }

  return tmpreg;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a34      	ldr	r2, [pc, #208]	; (80040f0 <TIM_Base_SetConfig+0xe4>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d00f      	beq.n	8004044 <TIM_Base_SetConfig+0x38>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800402a:	d00b      	beq.n	8004044 <TIM_Base_SetConfig+0x38>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a31      	ldr	r2, [pc, #196]	; (80040f4 <TIM_Base_SetConfig+0xe8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d007      	beq.n	8004044 <TIM_Base_SetConfig+0x38>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a30      	ldr	r2, [pc, #192]	; (80040f8 <TIM_Base_SetConfig+0xec>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d003      	beq.n	8004044 <TIM_Base_SetConfig+0x38>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a2f      	ldr	r2, [pc, #188]	; (80040fc <TIM_Base_SetConfig+0xf0>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d108      	bne.n	8004056 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800404a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	4313      	orrs	r3, r2
 8004054:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a25      	ldr	r2, [pc, #148]	; (80040f0 <TIM_Base_SetConfig+0xe4>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d01b      	beq.n	8004096 <TIM_Base_SetConfig+0x8a>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004064:	d017      	beq.n	8004096 <TIM_Base_SetConfig+0x8a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a22      	ldr	r2, [pc, #136]	; (80040f4 <TIM_Base_SetConfig+0xe8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d013      	beq.n	8004096 <TIM_Base_SetConfig+0x8a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a21      	ldr	r2, [pc, #132]	; (80040f8 <TIM_Base_SetConfig+0xec>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00f      	beq.n	8004096 <TIM_Base_SetConfig+0x8a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a20      	ldr	r2, [pc, #128]	; (80040fc <TIM_Base_SetConfig+0xf0>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d00b      	beq.n	8004096 <TIM_Base_SetConfig+0x8a>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a1f      	ldr	r2, [pc, #124]	; (8004100 <TIM_Base_SetConfig+0xf4>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d007      	beq.n	8004096 <TIM_Base_SetConfig+0x8a>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a1e      	ldr	r2, [pc, #120]	; (8004104 <TIM_Base_SetConfig+0xf8>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d003      	beq.n	8004096 <TIM_Base_SetConfig+0x8a>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a1d      	ldr	r2, [pc, #116]	; (8004108 <TIM_Base_SetConfig+0xfc>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d108      	bne.n	80040a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800409c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a08      	ldr	r2, [pc, #32]	; (80040f0 <TIM_Base_SetConfig+0xe4>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d103      	bne.n	80040dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	691a      	ldr	r2, [r3, #16]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	615a      	str	r2, [r3, #20]
}
 80040e2:	bf00      	nop
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40010000 	.word	0x40010000
 80040f4:	40000400 	.word	0x40000400
 80040f8:	40000800 	.word	0x40000800
 80040fc:	40000c00 	.word	0x40000c00
 8004100:	40014000 	.word	0x40014000
 8004104:	40014400 	.word	0x40014400
 8004108:	40014800 	.word	0x40014800

0800410c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
 8004118:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	f023 0201 	bic.w	r2, r3, #1
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	4a24      	ldr	r2, [pc, #144]	; (80041c8 <TIM_TI1_SetConfig+0xbc>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d013      	beq.n	8004162 <TIM_TI1_SetConfig+0x56>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004140:	d00f      	beq.n	8004162 <TIM_TI1_SetConfig+0x56>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	4a21      	ldr	r2, [pc, #132]	; (80041cc <TIM_TI1_SetConfig+0xc0>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d00b      	beq.n	8004162 <TIM_TI1_SetConfig+0x56>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4a20      	ldr	r2, [pc, #128]	; (80041d0 <TIM_TI1_SetConfig+0xc4>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d007      	beq.n	8004162 <TIM_TI1_SetConfig+0x56>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	4a1f      	ldr	r2, [pc, #124]	; (80041d4 <TIM_TI1_SetConfig+0xc8>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d003      	beq.n	8004162 <TIM_TI1_SetConfig+0x56>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4a1e      	ldr	r2, [pc, #120]	; (80041d8 <TIM_TI1_SetConfig+0xcc>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d101      	bne.n	8004166 <TIM_TI1_SetConfig+0x5a>
 8004162:	2301      	movs	r3, #1
 8004164:	e000      	b.n	8004168 <TIM_TI1_SetConfig+0x5c>
 8004166:	2300      	movs	r3, #0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d008      	beq.n	800417e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f023 0303 	bic.w	r3, r3, #3
 8004172:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4313      	orrs	r3, r2
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	e003      	b.n	8004186 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f043 0301 	orr.w	r3, r3, #1
 8004184:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800418c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	b2db      	uxtb	r3, r3
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	4313      	orrs	r3, r2
 8004198:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f023 030a 	bic.w	r3, r3, #10
 80041a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	f003 030a 	and.w	r3, r3, #10
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	621a      	str	r2, [r3, #32]
}
 80041ba:	bf00      	nop
 80041bc:	371c      	adds	r7, #28
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	40010000 	.word	0x40010000
 80041cc:	40000400 	.word	0x40000400
 80041d0:	40000800 	.word	0x40000800
 80041d4:	40000c00 	.word	0x40000c00
 80041d8:	40014000 	.word	0x40014000

080041dc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041dc:	b480      	push	{r7}
 80041de:	b087      	sub	sp, #28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	f023 0210 	bic.w	r2, r3, #16
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004208:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	021b      	lsls	r3, r3, #8
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	4313      	orrs	r3, r2
 8004212:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800421a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	031b      	lsls	r3, r3, #12
 8004220:	b29b      	uxth	r3, r3
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	4313      	orrs	r3, r2
 8004226:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800422e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	011b      	lsls	r3, r3, #4
 8004234:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4313      	orrs	r3, r2
 800423c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	621a      	str	r2, [r3, #32]
}
 800424a:	bf00      	nop
 800424c:	371c      	adds	r7, #28
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004256:	b480      	push	{r7}
 8004258:	b087      	sub	sp, #28
 800425a:	af00      	add	r7, sp, #0
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	607a      	str	r2, [r7, #4]
 8004262:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	69db      	ldr	r3, [r3, #28]
 8004274:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f023 0303 	bic.w	r3, r3, #3
 8004282:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4313      	orrs	r3, r2
 800428a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004292:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	b2db      	uxtb	r3, r3
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	4313      	orrs	r3, r2
 800429e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80042a6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	021b      	lsls	r3, r3, #8
 80042ac:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	621a      	str	r2, [r3, #32]
}
 80042c2:	bf00      	nop
 80042c4:	371c      	adds	r7, #28
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b087      	sub	sp, #28
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	60f8      	str	r0, [r7, #12]
 80042d6:	60b9      	str	r1, [r7, #8]
 80042d8:	607a      	str	r2, [r7, #4]
 80042da:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042fa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	021b      	lsls	r3, r3, #8
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	4313      	orrs	r3, r2
 8004304:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800430c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	031b      	lsls	r3, r3, #12
 8004312:	b29b      	uxth	r3, r3
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	4313      	orrs	r3, r2
 8004318:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004320:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	031b      	lsls	r3, r3, #12
 8004326:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	4313      	orrs	r3, r2
 800432e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	621a      	str	r2, [r3, #32]
}
 800433c:	bf00      	nop
 800433e:	371c      	adds	r7, #28
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004348:	b480      	push	{r7}
 800434a:	b087      	sub	sp, #28
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f003 031f 	and.w	r3, r3, #31
 800435a:	2201      	movs	r2, #1
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6a1a      	ldr	r2, [r3, #32]
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	43db      	mvns	r3, r3
 800436a:	401a      	ands	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a1a      	ldr	r2, [r3, #32]
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	f003 031f 	and.w	r3, r3, #31
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	fa01 f303 	lsl.w	r3, r1, r3
 8004380:	431a      	orrs	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	621a      	str	r2, [r3, #32]
}
 8004386:	bf00      	nop
 8004388:	371c      	adds	r7, #28
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
	...

08004394 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d101      	bne.n	80043ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043a8:	2302      	movs	r3, #2
 80043aa:	e050      	b.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a1c      	ldr	r2, [pc, #112]	; (800445c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d018      	beq.n	8004422 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f8:	d013      	beq.n	8004422 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a18      	ldr	r2, [pc, #96]	; (8004460 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d00e      	beq.n	8004422 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a16      	ldr	r2, [pc, #88]	; (8004464 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d009      	beq.n	8004422 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a15      	ldr	r2, [pc, #84]	; (8004468 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d004      	beq.n	8004422 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a13      	ldr	r2, [pc, #76]	; (800446c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d10c      	bne.n	800443c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004428:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	4313      	orrs	r3, r2
 8004432:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	40010000 	.word	0x40010000
 8004460:	40000400 	.word	0x40000400
 8004464:	40000800 	.word	0x40000800
 8004468:	40000c00 	.word	0x40000c00
 800446c:	40014000 	.word	0x40014000

08004470 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e03f      	b.n	800452a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d106      	bne.n	80044c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7fd ff3c 	bl	800233c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2224      	movs	r2, #36	; 0x24
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 fddb 	bl	8005098 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	691a      	ldr	r2, [r3, #16]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	695a      	ldr	r2, [r3, #20]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004500:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68da      	ldr	r2, [r3, #12]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004510:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2220      	movs	r2, #32
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2220      	movs	r2, #32
 8004524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b08a      	sub	sp, #40	; 0x28
 8004536:	af02      	add	r7, sp, #8
 8004538:	60f8      	str	r0, [r7, #12]
 800453a:	60b9      	str	r1, [r7, #8]
 800453c:	603b      	str	r3, [r7, #0]
 800453e:	4613      	mov	r3, r2
 8004540:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004542:	2300      	movs	r3, #0
 8004544:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b20      	cmp	r3, #32
 8004550:	d17c      	bne.n	800464c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <HAL_UART_Transmit+0x2c>
 8004558:	88fb      	ldrh	r3, [r7, #6]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e075      	b.n	800464e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <HAL_UART_Transmit+0x3e>
 800456c:	2302      	movs	r3, #2
 800456e:	e06e      	b.n	800464e <HAL_UART_Transmit+0x11c>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2221      	movs	r2, #33	; 0x21
 8004582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004586:	f7fe f8fd 	bl	8002784 <HAL_GetTick>
 800458a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	88fa      	ldrh	r2, [r7, #6]
 8004590:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	88fa      	ldrh	r2, [r7, #6]
 8004596:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a0:	d108      	bne.n	80045b4 <HAL_UART_Transmit+0x82>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d104      	bne.n	80045b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80045aa:	2300      	movs	r3, #0
 80045ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	61bb      	str	r3, [r7, #24]
 80045b2:	e003      	b.n	80045bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045b8:	2300      	movs	r3, #0
 80045ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80045c4:	e02a      	b.n	800461c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2200      	movs	r2, #0
 80045ce:	2180      	movs	r1, #128	; 0x80
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 fb1f 	bl	8004c14 <UART_WaitOnFlagUntilTimeout>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e036      	b.n	800464e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10b      	bne.n	80045fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	461a      	mov	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	3302      	adds	r3, #2
 80045fa:	61bb      	str	r3, [r7, #24]
 80045fc:	e007      	b.n	800460e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	781a      	ldrb	r2, [r3, #0]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	3301      	adds	r3, #1
 800460c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004612:	b29b      	uxth	r3, r3
 8004614:	3b01      	subs	r3, #1
 8004616:	b29a      	uxth	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004620:	b29b      	uxth	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1cf      	bne.n	80045c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2200      	movs	r2, #0
 800462e:	2140      	movs	r1, #64	; 0x40
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 faef 	bl	8004c14 <UART_WaitOnFlagUntilTimeout>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e006      	b.n	800464e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2220      	movs	r2, #32
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004648:	2300      	movs	r3, #0
 800464a:	e000      	b.n	800464e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800464c:	2302      	movs	r3, #2
  }
}
 800464e:	4618      	mov	r0, r3
 8004650:	3720      	adds	r7, #32
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b084      	sub	sp, #16
 800465a:	af00      	add	r7, sp, #0
 800465c:	60f8      	str	r0, [r7, #12]
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	4613      	mov	r3, r2
 8004662:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b20      	cmp	r3, #32
 800466e:	d11d      	bne.n	80046ac <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d002      	beq.n	800467c <HAL_UART_Receive_IT+0x26>
 8004676:	88fb      	ldrh	r3, [r7, #6]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d101      	bne.n	8004680 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e016      	b.n	80046ae <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004686:	2b01      	cmp	r3, #1
 8004688:	d101      	bne.n	800468e <HAL_UART_Receive_IT+0x38>
 800468a:	2302      	movs	r3, #2
 800468c:	e00f      	b.n	80046ae <HAL_UART_Receive_IT+0x58>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800469c:	88fb      	ldrh	r3, [r7, #6]
 800469e:	461a      	mov	r2, r3
 80046a0:	68b9      	ldr	r1, [r7, #8]
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f000 fb24 	bl	8004cf0 <UART_Start_Receive_IT>
 80046a8:	4603      	mov	r3, r0
 80046aa:	e000      	b.n	80046ae <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80046ac:	2302      	movs	r3, #2
  }
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
	...

080046b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b0ba      	sub	sp, #232	; 0xe8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80046de:	2300      	movs	r3, #0
 80046e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80046f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10f      	bne.n	800471e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004702:	f003 0320 	and.w	r3, r3, #32
 8004706:	2b00      	cmp	r3, #0
 8004708:	d009      	beq.n	800471e <HAL_UART_IRQHandler+0x66>
 800470a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800470e:	f003 0320 	and.w	r3, r3, #32
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 fc03 	bl	8004f22 <UART_Receive_IT>
      return;
 800471c:	e256      	b.n	8004bcc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800471e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 80de 	beq.w	80048e4 <HAL_UART_IRQHandler+0x22c>
 8004728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b00      	cmp	r3, #0
 8004732:	d106      	bne.n	8004742 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004738:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 80d1 	beq.w	80048e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00b      	beq.n	8004766 <HAL_UART_IRQHandler+0xae>
 800474e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004756:	2b00      	cmp	r3, #0
 8004758:	d005      	beq.n	8004766 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	f043 0201 	orr.w	r2, r3, #1
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800476a:	f003 0304 	and.w	r3, r3, #4
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00b      	beq.n	800478a <HAL_UART_IRQHandler+0xd2>
 8004772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	d005      	beq.n	800478a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	f043 0202 	orr.w	r2, r3, #2
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800478a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00b      	beq.n	80047ae <HAL_UART_IRQHandler+0xf6>
 8004796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d005      	beq.n	80047ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	f043 0204 	orr.w	r2, r3, #4
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80047ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d011      	beq.n	80047de <HAL_UART_IRQHandler+0x126>
 80047ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047be:	f003 0320 	and.w	r3, r3, #32
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d105      	bne.n	80047d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80047c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d005      	beq.n	80047de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	f043 0208 	orr.w	r2, r3, #8
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 81ed 	beq.w	8004bc2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ec:	f003 0320 	and.w	r3, r3, #32
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d008      	beq.n	8004806 <HAL_UART_IRQHandler+0x14e>
 80047f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047f8:	f003 0320 	and.w	r3, r3, #32
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d002      	beq.n	8004806 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 fb8e 	bl	8004f22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004810:	2b40      	cmp	r3, #64	; 0x40
 8004812:	bf0c      	ite	eq
 8004814:	2301      	moveq	r3, #1
 8004816:	2300      	movne	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	2b00      	cmp	r3, #0
 8004828:	d103      	bne.n	8004832 <HAL_UART_IRQHandler+0x17a>
 800482a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800482e:	2b00      	cmp	r3, #0
 8004830:	d04f      	beq.n	80048d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 fa96 	bl	8004d64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004842:	2b40      	cmp	r3, #64	; 0x40
 8004844:	d141      	bne.n	80048ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3314      	adds	r3, #20
 800484c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004850:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004854:	e853 3f00 	ldrex	r3, [r3]
 8004858:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800485c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004864:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3314      	adds	r3, #20
 800486e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004872:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004876:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800487e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004882:	e841 2300 	strex	r3, r2, [r1]
 8004886:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800488a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1d9      	bne.n	8004846 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004896:	2b00      	cmp	r3, #0
 8004898:	d013      	beq.n	80048c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489e:	4a7d      	ldr	r2, [pc, #500]	; (8004a94 <HAL_UART_IRQHandler+0x3dc>)
 80048a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fe f8ca 	bl	8002a40 <HAL_DMA_Abort_IT>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d016      	beq.n	80048e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048bc:	4610      	mov	r0, r2
 80048be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c0:	e00e      	b.n	80048e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f990 	bl	8004be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c8:	e00a      	b.n	80048e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f98c 	bl	8004be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d0:	e006      	b.n	80048e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f988 	bl	8004be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80048de:	e170      	b.n	8004bc2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e0:	bf00      	nop
    return;
 80048e2:	e16e      	b.n	8004bc2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	f040 814a 	bne.w	8004b82 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80048ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048f2:	f003 0310 	and.w	r3, r3, #16
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f000 8143 	beq.w	8004b82 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80048fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004900:	f003 0310 	and.w	r3, r3, #16
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 813c 	beq.w	8004b82 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800490a:	2300      	movs	r3, #0
 800490c:	60bb      	str	r3, [r7, #8]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	60bb      	str	r3, [r7, #8]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	60bb      	str	r3, [r7, #8]
 800491e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492a:	2b40      	cmp	r3, #64	; 0x40
 800492c:	f040 80b4 	bne.w	8004a98 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800493c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 8140 	beq.w	8004bc6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800494a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800494e:	429a      	cmp	r2, r3
 8004950:	f080 8139 	bcs.w	8004bc6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800495a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004966:	f000 8088 	beq.w	8004a7a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	330c      	adds	r3, #12
 8004970:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004974:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004978:	e853 3f00 	ldrex	r3, [r3]
 800497c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004980:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004988:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	330c      	adds	r3, #12
 8004992:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004996:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800499a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80049a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80049a6:	e841 2300 	strex	r3, r2, [r1]
 80049aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80049ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1d9      	bne.n	800496a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3314      	adds	r3, #20
 80049bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049c0:	e853 3f00 	ldrex	r3, [r3]
 80049c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80049c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049c8:	f023 0301 	bic.w	r3, r3, #1
 80049cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	3314      	adds	r3, #20
 80049d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80049de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80049e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80049e6:	e841 2300 	strex	r3, r2, [r1]
 80049ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80049ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1e1      	bne.n	80049b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	3314      	adds	r3, #20
 80049f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049fc:	e853 3f00 	ldrex	r3, [r3]
 8004a00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	3314      	adds	r3, #20
 8004a12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a1e:	e841 2300 	strex	r3, r2, [r1]
 8004a22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1e3      	bne.n	80049f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	330c      	adds	r3, #12
 8004a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a42:	e853 3f00 	ldrex	r3, [r3]
 8004a46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a4a:	f023 0310 	bic.w	r3, r3, #16
 8004a4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	330c      	adds	r3, #12
 8004a58:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004a5c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a5e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a64:	e841 2300 	strex	r3, r2, [r1]
 8004a68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1e3      	bne.n	8004a38 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7fd ff73 	bl	8002960 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	4619      	mov	r1, r3
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f8b6 	bl	8004bfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a90:	e099      	b.n	8004bc6 <HAL_UART_IRQHandler+0x50e>
 8004a92:	bf00      	nop
 8004a94:	08004e2b 	.word	0x08004e2b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 808b 	beq.w	8004bca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004ab4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 8086 	beq.w	8004bca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	330c      	adds	r3, #12
 8004ac4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac8:	e853 3f00 	ldrex	r3, [r3]
 8004acc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ad0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ad4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	330c      	adds	r3, #12
 8004ade:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004ae2:	647a      	str	r2, [r7, #68]	; 0x44
 8004ae4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ae8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004aea:	e841 2300 	strex	r3, r2, [r1]
 8004aee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1e3      	bne.n	8004abe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	3314      	adds	r3, #20
 8004afc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	e853 3f00 	ldrex	r3, [r3]
 8004b04:	623b      	str	r3, [r7, #32]
   return(result);
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	f023 0301 	bic.w	r3, r3, #1
 8004b0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3314      	adds	r3, #20
 8004b16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b1a:	633a      	str	r2, [r7, #48]	; 0x30
 8004b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b22:	e841 2300 	strex	r3, r2, [r1]
 8004b26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1e3      	bne.n	8004af6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	330c      	adds	r3, #12
 8004b42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	e853 3f00 	ldrex	r3, [r3]
 8004b4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f023 0310 	bic.w	r3, r3, #16
 8004b52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	330c      	adds	r3, #12
 8004b5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004b60:	61fa      	str	r2, [r7, #28]
 8004b62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b64:	69b9      	ldr	r1, [r7, #24]
 8004b66:	69fa      	ldr	r2, [r7, #28]
 8004b68:	e841 2300 	strex	r3, r2, [r1]
 8004b6c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1e3      	bne.n	8004b3c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b78:	4619      	mov	r1, r3
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f83e 	bl	8004bfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b80:	e023      	b.n	8004bca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d009      	beq.n	8004ba2 <HAL_UART_IRQHandler+0x4ea>
 8004b8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f959 	bl	8004e52 <UART_Transmit_IT>
    return;
 8004ba0:	e014      	b.n	8004bcc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00e      	beq.n	8004bcc <HAL_UART_IRQHandler+0x514>
 8004bae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d008      	beq.n	8004bcc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f999 	bl	8004ef2 <UART_EndTransmit_IT>
    return;
 8004bc0:	e004      	b.n	8004bcc <HAL_UART_IRQHandler+0x514>
    return;
 8004bc2:	bf00      	nop
 8004bc4:	e002      	b.n	8004bcc <HAL_UART_IRQHandler+0x514>
      return;
 8004bc6:	bf00      	nop
 8004bc8:	e000      	b.n	8004bcc <HAL_UART_IRQHandler+0x514>
      return;
 8004bca:	bf00      	nop
  }
}
 8004bcc:	37e8      	adds	r7, #232	; 0xe8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop

08004bd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b090      	sub	sp, #64	; 0x40
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	603b      	str	r3, [r7, #0]
 8004c20:	4613      	mov	r3, r2
 8004c22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c24:	e050      	b.n	8004cc8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2c:	d04c      	beq.n	8004cc8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d007      	beq.n	8004c44 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c34:	f7fd fda6 	bl	8002784 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d241      	bcs.n	8004cc8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	330c      	adds	r3, #12
 8004c4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4e:	e853 3f00 	ldrex	r3, [r3]
 8004c52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	330c      	adds	r3, #12
 8004c62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c64:	637a      	str	r2, [r7, #52]	; 0x34
 8004c66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c6c:	e841 2300 	strex	r3, r2, [r1]
 8004c70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1e5      	bne.n	8004c44 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3314      	adds	r3, #20
 8004c7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	e853 3f00 	ldrex	r3, [r3]
 8004c86:	613b      	str	r3, [r7, #16]
   return(result);
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	f023 0301 	bic.w	r3, r3, #1
 8004c8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3314      	adds	r3, #20
 8004c96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c98:	623a      	str	r2, [r7, #32]
 8004c9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9c:	69f9      	ldr	r1, [r7, #28]
 8004c9e:	6a3a      	ldr	r2, [r7, #32]
 8004ca0:	e841 2300 	strex	r3, r2, [r1]
 8004ca4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1e5      	bne.n	8004c78 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e00f      	b.n	8004ce8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	bf0c      	ite	eq
 8004cd8:	2301      	moveq	r3, #1
 8004cda:	2300      	movne	r3, #0
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	461a      	mov	r2, r3
 8004ce0:	79fb      	ldrb	r3, [r7, #7]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d09f      	beq.n	8004c26 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3740      	adds	r7, #64	; 0x40
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	88fa      	ldrh	r2, [r7, #6]
 8004d08:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	88fa      	ldrh	r2, [r7, #6]
 8004d0e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2222      	movs	r2, #34	; 0x22
 8004d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d34:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	695a      	ldr	r2, [r3, #20]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f042 0201 	orr.w	r2, r2, #1
 8004d44:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68da      	ldr	r2, [r3, #12]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f042 0220 	orr.w	r2, r2, #32
 8004d54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3714      	adds	r7, #20
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b095      	sub	sp, #84	; 0x54
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	330c      	adds	r3, #12
 8004d72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d76:	e853 3f00 	ldrex	r3, [r3]
 8004d7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	330c      	adds	r3, #12
 8004d8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d8c:	643a      	str	r2, [r7, #64]	; 0x40
 8004d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d94:	e841 2300 	strex	r3, r2, [r1]
 8004d98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1e5      	bne.n	8004d6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	3314      	adds	r3, #20
 8004da6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	e853 3f00 	ldrex	r3, [r3]
 8004dae:	61fb      	str	r3, [r7, #28]
   return(result);
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	f023 0301 	bic.w	r3, r3, #1
 8004db6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3314      	adds	r3, #20
 8004dbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dc0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dc8:	e841 2300 	strex	r3, r2, [r1]
 8004dcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1e5      	bne.n	8004da0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d119      	bne.n	8004e10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	330c      	adds	r3, #12
 8004de2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	e853 3f00 	ldrex	r3, [r3]
 8004dea:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	f023 0310 	bic.w	r3, r3, #16
 8004df2:	647b      	str	r3, [r7, #68]	; 0x44
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	330c      	adds	r3, #12
 8004dfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dfc:	61ba      	str	r2, [r7, #24]
 8004dfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e00:	6979      	ldr	r1, [r7, #20]
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	e841 2300 	strex	r3, r2, [r1]
 8004e08:	613b      	str	r3, [r7, #16]
   return(result);
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1e5      	bne.n	8004ddc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2220      	movs	r2, #32
 8004e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e1e:	bf00      	nop
 8004e20:	3754      	adds	r7, #84	; 0x54
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b084      	sub	sp, #16
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f7ff fecf 	bl	8004be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e4a:	bf00      	nop
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b085      	sub	sp, #20
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b21      	cmp	r3, #33	; 0x21
 8004e64:	d13e      	bne.n	8004ee4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e6e:	d114      	bne.n	8004e9a <UART_Transmit_IT+0x48>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d110      	bne.n	8004e9a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	461a      	mov	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e8c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	1c9a      	adds	r2, r3, #2
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	621a      	str	r2, [r3, #32]
 8004e98:	e008      	b.n	8004eac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	1c59      	adds	r1, r3, #1
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6211      	str	r1, [r2, #32]
 8004ea4:	781a      	ldrb	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	4619      	mov	r1, r3
 8004eba:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10f      	bne.n	8004ee0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68da      	ldr	r2, [r3, #12]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ece:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68da      	ldr	r2, [r3, #12]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ede:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	e000      	b.n	8004ee6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ee4:	2302      	movs	r3, #2
  }
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b082      	sub	sp, #8
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68da      	ldr	r2, [r3, #12]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7ff fe5e 	bl	8004bd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b08c      	sub	sp, #48	; 0x30
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b22      	cmp	r3, #34	; 0x22
 8004f34:	f040 80ab 	bne.w	800508e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f40:	d117      	bne.n	8004f72 <UART_Receive_IT+0x50>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d113      	bne.n	8004f72 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f52:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f64:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6a:	1c9a      	adds	r2, r3, #2
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	629a      	str	r2, [r3, #40]	; 0x28
 8004f70:	e026      	b.n	8004fc0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f76:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f84:	d007      	beq.n	8004f96 <UART_Receive_IT+0x74>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10a      	bne.n	8004fa4 <UART_Receive_IT+0x82>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d106      	bne.n	8004fa4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa0:	701a      	strb	r2, [r3, #0]
 8004fa2:	e008      	b.n	8004fb6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	4619      	mov	r1, r3
 8004fce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d15a      	bne.n	800508a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68da      	ldr	r2, [r3, #12]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f022 0220 	bic.w	r2, r2, #32
 8004fe2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68da      	ldr	r2, [r3, #12]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ff2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	695a      	ldr	r2, [r3, #20]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 0201 	bic.w	r2, r2, #1
 8005002:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2220      	movs	r2, #32
 8005008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005010:	2b01      	cmp	r3, #1
 8005012:	d135      	bne.n	8005080 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	330c      	adds	r3, #12
 8005020:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	e853 3f00 	ldrex	r3, [r3]
 8005028:	613b      	str	r3, [r7, #16]
   return(result);
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f023 0310 	bic.w	r3, r3, #16
 8005030:	627b      	str	r3, [r7, #36]	; 0x24
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	330c      	adds	r3, #12
 8005038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800503a:	623a      	str	r2, [r7, #32]
 800503c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503e:	69f9      	ldr	r1, [r7, #28]
 8005040:	6a3a      	ldr	r2, [r7, #32]
 8005042:	e841 2300 	strex	r3, r2, [r1]
 8005046:	61bb      	str	r3, [r7, #24]
   return(result);
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1e5      	bne.n	800501a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0310 	and.w	r3, r3, #16
 8005058:	2b10      	cmp	r3, #16
 800505a:	d10a      	bne.n	8005072 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800505c:	2300      	movs	r3, #0
 800505e:	60fb      	str	r3, [r7, #12]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	60fb      	str	r3, [r7, #12]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	60fb      	str	r3, [r7, #12]
 8005070:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005076:	4619      	mov	r1, r3
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f7ff fdbf 	bl	8004bfc <HAL_UARTEx_RxEventCallback>
 800507e:	e002      	b.n	8005086 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f7fc faa5 	bl	80015d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	e002      	b.n	8005090 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	e000      	b.n	8005090 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800508e:	2302      	movs	r3, #2
  }
}
 8005090:	4618      	mov	r0, r3
 8005092:	3730      	adds	r7, #48	; 0x30
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800509c:	b0c0      	sub	sp, #256	; 0x100
 800509e:	af00      	add	r7, sp, #0
 80050a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80050b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b4:	68d9      	ldr	r1, [r3, #12]
 80050b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	ea40 0301 	orr.w	r3, r0, r1
 80050c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	431a      	orrs	r2, r3
 80050d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	431a      	orrs	r2, r3
 80050d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	4313      	orrs	r3, r2
 80050e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80050e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80050f0:	f021 010c 	bic.w	r1, r1, #12
 80050f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050fe:	430b      	orrs	r3, r1
 8005100:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800510e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005112:	6999      	ldr	r1, [r3, #24]
 8005114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	ea40 0301 	orr.w	r3, r0, r1
 800511e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	4b8f      	ldr	r3, [pc, #572]	; (8005364 <UART_SetConfig+0x2cc>)
 8005128:	429a      	cmp	r2, r3
 800512a:	d005      	beq.n	8005138 <UART_SetConfig+0xa0>
 800512c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	4b8d      	ldr	r3, [pc, #564]	; (8005368 <UART_SetConfig+0x2d0>)
 8005134:	429a      	cmp	r2, r3
 8005136:	d104      	bne.n	8005142 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005138:	f7fe faf6 	bl	8003728 <HAL_RCC_GetPCLK2Freq>
 800513c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005140:	e003      	b.n	800514a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005142:	f7fe fadd 	bl	8003700 <HAL_RCC_GetPCLK1Freq>
 8005146:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800514a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005154:	f040 810c 	bne.w	8005370 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005158:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800515c:	2200      	movs	r2, #0
 800515e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005162:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005166:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800516a:	4622      	mov	r2, r4
 800516c:	462b      	mov	r3, r5
 800516e:	1891      	adds	r1, r2, r2
 8005170:	65b9      	str	r1, [r7, #88]	; 0x58
 8005172:	415b      	adcs	r3, r3
 8005174:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005176:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800517a:	4621      	mov	r1, r4
 800517c:	eb12 0801 	adds.w	r8, r2, r1
 8005180:	4629      	mov	r1, r5
 8005182:	eb43 0901 	adc.w	r9, r3, r1
 8005186:	f04f 0200 	mov.w	r2, #0
 800518a:	f04f 0300 	mov.w	r3, #0
 800518e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005192:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005196:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800519a:	4690      	mov	r8, r2
 800519c:	4699      	mov	r9, r3
 800519e:	4623      	mov	r3, r4
 80051a0:	eb18 0303 	adds.w	r3, r8, r3
 80051a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80051a8:	462b      	mov	r3, r5
 80051aa:	eb49 0303 	adc.w	r3, r9, r3
 80051ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80051b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80051be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80051c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80051c6:	460b      	mov	r3, r1
 80051c8:	18db      	adds	r3, r3, r3
 80051ca:	653b      	str	r3, [r7, #80]	; 0x50
 80051cc:	4613      	mov	r3, r2
 80051ce:	eb42 0303 	adc.w	r3, r2, r3
 80051d2:	657b      	str	r3, [r7, #84]	; 0x54
 80051d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80051d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80051dc:	f7fb fd1c 	bl	8000c18 <__aeabi_uldivmod>
 80051e0:	4602      	mov	r2, r0
 80051e2:	460b      	mov	r3, r1
 80051e4:	4b61      	ldr	r3, [pc, #388]	; (800536c <UART_SetConfig+0x2d4>)
 80051e6:	fba3 2302 	umull	r2, r3, r3, r2
 80051ea:	095b      	lsrs	r3, r3, #5
 80051ec:	011c      	lsls	r4, r3, #4
 80051ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051f2:	2200      	movs	r2, #0
 80051f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80051fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005200:	4642      	mov	r2, r8
 8005202:	464b      	mov	r3, r9
 8005204:	1891      	adds	r1, r2, r2
 8005206:	64b9      	str	r1, [r7, #72]	; 0x48
 8005208:	415b      	adcs	r3, r3
 800520a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800520c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005210:	4641      	mov	r1, r8
 8005212:	eb12 0a01 	adds.w	sl, r2, r1
 8005216:	4649      	mov	r1, r9
 8005218:	eb43 0b01 	adc.w	fp, r3, r1
 800521c:	f04f 0200 	mov.w	r2, #0
 8005220:	f04f 0300 	mov.w	r3, #0
 8005224:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005228:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800522c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005230:	4692      	mov	sl, r2
 8005232:	469b      	mov	fp, r3
 8005234:	4643      	mov	r3, r8
 8005236:	eb1a 0303 	adds.w	r3, sl, r3
 800523a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800523e:	464b      	mov	r3, r9
 8005240:	eb4b 0303 	adc.w	r3, fp, r3
 8005244:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005254:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005258:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800525c:	460b      	mov	r3, r1
 800525e:	18db      	adds	r3, r3, r3
 8005260:	643b      	str	r3, [r7, #64]	; 0x40
 8005262:	4613      	mov	r3, r2
 8005264:	eb42 0303 	adc.w	r3, r2, r3
 8005268:	647b      	str	r3, [r7, #68]	; 0x44
 800526a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800526e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005272:	f7fb fcd1 	bl	8000c18 <__aeabi_uldivmod>
 8005276:	4602      	mov	r2, r0
 8005278:	460b      	mov	r3, r1
 800527a:	4611      	mov	r1, r2
 800527c:	4b3b      	ldr	r3, [pc, #236]	; (800536c <UART_SetConfig+0x2d4>)
 800527e:	fba3 2301 	umull	r2, r3, r3, r1
 8005282:	095b      	lsrs	r3, r3, #5
 8005284:	2264      	movs	r2, #100	; 0x64
 8005286:	fb02 f303 	mul.w	r3, r2, r3
 800528a:	1acb      	subs	r3, r1, r3
 800528c:	00db      	lsls	r3, r3, #3
 800528e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005292:	4b36      	ldr	r3, [pc, #216]	; (800536c <UART_SetConfig+0x2d4>)
 8005294:	fba3 2302 	umull	r2, r3, r3, r2
 8005298:	095b      	lsrs	r3, r3, #5
 800529a:	005b      	lsls	r3, r3, #1
 800529c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80052a0:	441c      	add	r4, r3
 80052a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052a6:	2200      	movs	r2, #0
 80052a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80052b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80052b4:	4642      	mov	r2, r8
 80052b6:	464b      	mov	r3, r9
 80052b8:	1891      	adds	r1, r2, r2
 80052ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80052bc:	415b      	adcs	r3, r3
 80052be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80052c4:	4641      	mov	r1, r8
 80052c6:	1851      	adds	r1, r2, r1
 80052c8:	6339      	str	r1, [r7, #48]	; 0x30
 80052ca:	4649      	mov	r1, r9
 80052cc:	414b      	adcs	r3, r1
 80052ce:	637b      	str	r3, [r7, #52]	; 0x34
 80052d0:	f04f 0200 	mov.w	r2, #0
 80052d4:	f04f 0300 	mov.w	r3, #0
 80052d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80052dc:	4659      	mov	r1, fp
 80052de:	00cb      	lsls	r3, r1, #3
 80052e0:	4651      	mov	r1, sl
 80052e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052e6:	4651      	mov	r1, sl
 80052e8:	00ca      	lsls	r2, r1, #3
 80052ea:	4610      	mov	r0, r2
 80052ec:	4619      	mov	r1, r3
 80052ee:	4603      	mov	r3, r0
 80052f0:	4642      	mov	r2, r8
 80052f2:	189b      	adds	r3, r3, r2
 80052f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052f8:	464b      	mov	r3, r9
 80052fa:	460a      	mov	r2, r1
 80052fc:	eb42 0303 	adc.w	r3, r2, r3
 8005300:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005310:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005314:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005318:	460b      	mov	r3, r1
 800531a:	18db      	adds	r3, r3, r3
 800531c:	62bb      	str	r3, [r7, #40]	; 0x28
 800531e:	4613      	mov	r3, r2
 8005320:	eb42 0303 	adc.w	r3, r2, r3
 8005324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005326:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800532a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800532e:	f7fb fc73 	bl	8000c18 <__aeabi_uldivmod>
 8005332:	4602      	mov	r2, r0
 8005334:	460b      	mov	r3, r1
 8005336:	4b0d      	ldr	r3, [pc, #52]	; (800536c <UART_SetConfig+0x2d4>)
 8005338:	fba3 1302 	umull	r1, r3, r3, r2
 800533c:	095b      	lsrs	r3, r3, #5
 800533e:	2164      	movs	r1, #100	; 0x64
 8005340:	fb01 f303 	mul.w	r3, r1, r3
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	3332      	adds	r3, #50	; 0x32
 800534a:	4a08      	ldr	r2, [pc, #32]	; (800536c <UART_SetConfig+0x2d4>)
 800534c:	fba2 2303 	umull	r2, r3, r2, r3
 8005350:	095b      	lsrs	r3, r3, #5
 8005352:	f003 0207 	and.w	r2, r3, #7
 8005356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4422      	add	r2, r4
 800535e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005360:	e105      	b.n	800556e <UART_SetConfig+0x4d6>
 8005362:	bf00      	nop
 8005364:	40011000 	.word	0x40011000
 8005368:	40011400 	.word	0x40011400
 800536c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005374:	2200      	movs	r2, #0
 8005376:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800537a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800537e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005382:	4642      	mov	r2, r8
 8005384:	464b      	mov	r3, r9
 8005386:	1891      	adds	r1, r2, r2
 8005388:	6239      	str	r1, [r7, #32]
 800538a:	415b      	adcs	r3, r3
 800538c:	627b      	str	r3, [r7, #36]	; 0x24
 800538e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005392:	4641      	mov	r1, r8
 8005394:	1854      	adds	r4, r2, r1
 8005396:	4649      	mov	r1, r9
 8005398:	eb43 0501 	adc.w	r5, r3, r1
 800539c:	f04f 0200 	mov.w	r2, #0
 80053a0:	f04f 0300 	mov.w	r3, #0
 80053a4:	00eb      	lsls	r3, r5, #3
 80053a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053aa:	00e2      	lsls	r2, r4, #3
 80053ac:	4614      	mov	r4, r2
 80053ae:	461d      	mov	r5, r3
 80053b0:	4643      	mov	r3, r8
 80053b2:	18e3      	adds	r3, r4, r3
 80053b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80053b8:	464b      	mov	r3, r9
 80053ba:	eb45 0303 	adc.w	r3, r5, r3
 80053be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80053c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80053ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80053d2:	f04f 0200 	mov.w	r2, #0
 80053d6:	f04f 0300 	mov.w	r3, #0
 80053da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80053de:	4629      	mov	r1, r5
 80053e0:	008b      	lsls	r3, r1, #2
 80053e2:	4621      	mov	r1, r4
 80053e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053e8:	4621      	mov	r1, r4
 80053ea:	008a      	lsls	r2, r1, #2
 80053ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80053f0:	f7fb fc12 	bl	8000c18 <__aeabi_uldivmod>
 80053f4:	4602      	mov	r2, r0
 80053f6:	460b      	mov	r3, r1
 80053f8:	4b60      	ldr	r3, [pc, #384]	; (800557c <UART_SetConfig+0x4e4>)
 80053fa:	fba3 2302 	umull	r2, r3, r3, r2
 80053fe:	095b      	lsrs	r3, r3, #5
 8005400:	011c      	lsls	r4, r3, #4
 8005402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005406:	2200      	movs	r2, #0
 8005408:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800540c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005410:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005414:	4642      	mov	r2, r8
 8005416:	464b      	mov	r3, r9
 8005418:	1891      	adds	r1, r2, r2
 800541a:	61b9      	str	r1, [r7, #24]
 800541c:	415b      	adcs	r3, r3
 800541e:	61fb      	str	r3, [r7, #28]
 8005420:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005424:	4641      	mov	r1, r8
 8005426:	1851      	adds	r1, r2, r1
 8005428:	6139      	str	r1, [r7, #16]
 800542a:	4649      	mov	r1, r9
 800542c:	414b      	adcs	r3, r1
 800542e:	617b      	str	r3, [r7, #20]
 8005430:	f04f 0200 	mov.w	r2, #0
 8005434:	f04f 0300 	mov.w	r3, #0
 8005438:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800543c:	4659      	mov	r1, fp
 800543e:	00cb      	lsls	r3, r1, #3
 8005440:	4651      	mov	r1, sl
 8005442:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005446:	4651      	mov	r1, sl
 8005448:	00ca      	lsls	r2, r1, #3
 800544a:	4610      	mov	r0, r2
 800544c:	4619      	mov	r1, r3
 800544e:	4603      	mov	r3, r0
 8005450:	4642      	mov	r2, r8
 8005452:	189b      	adds	r3, r3, r2
 8005454:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005458:	464b      	mov	r3, r9
 800545a:	460a      	mov	r2, r1
 800545c:	eb42 0303 	adc.w	r3, r2, r3
 8005460:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	67bb      	str	r3, [r7, #120]	; 0x78
 800546e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005470:	f04f 0200 	mov.w	r2, #0
 8005474:	f04f 0300 	mov.w	r3, #0
 8005478:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800547c:	4649      	mov	r1, r9
 800547e:	008b      	lsls	r3, r1, #2
 8005480:	4641      	mov	r1, r8
 8005482:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005486:	4641      	mov	r1, r8
 8005488:	008a      	lsls	r2, r1, #2
 800548a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800548e:	f7fb fbc3 	bl	8000c18 <__aeabi_uldivmod>
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	4b39      	ldr	r3, [pc, #228]	; (800557c <UART_SetConfig+0x4e4>)
 8005498:	fba3 1302 	umull	r1, r3, r3, r2
 800549c:	095b      	lsrs	r3, r3, #5
 800549e:	2164      	movs	r1, #100	; 0x64
 80054a0:	fb01 f303 	mul.w	r3, r1, r3
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	011b      	lsls	r3, r3, #4
 80054a8:	3332      	adds	r3, #50	; 0x32
 80054aa:	4a34      	ldr	r2, [pc, #208]	; (800557c <UART_SetConfig+0x4e4>)
 80054ac:	fba2 2303 	umull	r2, r3, r2, r3
 80054b0:	095b      	lsrs	r3, r3, #5
 80054b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054b6:	441c      	add	r4, r3
 80054b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054bc:	2200      	movs	r2, #0
 80054be:	673b      	str	r3, [r7, #112]	; 0x70
 80054c0:	677a      	str	r2, [r7, #116]	; 0x74
 80054c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80054c6:	4642      	mov	r2, r8
 80054c8:	464b      	mov	r3, r9
 80054ca:	1891      	adds	r1, r2, r2
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	415b      	adcs	r3, r3
 80054d0:	60fb      	str	r3, [r7, #12]
 80054d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054d6:	4641      	mov	r1, r8
 80054d8:	1851      	adds	r1, r2, r1
 80054da:	6039      	str	r1, [r7, #0]
 80054dc:	4649      	mov	r1, r9
 80054de:	414b      	adcs	r3, r1
 80054e0:	607b      	str	r3, [r7, #4]
 80054e2:	f04f 0200 	mov.w	r2, #0
 80054e6:	f04f 0300 	mov.w	r3, #0
 80054ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80054ee:	4659      	mov	r1, fp
 80054f0:	00cb      	lsls	r3, r1, #3
 80054f2:	4651      	mov	r1, sl
 80054f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054f8:	4651      	mov	r1, sl
 80054fa:	00ca      	lsls	r2, r1, #3
 80054fc:	4610      	mov	r0, r2
 80054fe:	4619      	mov	r1, r3
 8005500:	4603      	mov	r3, r0
 8005502:	4642      	mov	r2, r8
 8005504:	189b      	adds	r3, r3, r2
 8005506:	66bb      	str	r3, [r7, #104]	; 0x68
 8005508:	464b      	mov	r3, r9
 800550a:	460a      	mov	r2, r1
 800550c:	eb42 0303 	adc.w	r3, r2, r3
 8005510:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	663b      	str	r3, [r7, #96]	; 0x60
 800551c:	667a      	str	r2, [r7, #100]	; 0x64
 800551e:	f04f 0200 	mov.w	r2, #0
 8005522:	f04f 0300 	mov.w	r3, #0
 8005526:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800552a:	4649      	mov	r1, r9
 800552c:	008b      	lsls	r3, r1, #2
 800552e:	4641      	mov	r1, r8
 8005530:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005534:	4641      	mov	r1, r8
 8005536:	008a      	lsls	r2, r1, #2
 8005538:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800553c:	f7fb fb6c 	bl	8000c18 <__aeabi_uldivmod>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4b0d      	ldr	r3, [pc, #52]	; (800557c <UART_SetConfig+0x4e4>)
 8005546:	fba3 1302 	umull	r1, r3, r3, r2
 800554a:	095b      	lsrs	r3, r3, #5
 800554c:	2164      	movs	r1, #100	; 0x64
 800554e:	fb01 f303 	mul.w	r3, r1, r3
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	011b      	lsls	r3, r3, #4
 8005556:	3332      	adds	r3, #50	; 0x32
 8005558:	4a08      	ldr	r2, [pc, #32]	; (800557c <UART_SetConfig+0x4e4>)
 800555a:	fba2 2303 	umull	r2, r3, r2, r3
 800555e:	095b      	lsrs	r3, r3, #5
 8005560:	f003 020f 	and.w	r2, r3, #15
 8005564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4422      	add	r2, r4
 800556c:	609a      	str	r2, [r3, #8]
}
 800556e:	bf00      	nop
 8005570:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005574:	46bd      	mov	sp, r7
 8005576:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800557a:	bf00      	nop
 800557c:	51eb851f 	.word	0x51eb851f

08005580 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	4603      	mov	r3, r0
 8005588:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800558a:	2300      	movs	r3, #0
 800558c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800558e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005592:	2b84      	cmp	r3, #132	; 0x84
 8005594:	d005      	beq.n	80055a2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005596:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	4413      	add	r3, r2
 800559e:	3303      	adds	r3, #3
 80055a0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80055a2:	68fb      	ldr	r3, [r7, #12]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055b6:	f3ef 8305 	mrs	r3, IPSR
 80055ba:	607b      	str	r3, [r7, #4]
  return(result);
 80055bc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80055be:	2b00      	cmp	r3, #0
 80055c0:	bf14      	ite	ne
 80055c2:	2301      	movne	r3, #1
 80055c4:	2300      	moveq	r3, #0
 80055c6:	b2db      	uxtb	r3, r3
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80055d8:	f001 fd88 	bl	80070ec <vTaskStartScheduler>
  
  return osOK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80055e6:	f7ff ffe3 	bl	80055b0 <inHandlerMode>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80055f0:	f001 fe96 	bl	8007320 <xTaskGetTickCountFromISR>
 80055f4:	4603      	mov	r3, r0
 80055f6:	e002      	b.n	80055fe <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80055f8:	f001 fe82 	bl	8007300 <xTaskGetTickCount>
 80055fc:	4603      	mov	r3, r0
  }
}
 80055fe:	4618      	mov	r0, r3
 8005600:	bd80      	pop	{r7, pc}

08005602 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005602:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005604:	b089      	sub	sp, #36	; 0x24
 8005606:	af04      	add	r7, sp, #16
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d020      	beq.n	8005656 <osThreadCreate+0x54>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d01c      	beq.n	8005656 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685c      	ldr	r4, [r3, #4]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681d      	ldr	r5, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	691e      	ldr	r6, [r3, #16]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800562e:	4618      	mov	r0, r3
 8005630:	f7ff ffa6 	bl	8005580 <makeFreeRtosPriority>
 8005634:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800563e:	9202      	str	r2, [sp, #8]
 8005640:	9301      	str	r3, [sp, #4]
 8005642:	9100      	str	r1, [sp, #0]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	4632      	mov	r2, r6
 8005648:	4629      	mov	r1, r5
 800564a:	4620      	mov	r0, r4
 800564c:	f001 faf4 	bl	8006c38 <xTaskCreateStatic>
 8005650:	4603      	mov	r3, r0
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	e01c      	b.n	8005690 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685c      	ldr	r4, [r3, #4]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005662:	b29e      	uxth	r6, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800566a:	4618      	mov	r0, r3
 800566c:	f7ff ff88 	bl	8005580 <makeFreeRtosPriority>
 8005670:	4602      	mov	r2, r0
 8005672:	f107 030c 	add.w	r3, r7, #12
 8005676:	9301      	str	r3, [sp, #4]
 8005678:	9200      	str	r2, [sp, #0]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	4632      	mov	r2, r6
 800567e:	4629      	mov	r1, r5
 8005680:	4620      	mov	r0, r4
 8005682:	f001 fb36 	bl	8006cf2 <xTaskCreate>
 8005686:	4603      	mov	r3, r0
 8005688:	2b01      	cmp	r3, #1
 800568a:	d001      	beq.n	8005690 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800568c:	2300      	movs	r3, #0
 800568e:	e000      	b.n	8005692 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005690:	68fb      	ldr	r3, [r7, #12]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800569a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b084      	sub	sp, #16
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d001      	beq.n	80056b0 <osDelay+0x16>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	e000      	b.n	80056b2 <osDelay+0x18>
 80056b0:	2301      	movs	r3, #1
 80056b2:	4618      	mov	r0, r3
 80056b4:	f001 fc54 	bl	8006f60 <vTaskDelay>
  
  return osOK;
 80056b8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
	...

080056c4 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af02      	add	r7, sp, #8
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80056ce:	2300      	movs	r3, #0
 80056d0:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 80056d2:	2300      	movs	r3, #0
 80056d4:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 80056d6:	f7ff ff6b 	bl	80055b0 <inHandlerMode>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d01c      	beq.n	800571a <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80056e0:	6839      	ldr	r1, [r7, #0]
 80056e2:	f107 0208 	add.w	r2, r7, #8
 80056e6:	f107 030c 	add.w	r3, r7, #12
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	4613      	mov	r3, r2
 80056ee:	2201      	movs	r2, #1
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f002 fbe7 	bl	8007ec4 <xTaskGenericNotifyFromISR>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d002      	beq.n	8005702 <osSignalSet+0x3e>
      return 0x80000000;
 80056fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005700:	e019      	b.n	8005736 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d015      	beq.n	8005734 <osSignalSet+0x70>
 8005708:	4b0d      	ldr	r3, [pc, #52]	; (8005740 <osSignalSet+0x7c>)
 800570a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	f3bf 8f4f 	dsb	sy
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	e00c      	b.n	8005734 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800571a:	6839      	ldr	r1, [r7, #0]
 800571c:	f107 0308 	add.w	r3, r7, #8
 8005720:	2201      	movs	r2, #1
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f002 fb18 	bl	8007d58 <xTaskGenericNotify>
 8005728:	4603      	mov	r3, r0
 800572a:	2b01      	cmp	r3, #1
 800572c:	d002      	beq.n	8005734 <osSignalSet+0x70>
    return 0x80000000;
 800572e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005732:	e000      	b.n	8005736 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8005734:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	e000ed04 	.word	0xe000ed04

08005744 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8005744:	b590      	push	{r4, r7, lr}
 8005746:	b089      	sub	sp, #36	; 0x24
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8005750:	2300      	movs	r3, #0
 8005752:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8005754:	2300      	movs	r3, #0
 8005756:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575e:	d103      	bne.n	8005768 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8005760:	f04f 33ff 	mov.w	r3, #4294967295
 8005764:	61fb      	str	r3, [r7, #28]
 8005766:	e009      	b.n	800577c <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d006      	beq.n	800577c <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d101      	bne.n	800577c <osSignalWait+0x38>
      ticks = 1;
 8005778:	2301      	movs	r3, #1
 800577a:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 800577c:	f7ff ff18 	bl	80055b0 <inHandlerMode>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d002      	beq.n	800578c <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8005786:	2382      	movs	r3, #130	; 0x82
 8005788:	613b      	str	r3, [r7, #16]
 800578a:	e01b      	b.n	80057c4 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800578c:	68b9      	ldr	r1, [r7, #8]
 800578e:	f107 0310 	add.w	r3, r7, #16
 8005792:	1d1a      	adds	r2, r3, #4
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	2000      	movs	r0, #0
 8005798:	f002 fa84 	bl	8007ca4 <xTaskNotifyWait>
 800579c:	4603      	mov	r3, r0
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d008      	beq.n	80057b4 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d102      	bne.n	80057ae <osSignalWait+0x6a>
 80057a8:	2300      	movs	r3, #0
 80057aa:	613b      	str	r3, [r7, #16]
 80057ac:	e00a      	b.n	80057c4 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 80057ae:	2340      	movs	r3, #64	; 0x40
 80057b0:	613b      	str	r3, [r7, #16]
 80057b2:	e007      	b.n	80057c4 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	da02      	bge.n	80057c0 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 80057ba:	2386      	movs	r3, #134	; 0x86
 80057bc:	613b      	str	r3, [r7, #16]
 80057be:	e001      	b.n	80057c4 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 80057c0:	2308      	movs	r3, #8
 80057c2:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	461c      	mov	r4, r3
 80057c8:	f107 0310 	add.w	r3, r7, #16
 80057cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80057d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	3724      	adds	r7, #36	; 0x24
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd90      	pop	{r4, r7, pc}

080057dc <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d007      	beq.n	80057fc <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	4619      	mov	r1, r3
 80057f2:	2001      	movs	r0, #1
 80057f4:	f000 fc4b 	bl	800608e <xQueueCreateMutexStatic>
 80057f8:	4603      	mov	r3, r0
 80057fa:	e003      	b.n	8005804 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80057fc:	2001      	movs	r0, #1
 80057fe:	f000 fc2e 	bl	800605e <xQueueCreateMutex>
 8005802:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005804:	4618      	mov	r0, r3
 8005806:	3708      	adds	r7, #8
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005816:	2300      	movs	r3, #0
 8005818:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <osMutexWait+0x18>
    return osErrorParameter;
 8005820:	2380      	movs	r3, #128	; 0x80
 8005822:	e03a      	b.n	800589a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005824:	2300      	movs	r3, #0
 8005826:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800582e:	d103      	bne.n	8005838 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005830:	f04f 33ff 	mov.w	r3, #4294967295
 8005834:	60fb      	str	r3, [r7, #12]
 8005836:	e009      	b.n	800584c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d006      	beq.n	800584c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d101      	bne.n	800584c <osMutexWait+0x40>
      ticks = 1;
 8005848:	2301      	movs	r3, #1
 800584a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800584c:	f7ff feb0 	bl	80055b0 <inHandlerMode>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d017      	beq.n	8005886 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005856:	f107 0308 	add.w	r3, r7, #8
 800585a:	461a      	mov	r2, r3
 800585c:	2100      	movs	r1, #0
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f001 f842 	bl	80068e8 <xQueueReceiveFromISR>
 8005864:	4603      	mov	r3, r0
 8005866:	2b01      	cmp	r3, #1
 8005868:	d001      	beq.n	800586e <osMutexWait+0x62>
      return osErrorOS;
 800586a:	23ff      	movs	r3, #255	; 0xff
 800586c:	e015      	b.n	800589a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d011      	beq.n	8005898 <osMutexWait+0x8c>
 8005874:	4b0b      	ldr	r3, [pc, #44]	; (80058a4 <osMutexWait+0x98>)
 8005876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800587a:	601a      	str	r2, [r3, #0]
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	e008      	b.n	8005898 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005886:	68f9      	ldr	r1, [r7, #12]
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 ff21 	bl	80066d0 <xQueueSemaphoreTake>
 800588e:	4603      	mov	r3, r0
 8005890:	2b01      	cmp	r3, #1
 8005892:	d001      	beq.n	8005898 <osMutexWait+0x8c>
    return osErrorOS;
 8005894:	23ff      	movs	r3, #255	; 0xff
 8005896:	e000      	b.n	800589a <osMutexWait+0x8e>
  }
  
  return osOK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	e000ed04 	.word	0xe000ed04

080058a8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80058b0:	2300      	movs	r3, #0
 80058b2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80058b4:	2300      	movs	r3, #0
 80058b6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80058b8:	f7ff fe7a 	bl	80055b0 <inHandlerMode>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d016      	beq.n	80058f0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80058c2:	f107 0308 	add.w	r3, r7, #8
 80058c6:	4619      	mov	r1, r3
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 fd94 	bl	80063f6 <xQueueGiveFromISR>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d001      	beq.n	80058d8 <osMutexRelease+0x30>
      return osErrorOS;
 80058d4:	23ff      	movs	r3, #255	; 0xff
 80058d6:	e017      	b.n	8005908 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d013      	beq.n	8005906 <osMutexRelease+0x5e>
 80058de:	4b0c      	ldr	r3, [pc, #48]	; (8005910 <osMutexRelease+0x68>)
 80058e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058e4:	601a      	str	r2, [r3, #0]
 80058e6:	f3bf 8f4f 	dsb	sy
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	e00a      	b.n	8005906 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80058f0:	2300      	movs	r3, #0
 80058f2:	2200      	movs	r2, #0
 80058f4:	2100      	movs	r1, #0
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 fbe4 	bl	80060c4 <xQueueGenericSend>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d001      	beq.n	8005906 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005902:	23ff      	movs	r3, #255	; 0xff
 8005904:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005906:	68fb      	ldr	r3, [r7, #12]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	e000ed04 	.word	0xe000ed04

08005914 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af02      	add	r7, sp, #8
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00f      	beq.n	8005946 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d10a      	bne.n	8005942 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	2203      	movs	r2, #3
 8005932:	9200      	str	r2, [sp, #0]
 8005934:	2200      	movs	r2, #0
 8005936:	2100      	movs	r1, #0
 8005938:	2001      	movs	r0, #1
 800593a:	f000 faa5 	bl	8005e88 <xQueueGenericCreateStatic>
 800593e:	4603      	mov	r3, r0
 8005940:	e016      	b.n	8005970 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005942:	2300      	movs	r3, #0
 8005944:	e014      	b.n	8005970 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d110      	bne.n	800596e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800594c:	2203      	movs	r2, #3
 800594e:	2100      	movs	r1, #0
 8005950:	2001      	movs	r0, #1
 8005952:	f000 fb11 	bl	8005f78 <xQueueGenericCreate>
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d005      	beq.n	800596a <osSemaphoreCreate+0x56>
 800595e:	2300      	movs	r3, #0
 8005960:	2200      	movs	r2, #0
 8005962:	2100      	movs	r1, #0
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 fbad 	bl	80060c4 <xQueueGenericSend>
      return sema;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	e000      	b.n	8005970 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800596e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005970:	4618      	mov	r0, r3
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005982:	2300      	movs	r3, #0
 8005984:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800598c:	2380      	movs	r3, #128	; 0x80
 800598e:	e03a      	b.n	8005a06 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005990:	2300      	movs	r3, #0
 8005992:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599a:	d103      	bne.n	80059a4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800599c:	f04f 33ff 	mov.w	r3, #4294967295
 80059a0:	60fb      	str	r3, [r7, #12]
 80059a2:	e009      	b.n	80059b8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d006      	beq.n	80059b8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <osSemaphoreWait+0x40>
      ticks = 1;
 80059b4:	2301      	movs	r3, #1
 80059b6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80059b8:	f7ff fdfa 	bl	80055b0 <inHandlerMode>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d017      	beq.n	80059f2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80059c2:	f107 0308 	add.w	r3, r7, #8
 80059c6:	461a      	mov	r2, r3
 80059c8:	2100      	movs	r1, #0
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 ff8c 	bl	80068e8 <xQueueReceiveFromISR>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d001      	beq.n	80059da <osSemaphoreWait+0x62>
      return osErrorOS;
 80059d6:	23ff      	movs	r3, #255	; 0xff
 80059d8:	e015      	b.n	8005a06 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d011      	beq.n	8005a04 <osSemaphoreWait+0x8c>
 80059e0:	4b0b      	ldr	r3, [pc, #44]	; (8005a10 <osSemaphoreWait+0x98>)
 80059e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059e6:	601a      	str	r2, [r3, #0]
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	e008      	b.n	8005a04 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80059f2:	68f9      	ldr	r1, [r7, #12]
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 fe6b 	bl	80066d0 <xQueueSemaphoreTake>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d001      	beq.n	8005a04 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005a00:	23ff      	movs	r3, #255	; 0xff
 8005a02:	e000      	b.n	8005a06 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	e000ed04 	.word	0xe000ed04

08005a14 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005a20:	2300      	movs	r3, #0
 8005a22:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005a24:	f7ff fdc4 	bl	80055b0 <inHandlerMode>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d016      	beq.n	8005a5c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005a2e:	f107 0308 	add.w	r3, r7, #8
 8005a32:	4619      	mov	r1, r3
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 fcde 	bl	80063f6 <xQueueGiveFromISR>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d001      	beq.n	8005a44 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005a40:	23ff      	movs	r3, #255	; 0xff
 8005a42:	e017      	b.n	8005a74 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d013      	beq.n	8005a72 <osSemaphoreRelease+0x5e>
 8005a4a:	4b0c      	ldr	r3, [pc, #48]	; (8005a7c <osSemaphoreRelease+0x68>)
 8005a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a50:	601a      	str	r2, [r3, #0]
 8005a52:	f3bf 8f4f 	dsb	sy
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	e00a      	b.n	8005a72 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	2200      	movs	r2, #0
 8005a60:	2100      	movs	r1, #0
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 fb2e 	bl	80060c4 <xQueueGenericSend>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d001      	beq.n	8005a72 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005a6e:	23ff      	movs	r3, #255	; 0xff
 8005a70:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005a72:	68fb      	ldr	r3, [r7, #12]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	e000ed04 	.word	0xe000ed04

08005a80 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005a80:	b590      	push	{r4, r7, lr}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af02      	add	r7, sp, #8
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d011      	beq.n	8005ab6 <osMessageCreate+0x36>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00d      	beq.n	8005ab6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6818      	ldr	r0, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6859      	ldr	r1, [r3, #4]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	689a      	ldr	r2, [r3, #8]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	2400      	movs	r4, #0
 8005aac:	9400      	str	r4, [sp, #0]
 8005aae:	f000 f9eb 	bl	8005e88 <xQueueGenericCreateStatic>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	e008      	b.n	8005ac8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6818      	ldr	r0, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	f000 fa59 	bl	8005f78 <xQueueGenericCreate>
 8005ac6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd90      	pop	{r4, r7, pc}

08005ad0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005adc:	2300      	movs	r3, #0
 8005ade:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <osMessagePut+0x1e>
    ticks = 1;
 8005aea:	2301      	movs	r3, #1
 8005aec:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005aee:	f7ff fd5f 	bl	80055b0 <inHandlerMode>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d018      	beq.n	8005b2a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005af8:	f107 0210 	add.w	r2, r7, #16
 8005afc:	f107 0108 	add.w	r1, r7, #8
 8005b00:	2300      	movs	r3, #0
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f000 fbdc 	bl	80062c0 <xQueueGenericSendFromISR>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d001      	beq.n	8005b12 <osMessagePut+0x42>
      return osErrorOS;
 8005b0e:	23ff      	movs	r3, #255	; 0xff
 8005b10:	e018      	b.n	8005b44 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d014      	beq.n	8005b42 <osMessagePut+0x72>
 8005b18:	4b0c      	ldr	r3, [pc, #48]	; (8005b4c <osMessagePut+0x7c>)
 8005b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	e00b      	b.n	8005b42 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005b2a:	f107 0108 	add.w	r1, r7, #8
 8005b2e:	2300      	movs	r3, #0
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f000 fac6 	bl	80060c4 <xQueueGenericSend>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d001      	beq.n	8005b42 <osMessagePut+0x72>
      return osErrorOS;
 8005b3e:	23ff      	movs	r3, #255	; 0xff
 8005b40:	e000      	b.n	8005b44 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3718      	adds	r7, #24
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	e000ed04 	.word	0xe000ed04

08005b50 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005b50:	b590      	push	{r4, r7, lr}
 8005b52:	b08b      	sub	sp, #44	; 0x2c
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005b60:	2300      	movs	r3, #0
 8005b62:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10a      	bne.n	8005b80 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005b6a:	2380      	movs	r3, #128	; 0x80
 8005b6c:	617b      	str	r3, [r7, #20]
    return event;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	461c      	mov	r4, r3
 8005b72:	f107 0314 	add.w	r3, r7, #20
 8005b76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005b7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005b7e:	e054      	b.n	8005c2a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005b80:	2300      	movs	r3, #0
 8005b82:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005b84:	2300      	movs	r3, #0
 8005b86:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8e:	d103      	bne.n	8005b98 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005b90:	f04f 33ff 	mov.w	r3, #4294967295
 8005b94:	627b      	str	r3, [r7, #36]	; 0x24
 8005b96:	e009      	b.n	8005bac <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d006      	beq.n	8005bac <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <osMessageGet+0x5c>
      ticks = 1;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005bac:	f7ff fd00 	bl	80055b0 <inHandlerMode>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d01c      	beq.n	8005bf0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005bb6:	f107 0220 	add.w	r2, r7, #32
 8005bba:	f107 0314 	add.w	r3, r7, #20
 8005bbe:	3304      	adds	r3, #4
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	68b8      	ldr	r0, [r7, #8]
 8005bc4:	f000 fe90 	bl	80068e8 <xQueueReceiveFromISR>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d102      	bne.n	8005bd4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005bce:	2310      	movs	r3, #16
 8005bd0:	617b      	str	r3, [r7, #20]
 8005bd2:	e001      	b.n	8005bd8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005bd8:	6a3b      	ldr	r3, [r7, #32]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d01d      	beq.n	8005c1a <osMessageGet+0xca>
 8005bde:	4b15      	ldr	r3, [pc, #84]	; (8005c34 <osMessageGet+0xe4>)
 8005be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	f3bf 8f6f 	isb	sy
 8005bee:	e014      	b.n	8005c1a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005bf0:	f107 0314 	add.w	r3, r7, #20
 8005bf4:	3304      	adds	r3, #4
 8005bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	68b8      	ldr	r0, [r7, #8]
 8005bfc:	f000 fc88 	bl	8006510 <xQueueReceive>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d102      	bne.n	8005c0c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005c06:	2310      	movs	r3, #16
 8005c08:	617b      	str	r3, [r7, #20]
 8005c0a:	e006      	b.n	8005c1a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <osMessageGet+0xc6>
 8005c12:	2300      	movs	r3, #0
 8005c14:	e000      	b.n	8005c18 <osMessageGet+0xc8>
 8005c16:	2340      	movs	r3, #64	; 0x40
 8005c18:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	461c      	mov	r4, r3
 8005c1e:	f107 0314 	add.w	r3, r7, #20
 8005c22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005c26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	372c      	adds	r7, #44	; 0x2c
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd90      	pop	{r4, r7, pc}
 8005c32:	bf00      	nop
 8005c34:	e000ed04 	.word	0xe000ed04

08005c38 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f001 f9c1 	bl	8006fc8 <vTaskSuspend>
  
  return osOK;
 8005c46:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3708      	adds	r7, #8
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f103 0208 	add.w	r2, r3, #8
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f04f 32ff 	mov.w	r2, #4294967295
 8005c68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f103 0208 	add.w	r2, r3, #8
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f103 0208 	add.w	r2, r3, #8
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005caa:	b480      	push	{r7}
 8005cac:	b085      	sub	sp, #20
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
 8005cb2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	683a      	ldr	r2, [r7, #0]
 8005cce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	683a      	ldr	r2, [r7, #0]
 8005cd4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	1c5a      	adds	r2, r3, #1
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	601a      	str	r2, [r3, #0]
}
 8005ce6:	bf00      	nop
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b085      	sub	sp, #20
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
 8005cfa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d08:	d103      	bne.n	8005d12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	60fb      	str	r3, [r7, #12]
 8005d10:	e00c      	b.n	8005d2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	3308      	adds	r3, #8
 8005d16:	60fb      	str	r3, [r7, #12]
 8005d18:	e002      	b.n	8005d20 <vListInsert+0x2e>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	60fb      	str	r3, [r7, #12]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d2f6      	bcs.n	8005d1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	683a      	ldr	r2, [r7, #0]
 8005d3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	1c5a      	adds	r2, r3, #1
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	601a      	str	r2, [r3, #0]
}
 8005d58:	bf00      	nop
 8005d5a:	3714      	adds	r7, #20
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	6892      	ldr	r2, [r2, #8]
 8005d7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	6852      	ldr	r2, [r2, #4]
 8005d84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d103      	bne.n	8005d98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	689a      	ldr	r2, [r3, #8]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	1e5a      	subs	r2, r3, #1
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d10a      	bne.n	8005de2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd0:	f383 8811 	msr	BASEPRI, r3
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005dde:	bf00      	nop
 8005de0:	e7fe      	b.n	8005de0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005de2:	f002 fadf 	bl	80083a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dee:	68f9      	ldr	r1, [r7, #12]
 8005df0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005df2:	fb01 f303 	mul.w	r3, r1, r3
 8005df6:	441a      	add	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e12:	3b01      	subs	r3, #1
 8005e14:	68f9      	ldr	r1, [r7, #12]
 8005e16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e18:	fb01 f303 	mul.w	r3, r1, r3
 8005e1c:	441a      	add	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	22ff      	movs	r2, #255	; 0xff
 8005e26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	22ff      	movs	r2, #255	; 0xff
 8005e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d114      	bne.n	8005e62 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d01a      	beq.n	8005e76 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	3310      	adds	r3, #16
 8005e44:	4618      	mov	r0, r3
 8005e46:	f001 fbb5 	bl	80075b4 <xTaskRemoveFromEventList>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d012      	beq.n	8005e76 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e50:	4b0c      	ldr	r3, [pc, #48]	; (8005e84 <xQueueGenericReset+0xcc>)
 8005e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e56:	601a      	str	r2, [r3, #0]
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	e009      	b.n	8005e76 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	3310      	adds	r3, #16
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7ff fef2 	bl	8005c50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	3324      	adds	r3, #36	; 0x24
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7ff feed 	bl	8005c50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005e76:	f002 fac5 	bl	8008404 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005e7a:	2301      	movs	r3, #1
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	e000ed04 	.word	0xe000ed04

08005e88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b08e      	sub	sp, #56	; 0x38
 8005e8c:	af02      	add	r7, sp, #8
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
 8005e94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10a      	bne.n	8005eb2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea0:	f383 8811 	msr	BASEPRI, r3
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005eae:	bf00      	nop
 8005eb0:	e7fe      	b.n	8005eb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10a      	bne.n	8005ece <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebc:	f383 8811 	msr	BASEPRI, r3
 8005ec0:	f3bf 8f6f 	isb	sy
 8005ec4:	f3bf 8f4f 	dsb	sy
 8005ec8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005eca:	bf00      	nop
 8005ecc:	e7fe      	b.n	8005ecc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d002      	beq.n	8005eda <xQueueGenericCreateStatic+0x52>
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <xQueueGenericCreateStatic+0x56>
 8005eda:	2301      	movs	r3, #1
 8005edc:	e000      	b.n	8005ee0 <xQueueGenericCreateStatic+0x58>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10a      	bne.n	8005efa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee8:	f383 8811 	msr	BASEPRI, r3
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	623b      	str	r3, [r7, #32]
}
 8005ef6:	bf00      	nop
 8005ef8:	e7fe      	b.n	8005ef8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d102      	bne.n	8005f06 <xQueueGenericCreateStatic+0x7e>
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <xQueueGenericCreateStatic+0x82>
 8005f06:	2301      	movs	r3, #1
 8005f08:	e000      	b.n	8005f0c <xQueueGenericCreateStatic+0x84>
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10a      	bne.n	8005f26 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f14:	f383 8811 	msr	BASEPRI, r3
 8005f18:	f3bf 8f6f 	isb	sy
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	61fb      	str	r3, [r7, #28]
}
 8005f22:	bf00      	nop
 8005f24:	e7fe      	b.n	8005f24 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f26:	2348      	movs	r3, #72	; 0x48
 8005f28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	2b48      	cmp	r3, #72	; 0x48
 8005f2e:	d00a      	beq.n	8005f46 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f34:	f383 8811 	msr	BASEPRI, r3
 8005f38:	f3bf 8f6f 	isb	sy
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	61bb      	str	r3, [r7, #24]
}
 8005f42:	bf00      	nop
 8005f44:	e7fe      	b.n	8005f44 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005f46:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00d      	beq.n	8005f6e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	4613      	mov	r3, r2
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	68b9      	ldr	r1, [r7, #8]
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 f83f 	bl	8005fec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3730      	adds	r7, #48	; 0x30
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08a      	sub	sp, #40	; 0x28
 8005f7c:	af02      	add	r7, sp, #8
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	4613      	mov	r3, r2
 8005f84:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10a      	bne.n	8005fa2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	613b      	str	r3, [r7, #16]
}
 8005f9e:	bf00      	nop
 8005fa0:	e7fe      	b.n	8005fa0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	fb02 f303 	mul.w	r3, r2, r3
 8005faa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	3348      	adds	r3, #72	; 0x48
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f002 fb19 	bl	80085e8 <pvPortMalloc>
 8005fb6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d011      	beq.n	8005fe2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	3348      	adds	r3, #72	; 0x48
 8005fc6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fd0:	79fa      	ldrb	r2, [r7, #7]
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	68b9      	ldr	r1, [r7, #8]
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 f805 	bl	8005fec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005fe2:	69bb      	ldr	r3, [r7, #24]
	}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3720      	adds	r7, #32
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
 8005ff8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d103      	bne.n	8006008 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	69ba      	ldr	r2, [r7, #24]
 8006004:	601a      	str	r2, [r3, #0]
 8006006:	e002      	b.n	800600e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800601a:	2101      	movs	r1, #1
 800601c:	69b8      	ldr	r0, [r7, #24]
 800601e:	f7ff fecb 	bl	8005db8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006022:	bf00      	nop
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800602a:	b580      	push	{r7, lr}
 800602c:	b082      	sub	sp, #8
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00e      	beq.n	8006056 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800604a:	2300      	movs	r3, #0
 800604c:	2200      	movs	r2, #0
 800604e:	2100      	movs	r1, #0
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 f837 	bl	80060c4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006056:	bf00      	nop
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800605e:	b580      	push	{r7, lr}
 8006060:	b086      	sub	sp, #24
 8006062:	af00      	add	r7, sp, #0
 8006064:	4603      	mov	r3, r0
 8006066:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006068:	2301      	movs	r3, #1
 800606a:	617b      	str	r3, [r7, #20]
 800606c:	2300      	movs	r3, #0
 800606e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006070:	79fb      	ldrb	r3, [r7, #7]
 8006072:	461a      	mov	r2, r3
 8006074:	6939      	ldr	r1, [r7, #16]
 8006076:	6978      	ldr	r0, [r7, #20]
 8006078:	f7ff ff7e 	bl	8005f78 <xQueueGenericCreate>
 800607c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f7ff ffd3 	bl	800602a <prvInitialiseMutex>

		return xNewQueue;
 8006084:	68fb      	ldr	r3, [r7, #12]
	}
 8006086:	4618      	mov	r0, r3
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800608e:	b580      	push	{r7, lr}
 8006090:	b088      	sub	sp, #32
 8006092:	af02      	add	r7, sp, #8
 8006094:	4603      	mov	r3, r0
 8006096:	6039      	str	r1, [r7, #0]
 8006098:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800609a:	2301      	movs	r3, #1
 800609c:	617b      	str	r3, [r7, #20]
 800609e:	2300      	movs	r3, #0
 80060a0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80060a2:	79fb      	ldrb	r3, [r7, #7]
 80060a4:	9300      	str	r3, [sp, #0]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	2200      	movs	r2, #0
 80060aa:	6939      	ldr	r1, [r7, #16]
 80060ac:	6978      	ldr	r0, [r7, #20]
 80060ae:	f7ff feeb 	bl	8005e88 <xQueueGenericCreateStatic>
 80060b2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f7ff ffb8 	bl	800602a <prvInitialiseMutex>

		return xNewQueue;
 80060ba:	68fb      	ldr	r3, [r7, #12]
	}
 80060bc:	4618      	mov	r0, r3
 80060be:	3718      	adds	r7, #24
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b08e      	sub	sp, #56	; 0x38
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
 80060d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80060d2:	2300      	movs	r3, #0
 80060d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80060da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10a      	bne.n	80060f6 <xQueueGenericSend+0x32>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80060f2:	bf00      	nop
 80060f4:	e7fe      	b.n	80060f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d103      	bne.n	8006104 <xQueueGenericSend+0x40>
 80060fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <xQueueGenericSend+0x44>
 8006104:	2301      	movs	r3, #1
 8006106:	e000      	b.n	800610a <xQueueGenericSend+0x46>
 8006108:	2300      	movs	r3, #0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10a      	bne.n	8006124 <xQueueGenericSend+0x60>
	__asm volatile
 800610e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006120:	bf00      	nop
 8006122:	e7fe      	b.n	8006122 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	2b02      	cmp	r3, #2
 8006128:	d103      	bne.n	8006132 <xQueueGenericSend+0x6e>
 800612a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612e:	2b01      	cmp	r3, #1
 8006130:	d101      	bne.n	8006136 <xQueueGenericSend+0x72>
 8006132:	2301      	movs	r3, #1
 8006134:	e000      	b.n	8006138 <xQueueGenericSend+0x74>
 8006136:	2300      	movs	r3, #0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d10a      	bne.n	8006152 <xQueueGenericSend+0x8e>
	__asm volatile
 800613c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006140:	f383 8811 	msr	BASEPRI, r3
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	623b      	str	r3, [r7, #32]
}
 800614e:	bf00      	nop
 8006150:	e7fe      	b.n	8006150 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006152:	f001 fbeb 	bl	800792c <xTaskGetSchedulerState>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d102      	bne.n	8006162 <xQueueGenericSend+0x9e>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d101      	bne.n	8006166 <xQueueGenericSend+0xa2>
 8006162:	2301      	movs	r3, #1
 8006164:	e000      	b.n	8006168 <xQueueGenericSend+0xa4>
 8006166:	2300      	movs	r3, #0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10a      	bne.n	8006182 <xQueueGenericSend+0xbe>
	__asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	61fb      	str	r3, [r7, #28]
}
 800617e:	bf00      	nop
 8006180:	e7fe      	b.n	8006180 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006182:	f002 f90f 	bl	80083a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800618a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618e:	429a      	cmp	r2, r3
 8006190:	d302      	bcc.n	8006198 <xQueueGenericSend+0xd4>
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2b02      	cmp	r3, #2
 8006196:	d129      	bne.n	80061ec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	68b9      	ldr	r1, [r7, #8]
 800619c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800619e:	f000 fc3b 	bl	8006a18 <prvCopyDataToQueue>
 80061a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d010      	beq.n	80061ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ae:	3324      	adds	r3, #36	; 0x24
 80061b0:	4618      	mov	r0, r3
 80061b2:	f001 f9ff 	bl	80075b4 <xTaskRemoveFromEventList>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d013      	beq.n	80061e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80061bc:	4b3f      	ldr	r3, [pc, #252]	; (80062bc <xQueueGenericSend+0x1f8>)
 80061be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061c2:	601a      	str	r2, [r3, #0]
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	e00a      	b.n	80061e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80061ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d007      	beq.n	80061e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80061d4:	4b39      	ldr	r3, [pc, #228]	; (80062bc <xQueueGenericSend+0x1f8>)
 80061d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061da:	601a      	str	r2, [r3, #0]
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80061e4:	f002 f90e 	bl	8008404 <vPortExitCritical>
				return pdPASS;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e063      	b.n	80062b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d103      	bne.n	80061fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061f2:	f002 f907 	bl	8008404 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80061f6:	2300      	movs	r3, #0
 80061f8:	e05c      	b.n	80062b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d106      	bne.n	800620e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006200:	f107 0314 	add.w	r3, r7, #20
 8006204:	4618      	mov	r0, r3
 8006206:	f001 fa37 	bl	8007678 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800620a:	2301      	movs	r3, #1
 800620c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800620e:	f002 f8f9 	bl	8008404 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006212:	f000 ffcb 	bl	80071ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006216:	f002 f8c5 	bl	80083a4 <vPortEnterCritical>
 800621a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006220:	b25b      	sxtb	r3, r3
 8006222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006226:	d103      	bne.n	8006230 <xQueueGenericSend+0x16c>
 8006228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006232:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006236:	b25b      	sxtb	r3, r3
 8006238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800623c:	d103      	bne.n	8006246 <xQueueGenericSend+0x182>
 800623e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006240:	2200      	movs	r2, #0
 8006242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006246:	f002 f8dd 	bl	8008404 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800624a:	1d3a      	adds	r2, r7, #4
 800624c:	f107 0314 	add.w	r3, r7, #20
 8006250:	4611      	mov	r1, r2
 8006252:	4618      	mov	r0, r3
 8006254:	f001 fa26 	bl	80076a4 <xTaskCheckForTimeOut>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d124      	bne.n	80062a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800625e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006260:	f000 fcd2 	bl	8006c08 <prvIsQueueFull>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d018      	beq.n	800629c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800626a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626c:	3310      	adds	r3, #16
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	4611      	mov	r1, r2
 8006272:	4618      	mov	r0, r3
 8006274:	f001 f97a 	bl	800756c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006278:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800627a:	f000 fc5d 	bl	8006b38 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800627e:	f000 ffa3 	bl	80071c8 <xTaskResumeAll>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	f47f af7c 	bne.w	8006182 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800628a:	4b0c      	ldr	r3, [pc, #48]	; (80062bc <xQueueGenericSend+0x1f8>)
 800628c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006290:	601a      	str	r2, [r3, #0]
 8006292:	f3bf 8f4f 	dsb	sy
 8006296:	f3bf 8f6f 	isb	sy
 800629a:	e772      	b.n	8006182 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800629c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800629e:	f000 fc4b 	bl	8006b38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062a2:	f000 ff91 	bl	80071c8 <xTaskResumeAll>
 80062a6:	e76c      	b.n	8006182 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80062a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062aa:	f000 fc45 	bl	8006b38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062ae:	f000 ff8b 	bl	80071c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80062b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3738      	adds	r7, #56	; 0x38
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	e000ed04 	.word	0xe000ed04

080062c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b090      	sub	sp, #64	; 0x40
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
 80062cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80062d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d10a      	bne.n	80062ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80062d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062dc:	f383 8811 	msr	BASEPRI, r3
 80062e0:	f3bf 8f6f 	isb	sy
 80062e4:	f3bf 8f4f 	dsb	sy
 80062e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80062ea:	bf00      	nop
 80062ec:	e7fe      	b.n	80062ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d103      	bne.n	80062fc <xQueueGenericSendFromISR+0x3c>
 80062f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d101      	bne.n	8006300 <xQueueGenericSendFromISR+0x40>
 80062fc:	2301      	movs	r3, #1
 80062fe:	e000      	b.n	8006302 <xQueueGenericSendFromISR+0x42>
 8006300:	2300      	movs	r3, #0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10a      	bne.n	800631c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630a:	f383 8811 	msr	BASEPRI, r3
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f3bf 8f4f 	dsb	sy
 8006316:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006318:	bf00      	nop
 800631a:	e7fe      	b.n	800631a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	2b02      	cmp	r3, #2
 8006320:	d103      	bne.n	800632a <xQueueGenericSendFromISR+0x6a>
 8006322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006326:	2b01      	cmp	r3, #1
 8006328:	d101      	bne.n	800632e <xQueueGenericSendFromISR+0x6e>
 800632a:	2301      	movs	r3, #1
 800632c:	e000      	b.n	8006330 <xQueueGenericSendFromISR+0x70>
 800632e:	2300      	movs	r3, #0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10a      	bne.n	800634a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006338:	f383 8811 	msr	BASEPRI, r3
 800633c:	f3bf 8f6f 	isb	sy
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	623b      	str	r3, [r7, #32]
}
 8006346:	bf00      	nop
 8006348:	e7fe      	b.n	8006348 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800634a:	f002 f90d 	bl	8008568 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800634e:	f3ef 8211 	mrs	r2, BASEPRI
 8006352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006356:	f383 8811 	msr	BASEPRI, r3
 800635a:	f3bf 8f6f 	isb	sy
 800635e:	f3bf 8f4f 	dsb	sy
 8006362:	61fa      	str	r2, [r7, #28]
 8006364:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006366:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006368:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800636a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800636e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006372:	429a      	cmp	r2, r3
 8006374:	d302      	bcc.n	800637c <xQueueGenericSendFromISR+0xbc>
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	2b02      	cmp	r3, #2
 800637a:	d12f      	bne.n	80063dc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800637c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	68b9      	ldr	r1, [r7, #8]
 8006390:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006392:	f000 fb41 	bl	8006a18 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006396:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800639a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639e:	d112      	bne.n	80063c6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d016      	beq.n	80063d6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063aa:	3324      	adds	r3, #36	; 0x24
 80063ac:	4618      	mov	r0, r3
 80063ae:	f001 f901 	bl	80075b4 <xTaskRemoveFromEventList>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00e      	beq.n	80063d6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00b      	beq.n	80063d6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	601a      	str	r2, [r3, #0]
 80063c4:	e007      	b.n	80063d6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80063c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80063ca:	3301      	adds	r3, #1
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	b25a      	sxtb	r2, r3
 80063d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80063d6:	2301      	movs	r3, #1
 80063d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80063da:	e001      	b.n	80063e0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80063dc:	2300      	movs	r3, #0
 80063de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80063ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3740      	adds	r7, #64	; 0x40
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b08e      	sub	sp, #56	; 0x38
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10a      	bne.n	8006420 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800640a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640e:	f383 8811 	msr	BASEPRI, r3
 8006412:	f3bf 8f6f 	isb	sy
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	623b      	str	r3, [r7, #32]
}
 800641c:	bf00      	nop
 800641e:	e7fe      	b.n	800641e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00a      	beq.n	800643e <xQueueGiveFromISR+0x48>
	__asm volatile
 8006428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	61fb      	str	r3, [r7, #28]
}
 800643a:	bf00      	nop
 800643c:	e7fe      	b.n	800643c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d103      	bne.n	800644e <xQueueGiveFromISR+0x58>
 8006446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d101      	bne.n	8006452 <xQueueGiveFromISR+0x5c>
 800644e:	2301      	movs	r3, #1
 8006450:	e000      	b.n	8006454 <xQueueGiveFromISR+0x5e>
 8006452:	2300      	movs	r3, #0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10a      	bne.n	800646e <xQueueGiveFromISR+0x78>
	__asm volatile
 8006458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645c:	f383 8811 	msr	BASEPRI, r3
 8006460:	f3bf 8f6f 	isb	sy
 8006464:	f3bf 8f4f 	dsb	sy
 8006468:	61bb      	str	r3, [r7, #24]
}
 800646a:	bf00      	nop
 800646c:	e7fe      	b.n	800646c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800646e:	f002 f87b 	bl	8008568 <vPortValidateInterruptPriority>
	__asm volatile
 8006472:	f3ef 8211 	mrs	r2, BASEPRI
 8006476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647a:	f383 8811 	msr	BASEPRI, r3
 800647e:	f3bf 8f6f 	isb	sy
 8006482:	f3bf 8f4f 	dsb	sy
 8006486:	617a      	str	r2, [r7, #20]
 8006488:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800648a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800648c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800648e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006492:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006498:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800649a:	429a      	cmp	r2, r3
 800649c:	d22b      	bcs.n	80064f6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80064a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064aa:	1c5a      	adds	r2, r3, #1
 80064ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80064b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80064b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b8:	d112      	bne.n	80064e0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d016      	beq.n	80064f0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c4:	3324      	adds	r3, #36	; 0x24
 80064c6:	4618      	mov	r0, r3
 80064c8:	f001 f874 	bl	80075b4 <xTaskRemoveFromEventList>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00e      	beq.n	80064f0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00b      	beq.n	80064f0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	2201      	movs	r2, #1
 80064dc:	601a      	str	r2, [r3, #0]
 80064de:	e007      	b.n	80064f0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80064e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064e4:	3301      	adds	r3, #1
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	b25a      	sxtb	r2, r3
 80064ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80064f0:	2301      	movs	r3, #1
 80064f2:	637b      	str	r3, [r7, #52]	; 0x34
 80064f4:	e001      	b.n	80064fa <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80064f6:	2300      	movs	r3, #0
 80064f8:	637b      	str	r3, [r7, #52]	; 0x34
 80064fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f383 8811 	msr	BASEPRI, r3
}
 8006504:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006508:	4618      	mov	r0, r3
 800650a:	3738      	adds	r7, #56	; 0x38
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b08c      	sub	sp, #48	; 0x30
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800651c:	2300      	movs	r3, #0
 800651e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10a      	bne.n	8006540 <xQueueReceive+0x30>
	__asm volatile
 800652a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652e:	f383 8811 	msr	BASEPRI, r3
 8006532:	f3bf 8f6f 	isb	sy
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	623b      	str	r3, [r7, #32]
}
 800653c:	bf00      	nop
 800653e:	e7fe      	b.n	800653e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d103      	bne.n	800654e <xQueueReceive+0x3e>
 8006546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654a:	2b00      	cmp	r3, #0
 800654c:	d101      	bne.n	8006552 <xQueueReceive+0x42>
 800654e:	2301      	movs	r3, #1
 8006550:	e000      	b.n	8006554 <xQueueReceive+0x44>
 8006552:	2300      	movs	r3, #0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10a      	bne.n	800656e <xQueueReceive+0x5e>
	__asm volatile
 8006558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655c:	f383 8811 	msr	BASEPRI, r3
 8006560:	f3bf 8f6f 	isb	sy
 8006564:	f3bf 8f4f 	dsb	sy
 8006568:	61fb      	str	r3, [r7, #28]
}
 800656a:	bf00      	nop
 800656c:	e7fe      	b.n	800656c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800656e:	f001 f9dd 	bl	800792c <xTaskGetSchedulerState>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d102      	bne.n	800657e <xQueueReceive+0x6e>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d101      	bne.n	8006582 <xQueueReceive+0x72>
 800657e:	2301      	movs	r3, #1
 8006580:	e000      	b.n	8006584 <xQueueReceive+0x74>
 8006582:	2300      	movs	r3, #0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10a      	bne.n	800659e <xQueueReceive+0x8e>
	__asm volatile
 8006588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658c:	f383 8811 	msr	BASEPRI, r3
 8006590:	f3bf 8f6f 	isb	sy
 8006594:	f3bf 8f4f 	dsb	sy
 8006598:	61bb      	str	r3, [r7, #24]
}
 800659a:	bf00      	nop
 800659c:	e7fe      	b.n	800659c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800659e:	f001 ff01 	bl	80083a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d01f      	beq.n	80065ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80065ae:	68b9      	ldr	r1, [r7, #8]
 80065b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065b2:	f000 fa9b 	bl	8006aec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	1e5a      	subs	r2, r3, #1
 80065ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00f      	beq.n	80065e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c8:	3310      	adds	r3, #16
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 fff2 	bl	80075b4 <xTaskRemoveFromEventList>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d007      	beq.n	80065e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80065d6:	4b3d      	ldr	r3, [pc, #244]	; (80066cc <xQueueReceive+0x1bc>)
 80065d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065dc:	601a      	str	r2, [r3, #0]
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80065e6:	f001 ff0d 	bl	8008404 <vPortExitCritical>
				return pdPASS;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e069      	b.n	80066c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d103      	bne.n	80065fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80065f4:	f001 ff06 	bl	8008404 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80065f8:	2300      	movs	r3, #0
 80065fa:	e062      	b.n	80066c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d106      	bne.n	8006610 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006602:	f107 0310 	add.w	r3, r7, #16
 8006606:	4618      	mov	r0, r3
 8006608:	f001 f836 	bl	8007678 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800660c:	2301      	movs	r3, #1
 800660e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006610:	f001 fef8 	bl	8008404 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006614:	f000 fdca 	bl	80071ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006618:	f001 fec4 	bl	80083a4 <vPortEnterCritical>
 800661c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006622:	b25b      	sxtb	r3, r3
 8006624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006628:	d103      	bne.n	8006632 <xQueueReceive+0x122>
 800662a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006634:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006638:	b25b      	sxtb	r3, r3
 800663a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800663e:	d103      	bne.n	8006648 <xQueueReceive+0x138>
 8006640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006642:	2200      	movs	r2, #0
 8006644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006648:	f001 fedc 	bl	8008404 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800664c:	1d3a      	adds	r2, r7, #4
 800664e:	f107 0310 	add.w	r3, r7, #16
 8006652:	4611      	mov	r1, r2
 8006654:	4618      	mov	r0, r3
 8006656:	f001 f825 	bl	80076a4 <xTaskCheckForTimeOut>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d123      	bne.n	80066a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006662:	f000 fabb 	bl	8006bdc <prvIsQueueEmpty>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d017      	beq.n	800669c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800666c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666e:	3324      	adds	r3, #36	; 0x24
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	4611      	mov	r1, r2
 8006674:	4618      	mov	r0, r3
 8006676:	f000 ff79 	bl	800756c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800667a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800667c:	f000 fa5c 	bl	8006b38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006680:	f000 fda2 	bl	80071c8 <xTaskResumeAll>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d189      	bne.n	800659e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800668a:	4b10      	ldr	r3, [pc, #64]	; (80066cc <xQueueReceive+0x1bc>)
 800668c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006690:	601a      	str	r2, [r3, #0]
 8006692:	f3bf 8f4f 	dsb	sy
 8006696:	f3bf 8f6f 	isb	sy
 800669a:	e780      	b.n	800659e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800669c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800669e:	f000 fa4b 	bl	8006b38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066a2:	f000 fd91 	bl	80071c8 <xTaskResumeAll>
 80066a6:	e77a      	b.n	800659e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80066a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066aa:	f000 fa45 	bl	8006b38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066ae:	f000 fd8b 	bl	80071c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066b4:	f000 fa92 	bl	8006bdc <prvIsQueueEmpty>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f43f af6f 	beq.w	800659e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80066c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3730      	adds	r7, #48	; 0x30
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	e000ed04 	.word	0xe000ed04

080066d0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b08e      	sub	sp, #56	; 0x38
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80066da:	2300      	movs	r3, #0
 80066dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80066e2:	2300      	movs	r3, #0
 80066e4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80066e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10a      	bne.n	8006702 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80066ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f0:	f383 8811 	msr	BASEPRI, r3
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	623b      	str	r3, [r7, #32]
}
 80066fe:	bf00      	nop
 8006700:	e7fe      	b.n	8006700 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00a      	beq.n	8006720 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800670a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	61fb      	str	r3, [r7, #28]
}
 800671c:	bf00      	nop
 800671e:	e7fe      	b.n	800671e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006720:	f001 f904 	bl	800792c <xTaskGetSchedulerState>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d102      	bne.n	8006730 <xQueueSemaphoreTake+0x60>
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d101      	bne.n	8006734 <xQueueSemaphoreTake+0x64>
 8006730:	2301      	movs	r3, #1
 8006732:	e000      	b.n	8006736 <xQueueSemaphoreTake+0x66>
 8006734:	2300      	movs	r3, #0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d10a      	bne.n	8006750 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800673a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673e:	f383 8811 	msr	BASEPRI, r3
 8006742:	f3bf 8f6f 	isb	sy
 8006746:	f3bf 8f4f 	dsb	sy
 800674a:	61bb      	str	r3, [r7, #24]
}
 800674c:	bf00      	nop
 800674e:	e7fe      	b.n	800674e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006750:	f001 fe28 	bl	80083a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006758:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800675a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675c:	2b00      	cmp	r3, #0
 800675e:	d024      	beq.n	80067aa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006762:	1e5a      	subs	r2, r3, #1
 8006764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006766:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d104      	bne.n	800677a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006770:	f001 fa84 	bl	8007c7c <pvTaskIncrementMutexHeldCount>
 8006774:	4602      	mov	r2, r0
 8006776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006778:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800677a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00f      	beq.n	80067a2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006784:	3310      	adds	r3, #16
 8006786:	4618      	mov	r0, r3
 8006788:	f000 ff14 	bl	80075b4 <xTaskRemoveFromEventList>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d007      	beq.n	80067a2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006792:	4b54      	ldr	r3, [pc, #336]	; (80068e4 <xQueueSemaphoreTake+0x214>)
 8006794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006798:	601a      	str	r2, [r3, #0]
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80067a2:	f001 fe2f 	bl	8008404 <vPortExitCritical>
				return pdPASS;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e097      	b.n	80068da <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d111      	bne.n	80067d4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80067b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00a      	beq.n	80067cc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80067b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ba:	f383 8811 	msr	BASEPRI, r3
 80067be:	f3bf 8f6f 	isb	sy
 80067c2:	f3bf 8f4f 	dsb	sy
 80067c6:	617b      	str	r3, [r7, #20]
}
 80067c8:	bf00      	nop
 80067ca:	e7fe      	b.n	80067ca <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80067cc:	f001 fe1a 	bl	8008404 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80067d0:	2300      	movs	r3, #0
 80067d2:	e082      	b.n	80068da <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d106      	bne.n	80067e8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067da:	f107 030c 	add.w	r3, r7, #12
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 ff4a 	bl	8007678 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067e4:	2301      	movs	r3, #1
 80067e6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067e8:	f001 fe0c 	bl	8008404 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067ec:	f000 fcde 	bl	80071ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067f0:	f001 fdd8 	bl	80083a4 <vPortEnterCritical>
 80067f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067fa:	b25b      	sxtb	r3, r3
 80067fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006800:	d103      	bne.n	800680a <xQueueSemaphoreTake+0x13a>
 8006802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006804:	2200      	movs	r2, #0
 8006806:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800680a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006810:	b25b      	sxtb	r3, r3
 8006812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006816:	d103      	bne.n	8006820 <xQueueSemaphoreTake+0x150>
 8006818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681a:	2200      	movs	r2, #0
 800681c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006820:	f001 fdf0 	bl	8008404 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006824:	463a      	mov	r2, r7
 8006826:	f107 030c 	add.w	r3, r7, #12
 800682a:	4611      	mov	r1, r2
 800682c:	4618      	mov	r0, r3
 800682e:	f000 ff39 	bl	80076a4 <xTaskCheckForTimeOut>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d132      	bne.n	800689e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006838:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800683a:	f000 f9cf 	bl	8006bdc <prvIsQueueEmpty>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d026      	beq.n	8006892 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d109      	bne.n	8006860 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800684c:	f001 fdaa 	bl	80083a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	4618      	mov	r0, r3
 8006856:	f001 f887 	bl	8007968 <xTaskPriorityInherit>
 800685a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800685c:	f001 fdd2 	bl	8008404 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006862:	3324      	adds	r3, #36	; 0x24
 8006864:	683a      	ldr	r2, [r7, #0]
 8006866:	4611      	mov	r1, r2
 8006868:	4618      	mov	r0, r3
 800686a:	f000 fe7f 	bl	800756c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800686e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006870:	f000 f962 	bl	8006b38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006874:	f000 fca8 	bl	80071c8 <xTaskResumeAll>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	f47f af68 	bne.w	8006750 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006880:	4b18      	ldr	r3, [pc, #96]	; (80068e4 <xQueueSemaphoreTake+0x214>)
 8006882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006886:	601a      	str	r2, [r3, #0]
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	f3bf 8f6f 	isb	sy
 8006890:	e75e      	b.n	8006750 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006892:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006894:	f000 f950 	bl	8006b38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006898:	f000 fc96 	bl	80071c8 <xTaskResumeAll>
 800689c:	e758      	b.n	8006750 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800689e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068a0:	f000 f94a 	bl	8006b38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068a4:	f000 fc90 	bl	80071c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068aa:	f000 f997 	bl	8006bdc <prvIsQueueEmpty>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f43f af4d 	beq.w	8006750 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80068b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00d      	beq.n	80068d8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80068bc:	f001 fd72 	bl	80083a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80068c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068c2:	f000 f891 	bl	80069e8 <prvGetDisinheritPriorityAfterTimeout>
 80068c6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80068c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068ce:	4618      	mov	r0, r3
 80068d0:	f001 f946 	bl	8007b60 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80068d4:	f001 fd96 	bl	8008404 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80068d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3738      	adds	r7, #56	; 0x38
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	e000ed04 	.word	0xe000ed04

080068e8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b08e      	sub	sp, #56	; 0x38
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80068f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10a      	bne.n	8006914 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80068fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	623b      	str	r3, [r7, #32]
}
 8006910:	bf00      	nop
 8006912:	e7fe      	b.n	8006912 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d103      	bne.n	8006922 <xQueueReceiveFromISR+0x3a>
 800691a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <xQueueReceiveFromISR+0x3e>
 8006922:	2301      	movs	r3, #1
 8006924:	e000      	b.n	8006928 <xQueueReceiveFromISR+0x40>
 8006926:	2300      	movs	r3, #0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10a      	bne.n	8006942 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800692c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006930:	f383 8811 	msr	BASEPRI, r3
 8006934:	f3bf 8f6f 	isb	sy
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	61fb      	str	r3, [r7, #28]
}
 800693e:	bf00      	nop
 8006940:	e7fe      	b.n	8006940 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006942:	f001 fe11 	bl	8008568 <vPortValidateInterruptPriority>
	__asm volatile
 8006946:	f3ef 8211 	mrs	r2, BASEPRI
 800694a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694e:	f383 8811 	msr	BASEPRI, r3
 8006952:	f3bf 8f6f 	isb	sy
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	61ba      	str	r2, [r7, #24]
 800695c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800695e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006960:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006966:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696a:	2b00      	cmp	r3, #0
 800696c:	d02f      	beq.n	80069ce <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800696e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006970:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006978:	68b9      	ldr	r1, [r7, #8]
 800697a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800697c:	f000 f8b6 	bl	8006aec <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006982:	1e5a      	subs	r2, r3, #1
 8006984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006986:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006988:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800698c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006990:	d112      	bne.n	80069b8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d016      	beq.n	80069c8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800699a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699c:	3310      	adds	r3, #16
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 fe08 	bl	80075b4 <xTaskRemoveFromEventList>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00e      	beq.n	80069c8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00b      	beq.n	80069c8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	601a      	str	r2, [r3, #0]
 80069b6:	e007      	b.n	80069c8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80069b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069bc:	3301      	adds	r3, #1
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	b25a      	sxtb	r2, r3
 80069c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80069c8:	2301      	movs	r3, #1
 80069ca:	637b      	str	r3, [r7, #52]	; 0x34
 80069cc:	e001      	b.n	80069d2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80069ce:	2300      	movs	r3, #0
 80069d0:	637b      	str	r3, [r7, #52]	; 0x34
 80069d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	f383 8811 	msr	BASEPRI, r3
}
 80069dc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80069de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3738      	adds	r7, #56	; 0x38
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d006      	beq.n	8006a06 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f1c3 0307 	rsb	r3, r3, #7
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	e001      	b.n	8006a0a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006a06:	2300      	movs	r3, #0
 8006a08:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
	}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3714      	adds	r7, #20
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006a24:	2300      	movs	r3, #0
 8006a26:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10d      	bne.n	8006a52 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d14d      	bne.n	8006ada <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f001 f806 	bl	8007a54 <xTaskPriorityDisinherit>
 8006a48:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	609a      	str	r2, [r3, #8]
 8006a50:	e043      	b.n	8006ada <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d119      	bne.n	8006a8c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6858      	ldr	r0, [r3, #4]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a60:	461a      	mov	r2, r3
 8006a62:	68b9      	ldr	r1, [r7, #8]
 8006a64:	f001 ffd4 	bl	8008a10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a70:	441a      	add	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	685a      	ldr	r2, [r3, #4]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d32b      	bcc.n	8006ada <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	605a      	str	r2, [r3, #4]
 8006a8a:	e026      	b.n	8006ada <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	68d8      	ldr	r0, [r3, #12]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a94:	461a      	mov	r2, r3
 8006a96:	68b9      	ldr	r1, [r7, #8]
 8006a98:	f001 ffba 	bl	8008a10 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	68da      	ldr	r2, [r3, #12]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa4:	425b      	negs	r3, r3
 8006aa6:	441a      	add	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	68da      	ldr	r2, [r3, #12]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d207      	bcs.n	8006ac8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	689a      	ldr	r2, [r3, #8]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac0:	425b      	negs	r3, r3
 8006ac2:	441a      	add	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d105      	bne.n	8006ada <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d002      	beq.n	8006ada <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	1c5a      	adds	r2, r3, #1
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006ae2:	697b      	ldr	r3, [r7, #20]
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3718      	adds	r7, #24
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d018      	beq.n	8006b30 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	68da      	ldr	r2, [r3, #12]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b06:	441a      	add	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	68da      	ldr	r2, [r3, #12]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d303      	bcc.n	8006b20 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68d9      	ldr	r1, [r3, #12]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b28:	461a      	mov	r2, r3
 8006b2a:	6838      	ldr	r0, [r7, #0]
 8006b2c:	f001 ff70 	bl	8008a10 <memcpy>
	}
}
 8006b30:	bf00      	nop
 8006b32:	3708      	adds	r7, #8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006b40:	f001 fc30 	bl	80083a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b4a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b4c:	e011      	b.n	8006b72 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d012      	beq.n	8006b7c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	3324      	adds	r3, #36	; 0x24
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 fd2a 	bl	80075b4 <xTaskRemoveFromEventList>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d001      	beq.n	8006b6a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006b66:	f000 fdff 	bl	8007768 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	dce9      	bgt.n	8006b4e <prvUnlockQueue+0x16>
 8006b7a:	e000      	b.n	8006b7e <prvUnlockQueue+0x46>
					break;
 8006b7c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	22ff      	movs	r2, #255	; 0xff
 8006b82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006b86:	f001 fc3d 	bl	8008404 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006b8a:	f001 fc0b 	bl	80083a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b94:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b96:	e011      	b.n	8006bbc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d012      	beq.n	8006bc6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	3310      	adds	r3, #16
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f000 fd05 	bl	80075b4 <xTaskRemoveFromEventList>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d001      	beq.n	8006bb4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006bb0:	f000 fdda 	bl	8007768 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006bb4:	7bbb      	ldrb	r3, [r7, #14]
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006bbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	dce9      	bgt.n	8006b98 <prvUnlockQueue+0x60>
 8006bc4:	e000      	b.n	8006bc8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006bc6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	22ff      	movs	r2, #255	; 0xff
 8006bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006bd0:	f001 fc18 	bl	8008404 <vPortExitCritical>
}
 8006bd4:	bf00      	nop
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006be4:	f001 fbde 	bl	80083a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d102      	bne.n	8006bf6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	60fb      	str	r3, [r7, #12]
 8006bf4:	e001      	b.n	8006bfa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006bfa:	f001 fc03 	bl	8008404 <vPortExitCritical>

	return xReturn;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3710      	adds	r7, #16
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c10:	f001 fbc8 	bl	80083a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d102      	bne.n	8006c26 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006c20:	2301      	movs	r3, #1
 8006c22:	60fb      	str	r3, [r7, #12]
 8006c24:	e001      	b.n	8006c2a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006c26:	2300      	movs	r3, #0
 8006c28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006c2a:	f001 fbeb 	bl	8008404 <vPortExitCritical>

	return xReturn;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b08e      	sub	sp, #56	; 0x38
 8006c3c:	af04      	add	r7, sp, #16
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
 8006c44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10a      	bne.n	8006c62 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c50:	f383 8811 	msr	BASEPRI, r3
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	f3bf 8f4f 	dsb	sy
 8006c5c:	623b      	str	r3, [r7, #32]
}
 8006c5e:	bf00      	nop
 8006c60:	e7fe      	b.n	8006c60 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10a      	bne.n	8006c7e <xTaskCreateStatic+0x46>
	__asm volatile
 8006c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6c:	f383 8811 	msr	BASEPRI, r3
 8006c70:	f3bf 8f6f 	isb	sy
 8006c74:	f3bf 8f4f 	dsb	sy
 8006c78:	61fb      	str	r3, [r7, #28]
}
 8006c7a:	bf00      	nop
 8006c7c:	e7fe      	b.n	8006c7c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006c7e:	2354      	movs	r3, #84	; 0x54
 8006c80:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	2b54      	cmp	r3, #84	; 0x54
 8006c86:	d00a      	beq.n	8006c9e <xTaskCreateStatic+0x66>
	__asm volatile
 8006c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8c:	f383 8811 	msr	BASEPRI, r3
 8006c90:	f3bf 8f6f 	isb	sy
 8006c94:	f3bf 8f4f 	dsb	sy
 8006c98:	61bb      	str	r3, [r7, #24]
}
 8006c9a:	bf00      	nop
 8006c9c:	e7fe      	b.n	8006c9c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006c9e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d01e      	beq.n	8006ce4 <xTaskCreateStatic+0xac>
 8006ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d01b      	beq.n	8006ce4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cb4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb8:	2202      	movs	r2, #2
 8006cba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	9303      	str	r3, [sp, #12]
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc4:	9302      	str	r3, [sp, #8]
 8006cc6:	f107 0314 	add.w	r3, r7, #20
 8006cca:	9301      	str	r3, [sp, #4]
 8006ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	68b9      	ldr	r1, [r7, #8]
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f000 f850 	bl	8006d7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006cdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006cde:	f000 f8d5 	bl	8006e8c <prvAddNewTaskToReadyList>
 8006ce2:	e001      	b.n	8006ce8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ce8:	697b      	ldr	r3, [r7, #20]
	}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3728      	adds	r7, #40	; 0x28
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b08c      	sub	sp, #48	; 0x30
 8006cf6:	af04      	add	r7, sp, #16
 8006cf8:	60f8      	str	r0, [r7, #12]
 8006cfa:	60b9      	str	r1, [r7, #8]
 8006cfc:	603b      	str	r3, [r7, #0]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006d02:	88fb      	ldrh	r3, [r7, #6]
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4618      	mov	r0, r3
 8006d08:	f001 fc6e 	bl	80085e8 <pvPortMalloc>
 8006d0c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00e      	beq.n	8006d32 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006d14:	2054      	movs	r0, #84	; 0x54
 8006d16:	f001 fc67 	bl	80085e8 <pvPortMalloc>
 8006d1a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d003      	beq.n	8006d2a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	631a      	str	r2, [r3, #48]	; 0x30
 8006d28:	e005      	b.n	8006d36 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006d2a:	6978      	ldr	r0, [r7, #20]
 8006d2c:	f001 fd28 	bl	8008780 <vPortFree>
 8006d30:	e001      	b.n	8006d36 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006d32:	2300      	movs	r3, #0
 8006d34:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d017      	beq.n	8006d6c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006d44:	88fa      	ldrh	r2, [r7, #6]
 8006d46:	2300      	movs	r3, #0
 8006d48:	9303      	str	r3, [sp, #12]
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	9302      	str	r3, [sp, #8]
 8006d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d50:	9301      	str	r3, [sp, #4]
 8006d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	68b9      	ldr	r1, [r7, #8]
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f000 f80e 	bl	8006d7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d60:	69f8      	ldr	r0, [r7, #28]
 8006d62:	f000 f893 	bl	8006e8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006d66:	2301      	movs	r3, #1
 8006d68:	61bb      	str	r3, [r7, #24]
 8006d6a:	e002      	b.n	8006d72 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d70:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006d72:	69bb      	ldr	r3, [r7, #24]
	}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3720      	adds	r7, #32
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b088      	sub	sp, #32
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
 8006d88:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006d94:	3b01      	subs	r3, #1
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	4413      	add	r3, r2
 8006d9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	f023 0307 	bic.w	r3, r3, #7
 8006da2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	f003 0307 	and.w	r3, r3, #7
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00a      	beq.n	8006dc4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db2:	f383 8811 	msr	BASEPRI, r3
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	617b      	str	r3, [r7, #20]
}
 8006dc0:	bf00      	nop
 8006dc2:	e7fe      	b.n	8006dc2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d01f      	beq.n	8006e0a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006dca:	2300      	movs	r3, #0
 8006dcc:	61fb      	str	r3, [r7, #28]
 8006dce:	e012      	b.n	8006df6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006dd0:	68ba      	ldr	r2, [r7, #8]
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	7819      	ldrb	r1, [r3, #0]
 8006dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	4413      	add	r3, r2
 8006dde:	3334      	adds	r3, #52	; 0x34
 8006de0:	460a      	mov	r2, r1
 8006de2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	4413      	add	r3, r2
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d006      	beq.n	8006dfe <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	3301      	adds	r3, #1
 8006df4:	61fb      	str	r3, [r7, #28]
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	2b0f      	cmp	r3, #15
 8006dfa:	d9e9      	bls.n	8006dd0 <prvInitialiseNewTask+0x54>
 8006dfc:	e000      	b.n	8006e00 <prvInitialiseNewTask+0x84>
			{
				break;
 8006dfe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e08:	e003      	b.n	8006e12 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e14:	2b06      	cmp	r3, #6
 8006e16:	d901      	bls.n	8006e1c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006e18:	2306      	movs	r3, #6
 8006e1a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e20:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e26:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e30:	3304      	adds	r3, #4
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7fe ff2c 	bl	8005c90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3a:	3318      	adds	r3, #24
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7fe ff27 	bl	8005c90 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4a:	f1c3 0207 	rsb	r2, r3, #7
 8006e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e56:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	68f9      	ldr	r1, [r7, #12]
 8006e6a:	69b8      	ldr	r0, [r7, #24]
 8006e6c:	f001 f96a 	bl	8008144 <pxPortInitialiseStack>
 8006e70:	4602      	mov	r2, r0
 8006e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e74:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d002      	beq.n	8006e82 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e82:	bf00      	nop
 8006e84:	3720      	adds	r7, #32
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
	...

08006e8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e94:	f001 fa86 	bl	80083a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e98:	4b2a      	ldr	r3, [pc, #168]	; (8006f44 <prvAddNewTaskToReadyList+0xb8>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	4a29      	ldr	r2, [pc, #164]	; (8006f44 <prvAddNewTaskToReadyList+0xb8>)
 8006ea0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006ea2:	4b29      	ldr	r3, [pc, #164]	; (8006f48 <prvAddNewTaskToReadyList+0xbc>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d109      	bne.n	8006ebe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006eaa:	4a27      	ldr	r2, [pc, #156]	; (8006f48 <prvAddNewTaskToReadyList+0xbc>)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006eb0:	4b24      	ldr	r3, [pc, #144]	; (8006f44 <prvAddNewTaskToReadyList+0xb8>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d110      	bne.n	8006eda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006eb8:	f000 fc7a 	bl	80077b0 <prvInitialiseTaskLists>
 8006ebc:	e00d      	b.n	8006eda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ebe:	4b23      	ldr	r3, [pc, #140]	; (8006f4c <prvAddNewTaskToReadyList+0xc0>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d109      	bne.n	8006eda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006ec6:	4b20      	ldr	r3, [pc, #128]	; (8006f48 <prvAddNewTaskToReadyList+0xbc>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d802      	bhi.n	8006eda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ed4:	4a1c      	ldr	r2, [pc, #112]	; (8006f48 <prvAddNewTaskToReadyList+0xbc>)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006eda:	4b1d      	ldr	r3, [pc, #116]	; (8006f50 <prvAddNewTaskToReadyList+0xc4>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	4a1b      	ldr	r2, [pc, #108]	; (8006f50 <prvAddNewTaskToReadyList+0xc4>)
 8006ee2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee8:	2201      	movs	r2, #1
 8006eea:	409a      	lsls	r2, r3
 8006eec:	4b19      	ldr	r3, [pc, #100]	; (8006f54 <prvAddNewTaskToReadyList+0xc8>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	4a18      	ldr	r2, [pc, #96]	; (8006f54 <prvAddNewTaskToReadyList+0xc8>)
 8006ef4:	6013      	str	r3, [r2, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006efa:	4613      	mov	r3, r2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4413      	add	r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	4a15      	ldr	r2, [pc, #84]	; (8006f58 <prvAddNewTaskToReadyList+0xcc>)
 8006f04:	441a      	add	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	3304      	adds	r3, #4
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	4610      	mov	r0, r2
 8006f0e:	f7fe fecc 	bl	8005caa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006f12:	f001 fa77 	bl	8008404 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006f16:	4b0d      	ldr	r3, [pc, #52]	; (8006f4c <prvAddNewTaskToReadyList+0xc0>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00e      	beq.n	8006f3c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006f1e:	4b0a      	ldr	r3, [pc, #40]	; (8006f48 <prvAddNewTaskToReadyList+0xbc>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d207      	bcs.n	8006f3c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006f2c:	4b0b      	ldr	r3, [pc, #44]	; (8006f5c <prvAddNewTaskToReadyList+0xd0>)
 8006f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f32:	601a      	str	r2, [r3, #0]
 8006f34:	f3bf 8f4f 	dsb	sy
 8006f38:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f3c:	bf00      	nop
 8006f3e:	3708      	adds	r7, #8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	2000070c 	.word	0x2000070c
 8006f48:	2000060c 	.word	0x2000060c
 8006f4c:	20000718 	.word	0x20000718
 8006f50:	20000728 	.word	0x20000728
 8006f54:	20000714 	.word	0x20000714
 8006f58:	20000610 	.word	0x20000610
 8006f5c:	e000ed04 	.word	0xe000ed04

08006f60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d017      	beq.n	8006fa2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006f72:	4b13      	ldr	r3, [pc, #76]	; (8006fc0 <vTaskDelay+0x60>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00a      	beq.n	8006f90 <vTaskDelay+0x30>
	__asm volatile
 8006f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7e:	f383 8811 	msr	BASEPRI, r3
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	f3bf 8f4f 	dsb	sy
 8006f8a:	60bb      	str	r3, [r7, #8]
}
 8006f8c:	bf00      	nop
 8006f8e:	e7fe      	b.n	8006f8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006f90:	f000 f90c 	bl	80071ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006f94:	2100      	movs	r1, #0
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f001 f86e 	bl	8008078 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006f9c:	f000 f914 	bl	80071c8 <xTaskResumeAll>
 8006fa0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d107      	bne.n	8006fb8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006fa8:	4b06      	ldr	r3, [pc, #24]	; (8006fc4 <vTaskDelay+0x64>)
 8006faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fae:	601a      	str	r2, [r3, #0]
 8006fb0:	f3bf 8f4f 	dsb	sy
 8006fb4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006fb8:	bf00      	nop
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	20000734 	.word	0x20000734
 8006fc4:	e000ed04 	.word	0xe000ed04

08006fc8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006fd0:	f001 f9e8 	bl	80083a4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d102      	bne.n	8006fe0 <vTaskSuspend+0x18>
 8006fda:	4b3c      	ldr	r3, [pc, #240]	; (80070cc <vTaskSuspend+0x104>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	e000      	b.n	8006fe2 <vTaskSuspend+0x1a>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	3304      	adds	r3, #4
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7fe febb 	bl	8005d64 <uxListRemove>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d115      	bne.n	8007020 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff8:	4935      	ldr	r1, [pc, #212]	; (80070d0 <vTaskSuspend+0x108>)
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4413      	add	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	440b      	add	r3, r1
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10a      	bne.n	8007020 <vTaskSuspend+0x58>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700e:	2201      	movs	r2, #1
 8007010:	fa02 f303 	lsl.w	r3, r2, r3
 8007014:	43da      	mvns	r2, r3
 8007016:	4b2f      	ldr	r3, [pc, #188]	; (80070d4 <vTaskSuspend+0x10c>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4013      	ands	r3, r2
 800701c:	4a2d      	ldr	r2, [pc, #180]	; (80070d4 <vTaskSuspend+0x10c>)
 800701e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007024:	2b00      	cmp	r3, #0
 8007026:	d004      	beq.n	8007032 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	3318      	adds	r3, #24
 800702c:	4618      	mov	r0, r3
 800702e:	f7fe fe99 	bl	8005d64 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	3304      	adds	r3, #4
 8007036:	4619      	mov	r1, r3
 8007038:	4827      	ldr	r0, [pc, #156]	; (80070d8 <vTaskSuspend+0x110>)
 800703a:	f7fe fe36 	bl	8005caa <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b01      	cmp	r3, #1
 8007048:	d103      	bne.n	8007052 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007052:	f001 f9d7 	bl	8008404 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007056:	4b21      	ldr	r3, [pc, #132]	; (80070dc <vTaskSuspend+0x114>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d005      	beq.n	800706a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800705e:	f001 f9a1 	bl	80083a4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007062:	f000 fc43 	bl	80078ec <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007066:	f001 f9cd 	bl	8008404 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800706a:	4b18      	ldr	r3, [pc, #96]	; (80070cc <vTaskSuspend+0x104>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	429a      	cmp	r2, r3
 8007072:	d127      	bne.n	80070c4 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8007074:	4b19      	ldr	r3, [pc, #100]	; (80070dc <vTaskSuspend+0x114>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d017      	beq.n	80070ac <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800707c:	4b18      	ldr	r3, [pc, #96]	; (80070e0 <vTaskSuspend+0x118>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00a      	beq.n	800709a <vTaskSuspend+0xd2>
	__asm volatile
 8007084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007088:	f383 8811 	msr	BASEPRI, r3
 800708c:	f3bf 8f6f 	isb	sy
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	60bb      	str	r3, [r7, #8]
}
 8007096:	bf00      	nop
 8007098:	e7fe      	b.n	8007098 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800709a:	4b12      	ldr	r3, [pc, #72]	; (80070e4 <vTaskSuspend+0x11c>)
 800709c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070a0:	601a      	str	r2, [r3, #0]
 80070a2:	f3bf 8f4f 	dsb	sy
 80070a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80070aa:	e00b      	b.n	80070c4 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80070ac:	4b0a      	ldr	r3, [pc, #40]	; (80070d8 <vTaskSuspend+0x110>)
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	4b0d      	ldr	r3, [pc, #52]	; (80070e8 <vTaskSuspend+0x120>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d103      	bne.n	80070c0 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 80070b8:	4b04      	ldr	r3, [pc, #16]	; (80070cc <vTaskSuspend+0x104>)
 80070ba:	2200      	movs	r2, #0
 80070bc:	601a      	str	r2, [r3, #0]
	}
 80070be:	e001      	b.n	80070c4 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 80070c0:	f000 f9f8 	bl	80074b4 <vTaskSwitchContext>
	}
 80070c4:	bf00      	nop
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	2000060c 	.word	0x2000060c
 80070d0:	20000610 	.word	0x20000610
 80070d4:	20000714 	.word	0x20000714
 80070d8:	200006f8 	.word	0x200006f8
 80070dc:	20000718 	.word	0x20000718
 80070e0:	20000734 	.word	0x20000734
 80070e4:	e000ed04 	.word	0xe000ed04
 80070e8:	2000070c 	.word	0x2000070c

080070ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b08a      	sub	sp, #40	; 0x28
 80070f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80070f2:	2300      	movs	r3, #0
 80070f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80070f6:	2300      	movs	r3, #0
 80070f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80070fa:	463a      	mov	r2, r7
 80070fc:	1d39      	adds	r1, r7, #4
 80070fe:	f107 0308 	add.w	r3, r7, #8
 8007102:	4618      	mov	r0, r3
 8007104:	f7f9 ff0a 	bl	8000f1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007108:	6839      	ldr	r1, [r7, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	9202      	str	r2, [sp, #8]
 8007110:	9301      	str	r3, [sp, #4]
 8007112:	2300      	movs	r3, #0
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	2300      	movs	r3, #0
 8007118:	460a      	mov	r2, r1
 800711a:	491e      	ldr	r1, [pc, #120]	; (8007194 <vTaskStartScheduler+0xa8>)
 800711c:	481e      	ldr	r0, [pc, #120]	; (8007198 <vTaskStartScheduler+0xac>)
 800711e:	f7ff fd8b 	bl	8006c38 <xTaskCreateStatic>
 8007122:	4603      	mov	r3, r0
 8007124:	4a1d      	ldr	r2, [pc, #116]	; (800719c <vTaskStartScheduler+0xb0>)
 8007126:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007128:	4b1c      	ldr	r3, [pc, #112]	; (800719c <vTaskStartScheduler+0xb0>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d002      	beq.n	8007136 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007130:	2301      	movs	r3, #1
 8007132:	617b      	str	r3, [r7, #20]
 8007134:	e001      	b.n	800713a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007136:	2300      	movs	r3, #0
 8007138:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d116      	bne.n	800716e <vTaskStartScheduler+0x82>
	__asm volatile
 8007140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007144:	f383 8811 	msr	BASEPRI, r3
 8007148:	f3bf 8f6f 	isb	sy
 800714c:	f3bf 8f4f 	dsb	sy
 8007150:	613b      	str	r3, [r7, #16]
}
 8007152:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007154:	4b12      	ldr	r3, [pc, #72]	; (80071a0 <vTaskStartScheduler+0xb4>)
 8007156:	f04f 32ff 	mov.w	r2, #4294967295
 800715a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800715c:	4b11      	ldr	r3, [pc, #68]	; (80071a4 <vTaskStartScheduler+0xb8>)
 800715e:	2201      	movs	r2, #1
 8007160:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007162:	4b11      	ldr	r3, [pc, #68]	; (80071a8 <vTaskStartScheduler+0xbc>)
 8007164:	2200      	movs	r2, #0
 8007166:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007168:	f001 f87a 	bl	8008260 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800716c:	e00e      	b.n	800718c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007174:	d10a      	bne.n	800718c <vTaskStartScheduler+0xa0>
	__asm volatile
 8007176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717a:	f383 8811 	msr	BASEPRI, r3
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f3bf 8f4f 	dsb	sy
 8007186:	60fb      	str	r3, [r7, #12]
}
 8007188:	bf00      	nop
 800718a:	e7fe      	b.n	800718a <vTaskStartScheduler+0x9e>
}
 800718c:	bf00      	nop
 800718e:	3718      	adds	r7, #24
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	0800bb40 	.word	0x0800bb40
 8007198:	08007781 	.word	0x08007781
 800719c:	20000730 	.word	0x20000730
 80071a0:	2000072c 	.word	0x2000072c
 80071a4:	20000718 	.word	0x20000718
 80071a8:	20000710 	.word	0x20000710

080071ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80071ac:	b480      	push	{r7}
 80071ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80071b0:	4b04      	ldr	r3, [pc, #16]	; (80071c4 <vTaskSuspendAll+0x18>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	3301      	adds	r3, #1
 80071b6:	4a03      	ldr	r2, [pc, #12]	; (80071c4 <vTaskSuspendAll+0x18>)
 80071b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80071ba:	bf00      	nop
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr
 80071c4:	20000734 	.word	0x20000734

080071c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80071ce:	2300      	movs	r3, #0
 80071d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80071d2:	2300      	movs	r3, #0
 80071d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80071d6:	4b41      	ldr	r3, [pc, #260]	; (80072dc <xTaskResumeAll+0x114>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10a      	bne.n	80071f4 <xTaskResumeAll+0x2c>
	__asm volatile
 80071de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e2:	f383 8811 	msr	BASEPRI, r3
 80071e6:	f3bf 8f6f 	isb	sy
 80071ea:	f3bf 8f4f 	dsb	sy
 80071ee:	603b      	str	r3, [r7, #0]
}
 80071f0:	bf00      	nop
 80071f2:	e7fe      	b.n	80071f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80071f4:	f001 f8d6 	bl	80083a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80071f8:	4b38      	ldr	r3, [pc, #224]	; (80072dc <xTaskResumeAll+0x114>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	3b01      	subs	r3, #1
 80071fe:	4a37      	ldr	r2, [pc, #220]	; (80072dc <xTaskResumeAll+0x114>)
 8007200:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007202:	4b36      	ldr	r3, [pc, #216]	; (80072dc <xTaskResumeAll+0x114>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d161      	bne.n	80072ce <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800720a:	4b35      	ldr	r3, [pc, #212]	; (80072e0 <xTaskResumeAll+0x118>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d05d      	beq.n	80072ce <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007212:	e02e      	b.n	8007272 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007214:	4b33      	ldr	r3, [pc, #204]	; (80072e4 <xTaskResumeAll+0x11c>)
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	3318      	adds	r3, #24
 8007220:	4618      	mov	r0, r3
 8007222:	f7fe fd9f 	bl	8005d64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	3304      	adds	r3, #4
 800722a:	4618      	mov	r0, r3
 800722c:	f7fe fd9a 	bl	8005d64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007234:	2201      	movs	r2, #1
 8007236:	409a      	lsls	r2, r3
 8007238:	4b2b      	ldr	r3, [pc, #172]	; (80072e8 <xTaskResumeAll+0x120>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4313      	orrs	r3, r2
 800723e:	4a2a      	ldr	r2, [pc, #168]	; (80072e8 <xTaskResumeAll+0x120>)
 8007240:	6013      	str	r3, [r2, #0]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007246:	4613      	mov	r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	4413      	add	r3, r2
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4a27      	ldr	r2, [pc, #156]	; (80072ec <xTaskResumeAll+0x124>)
 8007250:	441a      	add	r2, r3
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	3304      	adds	r3, #4
 8007256:	4619      	mov	r1, r3
 8007258:	4610      	mov	r0, r2
 800725a:	f7fe fd26 	bl	8005caa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007262:	4b23      	ldr	r3, [pc, #140]	; (80072f0 <xTaskResumeAll+0x128>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007268:	429a      	cmp	r2, r3
 800726a:	d302      	bcc.n	8007272 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800726c:	4b21      	ldr	r3, [pc, #132]	; (80072f4 <xTaskResumeAll+0x12c>)
 800726e:	2201      	movs	r2, #1
 8007270:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007272:	4b1c      	ldr	r3, [pc, #112]	; (80072e4 <xTaskResumeAll+0x11c>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1cc      	bne.n	8007214 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007280:	f000 fb34 	bl	80078ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007284:	4b1c      	ldr	r3, [pc, #112]	; (80072f8 <xTaskResumeAll+0x130>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d010      	beq.n	80072b2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007290:	f000 f858 	bl	8007344 <xTaskIncrementTick>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d002      	beq.n	80072a0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800729a:	4b16      	ldr	r3, [pc, #88]	; (80072f4 <xTaskResumeAll+0x12c>)
 800729c:	2201      	movs	r2, #1
 800729e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	3b01      	subs	r3, #1
 80072a4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d1f1      	bne.n	8007290 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80072ac:	4b12      	ldr	r3, [pc, #72]	; (80072f8 <xTaskResumeAll+0x130>)
 80072ae:	2200      	movs	r2, #0
 80072b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80072b2:	4b10      	ldr	r3, [pc, #64]	; (80072f4 <xTaskResumeAll+0x12c>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d009      	beq.n	80072ce <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80072ba:	2301      	movs	r3, #1
 80072bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80072be:	4b0f      	ldr	r3, [pc, #60]	; (80072fc <xTaskResumeAll+0x134>)
 80072c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	f3bf 8f4f 	dsb	sy
 80072ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072ce:	f001 f899 	bl	8008404 <vPortExitCritical>

	return xAlreadyYielded;
 80072d2:	68bb      	ldr	r3, [r7, #8]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	20000734 	.word	0x20000734
 80072e0:	2000070c 	.word	0x2000070c
 80072e4:	200006cc 	.word	0x200006cc
 80072e8:	20000714 	.word	0x20000714
 80072ec:	20000610 	.word	0x20000610
 80072f0:	2000060c 	.word	0x2000060c
 80072f4:	20000720 	.word	0x20000720
 80072f8:	2000071c 	.word	0x2000071c
 80072fc:	e000ed04 	.word	0xe000ed04

08007300 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007306:	4b05      	ldr	r3, [pc, #20]	; (800731c <xTaskGetTickCount+0x1c>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800730c:	687b      	ldr	r3, [r7, #4]
}
 800730e:	4618      	mov	r0, r3
 8007310:	370c      	adds	r7, #12
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	20000710 	.word	0x20000710

08007320 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007326:	f001 f91f 	bl	8008568 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800732a:	2300      	movs	r3, #0
 800732c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800732e:	4b04      	ldr	r3, [pc, #16]	; (8007340 <xTaskGetTickCountFromISR+0x20>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007334:	683b      	ldr	r3, [r7, #0]
}
 8007336:	4618      	mov	r0, r3
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	20000710 	.word	0x20000710

08007344 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b086      	sub	sp, #24
 8007348:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800734a:	2300      	movs	r3, #0
 800734c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800734e:	4b4e      	ldr	r3, [pc, #312]	; (8007488 <xTaskIncrementTick+0x144>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	f040 808e 	bne.w	8007474 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007358:	4b4c      	ldr	r3, [pc, #304]	; (800748c <xTaskIncrementTick+0x148>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	3301      	adds	r3, #1
 800735e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007360:	4a4a      	ldr	r2, [pc, #296]	; (800748c <xTaskIncrementTick+0x148>)
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d120      	bne.n	80073ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800736c:	4b48      	ldr	r3, [pc, #288]	; (8007490 <xTaskIncrementTick+0x14c>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00a      	beq.n	800738c <xTaskIncrementTick+0x48>
	__asm volatile
 8007376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737a:	f383 8811 	msr	BASEPRI, r3
 800737e:	f3bf 8f6f 	isb	sy
 8007382:	f3bf 8f4f 	dsb	sy
 8007386:	603b      	str	r3, [r7, #0]
}
 8007388:	bf00      	nop
 800738a:	e7fe      	b.n	800738a <xTaskIncrementTick+0x46>
 800738c:	4b40      	ldr	r3, [pc, #256]	; (8007490 <xTaskIncrementTick+0x14c>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	60fb      	str	r3, [r7, #12]
 8007392:	4b40      	ldr	r3, [pc, #256]	; (8007494 <xTaskIncrementTick+0x150>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a3e      	ldr	r2, [pc, #248]	; (8007490 <xTaskIncrementTick+0x14c>)
 8007398:	6013      	str	r3, [r2, #0]
 800739a:	4a3e      	ldr	r2, [pc, #248]	; (8007494 <xTaskIncrementTick+0x150>)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6013      	str	r3, [r2, #0]
 80073a0:	4b3d      	ldr	r3, [pc, #244]	; (8007498 <xTaskIncrementTick+0x154>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	3301      	adds	r3, #1
 80073a6:	4a3c      	ldr	r2, [pc, #240]	; (8007498 <xTaskIncrementTick+0x154>)
 80073a8:	6013      	str	r3, [r2, #0]
 80073aa:	f000 fa9f 	bl	80078ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80073ae:	4b3b      	ldr	r3, [pc, #236]	; (800749c <xTaskIncrementTick+0x158>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d348      	bcc.n	800744a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073b8:	4b35      	ldr	r3, [pc, #212]	; (8007490 <xTaskIncrementTick+0x14c>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d104      	bne.n	80073cc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073c2:	4b36      	ldr	r3, [pc, #216]	; (800749c <xTaskIncrementTick+0x158>)
 80073c4:	f04f 32ff 	mov.w	r2, #4294967295
 80073c8:	601a      	str	r2, [r3, #0]
					break;
 80073ca:	e03e      	b.n	800744a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073cc:	4b30      	ldr	r3, [pc, #192]	; (8007490 <xTaskIncrementTick+0x14c>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80073dc:	693a      	ldr	r2, [r7, #16]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d203      	bcs.n	80073ec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80073e4:	4a2d      	ldr	r2, [pc, #180]	; (800749c <xTaskIncrementTick+0x158>)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80073ea:	e02e      	b.n	800744a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	3304      	adds	r3, #4
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7fe fcb7 	bl	8005d64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d004      	beq.n	8007408 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	3318      	adds	r3, #24
 8007402:	4618      	mov	r0, r3
 8007404:	f7fe fcae 	bl	8005d64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740c:	2201      	movs	r2, #1
 800740e:	409a      	lsls	r2, r3
 8007410:	4b23      	ldr	r3, [pc, #140]	; (80074a0 <xTaskIncrementTick+0x15c>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4313      	orrs	r3, r2
 8007416:	4a22      	ldr	r2, [pc, #136]	; (80074a0 <xTaskIncrementTick+0x15c>)
 8007418:	6013      	str	r3, [r2, #0]
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800741e:	4613      	mov	r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4a1f      	ldr	r2, [pc, #124]	; (80074a4 <xTaskIncrementTick+0x160>)
 8007428:	441a      	add	r2, r3
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	3304      	adds	r3, #4
 800742e:	4619      	mov	r1, r3
 8007430:	4610      	mov	r0, r2
 8007432:	f7fe fc3a 	bl	8005caa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800743a:	4b1b      	ldr	r3, [pc, #108]	; (80074a8 <xTaskIncrementTick+0x164>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007440:	429a      	cmp	r2, r3
 8007442:	d3b9      	bcc.n	80073b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007444:	2301      	movs	r3, #1
 8007446:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007448:	e7b6      	b.n	80073b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800744a:	4b17      	ldr	r3, [pc, #92]	; (80074a8 <xTaskIncrementTick+0x164>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007450:	4914      	ldr	r1, [pc, #80]	; (80074a4 <xTaskIncrementTick+0x160>)
 8007452:	4613      	mov	r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4413      	add	r3, r2
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	440b      	add	r3, r1
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2b01      	cmp	r3, #1
 8007460:	d901      	bls.n	8007466 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007462:	2301      	movs	r3, #1
 8007464:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007466:	4b11      	ldr	r3, [pc, #68]	; (80074ac <xTaskIncrementTick+0x168>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d007      	beq.n	800747e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800746e:	2301      	movs	r3, #1
 8007470:	617b      	str	r3, [r7, #20]
 8007472:	e004      	b.n	800747e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007474:	4b0e      	ldr	r3, [pc, #56]	; (80074b0 <xTaskIncrementTick+0x16c>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	3301      	adds	r3, #1
 800747a:	4a0d      	ldr	r2, [pc, #52]	; (80074b0 <xTaskIncrementTick+0x16c>)
 800747c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800747e:	697b      	ldr	r3, [r7, #20]
}
 8007480:	4618      	mov	r0, r3
 8007482:	3718      	adds	r7, #24
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	20000734 	.word	0x20000734
 800748c:	20000710 	.word	0x20000710
 8007490:	200006c4 	.word	0x200006c4
 8007494:	200006c8 	.word	0x200006c8
 8007498:	20000724 	.word	0x20000724
 800749c:	2000072c 	.word	0x2000072c
 80074a0:	20000714 	.word	0x20000714
 80074a4:	20000610 	.word	0x20000610
 80074a8:	2000060c 	.word	0x2000060c
 80074ac:	20000720 	.word	0x20000720
 80074b0:	2000071c 	.word	0x2000071c

080074b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80074b4:	b480      	push	{r7}
 80074b6:	b087      	sub	sp, #28
 80074b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80074ba:	4b27      	ldr	r3, [pc, #156]	; (8007558 <vTaskSwitchContext+0xa4>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d003      	beq.n	80074ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80074c2:	4b26      	ldr	r3, [pc, #152]	; (800755c <vTaskSwitchContext+0xa8>)
 80074c4:	2201      	movs	r2, #1
 80074c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80074c8:	e03f      	b.n	800754a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80074ca:	4b24      	ldr	r3, [pc, #144]	; (800755c <vTaskSwitchContext+0xa8>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074d0:	4b23      	ldr	r3, [pc, #140]	; (8007560 <vTaskSwitchContext+0xac>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	fab3 f383 	clz	r3, r3
 80074dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80074de:	7afb      	ldrb	r3, [r7, #11]
 80074e0:	f1c3 031f 	rsb	r3, r3, #31
 80074e4:	617b      	str	r3, [r7, #20]
 80074e6:	491f      	ldr	r1, [pc, #124]	; (8007564 <vTaskSwitchContext+0xb0>)
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	4613      	mov	r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4413      	add	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	440b      	add	r3, r1
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d10a      	bne.n	8007510 <vTaskSwitchContext+0x5c>
	__asm volatile
 80074fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fe:	f383 8811 	msr	BASEPRI, r3
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	f3bf 8f4f 	dsb	sy
 800750a:	607b      	str	r3, [r7, #4]
}
 800750c:	bf00      	nop
 800750e:	e7fe      	b.n	800750e <vTaskSwitchContext+0x5a>
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	4613      	mov	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4413      	add	r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	4a12      	ldr	r2, [pc, #72]	; (8007564 <vTaskSwitchContext+0xb0>)
 800751c:	4413      	add	r3, r2
 800751e:	613b      	str	r3, [r7, #16]
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	685a      	ldr	r2, [r3, #4]
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	605a      	str	r2, [r3, #4]
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	685a      	ldr	r2, [r3, #4]
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	3308      	adds	r3, #8
 8007532:	429a      	cmp	r2, r3
 8007534:	d104      	bne.n	8007540 <vTaskSwitchContext+0x8c>
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	605a      	str	r2, [r3, #4]
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	4a08      	ldr	r2, [pc, #32]	; (8007568 <vTaskSwitchContext+0xb4>)
 8007548:	6013      	str	r3, [r2, #0]
}
 800754a:	bf00      	nop
 800754c:	371c      	adds	r7, #28
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	20000734 	.word	0x20000734
 800755c:	20000720 	.word	0x20000720
 8007560:	20000714 	.word	0x20000714
 8007564:	20000610 	.word	0x20000610
 8007568:	2000060c 	.word	0x2000060c

0800756c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d10a      	bne.n	8007592 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800757c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007580:	f383 8811 	msr	BASEPRI, r3
 8007584:	f3bf 8f6f 	isb	sy
 8007588:	f3bf 8f4f 	dsb	sy
 800758c:	60fb      	str	r3, [r7, #12]
}
 800758e:	bf00      	nop
 8007590:	e7fe      	b.n	8007590 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007592:	4b07      	ldr	r3, [pc, #28]	; (80075b0 <vTaskPlaceOnEventList+0x44>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	3318      	adds	r3, #24
 8007598:	4619      	mov	r1, r3
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f7fe fba9 	bl	8005cf2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80075a0:	2101      	movs	r1, #1
 80075a2:	6838      	ldr	r0, [r7, #0]
 80075a4:	f000 fd68 	bl	8008078 <prvAddCurrentTaskToDelayedList>
}
 80075a8:	bf00      	nop
 80075aa:	3710      	adds	r7, #16
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	2000060c 	.word	0x2000060c

080075b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b086      	sub	sp, #24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10a      	bne.n	80075e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80075ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	60fb      	str	r3, [r7, #12]
}
 80075dc:	bf00      	nop
 80075de:	e7fe      	b.n	80075de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	3318      	adds	r3, #24
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7fe fbbd 	bl	8005d64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075ea:	4b1d      	ldr	r3, [pc, #116]	; (8007660 <xTaskRemoveFromEventList+0xac>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d11c      	bne.n	800762c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	3304      	adds	r3, #4
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7fe fbb4 	bl	8005d64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007600:	2201      	movs	r2, #1
 8007602:	409a      	lsls	r2, r3
 8007604:	4b17      	ldr	r3, [pc, #92]	; (8007664 <xTaskRemoveFromEventList+0xb0>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4313      	orrs	r3, r2
 800760a:	4a16      	ldr	r2, [pc, #88]	; (8007664 <xTaskRemoveFromEventList+0xb0>)
 800760c:	6013      	str	r3, [r2, #0]
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007612:	4613      	mov	r3, r2
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	4413      	add	r3, r2
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	4a13      	ldr	r2, [pc, #76]	; (8007668 <xTaskRemoveFromEventList+0xb4>)
 800761c:	441a      	add	r2, r3
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	3304      	adds	r3, #4
 8007622:	4619      	mov	r1, r3
 8007624:	4610      	mov	r0, r2
 8007626:	f7fe fb40 	bl	8005caa <vListInsertEnd>
 800762a:	e005      	b.n	8007638 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	3318      	adds	r3, #24
 8007630:	4619      	mov	r1, r3
 8007632:	480e      	ldr	r0, [pc, #56]	; (800766c <xTaskRemoveFromEventList+0xb8>)
 8007634:	f7fe fb39 	bl	8005caa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800763c:	4b0c      	ldr	r3, [pc, #48]	; (8007670 <xTaskRemoveFromEventList+0xbc>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007642:	429a      	cmp	r2, r3
 8007644:	d905      	bls.n	8007652 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007646:	2301      	movs	r3, #1
 8007648:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800764a:	4b0a      	ldr	r3, [pc, #40]	; (8007674 <xTaskRemoveFromEventList+0xc0>)
 800764c:	2201      	movs	r2, #1
 800764e:	601a      	str	r2, [r3, #0]
 8007650:	e001      	b.n	8007656 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007652:	2300      	movs	r3, #0
 8007654:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007656:	697b      	ldr	r3, [r7, #20]
}
 8007658:	4618      	mov	r0, r3
 800765a:	3718      	adds	r7, #24
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	20000734 	.word	0x20000734
 8007664:	20000714 	.word	0x20000714
 8007668:	20000610 	.word	0x20000610
 800766c:	200006cc 	.word	0x200006cc
 8007670:	2000060c 	.word	0x2000060c
 8007674:	20000720 	.word	0x20000720

08007678 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007680:	4b06      	ldr	r3, [pc, #24]	; (800769c <vTaskInternalSetTimeOutState+0x24>)
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007688:	4b05      	ldr	r3, [pc, #20]	; (80076a0 <vTaskInternalSetTimeOutState+0x28>)
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	605a      	str	r2, [r3, #4]
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr
 800769c:	20000724 	.word	0x20000724
 80076a0:	20000710 	.word	0x20000710

080076a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b088      	sub	sp, #32
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10a      	bne.n	80076ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80076b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	613b      	str	r3, [r7, #16]
}
 80076c6:	bf00      	nop
 80076c8:	e7fe      	b.n	80076c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10a      	bne.n	80076e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	60fb      	str	r3, [r7, #12]
}
 80076e2:	bf00      	nop
 80076e4:	e7fe      	b.n	80076e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80076e6:	f000 fe5d 	bl	80083a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80076ea:	4b1d      	ldr	r3, [pc, #116]	; (8007760 <xTaskCheckForTimeOut+0xbc>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	69ba      	ldr	r2, [r7, #24]
 80076f6:	1ad3      	subs	r3, r2, r3
 80076f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007702:	d102      	bne.n	800770a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007704:	2300      	movs	r3, #0
 8007706:	61fb      	str	r3, [r7, #28]
 8007708:	e023      	b.n	8007752 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	4b15      	ldr	r3, [pc, #84]	; (8007764 <xTaskCheckForTimeOut+0xc0>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	429a      	cmp	r2, r3
 8007714:	d007      	beq.n	8007726 <xTaskCheckForTimeOut+0x82>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	69ba      	ldr	r2, [r7, #24]
 800771c:	429a      	cmp	r2, r3
 800771e:	d302      	bcc.n	8007726 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007720:	2301      	movs	r3, #1
 8007722:	61fb      	str	r3, [r7, #28]
 8007724:	e015      	b.n	8007752 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	429a      	cmp	r2, r3
 800772e:	d20b      	bcs.n	8007748 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	1ad2      	subs	r2, r2, r3
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f7ff ff9b 	bl	8007678 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007742:	2300      	movs	r3, #0
 8007744:	61fb      	str	r3, [r7, #28]
 8007746:	e004      	b.n	8007752 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	2200      	movs	r2, #0
 800774c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800774e:	2301      	movs	r3, #1
 8007750:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007752:	f000 fe57 	bl	8008404 <vPortExitCritical>

	return xReturn;
 8007756:	69fb      	ldr	r3, [r7, #28]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3720      	adds	r7, #32
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	20000710 	.word	0x20000710
 8007764:	20000724 	.word	0x20000724

08007768 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007768:	b480      	push	{r7}
 800776a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800776c:	4b03      	ldr	r3, [pc, #12]	; (800777c <vTaskMissedYield+0x14>)
 800776e:	2201      	movs	r2, #1
 8007770:	601a      	str	r2, [r3, #0]
}
 8007772:	bf00      	nop
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr
 800777c:	20000720 	.word	0x20000720

08007780 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007788:	f000 f852 	bl	8007830 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800778c:	4b06      	ldr	r3, [pc, #24]	; (80077a8 <prvIdleTask+0x28>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d9f9      	bls.n	8007788 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007794:	4b05      	ldr	r3, [pc, #20]	; (80077ac <prvIdleTask+0x2c>)
 8007796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800779a:	601a      	str	r2, [r3, #0]
 800779c:	f3bf 8f4f 	dsb	sy
 80077a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80077a4:	e7f0      	b.n	8007788 <prvIdleTask+0x8>
 80077a6:	bf00      	nop
 80077a8:	20000610 	.word	0x20000610
 80077ac:	e000ed04 	.word	0xe000ed04

080077b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077b6:	2300      	movs	r3, #0
 80077b8:	607b      	str	r3, [r7, #4]
 80077ba:	e00c      	b.n	80077d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	4613      	mov	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4413      	add	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4a12      	ldr	r2, [pc, #72]	; (8007810 <prvInitialiseTaskLists+0x60>)
 80077c8:	4413      	add	r3, r2
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fe fa40 	bl	8005c50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	3301      	adds	r3, #1
 80077d4:	607b      	str	r3, [r7, #4]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2b06      	cmp	r3, #6
 80077da:	d9ef      	bls.n	80077bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80077dc:	480d      	ldr	r0, [pc, #52]	; (8007814 <prvInitialiseTaskLists+0x64>)
 80077de:	f7fe fa37 	bl	8005c50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80077e2:	480d      	ldr	r0, [pc, #52]	; (8007818 <prvInitialiseTaskLists+0x68>)
 80077e4:	f7fe fa34 	bl	8005c50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80077e8:	480c      	ldr	r0, [pc, #48]	; (800781c <prvInitialiseTaskLists+0x6c>)
 80077ea:	f7fe fa31 	bl	8005c50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80077ee:	480c      	ldr	r0, [pc, #48]	; (8007820 <prvInitialiseTaskLists+0x70>)
 80077f0:	f7fe fa2e 	bl	8005c50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80077f4:	480b      	ldr	r0, [pc, #44]	; (8007824 <prvInitialiseTaskLists+0x74>)
 80077f6:	f7fe fa2b 	bl	8005c50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80077fa:	4b0b      	ldr	r3, [pc, #44]	; (8007828 <prvInitialiseTaskLists+0x78>)
 80077fc:	4a05      	ldr	r2, [pc, #20]	; (8007814 <prvInitialiseTaskLists+0x64>)
 80077fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007800:	4b0a      	ldr	r3, [pc, #40]	; (800782c <prvInitialiseTaskLists+0x7c>)
 8007802:	4a05      	ldr	r2, [pc, #20]	; (8007818 <prvInitialiseTaskLists+0x68>)
 8007804:	601a      	str	r2, [r3, #0]
}
 8007806:	bf00      	nop
 8007808:	3708      	adds	r7, #8
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	20000610 	.word	0x20000610
 8007814:	2000069c 	.word	0x2000069c
 8007818:	200006b0 	.word	0x200006b0
 800781c:	200006cc 	.word	0x200006cc
 8007820:	200006e0 	.word	0x200006e0
 8007824:	200006f8 	.word	0x200006f8
 8007828:	200006c4 	.word	0x200006c4
 800782c:	200006c8 	.word	0x200006c8

08007830 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007836:	e019      	b.n	800786c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007838:	f000 fdb4 	bl	80083a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800783c:	4b10      	ldr	r3, [pc, #64]	; (8007880 <prvCheckTasksWaitingTermination+0x50>)
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	3304      	adds	r3, #4
 8007848:	4618      	mov	r0, r3
 800784a:	f7fe fa8b 	bl	8005d64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800784e:	4b0d      	ldr	r3, [pc, #52]	; (8007884 <prvCheckTasksWaitingTermination+0x54>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	3b01      	subs	r3, #1
 8007854:	4a0b      	ldr	r2, [pc, #44]	; (8007884 <prvCheckTasksWaitingTermination+0x54>)
 8007856:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007858:	4b0b      	ldr	r3, [pc, #44]	; (8007888 <prvCheckTasksWaitingTermination+0x58>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3b01      	subs	r3, #1
 800785e:	4a0a      	ldr	r2, [pc, #40]	; (8007888 <prvCheckTasksWaitingTermination+0x58>)
 8007860:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007862:	f000 fdcf 	bl	8008404 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f810 	bl	800788c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800786c:	4b06      	ldr	r3, [pc, #24]	; (8007888 <prvCheckTasksWaitingTermination+0x58>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1e1      	bne.n	8007838 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007874:	bf00      	nop
 8007876:	bf00      	nop
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	200006e0 	.word	0x200006e0
 8007884:	2000070c 	.word	0x2000070c
 8007888:	200006f4 	.word	0x200006f4

0800788c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800789a:	2b00      	cmp	r3, #0
 800789c:	d108      	bne.n	80078b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a2:	4618      	mov	r0, r3
 80078a4:	f000 ff6c 	bl	8008780 <vPortFree>
				vPortFree( pxTCB );
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 ff69 	bl	8008780 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80078ae:	e018      	b.n	80078e2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d103      	bne.n	80078c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 ff60 	bl	8008780 <vPortFree>
	}
 80078c0:	e00f      	b.n	80078e2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d00a      	beq.n	80078e2 <prvDeleteTCB+0x56>
	__asm volatile
 80078cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d0:	f383 8811 	msr	BASEPRI, r3
 80078d4:	f3bf 8f6f 	isb	sy
 80078d8:	f3bf 8f4f 	dsb	sy
 80078dc:	60fb      	str	r3, [r7, #12]
}
 80078de:	bf00      	nop
 80078e0:	e7fe      	b.n	80078e0 <prvDeleteTCB+0x54>
	}
 80078e2:	bf00      	nop
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
	...

080078ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078f2:	4b0c      	ldr	r3, [pc, #48]	; (8007924 <prvResetNextTaskUnblockTime+0x38>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d104      	bne.n	8007906 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80078fc:	4b0a      	ldr	r3, [pc, #40]	; (8007928 <prvResetNextTaskUnblockTime+0x3c>)
 80078fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007902:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007904:	e008      	b.n	8007918 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007906:	4b07      	ldr	r3, [pc, #28]	; (8007924 <prvResetNextTaskUnblockTime+0x38>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	4a04      	ldr	r2, [pc, #16]	; (8007928 <prvResetNextTaskUnblockTime+0x3c>)
 8007916:	6013      	str	r3, [r2, #0]
}
 8007918:	bf00      	nop
 800791a:	370c      	adds	r7, #12
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr
 8007924:	200006c4 	.word	0x200006c4
 8007928:	2000072c 	.word	0x2000072c

0800792c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007932:	4b0b      	ldr	r3, [pc, #44]	; (8007960 <xTaskGetSchedulerState+0x34>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d102      	bne.n	8007940 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800793a:	2301      	movs	r3, #1
 800793c:	607b      	str	r3, [r7, #4]
 800793e:	e008      	b.n	8007952 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007940:	4b08      	ldr	r3, [pc, #32]	; (8007964 <xTaskGetSchedulerState+0x38>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d102      	bne.n	800794e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007948:	2302      	movs	r3, #2
 800794a:	607b      	str	r3, [r7, #4]
 800794c:	e001      	b.n	8007952 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800794e:	2300      	movs	r3, #0
 8007950:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007952:	687b      	ldr	r3, [r7, #4]
	}
 8007954:	4618      	mov	r0, r3
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr
 8007960:	20000718 	.word	0x20000718
 8007964:	20000734 	.word	0x20000734

08007968 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007974:	2300      	movs	r3, #0
 8007976:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d05e      	beq.n	8007a3c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007982:	4b31      	ldr	r3, [pc, #196]	; (8007a48 <xTaskPriorityInherit+0xe0>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007988:	429a      	cmp	r2, r3
 800798a:	d24e      	bcs.n	8007a2a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	2b00      	cmp	r3, #0
 8007992:	db06      	blt.n	80079a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007994:	4b2c      	ldr	r3, [pc, #176]	; (8007a48 <xTaskPriorityInherit+0xe0>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799a:	f1c3 0207 	rsb	r2, r3, #7
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	6959      	ldr	r1, [r3, #20]
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079aa:	4613      	mov	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	4a26      	ldr	r2, [pc, #152]	; (8007a4c <xTaskPriorityInherit+0xe4>)
 80079b4:	4413      	add	r3, r2
 80079b6:	4299      	cmp	r1, r3
 80079b8:	d12f      	bne.n	8007a1a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	3304      	adds	r3, #4
 80079be:	4618      	mov	r0, r3
 80079c0:	f7fe f9d0 	bl	8005d64 <uxListRemove>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d10a      	bne.n	80079e0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ce:	2201      	movs	r2, #1
 80079d0:	fa02 f303 	lsl.w	r3, r2, r3
 80079d4:	43da      	mvns	r2, r3
 80079d6:	4b1e      	ldr	r3, [pc, #120]	; (8007a50 <xTaskPriorityInherit+0xe8>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4013      	ands	r3, r2
 80079dc:	4a1c      	ldr	r2, [pc, #112]	; (8007a50 <xTaskPriorityInherit+0xe8>)
 80079de:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80079e0:	4b19      	ldr	r3, [pc, #100]	; (8007a48 <xTaskPriorityInherit+0xe0>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ee:	2201      	movs	r2, #1
 80079f0:	409a      	lsls	r2, r3
 80079f2:	4b17      	ldr	r3, [pc, #92]	; (8007a50 <xTaskPriorityInherit+0xe8>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	4a15      	ldr	r2, [pc, #84]	; (8007a50 <xTaskPriorityInherit+0xe8>)
 80079fa:	6013      	str	r3, [r2, #0]
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a00:	4613      	mov	r3, r2
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	4413      	add	r3, r2
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	4a10      	ldr	r2, [pc, #64]	; (8007a4c <xTaskPriorityInherit+0xe4>)
 8007a0a:	441a      	add	r2, r3
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	3304      	adds	r3, #4
 8007a10:	4619      	mov	r1, r3
 8007a12:	4610      	mov	r0, r2
 8007a14:	f7fe f949 	bl	8005caa <vListInsertEnd>
 8007a18:	e004      	b.n	8007a24 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007a1a:	4b0b      	ldr	r3, [pc, #44]	; (8007a48 <xTaskPriorityInherit+0xe0>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007a24:	2301      	movs	r3, #1
 8007a26:	60fb      	str	r3, [r7, #12]
 8007a28:	e008      	b.n	8007a3c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a2e:	4b06      	ldr	r3, [pc, #24]	; (8007a48 <xTaskPriorityInherit+0xe0>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d201      	bcs.n	8007a3c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
	}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	2000060c 	.word	0x2000060c
 8007a4c:	20000610 	.word	0x20000610
 8007a50:	20000714 	.word	0x20000714

08007a54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007a60:	2300      	movs	r3, #0
 8007a62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d06e      	beq.n	8007b48 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007a6a:	4b3a      	ldr	r3, [pc, #232]	; (8007b54 <xTaskPriorityDisinherit+0x100>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	693a      	ldr	r2, [r7, #16]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d00a      	beq.n	8007a8a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a78:	f383 8811 	msr	BASEPRI, r3
 8007a7c:	f3bf 8f6f 	isb	sy
 8007a80:	f3bf 8f4f 	dsb	sy
 8007a84:	60fb      	str	r3, [r7, #12]
}
 8007a86:	bf00      	nop
 8007a88:	e7fe      	b.n	8007a88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10a      	bne.n	8007aa8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a96:	f383 8811 	msr	BASEPRI, r3
 8007a9a:	f3bf 8f6f 	isb	sy
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	60bb      	str	r3, [r7, #8]
}
 8007aa4:	bf00      	nop
 8007aa6:	e7fe      	b.n	8007aa6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aac:	1e5a      	subs	r2, r3, #1
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d044      	beq.n	8007b48 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d140      	bne.n	8007b48 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	3304      	adds	r3, #4
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7fe f94a 	bl	8005d64 <uxListRemove>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d115      	bne.n	8007b02 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ada:	491f      	ldr	r1, [pc, #124]	; (8007b58 <xTaskPriorityDisinherit+0x104>)
 8007adc:	4613      	mov	r3, r2
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	4413      	add	r3, r2
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	440b      	add	r3, r1
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d10a      	bne.n	8007b02 <xTaskPriorityDisinherit+0xae>
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af0:	2201      	movs	r2, #1
 8007af2:	fa02 f303 	lsl.w	r3, r2, r3
 8007af6:	43da      	mvns	r2, r3
 8007af8:	4b18      	ldr	r3, [pc, #96]	; (8007b5c <xTaskPriorityDisinherit+0x108>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4013      	ands	r3, r2
 8007afe:	4a17      	ldr	r2, [pc, #92]	; (8007b5c <xTaskPriorityDisinherit+0x108>)
 8007b00:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0e:	f1c3 0207 	rsb	r2, r3, #7
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	409a      	lsls	r2, r3
 8007b1e:	4b0f      	ldr	r3, [pc, #60]	; (8007b5c <xTaskPriorityDisinherit+0x108>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	4a0d      	ldr	r2, [pc, #52]	; (8007b5c <xTaskPriorityDisinherit+0x108>)
 8007b26:	6013      	str	r3, [r2, #0]
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4413      	add	r3, r2
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	4a08      	ldr	r2, [pc, #32]	; (8007b58 <xTaskPriorityDisinherit+0x104>)
 8007b36:	441a      	add	r2, r3
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	3304      	adds	r3, #4
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	4610      	mov	r0, r2
 8007b40:	f7fe f8b3 	bl	8005caa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007b44:	2301      	movs	r3, #1
 8007b46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b48:	697b      	ldr	r3, [r7, #20]
	}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3718      	adds	r7, #24
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	2000060c 	.word	0x2000060c
 8007b58:	20000610 	.word	0x20000610
 8007b5c:	20000714 	.word	0x20000714

08007b60 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b088      	sub	sp, #32
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d077      	beq.n	8007c68 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d10a      	bne.n	8007b96 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b84:	f383 8811 	msr	BASEPRI, r3
 8007b88:	f3bf 8f6f 	isb	sy
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	60fb      	str	r3, [r7, #12]
}
 8007b92:	bf00      	nop
 8007b94:	e7fe      	b.n	8007b94 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b9a:	683a      	ldr	r2, [r7, #0]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d902      	bls.n	8007ba6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	61fb      	str	r3, [r7, #28]
 8007ba4:	e002      	b.n	8007bac <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007baa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb0:	69fa      	ldr	r2, [r7, #28]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d058      	beq.n	8007c68 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bba:	697a      	ldr	r2, [r7, #20]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d153      	bne.n	8007c68 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007bc0:	4b2b      	ldr	r3, [pc, #172]	; (8007c70 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	69ba      	ldr	r2, [r7, #24]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d10a      	bne.n	8007be0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bce:	f383 8811 	msr	BASEPRI, r3
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	60bb      	str	r3, [r7, #8]
}
 8007bdc:	bf00      	nop
 8007bde:	e7fe      	b.n	8007bde <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007be6:	69bb      	ldr	r3, [r7, #24]
 8007be8:	69fa      	ldr	r2, [r7, #28]
 8007bea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	db04      	blt.n	8007bfe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	f1c3 0207 	rsb	r2, r3, #7
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	6959      	ldr	r1, [r3, #20]
 8007c02:	693a      	ldr	r2, [r7, #16]
 8007c04:	4613      	mov	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4413      	add	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4a19      	ldr	r2, [pc, #100]	; (8007c74 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007c0e:	4413      	add	r3, r2
 8007c10:	4299      	cmp	r1, r3
 8007c12:	d129      	bne.n	8007c68 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	3304      	adds	r3, #4
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f7fe f8a3 	bl	8005d64 <uxListRemove>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d10a      	bne.n	8007c3a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c28:	2201      	movs	r2, #1
 8007c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2e:	43da      	mvns	r2, r3
 8007c30:	4b11      	ldr	r3, [pc, #68]	; (8007c78 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4013      	ands	r3, r2
 8007c36:	4a10      	ldr	r2, [pc, #64]	; (8007c78 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007c38:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3e:	2201      	movs	r2, #1
 8007c40:	409a      	lsls	r2, r3
 8007c42:	4b0d      	ldr	r3, [pc, #52]	; (8007c78 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	4a0b      	ldr	r2, [pc, #44]	; (8007c78 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007c4a:	6013      	str	r3, [r2, #0]
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c50:	4613      	mov	r3, r2
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	4413      	add	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	4a06      	ldr	r2, [pc, #24]	; (8007c74 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007c5a:	441a      	add	r2, r3
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	3304      	adds	r3, #4
 8007c60:	4619      	mov	r1, r3
 8007c62:	4610      	mov	r0, r2
 8007c64:	f7fe f821 	bl	8005caa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c68:	bf00      	nop
 8007c6a:	3720      	adds	r7, #32
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}
 8007c70:	2000060c 	.word	0x2000060c
 8007c74:	20000610 	.word	0x20000610
 8007c78:	20000714 	.word	0x20000714

08007c7c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007c7c:	b480      	push	{r7}
 8007c7e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007c80:	4b07      	ldr	r3, [pc, #28]	; (8007ca0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d004      	beq.n	8007c92 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007c88:	4b05      	ldr	r3, [pc, #20]	; (8007ca0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c8e:	3201      	adds	r2, #1
 8007c90:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007c92:	4b03      	ldr	r3, [pc, #12]	; (8007ca0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c94:	681b      	ldr	r3, [r3, #0]
	}
 8007c96:	4618      	mov	r0, r3
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr
 8007ca0:	2000060c 	.word	0x2000060c

08007ca4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b086      	sub	sp, #24
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
 8007cb0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007cb2:	f000 fb77 	bl	80083a4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007cb6:	4b26      	ldr	r3, [pc, #152]	; (8007d50 <xTaskNotifyWait+0xac>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	d01a      	beq.n	8007cfa <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007cc4:	4b22      	ldr	r3, [pc, #136]	; (8007d50 <xTaskNotifyWait+0xac>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	43d2      	mvns	r2, r2
 8007cce:	400a      	ands	r2, r1
 8007cd0:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007cd2:	4b1f      	ldr	r3, [pc, #124]	; (8007d50 <xTaskNotifyWait+0xac>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00b      	beq.n	8007cfa <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ce2:	2101      	movs	r1, #1
 8007ce4:	6838      	ldr	r0, [r7, #0]
 8007ce6:	f000 f9c7 	bl	8008078 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007cea:	4b1a      	ldr	r3, [pc, #104]	; (8007d54 <xTaskNotifyWait+0xb0>)
 8007cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cf0:	601a      	str	r2, [r3, #0]
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007cfa:	f000 fb83 	bl	8008404 <vPortExitCritical>

		taskENTER_CRITICAL();
 8007cfe:	f000 fb51 	bl	80083a4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d004      	beq.n	8007d12 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8007d08:	4b11      	ldr	r3, [pc, #68]	; (8007d50 <xTaskNotifyWait+0xac>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007d12:	4b0f      	ldr	r3, [pc, #60]	; (8007d50 <xTaskNotifyWait+0xac>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	d002      	beq.n	8007d26 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8007d20:	2300      	movs	r3, #0
 8007d22:	617b      	str	r3, [r7, #20]
 8007d24:	e008      	b.n	8007d38 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8007d26:	4b0a      	ldr	r3, [pc, #40]	; (8007d50 <xTaskNotifyWait+0xac>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	43d2      	mvns	r2, r2
 8007d30:	400a      	ands	r2, r1
 8007d32:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8007d34:	2301      	movs	r3, #1
 8007d36:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d38:	4b05      	ldr	r3, [pc, #20]	; (8007d50 <xTaskNotifyWait+0xac>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8007d42:	f000 fb5f 	bl	8008404 <vPortExitCritical>

		return xReturn;
 8007d46:	697b      	ldr	r3, [r7, #20]
	}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3718      	adds	r7, #24
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	2000060c 	.word	0x2000060c
 8007d54:	e000ed04 	.word	0xe000ed04

08007d58 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b08a      	sub	sp, #40	; 0x28
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	603b      	str	r3, [r7, #0]
 8007d64:	4613      	mov	r3, r2
 8007d66:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10a      	bne.n	8007d88 <xTaskGenericNotify+0x30>
	__asm volatile
 8007d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d76:	f383 8811 	msr	BASEPRI, r3
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	61bb      	str	r3, [r7, #24]
}
 8007d84:	bf00      	nop
 8007d86:	e7fe      	b.n	8007d86 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8007d8c:	f000 fb0a 	bl	80083a4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d003      	beq.n	8007d9e <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007d96:	6a3b      	ldr	r3, [r7, #32]
 8007d98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007d9e:	6a3b      	ldr	r3, [r7, #32]
 8007da0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007da4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007da6:	6a3b      	ldr	r3, [r7, #32]
 8007da8:	2202      	movs	r2, #2
 8007daa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8007dae:	79fb      	ldrb	r3, [r7, #7]
 8007db0:	2b04      	cmp	r3, #4
 8007db2:	d828      	bhi.n	8007e06 <xTaskGenericNotify+0xae>
 8007db4:	a201      	add	r2, pc, #4	; (adr r2, 8007dbc <xTaskGenericNotify+0x64>)
 8007db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dba:	bf00      	nop
 8007dbc:	08007e27 	.word	0x08007e27
 8007dc0:	08007dd1 	.word	0x08007dd1
 8007dc4:	08007ddf 	.word	0x08007ddf
 8007dc8:	08007deb 	.word	0x08007deb
 8007dcc:	08007df3 	.word	0x08007df3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007dd0:	6a3b      	ldr	r3, [r7, #32]
 8007dd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	431a      	orrs	r2, r3
 8007dd8:	6a3b      	ldr	r3, [r7, #32]
 8007dda:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8007ddc:	e026      	b.n	8007e2c <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007dde:	6a3b      	ldr	r3, [r7, #32]
 8007de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007de2:	1c5a      	adds	r2, r3, #1
 8007de4:	6a3b      	ldr	r3, [r7, #32]
 8007de6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8007de8:	e020      	b.n	8007e2c <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007dea:	6a3b      	ldr	r3, [r7, #32]
 8007dec:	68ba      	ldr	r2, [r7, #8]
 8007dee:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8007df0:	e01c      	b.n	8007e2c <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007df2:	7ffb      	ldrb	r3, [r7, #31]
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d003      	beq.n	8007e00 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007df8:	6a3b      	ldr	r3, [r7, #32]
 8007dfa:	68ba      	ldr	r2, [r7, #8]
 8007dfc:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007dfe:	e015      	b.n	8007e2c <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 8007e00:	2300      	movs	r3, #0
 8007e02:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8007e04:	e012      	b.n	8007e2c <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007e06:	6a3b      	ldr	r3, [r7, #32]
 8007e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e0e:	d00c      	beq.n	8007e2a <xTaskGenericNotify+0xd2>
	__asm volatile
 8007e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e14:	f383 8811 	msr	BASEPRI, r3
 8007e18:	f3bf 8f6f 	isb	sy
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	617b      	str	r3, [r7, #20]
}
 8007e22:	bf00      	nop
 8007e24:	e7fe      	b.n	8007e24 <xTaskGenericNotify+0xcc>
					break;
 8007e26:	bf00      	nop
 8007e28:	e000      	b.n	8007e2c <xTaskGenericNotify+0xd4>

					break;
 8007e2a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007e2c:	7ffb      	ldrb	r3, [r7, #31]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d139      	bne.n	8007ea6 <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e32:	6a3b      	ldr	r3, [r7, #32]
 8007e34:	3304      	adds	r3, #4
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7fd ff94 	bl	8005d64 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007e3c:	6a3b      	ldr	r3, [r7, #32]
 8007e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e40:	2201      	movs	r2, #1
 8007e42:	409a      	lsls	r2, r3
 8007e44:	4b1b      	ldr	r3, [pc, #108]	; (8007eb4 <xTaskGenericNotify+0x15c>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	4a1a      	ldr	r2, [pc, #104]	; (8007eb4 <xTaskGenericNotify+0x15c>)
 8007e4c:	6013      	str	r3, [r2, #0]
 8007e4e:	6a3b      	ldr	r3, [r7, #32]
 8007e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e52:	4613      	mov	r3, r2
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	4413      	add	r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	4a17      	ldr	r2, [pc, #92]	; (8007eb8 <xTaskGenericNotify+0x160>)
 8007e5c:	441a      	add	r2, r3
 8007e5e:	6a3b      	ldr	r3, [r7, #32]
 8007e60:	3304      	adds	r3, #4
 8007e62:	4619      	mov	r1, r3
 8007e64:	4610      	mov	r0, r2
 8007e66:	f7fd ff20 	bl	8005caa <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007e6a:	6a3b      	ldr	r3, [r7, #32]
 8007e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00a      	beq.n	8007e88 <xTaskGenericNotify+0x130>
	__asm volatile
 8007e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e76:	f383 8811 	msr	BASEPRI, r3
 8007e7a:	f3bf 8f6f 	isb	sy
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	613b      	str	r3, [r7, #16]
}
 8007e84:	bf00      	nop
 8007e86:	e7fe      	b.n	8007e86 <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e88:	6a3b      	ldr	r3, [r7, #32]
 8007e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e8c:	4b0b      	ldr	r3, [pc, #44]	; (8007ebc <xTaskGenericNotify+0x164>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d907      	bls.n	8007ea6 <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007e96:	4b0a      	ldr	r3, [pc, #40]	; (8007ec0 <xTaskGenericNotify+0x168>)
 8007e98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e9c:	601a      	str	r2, [r3, #0]
 8007e9e:	f3bf 8f4f 	dsb	sy
 8007ea2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007ea6:	f000 faad 	bl	8008404 <vPortExitCritical>

		return xReturn;
 8007eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3728      	adds	r7, #40	; 0x28
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	20000714 	.word	0x20000714
 8007eb8:	20000610 	.word	0x20000610
 8007ebc:	2000060c 	.word	0x2000060c
 8007ec0:	e000ed04 	.word	0xe000ed04

08007ec4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b08e      	sub	sp, #56	; 0x38
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	603b      	str	r3, [r7, #0]
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d10a      	bne.n	8007ef4 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8007ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee2:	f383 8811 	msr	BASEPRI, r3
 8007ee6:	f3bf 8f6f 	isb	sy
 8007eea:	f3bf 8f4f 	dsb	sy
 8007eee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ef0:	bf00      	nop
 8007ef2:	e7fe      	b.n	8007ef2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ef4:	f000 fb38 	bl	8008568 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8007efc:	f3ef 8211 	mrs	r2, BASEPRI
 8007f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	623a      	str	r2, [r7, #32]
 8007f12:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8007f14:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f16:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d003      	beq.n	8007f26 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007f2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f32:	2202      	movs	r2, #2
 8007f34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8007f38:	79fb      	ldrb	r3, [r7, #7]
 8007f3a:	2b04      	cmp	r3, #4
 8007f3c:	d828      	bhi.n	8007f90 <xTaskGenericNotifyFromISR+0xcc>
 8007f3e:	a201      	add	r2, pc, #4	; (adr r2, 8007f44 <xTaskGenericNotifyFromISR+0x80>)
 8007f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f44:	08007fb1 	.word	0x08007fb1
 8007f48:	08007f59 	.word	0x08007f59
 8007f4c:	08007f67 	.word	0x08007f67
 8007f50:	08007f73 	.word	0x08007f73
 8007f54:	08007f7b 	.word	0x08007f7b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	431a      	orrs	r2, r3
 8007f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f62:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8007f64:	e027      	b.n	8007fb6 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f6a:	1c5a      	adds	r2, r3, #1
 8007f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8007f70:	e021      	b.n	8007fb6 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f74:	68ba      	ldr	r2, [r7, #8]
 8007f76:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8007f78:	e01d      	b.n	8007fb6 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007f7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d003      	beq.n	8007f8a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f84:	68ba      	ldr	r2, [r7, #8]
 8007f86:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007f88:	e015      	b.n	8007fb6 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8007f8e:	e012      	b.n	8007fb6 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f98:	d00c      	beq.n	8007fb4 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8007f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9e:	f383 8811 	msr	BASEPRI, r3
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	f3bf 8f4f 	dsb	sy
 8007faa:	61bb      	str	r3, [r7, #24]
}
 8007fac:	bf00      	nop
 8007fae:	e7fe      	b.n	8007fae <xTaskGenericNotifyFromISR+0xea>
					break;
 8007fb0:	bf00      	nop
 8007fb2:	e000      	b.n	8007fb6 <xTaskGenericNotifyFromISR+0xf2>
					break;
 8007fb4:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007fb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d145      	bne.n	800804a <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00a      	beq.n	8007fdc <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8007fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fca:	f383 8811 	msr	BASEPRI, r3
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	f3bf 8f4f 	dsb	sy
 8007fd6:	617b      	str	r3, [r7, #20]
}
 8007fd8:	bf00      	nop
 8007fda:	e7fe      	b.n	8007fda <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fdc:	4b20      	ldr	r3, [pc, #128]	; (8008060 <xTaskGenericNotifyFromISR+0x19c>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d11c      	bne.n	800801e <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe6:	3304      	adds	r3, #4
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7fd febb 	bl	8005d64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	409a      	lsls	r2, r3
 8007ff6:	4b1b      	ldr	r3, [pc, #108]	; (8008064 <xTaskGenericNotifyFromISR+0x1a0>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	4a19      	ldr	r2, [pc, #100]	; (8008064 <xTaskGenericNotifyFromISR+0x1a0>)
 8007ffe:	6013      	str	r3, [r2, #0]
 8008000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008004:	4613      	mov	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	4a16      	ldr	r2, [pc, #88]	; (8008068 <xTaskGenericNotifyFromISR+0x1a4>)
 800800e:	441a      	add	r2, r3
 8008010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008012:	3304      	adds	r3, #4
 8008014:	4619      	mov	r1, r3
 8008016:	4610      	mov	r0, r2
 8008018:	f7fd fe47 	bl	8005caa <vListInsertEnd>
 800801c:	e005      	b.n	800802a <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800801e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008020:	3318      	adds	r3, #24
 8008022:	4619      	mov	r1, r3
 8008024:	4811      	ldr	r0, [pc, #68]	; (800806c <xTaskGenericNotifyFromISR+0x1a8>)
 8008026:	f7fd fe40 	bl	8005caa <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800802a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800802e:	4b10      	ldr	r3, [pc, #64]	; (8008070 <xTaskGenericNotifyFromISR+0x1ac>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008034:	429a      	cmp	r2, r3
 8008036:	d908      	bls.n	800804a <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8008038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800803a:	2b00      	cmp	r3, #0
 800803c:	d002      	beq.n	8008044 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800803e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008040:	2201      	movs	r2, #1
 8008042:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8008044:	4b0b      	ldr	r3, [pc, #44]	; (8008074 <xTaskGenericNotifyFromISR+0x1b0>)
 8008046:	2201      	movs	r2, #1
 8008048:	601a      	str	r2, [r3, #0]
 800804a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800804c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	f383 8811 	msr	BASEPRI, r3
}
 8008054:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8008056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8008058:	4618      	mov	r0, r3
 800805a:	3738      	adds	r7, #56	; 0x38
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	20000734 	.word	0x20000734
 8008064:	20000714 	.word	0x20000714
 8008068:	20000610 	.word	0x20000610
 800806c:	200006cc 	.word	0x200006cc
 8008070:	2000060c 	.word	0x2000060c
 8008074:	20000720 	.word	0x20000720

08008078 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008082:	4b29      	ldr	r3, [pc, #164]	; (8008128 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008088:	4b28      	ldr	r3, [pc, #160]	; (800812c <prvAddCurrentTaskToDelayedList+0xb4>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	3304      	adds	r3, #4
 800808e:	4618      	mov	r0, r3
 8008090:	f7fd fe68 	bl	8005d64 <uxListRemove>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d10b      	bne.n	80080b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800809a:	4b24      	ldr	r3, [pc, #144]	; (800812c <prvAddCurrentTaskToDelayedList+0xb4>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a0:	2201      	movs	r2, #1
 80080a2:	fa02 f303 	lsl.w	r3, r2, r3
 80080a6:	43da      	mvns	r2, r3
 80080a8:	4b21      	ldr	r3, [pc, #132]	; (8008130 <prvAddCurrentTaskToDelayedList+0xb8>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4013      	ands	r3, r2
 80080ae:	4a20      	ldr	r2, [pc, #128]	; (8008130 <prvAddCurrentTaskToDelayedList+0xb8>)
 80080b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b8:	d10a      	bne.n	80080d0 <prvAddCurrentTaskToDelayedList+0x58>
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d007      	beq.n	80080d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080c0:	4b1a      	ldr	r3, [pc, #104]	; (800812c <prvAddCurrentTaskToDelayedList+0xb4>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	3304      	adds	r3, #4
 80080c6:	4619      	mov	r1, r3
 80080c8:	481a      	ldr	r0, [pc, #104]	; (8008134 <prvAddCurrentTaskToDelayedList+0xbc>)
 80080ca:	f7fd fdee 	bl	8005caa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80080ce:	e026      	b.n	800811e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4413      	add	r3, r2
 80080d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80080d8:	4b14      	ldr	r3, [pc, #80]	; (800812c <prvAddCurrentTaskToDelayedList+0xb4>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d209      	bcs.n	80080fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080e8:	4b13      	ldr	r3, [pc, #76]	; (8008138 <prvAddCurrentTaskToDelayedList+0xc0>)
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	4b0f      	ldr	r3, [pc, #60]	; (800812c <prvAddCurrentTaskToDelayedList+0xb4>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	3304      	adds	r3, #4
 80080f2:	4619      	mov	r1, r3
 80080f4:	4610      	mov	r0, r2
 80080f6:	f7fd fdfc 	bl	8005cf2 <vListInsert>
}
 80080fa:	e010      	b.n	800811e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080fc:	4b0f      	ldr	r3, [pc, #60]	; (800813c <prvAddCurrentTaskToDelayedList+0xc4>)
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	4b0a      	ldr	r3, [pc, #40]	; (800812c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	3304      	adds	r3, #4
 8008106:	4619      	mov	r1, r3
 8008108:	4610      	mov	r0, r2
 800810a:	f7fd fdf2 	bl	8005cf2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800810e:	4b0c      	ldr	r3, [pc, #48]	; (8008140 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68ba      	ldr	r2, [r7, #8]
 8008114:	429a      	cmp	r2, r3
 8008116:	d202      	bcs.n	800811e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008118:	4a09      	ldr	r2, [pc, #36]	; (8008140 <prvAddCurrentTaskToDelayedList+0xc8>)
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	6013      	str	r3, [r2, #0]
}
 800811e:	bf00      	nop
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	20000710 	.word	0x20000710
 800812c:	2000060c 	.word	0x2000060c
 8008130:	20000714 	.word	0x20000714
 8008134:	200006f8 	.word	0x200006f8
 8008138:	200006c8 	.word	0x200006c8
 800813c:	200006c4 	.word	0x200006c4
 8008140:	2000072c 	.word	0x2000072c

08008144 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008144:	b480      	push	{r7}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	3b04      	subs	r3, #4
 8008154:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800815c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	3b04      	subs	r3, #4
 8008162:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	f023 0201 	bic.w	r2, r3, #1
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	3b04      	subs	r3, #4
 8008172:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008174:	4a0c      	ldr	r2, [pc, #48]	; (80081a8 <pxPortInitialiseStack+0x64>)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	3b14      	subs	r3, #20
 800817e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	3b04      	subs	r3, #4
 800818a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f06f 0202 	mvn.w	r2, #2
 8008192:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	3b20      	subs	r3, #32
 8008198:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800819a:	68fb      	ldr	r3, [r7, #12]
}
 800819c:	4618      	mov	r0, r3
 800819e:	3714      	adds	r7, #20
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr
 80081a8:	080081ad 	.word	0x080081ad

080081ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80081b2:	2300      	movs	r3, #0
 80081b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80081b6:	4b12      	ldr	r3, [pc, #72]	; (8008200 <prvTaskExitError+0x54>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081be:	d00a      	beq.n	80081d6 <prvTaskExitError+0x2a>
	__asm volatile
 80081c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c4:	f383 8811 	msr	BASEPRI, r3
 80081c8:	f3bf 8f6f 	isb	sy
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	60fb      	str	r3, [r7, #12]
}
 80081d2:	bf00      	nop
 80081d4:	e7fe      	b.n	80081d4 <prvTaskExitError+0x28>
	__asm volatile
 80081d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081da:	f383 8811 	msr	BASEPRI, r3
 80081de:	f3bf 8f6f 	isb	sy
 80081e2:	f3bf 8f4f 	dsb	sy
 80081e6:	60bb      	str	r3, [r7, #8]
}
 80081e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80081ea:	bf00      	nop
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d0fc      	beq.n	80081ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80081f2:	bf00      	nop
 80081f4:	bf00      	nop
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr
 8008200:	2000000c 	.word	0x2000000c
	...

08008210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008210:	4b07      	ldr	r3, [pc, #28]	; (8008230 <pxCurrentTCBConst2>)
 8008212:	6819      	ldr	r1, [r3, #0]
 8008214:	6808      	ldr	r0, [r1, #0]
 8008216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800821a:	f380 8809 	msr	PSP, r0
 800821e:	f3bf 8f6f 	isb	sy
 8008222:	f04f 0000 	mov.w	r0, #0
 8008226:	f380 8811 	msr	BASEPRI, r0
 800822a:	4770      	bx	lr
 800822c:	f3af 8000 	nop.w

08008230 <pxCurrentTCBConst2>:
 8008230:	2000060c 	.word	0x2000060c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008234:	bf00      	nop
 8008236:	bf00      	nop

08008238 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008238:	4808      	ldr	r0, [pc, #32]	; (800825c <prvPortStartFirstTask+0x24>)
 800823a:	6800      	ldr	r0, [r0, #0]
 800823c:	6800      	ldr	r0, [r0, #0]
 800823e:	f380 8808 	msr	MSP, r0
 8008242:	f04f 0000 	mov.w	r0, #0
 8008246:	f380 8814 	msr	CONTROL, r0
 800824a:	b662      	cpsie	i
 800824c:	b661      	cpsie	f
 800824e:	f3bf 8f4f 	dsb	sy
 8008252:	f3bf 8f6f 	isb	sy
 8008256:	df00      	svc	0
 8008258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800825a:	bf00      	nop
 800825c:	e000ed08 	.word	0xe000ed08

08008260 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008266:	4b46      	ldr	r3, [pc, #280]	; (8008380 <xPortStartScheduler+0x120>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a46      	ldr	r2, [pc, #280]	; (8008384 <xPortStartScheduler+0x124>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d10a      	bne.n	8008286 <xPortStartScheduler+0x26>
	__asm volatile
 8008270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	613b      	str	r3, [r7, #16]
}
 8008282:	bf00      	nop
 8008284:	e7fe      	b.n	8008284 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008286:	4b3e      	ldr	r3, [pc, #248]	; (8008380 <xPortStartScheduler+0x120>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a3f      	ldr	r2, [pc, #252]	; (8008388 <xPortStartScheduler+0x128>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d10a      	bne.n	80082a6 <xPortStartScheduler+0x46>
	__asm volatile
 8008290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008294:	f383 8811 	msr	BASEPRI, r3
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	60fb      	str	r3, [r7, #12]
}
 80082a2:	bf00      	nop
 80082a4:	e7fe      	b.n	80082a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80082a6:	4b39      	ldr	r3, [pc, #228]	; (800838c <xPortStartScheduler+0x12c>)
 80082a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	22ff      	movs	r2, #255	; 0xff
 80082b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80082c0:	78fb      	ldrb	r3, [r7, #3]
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80082c8:	b2da      	uxtb	r2, r3
 80082ca:	4b31      	ldr	r3, [pc, #196]	; (8008390 <xPortStartScheduler+0x130>)
 80082cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80082ce:	4b31      	ldr	r3, [pc, #196]	; (8008394 <xPortStartScheduler+0x134>)
 80082d0:	2207      	movs	r2, #7
 80082d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082d4:	e009      	b.n	80082ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80082d6:	4b2f      	ldr	r3, [pc, #188]	; (8008394 <xPortStartScheduler+0x134>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	3b01      	subs	r3, #1
 80082dc:	4a2d      	ldr	r2, [pc, #180]	; (8008394 <xPortStartScheduler+0x134>)
 80082de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80082e0:	78fb      	ldrb	r3, [r7, #3]
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	005b      	lsls	r3, r3, #1
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082ea:	78fb      	ldrb	r3, [r7, #3]
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082f2:	2b80      	cmp	r3, #128	; 0x80
 80082f4:	d0ef      	beq.n	80082d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80082f6:	4b27      	ldr	r3, [pc, #156]	; (8008394 <xPortStartScheduler+0x134>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f1c3 0307 	rsb	r3, r3, #7
 80082fe:	2b04      	cmp	r3, #4
 8008300:	d00a      	beq.n	8008318 <xPortStartScheduler+0xb8>
	__asm volatile
 8008302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008306:	f383 8811 	msr	BASEPRI, r3
 800830a:	f3bf 8f6f 	isb	sy
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	60bb      	str	r3, [r7, #8]
}
 8008314:	bf00      	nop
 8008316:	e7fe      	b.n	8008316 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008318:	4b1e      	ldr	r3, [pc, #120]	; (8008394 <xPortStartScheduler+0x134>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	021b      	lsls	r3, r3, #8
 800831e:	4a1d      	ldr	r2, [pc, #116]	; (8008394 <xPortStartScheduler+0x134>)
 8008320:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008322:	4b1c      	ldr	r3, [pc, #112]	; (8008394 <xPortStartScheduler+0x134>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800832a:	4a1a      	ldr	r2, [pc, #104]	; (8008394 <xPortStartScheduler+0x134>)
 800832c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	b2da      	uxtb	r2, r3
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008336:	4b18      	ldr	r3, [pc, #96]	; (8008398 <xPortStartScheduler+0x138>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a17      	ldr	r2, [pc, #92]	; (8008398 <xPortStartScheduler+0x138>)
 800833c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008340:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008342:	4b15      	ldr	r3, [pc, #84]	; (8008398 <xPortStartScheduler+0x138>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a14      	ldr	r2, [pc, #80]	; (8008398 <xPortStartScheduler+0x138>)
 8008348:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800834c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800834e:	f000 f8dd 	bl	800850c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008352:	4b12      	ldr	r3, [pc, #72]	; (800839c <xPortStartScheduler+0x13c>)
 8008354:	2200      	movs	r2, #0
 8008356:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008358:	f000 f8fc 	bl	8008554 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800835c:	4b10      	ldr	r3, [pc, #64]	; (80083a0 <xPortStartScheduler+0x140>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a0f      	ldr	r2, [pc, #60]	; (80083a0 <xPortStartScheduler+0x140>)
 8008362:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008366:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008368:	f7ff ff66 	bl	8008238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800836c:	f7ff f8a2 	bl	80074b4 <vTaskSwitchContext>
	prvTaskExitError();
 8008370:	f7ff ff1c 	bl	80081ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3718      	adds	r7, #24
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	e000ed00 	.word	0xe000ed00
 8008384:	410fc271 	.word	0x410fc271
 8008388:	410fc270 	.word	0x410fc270
 800838c:	e000e400 	.word	0xe000e400
 8008390:	20000738 	.word	0x20000738
 8008394:	2000073c 	.word	0x2000073c
 8008398:	e000ed20 	.word	0xe000ed20
 800839c:	2000000c 	.word	0x2000000c
 80083a0:	e000ef34 	.word	0xe000ef34

080083a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
	__asm volatile
 80083aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ae:	f383 8811 	msr	BASEPRI, r3
 80083b2:	f3bf 8f6f 	isb	sy
 80083b6:	f3bf 8f4f 	dsb	sy
 80083ba:	607b      	str	r3, [r7, #4]
}
 80083bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80083be:	4b0f      	ldr	r3, [pc, #60]	; (80083fc <vPortEnterCritical+0x58>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	3301      	adds	r3, #1
 80083c4:	4a0d      	ldr	r2, [pc, #52]	; (80083fc <vPortEnterCritical+0x58>)
 80083c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80083c8:	4b0c      	ldr	r3, [pc, #48]	; (80083fc <vPortEnterCritical+0x58>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d10f      	bne.n	80083f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80083d0:	4b0b      	ldr	r3, [pc, #44]	; (8008400 <vPortEnterCritical+0x5c>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00a      	beq.n	80083f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80083da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083de:	f383 8811 	msr	BASEPRI, r3
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	f3bf 8f4f 	dsb	sy
 80083ea:	603b      	str	r3, [r7, #0]
}
 80083ec:	bf00      	nop
 80083ee:	e7fe      	b.n	80083ee <vPortEnterCritical+0x4a>
	}
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr
 80083fc:	2000000c 	.word	0x2000000c
 8008400:	e000ed04 	.word	0xe000ed04

08008404 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800840a:	4b12      	ldr	r3, [pc, #72]	; (8008454 <vPortExitCritical+0x50>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10a      	bne.n	8008428 <vPortExitCritical+0x24>
	__asm volatile
 8008412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	607b      	str	r3, [r7, #4]
}
 8008424:	bf00      	nop
 8008426:	e7fe      	b.n	8008426 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008428:	4b0a      	ldr	r3, [pc, #40]	; (8008454 <vPortExitCritical+0x50>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	3b01      	subs	r3, #1
 800842e:	4a09      	ldr	r2, [pc, #36]	; (8008454 <vPortExitCritical+0x50>)
 8008430:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008432:	4b08      	ldr	r3, [pc, #32]	; (8008454 <vPortExitCritical+0x50>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d105      	bne.n	8008446 <vPortExitCritical+0x42>
 800843a:	2300      	movs	r3, #0
 800843c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	f383 8811 	msr	BASEPRI, r3
}
 8008444:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008446:	bf00      	nop
 8008448:	370c      	adds	r7, #12
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	2000000c 	.word	0x2000000c
	...

08008460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008460:	f3ef 8009 	mrs	r0, PSP
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	4b15      	ldr	r3, [pc, #84]	; (80084c0 <pxCurrentTCBConst>)
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	f01e 0f10 	tst.w	lr, #16
 8008470:	bf08      	it	eq
 8008472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800847a:	6010      	str	r0, [r2, #0]
 800847c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008480:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008484:	f380 8811 	msr	BASEPRI, r0
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	f3bf 8f6f 	isb	sy
 8008490:	f7ff f810 	bl	80074b4 <vTaskSwitchContext>
 8008494:	f04f 0000 	mov.w	r0, #0
 8008498:	f380 8811 	msr	BASEPRI, r0
 800849c:	bc09      	pop	{r0, r3}
 800849e:	6819      	ldr	r1, [r3, #0]
 80084a0:	6808      	ldr	r0, [r1, #0]
 80084a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a6:	f01e 0f10 	tst.w	lr, #16
 80084aa:	bf08      	it	eq
 80084ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80084b0:	f380 8809 	msr	PSP, r0
 80084b4:	f3bf 8f6f 	isb	sy
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop
 80084bc:	f3af 8000 	nop.w

080084c0 <pxCurrentTCBConst>:
 80084c0:	2000060c 	.word	0x2000060c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80084c4:	bf00      	nop
 80084c6:	bf00      	nop

080084c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
	__asm volatile
 80084ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d2:	f383 8811 	msr	BASEPRI, r3
 80084d6:	f3bf 8f6f 	isb	sy
 80084da:	f3bf 8f4f 	dsb	sy
 80084de:	607b      	str	r3, [r7, #4]
}
 80084e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80084e2:	f7fe ff2f 	bl	8007344 <xTaskIncrementTick>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d003      	beq.n	80084f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80084ec:	4b06      	ldr	r3, [pc, #24]	; (8008508 <SysTick_Handler+0x40>)
 80084ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084f2:	601a      	str	r2, [r3, #0]
 80084f4:	2300      	movs	r3, #0
 80084f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	f383 8811 	msr	BASEPRI, r3
}
 80084fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008500:	bf00      	nop
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	e000ed04 	.word	0xe000ed04

0800850c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800850c:	b480      	push	{r7}
 800850e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008510:	4b0b      	ldr	r3, [pc, #44]	; (8008540 <vPortSetupTimerInterrupt+0x34>)
 8008512:	2200      	movs	r2, #0
 8008514:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008516:	4b0b      	ldr	r3, [pc, #44]	; (8008544 <vPortSetupTimerInterrupt+0x38>)
 8008518:	2200      	movs	r2, #0
 800851a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800851c:	4b0a      	ldr	r3, [pc, #40]	; (8008548 <vPortSetupTimerInterrupt+0x3c>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a0a      	ldr	r2, [pc, #40]	; (800854c <vPortSetupTimerInterrupt+0x40>)
 8008522:	fba2 2303 	umull	r2, r3, r2, r3
 8008526:	099b      	lsrs	r3, r3, #6
 8008528:	4a09      	ldr	r2, [pc, #36]	; (8008550 <vPortSetupTimerInterrupt+0x44>)
 800852a:	3b01      	subs	r3, #1
 800852c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800852e:	4b04      	ldr	r3, [pc, #16]	; (8008540 <vPortSetupTimerInterrupt+0x34>)
 8008530:	2207      	movs	r2, #7
 8008532:	601a      	str	r2, [r3, #0]
}
 8008534:	bf00      	nop
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop
 8008540:	e000e010 	.word	0xe000e010
 8008544:	e000e018 	.word	0xe000e018
 8008548:	20000000 	.word	0x20000000
 800854c:	10624dd3 	.word	0x10624dd3
 8008550:	e000e014 	.word	0xe000e014

08008554 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008554:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008564 <vPortEnableVFP+0x10>
 8008558:	6801      	ldr	r1, [r0, #0]
 800855a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800855e:	6001      	str	r1, [r0, #0]
 8008560:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008562:	bf00      	nop
 8008564:	e000ed88 	.word	0xe000ed88

08008568 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800856e:	f3ef 8305 	mrs	r3, IPSR
 8008572:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2b0f      	cmp	r3, #15
 8008578:	d914      	bls.n	80085a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800857a:	4a17      	ldr	r2, [pc, #92]	; (80085d8 <vPortValidateInterruptPriority+0x70>)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	4413      	add	r3, r2
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008584:	4b15      	ldr	r3, [pc, #84]	; (80085dc <vPortValidateInterruptPriority+0x74>)
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	7afa      	ldrb	r2, [r7, #11]
 800858a:	429a      	cmp	r2, r3
 800858c:	d20a      	bcs.n	80085a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800858e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008592:	f383 8811 	msr	BASEPRI, r3
 8008596:	f3bf 8f6f 	isb	sy
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	607b      	str	r3, [r7, #4]
}
 80085a0:	bf00      	nop
 80085a2:	e7fe      	b.n	80085a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80085a4:	4b0e      	ldr	r3, [pc, #56]	; (80085e0 <vPortValidateInterruptPriority+0x78>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80085ac:	4b0d      	ldr	r3, [pc, #52]	; (80085e4 <vPortValidateInterruptPriority+0x7c>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d90a      	bls.n	80085ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80085b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b8:	f383 8811 	msr	BASEPRI, r3
 80085bc:	f3bf 8f6f 	isb	sy
 80085c0:	f3bf 8f4f 	dsb	sy
 80085c4:	603b      	str	r3, [r7, #0]
}
 80085c6:	bf00      	nop
 80085c8:	e7fe      	b.n	80085c8 <vPortValidateInterruptPriority+0x60>
	}
 80085ca:	bf00      	nop
 80085cc:	3714      	adds	r7, #20
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop
 80085d8:	e000e3f0 	.word	0xe000e3f0
 80085dc:	20000738 	.word	0x20000738
 80085e0:	e000ed0c 	.word	0xe000ed0c
 80085e4:	2000073c 	.word	0x2000073c

080085e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b08a      	sub	sp, #40	; 0x28
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80085f0:	2300      	movs	r3, #0
 80085f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80085f4:	f7fe fdda 	bl	80071ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80085f8:	4b5b      	ldr	r3, [pc, #364]	; (8008768 <pvPortMalloc+0x180>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d101      	bne.n	8008604 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008600:	f000 f920 	bl	8008844 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008604:	4b59      	ldr	r3, [pc, #356]	; (800876c <pvPortMalloc+0x184>)
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4013      	ands	r3, r2
 800860c:	2b00      	cmp	r3, #0
 800860e:	f040 8093 	bne.w	8008738 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d01d      	beq.n	8008654 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008618:	2208      	movs	r2, #8
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4413      	add	r3, r2
 800861e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f003 0307 	and.w	r3, r3, #7
 8008626:	2b00      	cmp	r3, #0
 8008628:	d014      	beq.n	8008654 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f023 0307 	bic.w	r3, r3, #7
 8008630:	3308      	adds	r3, #8
 8008632:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f003 0307 	and.w	r3, r3, #7
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00a      	beq.n	8008654 <pvPortMalloc+0x6c>
	__asm volatile
 800863e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008642:	f383 8811 	msr	BASEPRI, r3
 8008646:	f3bf 8f6f 	isb	sy
 800864a:	f3bf 8f4f 	dsb	sy
 800864e:	617b      	str	r3, [r7, #20]
}
 8008650:	bf00      	nop
 8008652:	e7fe      	b.n	8008652 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d06e      	beq.n	8008738 <pvPortMalloc+0x150>
 800865a:	4b45      	ldr	r3, [pc, #276]	; (8008770 <pvPortMalloc+0x188>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	429a      	cmp	r2, r3
 8008662:	d869      	bhi.n	8008738 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008664:	4b43      	ldr	r3, [pc, #268]	; (8008774 <pvPortMalloc+0x18c>)
 8008666:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008668:	4b42      	ldr	r3, [pc, #264]	; (8008774 <pvPortMalloc+0x18c>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800866e:	e004      	b.n	800867a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008672:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800867a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	429a      	cmp	r2, r3
 8008682:	d903      	bls.n	800868c <pvPortMalloc+0xa4>
 8008684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d1f1      	bne.n	8008670 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800868c:	4b36      	ldr	r3, [pc, #216]	; (8008768 <pvPortMalloc+0x180>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008692:	429a      	cmp	r2, r3
 8008694:	d050      	beq.n	8008738 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008696:	6a3b      	ldr	r3, [r7, #32]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2208      	movs	r2, #8
 800869c:	4413      	add	r3, r2
 800869e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80086a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	6a3b      	ldr	r3, [r7, #32]
 80086a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80086a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086aa:	685a      	ldr	r2, [r3, #4]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	1ad2      	subs	r2, r2, r3
 80086b0:	2308      	movs	r3, #8
 80086b2:	005b      	lsls	r3, r3, #1
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d91f      	bls.n	80086f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80086b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4413      	add	r3, r2
 80086be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	f003 0307 	and.w	r3, r3, #7
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00a      	beq.n	80086e0 <pvPortMalloc+0xf8>
	__asm volatile
 80086ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ce:	f383 8811 	msr	BASEPRI, r3
 80086d2:	f3bf 8f6f 	isb	sy
 80086d6:	f3bf 8f4f 	dsb	sy
 80086da:	613b      	str	r3, [r7, #16]
}
 80086dc:	bf00      	nop
 80086de:	e7fe      	b.n	80086de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80086e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e2:	685a      	ldr	r2, [r3, #4]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	1ad2      	subs	r2, r2, r3
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80086ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80086f2:	69b8      	ldr	r0, [r7, #24]
 80086f4:	f000 f908 	bl	8008908 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80086f8:	4b1d      	ldr	r3, [pc, #116]	; (8008770 <pvPortMalloc+0x188>)
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	4a1b      	ldr	r2, [pc, #108]	; (8008770 <pvPortMalloc+0x188>)
 8008704:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008706:	4b1a      	ldr	r3, [pc, #104]	; (8008770 <pvPortMalloc+0x188>)
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	4b1b      	ldr	r3, [pc, #108]	; (8008778 <pvPortMalloc+0x190>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	429a      	cmp	r2, r3
 8008710:	d203      	bcs.n	800871a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008712:	4b17      	ldr	r3, [pc, #92]	; (8008770 <pvPortMalloc+0x188>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a18      	ldr	r2, [pc, #96]	; (8008778 <pvPortMalloc+0x190>)
 8008718:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800871a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871c:	685a      	ldr	r2, [r3, #4]
 800871e:	4b13      	ldr	r3, [pc, #76]	; (800876c <pvPortMalloc+0x184>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	431a      	orrs	r2, r3
 8008724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008726:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872a:	2200      	movs	r2, #0
 800872c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800872e:	4b13      	ldr	r3, [pc, #76]	; (800877c <pvPortMalloc+0x194>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	3301      	adds	r3, #1
 8008734:	4a11      	ldr	r2, [pc, #68]	; (800877c <pvPortMalloc+0x194>)
 8008736:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008738:	f7fe fd46 	bl	80071c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	f003 0307 	and.w	r3, r3, #7
 8008742:	2b00      	cmp	r3, #0
 8008744:	d00a      	beq.n	800875c <pvPortMalloc+0x174>
	__asm volatile
 8008746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874a:	f383 8811 	msr	BASEPRI, r3
 800874e:	f3bf 8f6f 	isb	sy
 8008752:	f3bf 8f4f 	dsb	sy
 8008756:	60fb      	str	r3, [r7, #12]
}
 8008758:	bf00      	nop
 800875a:	e7fe      	b.n	800875a <pvPortMalloc+0x172>
	return pvReturn;
 800875c:	69fb      	ldr	r3, [r7, #28]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3728      	adds	r7, #40	; 0x28
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	20004348 	.word	0x20004348
 800876c:	2000435c 	.word	0x2000435c
 8008770:	2000434c 	.word	0x2000434c
 8008774:	20004340 	.word	0x20004340
 8008778:	20004350 	.word	0x20004350
 800877c:	20004354 	.word	0x20004354

08008780 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d04d      	beq.n	800882e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008792:	2308      	movs	r3, #8
 8008794:	425b      	negs	r3, r3
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	4413      	add	r3, r2
 800879a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	685a      	ldr	r2, [r3, #4]
 80087a4:	4b24      	ldr	r3, [pc, #144]	; (8008838 <vPortFree+0xb8>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4013      	ands	r3, r2
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10a      	bne.n	80087c4 <vPortFree+0x44>
	__asm volatile
 80087ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b2:	f383 8811 	msr	BASEPRI, r3
 80087b6:	f3bf 8f6f 	isb	sy
 80087ba:	f3bf 8f4f 	dsb	sy
 80087be:	60fb      	str	r3, [r7, #12]
}
 80087c0:	bf00      	nop
 80087c2:	e7fe      	b.n	80087c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00a      	beq.n	80087e2 <vPortFree+0x62>
	__asm volatile
 80087cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d0:	f383 8811 	msr	BASEPRI, r3
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	60bb      	str	r3, [r7, #8]
}
 80087de:	bf00      	nop
 80087e0:	e7fe      	b.n	80087e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	685a      	ldr	r2, [r3, #4]
 80087e6:	4b14      	ldr	r3, [pc, #80]	; (8008838 <vPortFree+0xb8>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4013      	ands	r3, r2
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d01e      	beq.n	800882e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d11a      	bne.n	800882e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	685a      	ldr	r2, [r3, #4]
 80087fc:	4b0e      	ldr	r3, [pc, #56]	; (8008838 <vPortFree+0xb8>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	43db      	mvns	r3, r3
 8008802:	401a      	ands	r2, r3
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008808:	f7fe fcd0 	bl	80071ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	685a      	ldr	r2, [r3, #4]
 8008810:	4b0a      	ldr	r3, [pc, #40]	; (800883c <vPortFree+0xbc>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4413      	add	r3, r2
 8008816:	4a09      	ldr	r2, [pc, #36]	; (800883c <vPortFree+0xbc>)
 8008818:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800881a:	6938      	ldr	r0, [r7, #16]
 800881c:	f000 f874 	bl	8008908 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008820:	4b07      	ldr	r3, [pc, #28]	; (8008840 <vPortFree+0xc0>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	3301      	adds	r3, #1
 8008826:	4a06      	ldr	r2, [pc, #24]	; (8008840 <vPortFree+0xc0>)
 8008828:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800882a:	f7fe fccd 	bl	80071c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800882e:	bf00      	nop
 8008830:	3718      	adds	r7, #24
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	2000435c 	.word	0x2000435c
 800883c:	2000434c 	.word	0x2000434c
 8008840:	20004358 	.word	0x20004358

08008844 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008844:	b480      	push	{r7}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800884a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800884e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008850:	4b27      	ldr	r3, [pc, #156]	; (80088f0 <prvHeapInit+0xac>)
 8008852:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f003 0307 	and.w	r3, r3, #7
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00c      	beq.n	8008878 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	3307      	adds	r3, #7
 8008862:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f023 0307 	bic.w	r3, r3, #7
 800886a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	4a1f      	ldr	r2, [pc, #124]	; (80088f0 <prvHeapInit+0xac>)
 8008874:	4413      	add	r3, r2
 8008876:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800887c:	4a1d      	ldr	r2, [pc, #116]	; (80088f4 <prvHeapInit+0xb0>)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008882:	4b1c      	ldr	r3, [pc, #112]	; (80088f4 <prvHeapInit+0xb0>)
 8008884:	2200      	movs	r2, #0
 8008886:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	4413      	add	r3, r2
 800888e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008890:	2208      	movs	r2, #8
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	1a9b      	subs	r3, r3, r2
 8008896:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f023 0307 	bic.w	r3, r3, #7
 800889e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	4a15      	ldr	r2, [pc, #84]	; (80088f8 <prvHeapInit+0xb4>)
 80088a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80088a6:	4b14      	ldr	r3, [pc, #80]	; (80088f8 <prvHeapInit+0xb4>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2200      	movs	r2, #0
 80088ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80088ae:	4b12      	ldr	r3, [pc, #72]	; (80088f8 <prvHeapInit+0xb4>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2200      	movs	r2, #0
 80088b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	1ad2      	subs	r2, r2, r3
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80088c4:	4b0c      	ldr	r3, [pc, #48]	; (80088f8 <prvHeapInit+0xb4>)
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	4a0a      	ldr	r2, [pc, #40]	; (80088fc <prvHeapInit+0xb8>)
 80088d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	4a09      	ldr	r2, [pc, #36]	; (8008900 <prvHeapInit+0xbc>)
 80088da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80088dc:	4b09      	ldr	r3, [pc, #36]	; (8008904 <prvHeapInit+0xc0>)
 80088de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80088e2:	601a      	str	r2, [r3, #0]
}
 80088e4:	bf00      	nop
 80088e6:	3714      	adds	r7, #20
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr
 80088f0:	20000740 	.word	0x20000740
 80088f4:	20004340 	.word	0x20004340
 80088f8:	20004348 	.word	0x20004348
 80088fc:	20004350 	.word	0x20004350
 8008900:	2000434c 	.word	0x2000434c
 8008904:	2000435c 	.word	0x2000435c

08008908 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008908:	b480      	push	{r7}
 800890a:	b085      	sub	sp, #20
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008910:	4b28      	ldr	r3, [pc, #160]	; (80089b4 <prvInsertBlockIntoFreeList+0xac>)
 8008912:	60fb      	str	r3, [r7, #12]
 8008914:	e002      	b.n	800891c <prvInsertBlockIntoFreeList+0x14>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	60fb      	str	r3, [r7, #12]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	429a      	cmp	r2, r3
 8008924:	d8f7      	bhi.n	8008916 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	4413      	add	r3, r2
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	429a      	cmp	r2, r3
 8008936:	d108      	bne.n	800894a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	685a      	ldr	r2, [r3, #4]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	441a      	add	r2, r3
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	68ba      	ldr	r2, [r7, #8]
 8008954:	441a      	add	r2, r3
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	429a      	cmp	r2, r3
 800895c:	d118      	bne.n	8008990 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	4b15      	ldr	r3, [pc, #84]	; (80089b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	429a      	cmp	r2, r3
 8008968:	d00d      	beq.n	8008986 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	685a      	ldr	r2, [r3, #4]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	441a      	add	r2, r3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	601a      	str	r2, [r3, #0]
 8008984:	e008      	b.n	8008998 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008986:	4b0c      	ldr	r3, [pc, #48]	; (80089b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	601a      	str	r2, [r3, #0]
 800898e:	e003      	b.n	8008998 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	429a      	cmp	r2, r3
 800899e:	d002      	beq.n	80089a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089a6:	bf00      	nop
 80089a8:	3714      	adds	r7, #20
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	20004340 	.word	0x20004340
 80089b8:	20004348 	.word	0x20004348

080089bc <__errno>:
 80089bc:	4b01      	ldr	r3, [pc, #4]	; (80089c4 <__errno+0x8>)
 80089be:	6818      	ldr	r0, [r3, #0]
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	20000010 	.word	0x20000010

080089c8 <__libc_init_array>:
 80089c8:	b570      	push	{r4, r5, r6, lr}
 80089ca:	4d0d      	ldr	r5, [pc, #52]	; (8008a00 <__libc_init_array+0x38>)
 80089cc:	4c0d      	ldr	r4, [pc, #52]	; (8008a04 <__libc_init_array+0x3c>)
 80089ce:	1b64      	subs	r4, r4, r5
 80089d0:	10a4      	asrs	r4, r4, #2
 80089d2:	2600      	movs	r6, #0
 80089d4:	42a6      	cmp	r6, r4
 80089d6:	d109      	bne.n	80089ec <__libc_init_array+0x24>
 80089d8:	4d0b      	ldr	r5, [pc, #44]	; (8008a08 <__libc_init_array+0x40>)
 80089da:	4c0c      	ldr	r4, [pc, #48]	; (8008a0c <__libc_init_array+0x44>)
 80089dc:	f002 ff02 	bl	800b7e4 <_init>
 80089e0:	1b64      	subs	r4, r4, r5
 80089e2:	10a4      	asrs	r4, r4, #2
 80089e4:	2600      	movs	r6, #0
 80089e6:	42a6      	cmp	r6, r4
 80089e8:	d105      	bne.n	80089f6 <__libc_init_array+0x2e>
 80089ea:	bd70      	pop	{r4, r5, r6, pc}
 80089ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80089f0:	4798      	blx	r3
 80089f2:	3601      	adds	r6, #1
 80089f4:	e7ee      	b.n	80089d4 <__libc_init_array+0xc>
 80089f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80089fa:	4798      	blx	r3
 80089fc:	3601      	adds	r6, #1
 80089fe:	e7f2      	b.n	80089e6 <__libc_init_array+0x1e>
 8008a00:	0800bf44 	.word	0x0800bf44
 8008a04:	0800bf44 	.word	0x0800bf44
 8008a08:	0800bf44 	.word	0x0800bf44
 8008a0c:	0800bf48 	.word	0x0800bf48

08008a10 <memcpy>:
 8008a10:	440a      	add	r2, r1
 8008a12:	4291      	cmp	r1, r2
 8008a14:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a18:	d100      	bne.n	8008a1c <memcpy+0xc>
 8008a1a:	4770      	bx	lr
 8008a1c:	b510      	push	{r4, lr}
 8008a1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a26:	4291      	cmp	r1, r2
 8008a28:	d1f9      	bne.n	8008a1e <memcpy+0xe>
 8008a2a:	bd10      	pop	{r4, pc}

08008a2c <memset>:
 8008a2c:	4402      	add	r2, r0
 8008a2e:	4603      	mov	r3, r0
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d100      	bne.n	8008a36 <memset+0xa>
 8008a34:	4770      	bx	lr
 8008a36:	f803 1b01 	strb.w	r1, [r3], #1
 8008a3a:	e7f9      	b.n	8008a30 <memset+0x4>

08008a3c <__cvt>:
 8008a3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a40:	ec55 4b10 	vmov	r4, r5, d0
 8008a44:	2d00      	cmp	r5, #0
 8008a46:	460e      	mov	r6, r1
 8008a48:	4619      	mov	r1, r3
 8008a4a:	462b      	mov	r3, r5
 8008a4c:	bfbb      	ittet	lt
 8008a4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008a52:	461d      	movlt	r5, r3
 8008a54:	2300      	movge	r3, #0
 8008a56:	232d      	movlt	r3, #45	; 0x2d
 8008a58:	700b      	strb	r3, [r1, #0]
 8008a5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008a60:	4691      	mov	r9, r2
 8008a62:	f023 0820 	bic.w	r8, r3, #32
 8008a66:	bfbc      	itt	lt
 8008a68:	4622      	movlt	r2, r4
 8008a6a:	4614      	movlt	r4, r2
 8008a6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a70:	d005      	beq.n	8008a7e <__cvt+0x42>
 8008a72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008a76:	d100      	bne.n	8008a7a <__cvt+0x3e>
 8008a78:	3601      	adds	r6, #1
 8008a7a:	2102      	movs	r1, #2
 8008a7c:	e000      	b.n	8008a80 <__cvt+0x44>
 8008a7e:	2103      	movs	r1, #3
 8008a80:	ab03      	add	r3, sp, #12
 8008a82:	9301      	str	r3, [sp, #4]
 8008a84:	ab02      	add	r3, sp, #8
 8008a86:	9300      	str	r3, [sp, #0]
 8008a88:	ec45 4b10 	vmov	d0, r4, r5
 8008a8c:	4653      	mov	r3, sl
 8008a8e:	4632      	mov	r2, r6
 8008a90:	f000 fcea 	bl	8009468 <_dtoa_r>
 8008a94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008a98:	4607      	mov	r7, r0
 8008a9a:	d102      	bne.n	8008aa2 <__cvt+0x66>
 8008a9c:	f019 0f01 	tst.w	r9, #1
 8008aa0:	d022      	beq.n	8008ae8 <__cvt+0xac>
 8008aa2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008aa6:	eb07 0906 	add.w	r9, r7, r6
 8008aaa:	d110      	bne.n	8008ace <__cvt+0x92>
 8008aac:	783b      	ldrb	r3, [r7, #0]
 8008aae:	2b30      	cmp	r3, #48	; 0x30
 8008ab0:	d10a      	bne.n	8008ac8 <__cvt+0x8c>
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	4629      	mov	r1, r5
 8008aba:	f7f8 f81d 	bl	8000af8 <__aeabi_dcmpeq>
 8008abe:	b918      	cbnz	r0, 8008ac8 <__cvt+0x8c>
 8008ac0:	f1c6 0601 	rsb	r6, r6, #1
 8008ac4:	f8ca 6000 	str.w	r6, [sl]
 8008ac8:	f8da 3000 	ldr.w	r3, [sl]
 8008acc:	4499      	add	r9, r3
 8008ace:	2200      	movs	r2, #0
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	4629      	mov	r1, r5
 8008ad6:	f7f8 f80f 	bl	8000af8 <__aeabi_dcmpeq>
 8008ada:	b108      	cbz	r0, 8008ae0 <__cvt+0xa4>
 8008adc:	f8cd 900c 	str.w	r9, [sp, #12]
 8008ae0:	2230      	movs	r2, #48	; 0x30
 8008ae2:	9b03      	ldr	r3, [sp, #12]
 8008ae4:	454b      	cmp	r3, r9
 8008ae6:	d307      	bcc.n	8008af8 <__cvt+0xbc>
 8008ae8:	9b03      	ldr	r3, [sp, #12]
 8008aea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008aec:	1bdb      	subs	r3, r3, r7
 8008aee:	4638      	mov	r0, r7
 8008af0:	6013      	str	r3, [r2, #0]
 8008af2:	b004      	add	sp, #16
 8008af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008af8:	1c59      	adds	r1, r3, #1
 8008afa:	9103      	str	r1, [sp, #12]
 8008afc:	701a      	strb	r2, [r3, #0]
 8008afe:	e7f0      	b.n	8008ae2 <__cvt+0xa6>

08008b00 <__exponent>:
 8008b00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b02:	4603      	mov	r3, r0
 8008b04:	2900      	cmp	r1, #0
 8008b06:	bfb8      	it	lt
 8008b08:	4249      	neglt	r1, r1
 8008b0a:	f803 2b02 	strb.w	r2, [r3], #2
 8008b0e:	bfb4      	ite	lt
 8008b10:	222d      	movlt	r2, #45	; 0x2d
 8008b12:	222b      	movge	r2, #43	; 0x2b
 8008b14:	2909      	cmp	r1, #9
 8008b16:	7042      	strb	r2, [r0, #1]
 8008b18:	dd2a      	ble.n	8008b70 <__exponent+0x70>
 8008b1a:	f10d 0407 	add.w	r4, sp, #7
 8008b1e:	46a4      	mov	ip, r4
 8008b20:	270a      	movs	r7, #10
 8008b22:	46a6      	mov	lr, r4
 8008b24:	460a      	mov	r2, r1
 8008b26:	fb91 f6f7 	sdiv	r6, r1, r7
 8008b2a:	fb07 1516 	mls	r5, r7, r6, r1
 8008b2e:	3530      	adds	r5, #48	; 0x30
 8008b30:	2a63      	cmp	r2, #99	; 0x63
 8008b32:	f104 34ff 	add.w	r4, r4, #4294967295
 8008b36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008b3a:	4631      	mov	r1, r6
 8008b3c:	dcf1      	bgt.n	8008b22 <__exponent+0x22>
 8008b3e:	3130      	adds	r1, #48	; 0x30
 8008b40:	f1ae 0502 	sub.w	r5, lr, #2
 8008b44:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008b48:	1c44      	adds	r4, r0, #1
 8008b4a:	4629      	mov	r1, r5
 8008b4c:	4561      	cmp	r1, ip
 8008b4e:	d30a      	bcc.n	8008b66 <__exponent+0x66>
 8008b50:	f10d 0209 	add.w	r2, sp, #9
 8008b54:	eba2 020e 	sub.w	r2, r2, lr
 8008b58:	4565      	cmp	r5, ip
 8008b5a:	bf88      	it	hi
 8008b5c:	2200      	movhi	r2, #0
 8008b5e:	4413      	add	r3, r2
 8008b60:	1a18      	subs	r0, r3, r0
 8008b62:	b003      	add	sp, #12
 8008b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b6a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008b6e:	e7ed      	b.n	8008b4c <__exponent+0x4c>
 8008b70:	2330      	movs	r3, #48	; 0x30
 8008b72:	3130      	adds	r1, #48	; 0x30
 8008b74:	7083      	strb	r3, [r0, #2]
 8008b76:	70c1      	strb	r1, [r0, #3]
 8008b78:	1d03      	adds	r3, r0, #4
 8008b7a:	e7f1      	b.n	8008b60 <__exponent+0x60>

08008b7c <_printf_float>:
 8008b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b80:	ed2d 8b02 	vpush	{d8}
 8008b84:	b08d      	sub	sp, #52	; 0x34
 8008b86:	460c      	mov	r4, r1
 8008b88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008b8c:	4616      	mov	r6, r2
 8008b8e:	461f      	mov	r7, r3
 8008b90:	4605      	mov	r5, r0
 8008b92:	f001 fa57 	bl	800a044 <_localeconv_r>
 8008b96:	f8d0 a000 	ldr.w	sl, [r0]
 8008b9a:	4650      	mov	r0, sl
 8008b9c:	f7f7 fb2a 	bl	80001f4 <strlen>
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	930a      	str	r3, [sp, #40]	; 0x28
 8008ba4:	6823      	ldr	r3, [r4, #0]
 8008ba6:	9305      	str	r3, [sp, #20]
 8008ba8:	f8d8 3000 	ldr.w	r3, [r8]
 8008bac:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008bb0:	3307      	adds	r3, #7
 8008bb2:	f023 0307 	bic.w	r3, r3, #7
 8008bb6:	f103 0208 	add.w	r2, r3, #8
 8008bba:	f8c8 2000 	str.w	r2, [r8]
 8008bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008bc6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008bca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008bce:	9307      	str	r3, [sp, #28]
 8008bd0:	f8cd 8018 	str.w	r8, [sp, #24]
 8008bd4:	ee08 0a10 	vmov	s16, r0
 8008bd8:	4b9f      	ldr	r3, [pc, #636]	; (8008e58 <_printf_float+0x2dc>)
 8008bda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bde:	f04f 32ff 	mov.w	r2, #4294967295
 8008be2:	f7f7 ffbb 	bl	8000b5c <__aeabi_dcmpun>
 8008be6:	bb88      	cbnz	r0, 8008c4c <_printf_float+0xd0>
 8008be8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bec:	4b9a      	ldr	r3, [pc, #616]	; (8008e58 <_printf_float+0x2dc>)
 8008bee:	f04f 32ff 	mov.w	r2, #4294967295
 8008bf2:	f7f7 ff95 	bl	8000b20 <__aeabi_dcmple>
 8008bf6:	bb48      	cbnz	r0, 8008c4c <_printf_float+0xd0>
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	4640      	mov	r0, r8
 8008bfe:	4649      	mov	r1, r9
 8008c00:	f7f7 ff84 	bl	8000b0c <__aeabi_dcmplt>
 8008c04:	b110      	cbz	r0, 8008c0c <_printf_float+0x90>
 8008c06:	232d      	movs	r3, #45	; 0x2d
 8008c08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c0c:	4b93      	ldr	r3, [pc, #588]	; (8008e5c <_printf_float+0x2e0>)
 8008c0e:	4894      	ldr	r0, [pc, #592]	; (8008e60 <_printf_float+0x2e4>)
 8008c10:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008c14:	bf94      	ite	ls
 8008c16:	4698      	movls	r8, r3
 8008c18:	4680      	movhi	r8, r0
 8008c1a:	2303      	movs	r3, #3
 8008c1c:	6123      	str	r3, [r4, #16]
 8008c1e:	9b05      	ldr	r3, [sp, #20]
 8008c20:	f023 0204 	bic.w	r2, r3, #4
 8008c24:	6022      	str	r2, [r4, #0]
 8008c26:	f04f 0900 	mov.w	r9, #0
 8008c2a:	9700      	str	r7, [sp, #0]
 8008c2c:	4633      	mov	r3, r6
 8008c2e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008c30:	4621      	mov	r1, r4
 8008c32:	4628      	mov	r0, r5
 8008c34:	f000 f9d8 	bl	8008fe8 <_printf_common>
 8008c38:	3001      	adds	r0, #1
 8008c3a:	f040 8090 	bne.w	8008d5e <_printf_float+0x1e2>
 8008c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c42:	b00d      	add	sp, #52	; 0x34
 8008c44:	ecbd 8b02 	vpop	{d8}
 8008c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c4c:	4642      	mov	r2, r8
 8008c4e:	464b      	mov	r3, r9
 8008c50:	4640      	mov	r0, r8
 8008c52:	4649      	mov	r1, r9
 8008c54:	f7f7 ff82 	bl	8000b5c <__aeabi_dcmpun>
 8008c58:	b140      	cbz	r0, 8008c6c <_printf_float+0xf0>
 8008c5a:	464b      	mov	r3, r9
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	bfbc      	itt	lt
 8008c60:	232d      	movlt	r3, #45	; 0x2d
 8008c62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008c66:	487f      	ldr	r0, [pc, #508]	; (8008e64 <_printf_float+0x2e8>)
 8008c68:	4b7f      	ldr	r3, [pc, #508]	; (8008e68 <_printf_float+0x2ec>)
 8008c6a:	e7d1      	b.n	8008c10 <_printf_float+0x94>
 8008c6c:	6863      	ldr	r3, [r4, #4]
 8008c6e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008c72:	9206      	str	r2, [sp, #24]
 8008c74:	1c5a      	adds	r2, r3, #1
 8008c76:	d13f      	bne.n	8008cf8 <_printf_float+0x17c>
 8008c78:	2306      	movs	r3, #6
 8008c7a:	6063      	str	r3, [r4, #4]
 8008c7c:	9b05      	ldr	r3, [sp, #20]
 8008c7e:	6861      	ldr	r1, [r4, #4]
 8008c80:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008c84:	2300      	movs	r3, #0
 8008c86:	9303      	str	r3, [sp, #12]
 8008c88:	ab0a      	add	r3, sp, #40	; 0x28
 8008c8a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008c8e:	ab09      	add	r3, sp, #36	; 0x24
 8008c90:	ec49 8b10 	vmov	d0, r8, r9
 8008c94:	9300      	str	r3, [sp, #0]
 8008c96:	6022      	str	r2, [r4, #0]
 8008c98:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	f7ff fecd 	bl	8008a3c <__cvt>
 8008ca2:	9b06      	ldr	r3, [sp, #24]
 8008ca4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ca6:	2b47      	cmp	r3, #71	; 0x47
 8008ca8:	4680      	mov	r8, r0
 8008caa:	d108      	bne.n	8008cbe <_printf_float+0x142>
 8008cac:	1cc8      	adds	r0, r1, #3
 8008cae:	db02      	blt.n	8008cb6 <_printf_float+0x13a>
 8008cb0:	6863      	ldr	r3, [r4, #4]
 8008cb2:	4299      	cmp	r1, r3
 8008cb4:	dd41      	ble.n	8008d3a <_printf_float+0x1be>
 8008cb6:	f1ab 0b02 	sub.w	fp, fp, #2
 8008cba:	fa5f fb8b 	uxtb.w	fp, fp
 8008cbe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008cc2:	d820      	bhi.n	8008d06 <_printf_float+0x18a>
 8008cc4:	3901      	subs	r1, #1
 8008cc6:	465a      	mov	r2, fp
 8008cc8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008ccc:	9109      	str	r1, [sp, #36]	; 0x24
 8008cce:	f7ff ff17 	bl	8008b00 <__exponent>
 8008cd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cd4:	1813      	adds	r3, r2, r0
 8008cd6:	2a01      	cmp	r2, #1
 8008cd8:	4681      	mov	r9, r0
 8008cda:	6123      	str	r3, [r4, #16]
 8008cdc:	dc02      	bgt.n	8008ce4 <_printf_float+0x168>
 8008cde:	6822      	ldr	r2, [r4, #0]
 8008ce0:	07d2      	lsls	r2, r2, #31
 8008ce2:	d501      	bpl.n	8008ce8 <_printf_float+0x16c>
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	6123      	str	r3, [r4, #16]
 8008ce8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d09c      	beq.n	8008c2a <_printf_float+0xae>
 8008cf0:	232d      	movs	r3, #45	; 0x2d
 8008cf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cf6:	e798      	b.n	8008c2a <_printf_float+0xae>
 8008cf8:	9a06      	ldr	r2, [sp, #24]
 8008cfa:	2a47      	cmp	r2, #71	; 0x47
 8008cfc:	d1be      	bne.n	8008c7c <_printf_float+0x100>
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d1bc      	bne.n	8008c7c <_printf_float+0x100>
 8008d02:	2301      	movs	r3, #1
 8008d04:	e7b9      	b.n	8008c7a <_printf_float+0xfe>
 8008d06:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008d0a:	d118      	bne.n	8008d3e <_printf_float+0x1c2>
 8008d0c:	2900      	cmp	r1, #0
 8008d0e:	6863      	ldr	r3, [r4, #4]
 8008d10:	dd0b      	ble.n	8008d2a <_printf_float+0x1ae>
 8008d12:	6121      	str	r1, [r4, #16]
 8008d14:	b913      	cbnz	r3, 8008d1c <_printf_float+0x1a0>
 8008d16:	6822      	ldr	r2, [r4, #0]
 8008d18:	07d0      	lsls	r0, r2, #31
 8008d1a:	d502      	bpl.n	8008d22 <_printf_float+0x1a6>
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	440b      	add	r3, r1
 8008d20:	6123      	str	r3, [r4, #16]
 8008d22:	65a1      	str	r1, [r4, #88]	; 0x58
 8008d24:	f04f 0900 	mov.w	r9, #0
 8008d28:	e7de      	b.n	8008ce8 <_printf_float+0x16c>
 8008d2a:	b913      	cbnz	r3, 8008d32 <_printf_float+0x1b6>
 8008d2c:	6822      	ldr	r2, [r4, #0]
 8008d2e:	07d2      	lsls	r2, r2, #31
 8008d30:	d501      	bpl.n	8008d36 <_printf_float+0x1ba>
 8008d32:	3302      	adds	r3, #2
 8008d34:	e7f4      	b.n	8008d20 <_printf_float+0x1a4>
 8008d36:	2301      	movs	r3, #1
 8008d38:	e7f2      	b.n	8008d20 <_printf_float+0x1a4>
 8008d3a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d40:	4299      	cmp	r1, r3
 8008d42:	db05      	blt.n	8008d50 <_printf_float+0x1d4>
 8008d44:	6823      	ldr	r3, [r4, #0]
 8008d46:	6121      	str	r1, [r4, #16]
 8008d48:	07d8      	lsls	r0, r3, #31
 8008d4a:	d5ea      	bpl.n	8008d22 <_printf_float+0x1a6>
 8008d4c:	1c4b      	adds	r3, r1, #1
 8008d4e:	e7e7      	b.n	8008d20 <_printf_float+0x1a4>
 8008d50:	2900      	cmp	r1, #0
 8008d52:	bfd4      	ite	le
 8008d54:	f1c1 0202 	rsble	r2, r1, #2
 8008d58:	2201      	movgt	r2, #1
 8008d5a:	4413      	add	r3, r2
 8008d5c:	e7e0      	b.n	8008d20 <_printf_float+0x1a4>
 8008d5e:	6823      	ldr	r3, [r4, #0]
 8008d60:	055a      	lsls	r2, r3, #21
 8008d62:	d407      	bmi.n	8008d74 <_printf_float+0x1f8>
 8008d64:	6923      	ldr	r3, [r4, #16]
 8008d66:	4642      	mov	r2, r8
 8008d68:	4631      	mov	r1, r6
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	47b8      	blx	r7
 8008d6e:	3001      	adds	r0, #1
 8008d70:	d12c      	bne.n	8008dcc <_printf_float+0x250>
 8008d72:	e764      	b.n	8008c3e <_printf_float+0xc2>
 8008d74:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008d78:	f240 80e0 	bls.w	8008f3c <_printf_float+0x3c0>
 8008d7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d80:	2200      	movs	r2, #0
 8008d82:	2300      	movs	r3, #0
 8008d84:	f7f7 feb8 	bl	8000af8 <__aeabi_dcmpeq>
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	d034      	beq.n	8008df6 <_printf_float+0x27a>
 8008d8c:	4a37      	ldr	r2, [pc, #220]	; (8008e6c <_printf_float+0x2f0>)
 8008d8e:	2301      	movs	r3, #1
 8008d90:	4631      	mov	r1, r6
 8008d92:	4628      	mov	r0, r5
 8008d94:	47b8      	blx	r7
 8008d96:	3001      	adds	r0, #1
 8008d98:	f43f af51 	beq.w	8008c3e <_printf_float+0xc2>
 8008d9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008da0:	429a      	cmp	r2, r3
 8008da2:	db02      	blt.n	8008daa <_printf_float+0x22e>
 8008da4:	6823      	ldr	r3, [r4, #0]
 8008da6:	07d8      	lsls	r0, r3, #31
 8008da8:	d510      	bpl.n	8008dcc <_printf_float+0x250>
 8008daa:	ee18 3a10 	vmov	r3, s16
 8008dae:	4652      	mov	r2, sl
 8008db0:	4631      	mov	r1, r6
 8008db2:	4628      	mov	r0, r5
 8008db4:	47b8      	blx	r7
 8008db6:	3001      	adds	r0, #1
 8008db8:	f43f af41 	beq.w	8008c3e <_printf_float+0xc2>
 8008dbc:	f04f 0800 	mov.w	r8, #0
 8008dc0:	f104 091a 	add.w	r9, r4, #26
 8008dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	4543      	cmp	r3, r8
 8008dca:	dc09      	bgt.n	8008de0 <_printf_float+0x264>
 8008dcc:	6823      	ldr	r3, [r4, #0]
 8008dce:	079b      	lsls	r3, r3, #30
 8008dd0:	f100 8105 	bmi.w	8008fde <_printf_float+0x462>
 8008dd4:	68e0      	ldr	r0, [r4, #12]
 8008dd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dd8:	4298      	cmp	r0, r3
 8008dda:	bfb8      	it	lt
 8008ddc:	4618      	movlt	r0, r3
 8008dde:	e730      	b.n	8008c42 <_printf_float+0xc6>
 8008de0:	2301      	movs	r3, #1
 8008de2:	464a      	mov	r2, r9
 8008de4:	4631      	mov	r1, r6
 8008de6:	4628      	mov	r0, r5
 8008de8:	47b8      	blx	r7
 8008dea:	3001      	adds	r0, #1
 8008dec:	f43f af27 	beq.w	8008c3e <_printf_float+0xc2>
 8008df0:	f108 0801 	add.w	r8, r8, #1
 8008df4:	e7e6      	b.n	8008dc4 <_printf_float+0x248>
 8008df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	dc39      	bgt.n	8008e70 <_printf_float+0x2f4>
 8008dfc:	4a1b      	ldr	r2, [pc, #108]	; (8008e6c <_printf_float+0x2f0>)
 8008dfe:	2301      	movs	r3, #1
 8008e00:	4631      	mov	r1, r6
 8008e02:	4628      	mov	r0, r5
 8008e04:	47b8      	blx	r7
 8008e06:	3001      	adds	r0, #1
 8008e08:	f43f af19 	beq.w	8008c3e <_printf_float+0xc2>
 8008e0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e10:	4313      	orrs	r3, r2
 8008e12:	d102      	bne.n	8008e1a <_printf_float+0x29e>
 8008e14:	6823      	ldr	r3, [r4, #0]
 8008e16:	07d9      	lsls	r1, r3, #31
 8008e18:	d5d8      	bpl.n	8008dcc <_printf_float+0x250>
 8008e1a:	ee18 3a10 	vmov	r3, s16
 8008e1e:	4652      	mov	r2, sl
 8008e20:	4631      	mov	r1, r6
 8008e22:	4628      	mov	r0, r5
 8008e24:	47b8      	blx	r7
 8008e26:	3001      	adds	r0, #1
 8008e28:	f43f af09 	beq.w	8008c3e <_printf_float+0xc2>
 8008e2c:	f04f 0900 	mov.w	r9, #0
 8008e30:	f104 0a1a 	add.w	sl, r4, #26
 8008e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e36:	425b      	negs	r3, r3
 8008e38:	454b      	cmp	r3, r9
 8008e3a:	dc01      	bgt.n	8008e40 <_printf_float+0x2c4>
 8008e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e3e:	e792      	b.n	8008d66 <_printf_float+0x1ea>
 8008e40:	2301      	movs	r3, #1
 8008e42:	4652      	mov	r2, sl
 8008e44:	4631      	mov	r1, r6
 8008e46:	4628      	mov	r0, r5
 8008e48:	47b8      	blx	r7
 8008e4a:	3001      	adds	r0, #1
 8008e4c:	f43f aef7 	beq.w	8008c3e <_printf_float+0xc2>
 8008e50:	f109 0901 	add.w	r9, r9, #1
 8008e54:	e7ee      	b.n	8008e34 <_printf_float+0x2b8>
 8008e56:	bf00      	nop
 8008e58:	7fefffff 	.word	0x7fefffff
 8008e5c:	0800bb64 	.word	0x0800bb64
 8008e60:	0800bb68 	.word	0x0800bb68
 8008e64:	0800bb70 	.word	0x0800bb70
 8008e68:	0800bb6c 	.word	0x0800bb6c
 8008e6c:	0800bb74 	.word	0x0800bb74
 8008e70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e74:	429a      	cmp	r2, r3
 8008e76:	bfa8      	it	ge
 8008e78:	461a      	movge	r2, r3
 8008e7a:	2a00      	cmp	r2, #0
 8008e7c:	4691      	mov	r9, r2
 8008e7e:	dc37      	bgt.n	8008ef0 <_printf_float+0x374>
 8008e80:	f04f 0b00 	mov.w	fp, #0
 8008e84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e88:	f104 021a 	add.w	r2, r4, #26
 8008e8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e8e:	9305      	str	r3, [sp, #20]
 8008e90:	eba3 0309 	sub.w	r3, r3, r9
 8008e94:	455b      	cmp	r3, fp
 8008e96:	dc33      	bgt.n	8008f00 <_printf_float+0x384>
 8008e98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	db3b      	blt.n	8008f18 <_printf_float+0x39c>
 8008ea0:	6823      	ldr	r3, [r4, #0]
 8008ea2:	07da      	lsls	r2, r3, #31
 8008ea4:	d438      	bmi.n	8008f18 <_printf_float+0x39c>
 8008ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ea8:	9a05      	ldr	r2, [sp, #20]
 8008eaa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008eac:	1a9a      	subs	r2, r3, r2
 8008eae:	eba3 0901 	sub.w	r9, r3, r1
 8008eb2:	4591      	cmp	r9, r2
 8008eb4:	bfa8      	it	ge
 8008eb6:	4691      	movge	r9, r2
 8008eb8:	f1b9 0f00 	cmp.w	r9, #0
 8008ebc:	dc35      	bgt.n	8008f2a <_printf_float+0x3ae>
 8008ebe:	f04f 0800 	mov.w	r8, #0
 8008ec2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ec6:	f104 0a1a 	add.w	sl, r4, #26
 8008eca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ece:	1a9b      	subs	r3, r3, r2
 8008ed0:	eba3 0309 	sub.w	r3, r3, r9
 8008ed4:	4543      	cmp	r3, r8
 8008ed6:	f77f af79 	ble.w	8008dcc <_printf_float+0x250>
 8008eda:	2301      	movs	r3, #1
 8008edc:	4652      	mov	r2, sl
 8008ede:	4631      	mov	r1, r6
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	47b8      	blx	r7
 8008ee4:	3001      	adds	r0, #1
 8008ee6:	f43f aeaa 	beq.w	8008c3e <_printf_float+0xc2>
 8008eea:	f108 0801 	add.w	r8, r8, #1
 8008eee:	e7ec      	b.n	8008eca <_printf_float+0x34e>
 8008ef0:	4613      	mov	r3, r2
 8008ef2:	4631      	mov	r1, r6
 8008ef4:	4642      	mov	r2, r8
 8008ef6:	4628      	mov	r0, r5
 8008ef8:	47b8      	blx	r7
 8008efa:	3001      	adds	r0, #1
 8008efc:	d1c0      	bne.n	8008e80 <_printf_float+0x304>
 8008efe:	e69e      	b.n	8008c3e <_printf_float+0xc2>
 8008f00:	2301      	movs	r3, #1
 8008f02:	4631      	mov	r1, r6
 8008f04:	4628      	mov	r0, r5
 8008f06:	9205      	str	r2, [sp, #20]
 8008f08:	47b8      	blx	r7
 8008f0a:	3001      	adds	r0, #1
 8008f0c:	f43f ae97 	beq.w	8008c3e <_printf_float+0xc2>
 8008f10:	9a05      	ldr	r2, [sp, #20]
 8008f12:	f10b 0b01 	add.w	fp, fp, #1
 8008f16:	e7b9      	b.n	8008e8c <_printf_float+0x310>
 8008f18:	ee18 3a10 	vmov	r3, s16
 8008f1c:	4652      	mov	r2, sl
 8008f1e:	4631      	mov	r1, r6
 8008f20:	4628      	mov	r0, r5
 8008f22:	47b8      	blx	r7
 8008f24:	3001      	adds	r0, #1
 8008f26:	d1be      	bne.n	8008ea6 <_printf_float+0x32a>
 8008f28:	e689      	b.n	8008c3e <_printf_float+0xc2>
 8008f2a:	9a05      	ldr	r2, [sp, #20]
 8008f2c:	464b      	mov	r3, r9
 8008f2e:	4442      	add	r2, r8
 8008f30:	4631      	mov	r1, r6
 8008f32:	4628      	mov	r0, r5
 8008f34:	47b8      	blx	r7
 8008f36:	3001      	adds	r0, #1
 8008f38:	d1c1      	bne.n	8008ebe <_printf_float+0x342>
 8008f3a:	e680      	b.n	8008c3e <_printf_float+0xc2>
 8008f3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f3e:	2a01      	cmp	r2, #1
 8008f40:	dc01      	bgt.n	8008f46 <_printf_float+0x3ca>
 8008f42:	07db      	lsls	r3, r3, #31
 8008f44:	d538      	bpl.n	8008fb8 <_printf_float+0x43c>
 8008f46:	2301      	movs	r3, #1
 8008f48:	4642      	mov	r2, r8
 8008f4a:	4631      	mov	r1, r6
 8008f4c:	4628      	mov	r0, r5
 8008f4e:	47b8      	blx	r7
 8008f50:	3001      	adds	r0, #1
 8008f52:	f43f ae74 	beq.w	8008c3e <_printf_float+0xc2>
 8008f56:	ee18 3a10 	vmov	r3, s16
 8008f5a:	4652      	mov	r2, sl
 8008f5c:	4631      	mov	r1, r6
 8008f5e:	4628      	mov	r0, r5
 8008f60:	47b8      	blx	r7
 8008f62:	3001      	adds	r0, #1
 8008f64:	f43f ae6b 	beq.w	8008c3e <_printf_float+0xc2>
 8008f68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	2300      	movs	r3, #0
 8008f70:	f7f7 fdc2 	bl	8000af8 <__aeabi_dcmpeq>
 8008f74:	b9d8      	cbnz	r0, 8008fae <_printf_float+0x432>
 8008f76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f78:	f108 0201 	add.w	r2, r8, #1
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	4631      	mov	r1, r6
 8008f80:	4628      	mov	r0, r5
 8008f82:	47b8      	blx	r7
 8008f84:	3001      	adds	r0, #1
 8008f86:	d10e      	bne.n	8008fa6 <_printf_float+0x42a>
 8008f88:	e659      	b.n	8008c3e <_printf_float+0xc2>
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	4652      	mov	r2, sl
 8008f8e:	4631      	mov	r1, r6
 8008f90:	4628      	mov	r0, r5
 8008f92:	47b8      	blx	r7
 8008f94:	3001      	adds	r0, #1
 8008f96:	f43f ae52 	beq.w	8008c3e <_printf_float+0xc2>
 8008f9a:	f108 0801 	add.w	r8, r8, #1
 8008f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	4543      	cmp	r3, r8
 8008fa4:	dcf1      	bgt.n	8008f8a <_printf_float+0x40e>
 8008fa6:	464b      	mov	r3, r9
 8008fa8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008fac:	e6dc      	b.n	8008d68 <_printf_float+0x1ec>
 8008fae:	f04f 0800 	mov.w	r8, #0
 8008fb2:	f104 0a1a 	add.w	sl, r4, #26
 8008fb6:	e7f2      	b.n	8008f9e <_printf_float+0x422>
 8008fb8:	2301      	movs	r3, #1
 8008fba:	4642      	mov	r2, r8
 8008fbc:	e7df      	b.n	8008f7e <_printf_float+0x402>
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	464a      	mov	r2, r9
 8008fc2:	4631      	mov	r1, r6
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	47b8      	blx	r7
 8008fc8:	3001      	adds	r0, #1
 8008fca:	f43f ae38 	beq.w	8008c3e <_printf_float+0xc2>
 8008fce:	f108 0801 	add.w	r8, r8, #1
 8008fd2:	68e3      	ldr	r3, [r4, #12]
 8008fd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008fd6:	1a5b      	subs	r3, r3, r1
 8008fd8:	4543      	cmp	r3, r8
 8008fda:	dcf0      	bgt.n	8008fbe <_printf_float+0x442>
 8008fdc:	e6fa      	b.n	8008dd4 <_printf_float+0x258>
 8008fde:	f04f 0800 	mov.w	r8, #0
 8008fe2:	f104 0919 	add.w	r9, r4, #25
 8008fe6:	e7f4      	b.n	8008fd2 <_printf_float+0x456>

08008fe8 <_printf_common>:
 8008fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fec:	4616      	mov	r6, r2
 8008fee:	4699      	mov	r9, r3
 8008ff0:	688a      	ldr	r2, [r1, #8]
 8008ff2:	690b      	ldr	r3, [r1, #16]
 8008ff4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	bfb8      	it	lt
 8008ffc:	4613      	movlt	r3, r2
 8008ffe:	6033      	str	r3, [r6, #0]
 8009000:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009004:	4607      	mov	r7, r0
 8009006:	460c      	mov	r4, r1
 8009008:	b10a      	cbz	r2, 800900e <_printf_common+0x26>
 800900a:	3301      	adds	r3, #1
 800900c:	6033      	str	r3, [r6, #0]
 800900e:	6823      	ldr	r3, [r4, #0]
 8009010:	0699      	lsls	r1, r3, #26
 8009012:	bf42      	ittt	mi
 8009014:	6833      	ldrmi	r3, [r6, #0]
 8009016:	3302      	addmi	r3, #2
 8009018:	6033      	strmi	r3, [r6, #0]
 800901a:	6825      	ldr	r5, [r4, #0]
 800901c:	f015 0506 	ands.w	r5, r5, #6
 8009020:	d106      	bne.n	8009030 <_printf_common+0x48>
 8009022:	f104 0a19 	add.w	sl, r4, #25
 8009026:	68e3      	ldr	r3, [r4, #12]
 8009028:	6832      	ldr	r2, [r6, #0]
 800902a:	1a9b      	subs	r3, r3, r2
 800902c:	42ab      	cmp	r3, r5
 800902e:	dc26      	bgt.n	800907e <_printf_common+0x96>
 8009030:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009034:	1e13      	subs	r3, r2, #0
 8009036:	6822      	ldr	r2, [r4, #0]
 8009038:	bf18      	it	ne
 800903a:	2301      	movne	r3, #1
 800903c:	0692      	lsls	r2, r2, #26
 800903e:	d42b      	bmi.n	8009098 <_printf_common+0xb0>
 8009040:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009044:	4649      	mov	r1, r9
 8009046:	4638      	mov	r0, r7
 8009048:	47c0      	blx	r8
 800904a:	3001      	adds	r0, #1
 800904c:	d01e      	beq.n	800908c <_printf_common+0xa4>
 800904e:	6823      	ldr	r3, [r4, #0]
 8009050:	68e5      	ldr	r5, [r4, #12]
 8009052:	6832      	ldr	r2, [r6, #0]
 8009054:	f003 0306 	and.w	r3, r3, #6
 8009058:	2b04      	cmp	r3, #4
 800905a:	bf08      	it	eq
 800905c:	1aad      	subeq	r5, r5, r2
 800905e:	68a3      	ldr	r3, [r4, #8]
 8009060:	6922      	ldr	r2, [r4, #16]
 8009062:	bf0c      	ite	eq
 8009064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009068:	2500      	movne	r5, #0
 800906a:	4293      	cmp	r3, r2
 800906c:	bfc4      	itt	gt
 800906e:	1a9b      	subgt	r3, r3, r2
 8009070:	18ed      	addgt	r5, r5, r3
 8009072:	2600      	movs	r6, #0
 8009074:	341a      	adds	r4, #26
 8009076:	42b5      	cmp	r5, r6
 8009078:	d11a      	bne.n	80090b0 <_printf_common+0xc8>
 800907a:	2000      	movs	r0, #0
 800907c:	e008      	b.n	8009090 <_printf_common+0xa8>
 800907e:	2301      	movs	r3, #1
 8009080:	4652      	mov	r2, sl
 8009082:	4649      	mov	r1, r9
 8009084:	4638      	mov	r0, r7
 8009086:	47c0      	blx	r8
 8009088:	3001      	adds	r0, #1
 800908a:	d103      	bne.n	8009094 <_printf_common+0xac>
 800908c:	f04f 30ff 	mov.w	r0, #4294967295
 8009090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009094:	3501      	adds	r5, #1
 8009096:	e7c6      	b.n	8009026 <_printf_common+0x3e>
 8009098:	18e1      	adds	r1, r4, r3
 800909a:	1c5a      	adds	r2, r3, #1
 800909c:	2030      	movs	r0, #48	; 0x30
 800909e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090a2:	4422      	add	r2, r4
 80090a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090ac:	3302      	adds	r3, #2
 80090ae:	e7c7      	b.n	8009040 <_printf_common+0x58>
 80090b0:	2301      	movs	r3, #1
 80090b2:	4622      	mov	r2, r4
 80090b4:	4649      	mov	r1, r9
 80090b6:	4638      	mov	r0, r7
 80090b8:	47c0      	blx	r8
 80090ba:	3001      	adds	r0, #1
 80090bc:	d0e6      	beq.n	800908c <_printf_common+0xa4>
 80090be:	3601      	adds	r6, #1
 80090c0:	e7d9      	b.n	8009076 <_printf_common+0x8e>
	...

080090c4 <_printf_i>:
 80090c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090c8:	7e0f      	ldrb	r7, [r1, #24]
 80090ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80090cc:	2f78      	cmp	r7, #120	; 0x78
 80090ce:	4691      	mov	r9, r2
 80090d0:	4680      	mov	r8, r0
 80090d2:	460c      	mov	r4, r1
 80090d4:	469a      	mov	sl, r3
 80090d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80090da:	d807      	bhi.n	80090ec <_printf_i+0x28>
 80090dc:	2f62      	cmp	r7, #98	; 0x62
 80090de:	d80a      	bhi.n	80090f6 <_printf_i+0x32>
 80090e0:	2f00      	cmp	r7, #0
 80090e2:	f000 80d8 	beq.w	8009296 <_printf_i+0x1d2>
 80090e6:	2f58      	cmp	r7, #88	; 0x58
 80090e8:	f000 80a3 	beq.w	8009232 <_printf_i+0x16e>
 80090ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80090f4:	e03a      	b.n	800916c <_printf_i+0xa8>
 80090f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80090fa:	2b15      	cmp	r3, #21
 80090fc:	d8f6      	bhi.n	80090ec <_printf_i+0x28>
 80090fe:	a101      	add	r1, pc, #4	; (adr r1, 8009104 <_printf_i+0x40>)
 8009100:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009104:	0800915d 	.word	0x0800915d
 8009108:	08009171 	.word	0x08009171
 800910c:	080090ed 	.word	0x080090ed
 8009110:	080090ed 	.word	0x080090ed
 8009114:	080090ed 	.word	0x080090ed
 8009118:	080090ed 	.word	0x080090ed
 800911c:	08009171 	.word	0x08009171
 8009120:	080090ed 	.word	0x080090ed
 8009124:	080090ed 	.word	0x080090ed
 8009128:	080090ed 	.word	0x080090ed
 800912c:	080090ed 	.word	0x080090ed
 8009130:	0800927d 	.word	0x0800927d
 8009134:	080091a1 	.word	0x080091a1
 8009138:	0800925f 	.word	0x0800925f
 800913c:	080090ed 	.word	0x080090ed
 8009140:	080090ed 	.word	0x080090ed
 8009144:	0800929f 	.word	0x0800929f
 8009148:	080090ed 	.word	0x080090ed
 800914c:	080091a1 	.word	0x080091a1
 8009150:	080090ed 	.word	0x080090ed
 8009154:	080090ed 	.word	0x080090ed
 8009158:	08009267 	.word	0x08009267
 800915c:	682b      	ldr	r3, [r5, #0]
 800915e:	1d1a      	adds	r2, r3, #4
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	602a      	str	r2, [r5, #0]
 8009164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009168:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800916c:	2301      	movs	r3, #1
 800916e:	e0a3      	b.n	80092b8 <_printf_i+0x1f4>
 8009170:	6820      	ldr	r0, [r4, #0]
 8009172:	6829      	ldr	r1, [r5, #0]
 8009174:	0606      	lsls	r6, r0, #24
 8009176:	f101 0304 	add.w	r3, r1, #4
 800917a:	d50a      	bpl.n	8009192 <_printf_i+0xce>
 800917c:	680e      	ldr	r6, [r1, #0]
 800917e:	602b      	str	r3, [r5, #0]
 8009180:	2e00      	cmp	r6, #0
 8009182:	da03      	bge.n	800918c <_printf_i+0xc8>
 8009184:	232d      	movs	r3, #45	; 0x2d
 8009186:	4276      	negs	r6, r6
 8009188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800918c:	485e      	ldr	r0, [pc, #376]	; (8009308 <_printf_i+0x244>)
 800918e:	230a      	movs	r3, #10
 8009190:	e019      	b.n	80091c6 <_printf_i+0x102>
 8009192:	680e      	ldr	r6, [r1, #0]
 8009194:	602b      	str	r3, [r5, #0]
 8009196:	f010 0f40 	tst.w	r0, #64	; 0x40
 800919a:	bf18      	it	ne
 800919c:	b236      	sxthne	r6, r6
 800919e:	e7ef      	b.n	8009180 <_printf_i+0xbc>
 80091a0:	682b      	ldr	r3, [r5, #0]
 80091a2:	6820      	ldr	r0, [r4, #0]
 80091a4:	1d19      	adds	r1, r3, #4
 80091a6:	6029      	str	r1, [r5, #0]
 80091a8:	0601      	lsls	r1, r0, #24
 80091aa:	d501      	bpl.n	80091b0 <_printf_i+0xec>
 80091ac:	681e      	ldr	r6, [r3, #0]
 80091ae:	e002      	b.n	80091b6 <_printf_i+0xf2>
 80091b0:	0646      	lsls	r6, r0, #25
 80091b2:	d5fb      	bpl.n	80091ac <_printf_i+0xe8>
 80091b4:	881e      	ldrh	r6, [r3, #0]
 80091b6:	4854      	ldr	r0, [pc, #336]	; (8009308 <_printf_i+0x244>)
 80091b8:	2f6f      	cmp	r7, #111	; 0x6f
 80091ba:	bf0c      	ite	eq
 80091bc:	2308      	moveq	r3, #8
 80091be:	230a      	movne	r3, #10
 80091c0:	2100      	movs	r1, #0
 80091c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80091c6:	6865      	ldr	r5, [r4, #4]
 80091c8:	60a5      	str	r5, [r4, #8]
 80091ca:	2d00      	cmp	r5, #0
 80091cc:	bfa2      	ittt	ge
 80091ce:	6821      	ldrge	r1, [r4, #0]
 80091d0:	f021 0104 	bicge.w	r1, r1, #4
 80091d4:	6021      	strge	r1, [r4, #0]
 80091d6:	b90e      	cbnz	r6, 80091dc <_printf_i+0x118>
 80091d8:	2d00      	cmp	r5, #0
 80091da:	d04d      	beq.n	8009278 <_printf_i+0x1b4>
 80091dc:	4615      	mov	r5, r2
 80091de:	fbb6 f1f3 	udiv	r1, r6, r3
 80091e2:	fb03 6711 	mls	r7, r3, r1, r6
 80091e6:	5dc7      	ldrb	r7, [r0, r7]
 80091e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80091ec:	4637      	mov	r7, r6
 80091ee:	42bb      	cmp	r3, r7
 80091f0:	460e      	mov	r6, r1
 80091f2:	d9f4      	bls.n	80091de <_printf_i+0x11a>
 80091f4:	2b08      	cmp	r3, #8
 80091f6:	d10b      	bne.n	8009210 <_printf_i+0x14c>
 80091f8:	6823      	ldr	r3, [r4, #0]
 80091fa:	07de      	lsls	r6, r3, #31
 80091fc:	d508      	bpl.n	8009210 <_printf_i+0x14c>
 80091fe:	6923      	ldr	r3, [r4, #16]
 8009200:	6861      	ldr	r1, [r4, #4]
 8009202:	4299      	cmp	r1, r3
 8009204:	bfde      	ittt	le
 8009206:	2330      	movle	r3, #48	; 0x30
 8009208:	f805 3c01 	strble.w	r3, [r5, #-1]
 800920c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009210:	1b52      	subs	r2, r2, r5
 8009212:	6122      	str	r2, [r4, #16]
 8009214:	f8cd a000 	str.w	sl, [sp]
 8009218:	464b      	mov	r3, r9
 800921a:	aa03      	add	r2, sp, #12
 800921c:	4621      	mov	r1, r4
 800921e:	4640      	mov	r0, r8
 8009220:	f7ff fee2 	bl	8008fe8 <_printf_common>
 8009224:	3001      	adds	r0, #1
 8009226:	d14c      	bne.n	80092c2 <_printf_i+0x1fe>
 8009228:	f04f 30ff 	mov.w	r0, #4294967295
 800922c:	b004      	add	sp, #16
 800922e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009232:	4835      	ldr	r0, [pc, #212]	; (8009308 <_printf_i+0x244>)
 8009234:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009238:	6829      	ldr	r1, [r5, #0]
 800923a:	6823      	ldr	r3, [r4, #0]
 800923c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009240:	6029      	str	r1, [r5, #0]
 8009242:	061d      	lsls	r5, r3, #24
 8009244:	d514      	bpl.n	8009270 <_printf_i+0x1ac>
 8009246:	07df      	lsls	r7, r3, #31
 8009248:	bf44      	itt	mi
 800924a:	f043 0320 	orrmi.w	r3, r3, #32
 800924e:	6023      	strmi	r3, [r4, #0]
 8009250:	b91e      	cbnz	r6, 800925a <_printf_i+0x196>
 8009252:	6823      	ldr	r3, [r4, #0]
 8009254:	f023 0320 	bic.w	r3, r3, #32
 8009258:	6023      	str	r3, [r4, #0]
 800925a:	2310      	movs	r3, #16
 800925c:	e7b0      	b.n	80091c0 <_printf_i+0xfc>
 800925e:	6823      	ldr	r3, [r4, #0]
 8009260:	f043 0320 	orr.w	r3, r3, #32
 8009264:	6023      	str	r3, [r4, #0]
 8009266:	2378      	movs	r3, #120	; 0x78
 8009268:	4828      	ldr	r0, [pc, #160]	; (800930c <_printf_i+0x248>)
 800926a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800926e:	e7e3      	b.n	8009238 <_printf_i+0x174>
 8009270:	0659      	lsls	r1, r3, #25
 8009272:	bf48      	it	mi
 8009274:	b2b6      	uxthmi	r6, r6
 8009276:	e7e6      	b.n	8009246 <_printf_i+0x182>
 8009278:	4615      	mov	r5, r2
 800927a:	e7bb      	b.n	80091f4 <_printf_i+0x130>
 800927c:	682b      	ldr	r3, [r5, #0]
 800927e:	6826      	ldr	r6, [r4, #0]
 8009280:	6961      	ldr	r1, [r4, #20]
 8009282:	1d18      	adds	r0, r3, #4
 8009284:	6028      	str	r0, [r5, #0]
 8009286:	0635      	lsls	r5, r6, #24
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	d501      	bpl.n	8009290 <_printf_i+0x1cc>
 800928c:	6019      	str	r1, [r3, #0]
 800928e:	e002      	b.n	8009296 <_printf_i+0x1d2>
 8009290:	0670      	lsls	r0, r6, #25
 8009292:	d5fb      	bpl.n	800928c <_printf_i+0x1c8>
 8009294:	8019      	strh	r1, [r3, #0]
 8009296:	2300      	movs	r3, #0
 8009298:	6123      	str	r3, [r4, #16]
 800929a:	4615      	mov	r5, r2
 800929c:	e7ba      	b.n	8009214 <_printf_i+0x150>
 800929e:	682b      	ldr	r3, [r5, #0]
 80092a0:	1d1a      	adds	r2, r3, #4
 80092a2:	602a      	str	r2, [r5, #0]
 80092a4:	681d      	ldr	r5, [r3, #0]
 80092a6:	6862      	ldr	r2, [r4, #4]
 80092a8:	2100      	movs	r1, #0
 80092aa:	4628      	mov	r0, r5
 80092ac:	f7f6 ffb0 	bl	8000210 <memchr>
 80092b0:	b108      	cbz	r0, 80092b6 <_printf_i+0x1f2>
 80092b2:	1b40      	subs	r0, r0, r5
 80092b4:	6060      	str	r0, [r4, #4]
 80092b6:	6863      	ldr	r3, [r4, #4]
 80092b8:	6123      	str	r3, [r4, #16]
 80092ba:	2300      	movs	r3, #0
 80092bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092c0:	e7a8      	b.n	8009214 <_printf_i+0x150>
 80092c2:	6923      	ldr	r3, [r4, #16]
 80092c4:	462a      	mov	r2, r5
 80092c6:	4649      	mov	r1, r9
 80092c8:	4640      	mov	r0, r8
 80092ca:	47d0      	blx	sl
 80092cc:	3001      	adds	r0, #1
 80092ce:	d0ab      	beq.n	8009228 <_printf_i+0x164>
 80092d0:	6823      	ldr	r3, [r4, #0]
 80092d2:	079b      	lsls	r3, r3, #30
 80092d4:	d413      	bmi.n	80092fe <_printf_i+0x23a>
 80092d6:	68e0      	ldr	r0, [r4, #12]
 80092d8:	9b03      	ldr	r3, [sp, #12]
 80092da:	4298      	cmp	r0, r3
 80092dc:	bfb8      	it	lt
 80092de:	4618      	movlt	r0, r3
 80092e0:	e7a4      	b.n	800922c <_printf_i+0x168>
 80092e2:	2301      	movs	r3, #1
 80092e4:	4632      	mov	r2, r6
 80092e6:	4649      	mov	r1, r9
 80092e8:	4640      	mov	r0, r8
 80092ea:	47d0      	blx	sl
 80092ec:	3001      	adds	r0, #1
 80092ee:	d09b      	beq.n	8009228 <_printf_i+0x164>
 80092f0:	3501      	adds	r5, #1
 80092f2:	68e3      	ldr	r3, [r4, #12]
 80092f4:	9903      	ldr	r1, [sp, #12]
 80092f6:	1a5b      	subs	r3, r3, r1
 80092f8:	42ab      	cmp	r3, r5
 80092fa:	dcf2      	bgt.n	80092e2 <_printf_i+0x21e>
 80092fc:	e7eb      	b.n	80092d6 <_printf_i+0x212>
 80092fe:	2500      	movs	r5, #0
 8009300:	f104 0619 	add.w	r6, r4, #25
 8009304:	e7f5      	b.n	80092f2 <_printf_i+0x22e>
 8009306:	bf00      	nop
 8009308:	0800bb76 	.word	0x0800bb76
 800930c:	0800bb87 	.word	0x0800bb87

08009310 <siprintf>:
 8009310:	b40e      	push	{r1, r2, r3}
 8009312:	b500      	push	{lr}
 8009314:	b09c      	sub	sp, #112	; 0x70
 8009316:	ab1d      	add	r3, sp, #116	; 0x74
 8009318:	9002      	str	r0, [sp, #8]
 800931a:	9006      	str	r0, [sp, #24]
 800931c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009320:	4809      	ldr	r0, [pc, #36]	; (8009348 <siprintf+0x38>)
 8009322:	9107      	str	r1, [sp, #28]
 8009324:	9104      	str	r1, [sp, #16]
 8009326:	4909      	ldr	r1, [pc, #36]	; (800934c <siprintf+0x3c>)
 8009328:	f853 2b04 	ldr.w	r2, [r3], #4
 800932c:	9105      	str	r1, [sp, #20]
 800932e:	6800      	ldr	r0, [r0, #0]
 8009330:	9301      	str	r3, [sp, #4]
 8009332:	a902      	add	r1, sp, #8
 8009334:	f001 fb68 	bl	800aa08 <_svfiprintf_r>
 8009338:	9b02      	ldr	r3, [sp, #8]
 800933a:	2200      	movs	r2, #0
 800933c:	701a      	strb	r2, [r3, #0]
 800933e:	b01c      	add	sp, #112	; 0x70
 8009340:	f85d eb04 	ldr.w	lr, [sp], #4
 8009344:	b003      	add	sp, #12
 8009346:	4770      	bx	lr
 8009348:	20000010 	.word	0x20000010
 800934c:	ffff0208 	.word	0xffff0208

08009350 <quorem>:
 8009350:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009354:	6903      	ldr	r3, [r0, #16]
 8009356:	690c      	ldr	r4, [r1, #16]
 8009358:	42a3      	cmp	r3, r4
 800935a:	4607      	mov	r7, r0
 800935c:	f2c0 8081 	blt.w	8009462 <quorem+0x112>
 8009360:	3c01      	subs	r4, #1
 8009362:	f101 0814 	add.w	r8, r1, #20
 8009366:	f100 0514 	add.w	r5, r0, #20
 800936a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800936e:	9301      	str	r3, [sp, #4]
 8009370:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009374:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009378:	3301      	adds	r3, #1
 800937a:	429a      	cmp	r2, r3
 800937c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009380:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009384:	fbb2 f6f3 	udiv	r6, r2, r3
 8009388:	d331      	bcc.n	80093ee <quorem+0x9e>
 800938a:	f04f 0e00 	mov.w	lr, #0
 800938e:	4640      	mov	r0, r8
 8009390:	46ac      	mov	ip, r5
 8009392:	46f2      	mov	sl, lr
 8009394:	f850 2b04 	ldr.w	r2, [r0], #4
 8009398:	b293      	uxth	r3, r2
 800939a:	fb06 e303 	mla	r3, r6, r3, lr
 800939e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	ebaa 0303 	sub.w	r3, sl, r3
 80093a8:	f8dc a000 	ldr.w	sl, [ip]
 80093ac:	0c12      	lsrs	r2, r2, #16
 80093ae:	fa13 f38a 	uxtah	r3, r3, sl
 80093b2:	fb06 e202 	mla	r2, r6, r2, lr
 80093b6:	9300      	str	r3, [sp, #0]
 80093b8:	9b00      	ldr	r3, [sp, #0]
 80093ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80093be:	b292      	uxth	r2, r2
 80093c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80093c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80093c8:	f8bd 3000 	ldrh.w	r3, [sp]
 80093cc:	4581      	cmp	r9, r0
 80093ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093d2:	f84c 3b04 	str.w	r3, [ip], #4
 80093d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80093da:	d2db      	bcs.n	8009394 <quorem+0x44>
 80093dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80093e0:	b92b      	cbnz	r3, 80093ee <quorem+0x9e>
 80093e2:	9b01      	ldr	r3, [sp, #4]
 80093e4:	3b04      	subs	r3, #4
 80093e6:	429d      	cmp	r5, r3
 80093e8:	461a      	mov	r2, r3
 80093ea:	d32e      	bcc.n	800944a <quorem+0xfa>
 80093ec:	613c      	str	r4, [r7, #16]
 80093ee:	4638      	mov	r0, r7
 80093f0:	f001 f8b6 	bl	800a560 <__mcmp>
 80093f4:	2800      	cmp	r0, #0
 80093f6:	db24      	blt.n	8009442 <quorem+0xf2>
 80093f8:	3601      	adds	r6, #1
 80093fa:	4628      	mov	r0, r5
 80093fc:	f04f 0c00 	mov.w	ip, #0
 8009400:	f858 2b04 	ldr.w	r2, [r8], #4
 8009404:	f8d0 e000 	ldr.w	lr, [r0]
 8009408:	b293      	uxth	r3, r2
 800940a:	ebac 0303 	sub.w	r3, ip, r3
 800940e:	0c12      	lsrs	r2, r2, #16
 8009410:	fa13 f38e 	uxtah	r3, r3, lr
 8009414:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009418:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800941c:	b29b      	uxth	r3, r3
 800941e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009422:	45c1      	cmp	r9, r8
 8009424:	f840 3b04 	str.w	r3, [r0], #4
 8009428:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800942c:	d2e8      	bcs.n	8009400 <quorem+0xb0>
 800942e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009432:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009436:	b922      	cbnz	r2, 8009442 <quorem+0xf2>
 8009438:	3b04      	subs	r3, #4
 800943a:	429d      	cmp	r5, r3
 800943c:	461a      	mov	r2, r3
 800943e:	d30a      	bcc.n	8009456 <quorem+0x106>
 8009440:	613c      	str	r4, [r7, #16]
 8009442:	4630      	mov	r0, r6
 8009444:	b003      	add	sp, #12
 8009446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800944a:	6812      	ldr	r2, [r2, #0]
 800944c:	3b04      	subs	r3, #4
 800944e:	2a00      	cmp	r2, #0
 8009450:	d1cc      	bne.n	80093ec <quorem+0x9c>
 8009452:	3c01      	subs	r4, #1
 8009454:	e7c7      	b.n	80093e6 <quorem+0x96>
 8009456:	6812      	ldr	r2, [r2, #0]
 8009458:	3b04      	subs	r3, #4
 800945a:	2a00      	cmp	r2, #0
 800945c:	d1f0      	bne.n	8009440 <quorem+0xf0>
 800945e:	3c01      	subs	r4, #1
 8009460:	e7eb      	b.n	800943a <quorem+0xea>
 8009462:	2000      	movs	r0, #0
 8009464:	e7ee      	b.n	8009444 <quorem+0xf4>
	...

08009468 <_dtoa_r>:
 8009468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800946c:	ed2d 8b04 	vpush	{d8-d9}
 8009470:	ec57 6b10 	vmov	r6, r7, d0
 8009474:	b093      	sub	sp, #76	; 0x4c
 8009476:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009478:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800947c:	9106      	str	r1, [sp, #24]
 800947e:	ee10 aa10 	vmov	sl, s0
 8009482:	4604      	mov	r4, r0
 8009484:	9209      	str	r2, [sp, #36]	; 0x24
 8009486:	930c      	str	r3, [sp, #48]	; 0x30
 8009488:	46bb      	mov	fp, r7
 800948a:	b975      	cbnz	r5, 80094aa <_dtoa_r+0x42>
 800948c:	2010      	movs	r0, #16
 800948e:	f000 fddd 	bl	800a04c <malloc>
 8009492:	4602      	mov	r2, r0
 8009494:	6260      	str	r0, [r4, #36]	; 0x24
 8009496:	b920      	cbnz	r0, 80094a2 <_dtoa_r+0x3a>
 8009498:	4ba7      	ldr	r3, [pc, #668]	; (8009738 <_dtoa_r+0x2d0>)
 800949a:	21ea      	movs	r1, #234	; 0xea
 800949c:	48a7      	ldr	r0, [pc, #668]	; (800973c <_dtoa_r+0x2d4>)
 800949e:	f001 fbc3 	bl	800ac28 <__assert_func>
 80094a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80094a6:	6005      	str	r5, [r0, #0]
 80094a8:	60c5      	str	r5, [r0, #12]
 80094aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094ac:	6819      	ldr	r1, [r3, #0]
 80094ae:	b151      	cbz	r1, 80094c6 <_dtoa_r+0x5e>
 80094b0:	685a      	ldr	r2, [r3, #4]
 80094b2:	604a      	str	r2, [r1, #4]
 80094b4:	2301      	movs	r3, #1
 80094b6:	4093      	lsls	r3, r2
 80094b8:	608b      	str	r3, [r1, #8]
 80094ba:	4620      	mov	r0, r4
 80094bc:	f000 fe0e 	bl	800a0dc <_Bfree>
 80094c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094c2:	2200      	movs	r2, #0
 80094c4:	601a      	str	r2, [r3, #0]
 80094c6:	1e3b      	subs	r3, r7, #0
 80094c8:	bfaa      	itet	ge
 80094ca:	2300      	movge	r3, #0
 80094cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80094d0:	f8c8 3000 	strge.w	r3, [r8]
 80094d4:	4b9a      	ldr	r3, [pc, #616]	; (8009740 <_dtoa_r+0x2d8>)
 80094d6:	bfbc      	itt	lt
 80094d8:	2201      	movlt	r2, #1
 80094da:	f8c8 2000 	strlt.w	r2, [r8]
 80094de:	ea33 030b 	bics.w	r3, r3, fp
 80094e2:	d11b      	bne.n	800951c <_dtoa_r+0xb4>
 80094e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094e6:	f242 730f 	movw	r3, #9999	; 0x270f
 80094ea:	6013      	str	r3, [r2, #0]
 80094ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094f0:	4333      	orrs	r3, r6
 80094f2:	f000 8592 	beq.w	800a01a <_dtoa_r+0xbb2>
 80094f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094f8:	b963      	cbnz	r3, 8009514 <_dtoa_r+0xac>
 80094fa:	4b92      	ldr	r3, [pc, #584]	; (8009744 <_dtoa_r+0x2dc>)
 80094fc:	e022      	b.n	8009544 <_dtoa_r+0xdc>
 80094fe:	4b92      	ldr	r3, [pc, #584]	; (8009748 <_dtoa_r+0x2e0>)
 8009500:	9301      	str	r3, [sp, #4]
 8009502:	3308      	adds	r3, #8
 8009504:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009506:	6013      	str	r3, [r2, #0]
 8009508:	9801      	ldr	r0, [sp, #4]
 800950a:	b013      	add	sp, #76	; 0x4c
 800950c:	ecbd 8b04 	vpop	{d8-d9}
 8009510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009514:	4b8b      	ldr	r3, [pc, #556]	; (8009744 <_dtoa_r+0x2dc>)
 8009516:	9301      	str	r3, [sp, #4]
 8009518:	3303      	adds	r3, #3
 800951a:	e7f3      	b.n	8009504 <_dtoa_r+0x9c>
 800951c:	2200      	movs	r2, #0
 800951e:	2300      	movs	r3, #0
 8009520:	4650      	mov	r0, sl
 8009522:	4659      	mov	r1, fp
 8009524:	f7f7 fae8 	bl	8000af8 <__aeabi_dcmpeq>
 8009528:	ec4b ab19 	vmov	d9, sl, fp
 800952c:	4680      	mov	r8, r0
 800952e:	b158      	cbz	r0, 8009548 <_dtoa_r+0xe0>
 8009530:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009532:	2301      	movs	r3, #1
 8009534:	6013      	str	r3, [r2, #0]
 8009536:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009538:	2b00      	cmp	r3, #0
 800953a:	f000 856b 	beq.w	800a014 <_dtoa_r+0xbac>
 800953e:	4883      	ldr	r0, [pc, #524]	; (800974c <_dtoa_r+0x2e4>)
 8009540:	6018      	str	r0, [r3, #0]
 8009542:	1e43      	subs	r3, r0, #1
 8009544:	9301      	str	r3, [sp, #4]
 8009546:	e7df      	b.n	8009508 <_dtoa_r+0xa0>
 8009548:	ec4b ab10 	vmov	d0, sl, fp
 800954c:	aa10      	add	r2, sp, #64	; 0x40
 800954e:	a911      	add	r1, sp, #68	; 0x44
 8009550:	4620      	mov	r0, r4
 8009552:	f001 f8ab 	bl	800a6ac <__d2b>
 8009556:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800955a:	ee08 0a10 	vmov	s16, r0
 800955e:	2d00      	cmp	r5, #0
 8009560:	f000 8084 	beq.w	800966c <_dtoa_r+0x204>
 8009564:	ee19 3a90 	vmov	r3, s19
 8009568:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800956c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009570:	4656      	mov	r6, sl
 8009572:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009576:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800957a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800957e:	4b74      	ldr	r3, [pc, #464]	; (8009750 <_dtoa_r+0x2e8>)
 8009580:	2200      	movs	r2, #0
 8009582:	4630      	mov	r0, r6
 8009584:	4639      	mov	r1, r7
 8009586:	f7f6 fe97 	bl	80002b8 <__aeabi_dsub>
 800958a:	a365      	add	r3, pc, #404	; (adr r3, 8009720 <_dtoa_r+0x2b8>)
 800958c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009590:	f7f7 f84a 	bl	8000628 <__aeabi_dmul>
 8009594:	a364      	add	r3, pc, #400	; (adr r3, 8009728 <_dtoa_r+0x2c0>)
 8009596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959a:	f7f6 fe8f 	bl	80002bc <__adddf3>
 800959e:	4606      	mov	r6, r0
 80095a0:	4628      	mov	r0, r5
 80095a2:	460f      	mov	r7, r1
 80095a4:	f7f6 ffd6 	bl	8000554 <__aeabi_i2d>
 80095a8:	a361      	add	r3, pc, #388	; (adr r3, 8009730 <_dtoa_r+0x2c8>)
 80095aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ae:	f7f7 f83b 	bl	8000628 <__aeabi_dmul>
 80095b2:	4602      	mov	r2, r0
 80095b4:	460b      	mov	r3, r1
 80095b6:	4630      	mov	r0, r6
 80095b8:	4639      	mov	r1, r7
 80095ba:	f7f6 fe7f 	bl	80002bc <__adddf3>
 80095be:	4606      	mov	r6, r0
 80095c0:	460f      	mov	r7, r1
 80095c2:	f7f7 fae1 	bl	8000b88 <__aeabi_d2iz>
 80095c6:	2200      	movs	r2, #0
 80095c8:	9000      	str	r0, [sp, #0]
 80095ca:	2300      	movs	r3, #0
 80095cc:	4630      	mov	r0, r6
 80095ce:	4639      	mov	r1, r7
 80095d0:	f7f7 fa9c 	bl	8000b0c <__aeabi_dcmplt>
 80095d4:	b150      	cbz	r0, 80095ec <_dtoa_r+0x184>
 80095d6:	9800      	ldr	r0, [sp, #0]
 80095d8:	f7f6 ffbc 	bl	8000554 <__aeabi_i2d>
 80095dc:	4632      	mov	r2, r6
 80095de:	463b      	mov	r3, r7
 80095e0:	f7f7 fa8a 	bl	8000af8 <__aeabi_dcmpeq>
 80095e4:	b910      	cbnz	r0, 80095ec <_dtoa_r+0x184>
 80095e6:	9b00      	ldr	r3, [sp, #0]
 80095e8:	3b01      	subs	r3, #1
 80095ea:	9300      	str	r3, [sp, #0]
 80095ec:	9b00      	ldr	r3, [sp, #0]
 80095ee:	2b16      	cmp	r3, #22
 80095f0:	d85a      	bhi.n	80096a8 <_dtoa_r+0x240>
 80095f2:	9a00      	ldr	r2, [sp, #0]
 80095f4:	4b57      	ldr	r3, [pc, #348]	; (8009754 <_dtoa_r+0x2ec>)
 80095f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095fe:	ec51 0b19 	vmov	r0, r1, d9
 8009602:	f7f7 fa83 	bl	8000b0c <__aeabi_dcmplt>
 8009606:	2800      	cmp	r0, #0
 8009608:	d050      	beq.n	80096ac <_dtoa_r+0x244>
 800960a:	9b00      	ldr	r3, [sp, #0]
 800960c:	3b01      	subs	r3, #1
 800960e:	9300      	str	r3, [sp, #0]
 8009610:	2300      	movs	r3, #0
 8009612:	930b      	str	r3, [sp, #44]	; 0x2c
 8009614:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009616:	1b5d      	subs	r5, r3, r5
 8009618:	1e6b      	subs	r3, r5, #1
 800961a:	9305      	str	r3, [sp, #20]
 800961c:	bf45      	ittet	mi
 800961e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009622:	9304      	strmi	r3, [sp, #16]
 8009624:	2300      	movpl	r3, #0
 8009626:	2300      	movmi	r3, #0
 8009628:	bf4c      	ite	mi
 800962a:	9305      	strmi	r3, [sp, #20]
 800962c:	9304      	strpl	r3, [sp, #16]
 800962e:	9b00      	ldr	r3, [sp, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	db3d      	blt.n	80096b0 <_dtoa_r+0x248>
 8009634:	9b05      	ldr	r3, [sp, #20]
 8009636:	9a00      	ldr	r2, [sp, #0]
 8009638:	920a      	str	r2, [sp, #40]	; 0x28
 800963a:	4413      	add	r3, r2
 800963c:	9305      	str	r3, [sp, #20]
 800963e:	2300      	movs	r3, #0
 8009640:	9307      	str	r3, [sp, #28]
 8009642:	9b06      	ldr	r3, [sp, #24]
 8009644:	2b09      	cmp	r3, #9
 8009646:	f200 8089 	bhi.w	800975c <_dtoa_r+0x2f4>
 800964a:	2b05      	cmp	r3, #5
 800964c:	bfc4      	itt	gt
 800964e:	3b04      	subgt	r3, #4
 8009650:	9306      	strgt	r3, [sp, #24]
 8009652:	9b06      	ldr	r3, [sp, #24]
 8009654:	f1a3 0302 	sub.w	r3, r3, #2
 8009658:	bfcc      	ite	gt
 800965a:	2500      	movgt	r5, #0
 800965c:	2501      	movle	r5, #1
 800965e:	2b03      	cmp	r3, #3
 8009660:	f200 8087 	bhi.w	8009772 <_dtoa_r+0x30a>
 8009664:	e8df f003 	tbb	[pc, r3]
 8009668:	59383a2d 	.word	0x59383a2d
 800966c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009670:	441d      	add	r5, r3
 8009672:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009676:	2b20      	cmp	r3, #32
 8009678:	bfc1      	itttt	gt
 800967a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800967e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009682:	fa0b f303 	lslgt.w	r3, fp, r3
 8009686:	fa26 f000 	lsrgt.w	r0, r6, r0
 800968a:	bfda      	itte	le
 800968c:	f1c3 0320 	rsble	r3, r3, #32
 8009690:	fa06 f003 	lslle.w	r0, r6, r3
 8009694:	4318      	orrgt	r0, r3
 8009696:	f7f6 ff4d 	bl	8000534 <__aeabi_ui2d>
 800969a:	2301      	movs	r3, #1
 800969c:	4606      	mov	r6, r0
 800969e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80096a2:	3d01      	subs	r5, #1
 80096a4:	930e      	str	r3, [sp, #56]	; 0x38
 80096a6:	e76a      	b.n	800957e <_dtoa_r+0x116>
 80096a8:	2301      	movs	r3, #1
 80096aa:	e7b2      	b.n	8009612 <_dtoa_r+0x1aa>
 80096ac:	900b      	str	r0, [sp, #44]	; 0x2c
 80096ae:	e7b1      	b.n	8009614 <_dtoa_r+0x1ac>
 80096b0:	9b04      	ldr	r3, [sp, #16]
 80096b2:	9a00      	ldr	r2, [sp, #0]
 80096b4:	1a9b      	subs	r3, r3, r2
 80096b6:	9304      	str	r3, [sp, #16]
 80096b8:	4253      	negs	r3, r2
 80096ba:	9307      	str	r3, [sp, #28]
 80096bc:	2300      	movs	r3, #0
 80096be:	930a      	str	r3, [sp, #40]	; 0x28
 80096c0:	e7bf      	b.n	8009642 <_dtoa_r+0x1da>
 80096c2:	2300      	movs	r3, #0
 80096c4:	9308      	str	r3, [sp, #32]
 80096c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	dc55      	bgt.n	8009778 <_dtoa_r+0x310>
 80096cc:	2301      	movs	r3, #1
 80096ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80096d2:	461a      	mov	r2, r3
 80096d4:	9209      	str	r2, [sp, #36]	; 0x24
 80096d6:	e00c      	b.n	80096f2 <_dtoa_r+0x28a>
 80096d8:	2301      	movs	r3, #1
 80096da:	e7f3      	b.n	80096c4 <_dtoa_r+0x25c>
 80096dc:	2300      	movs	r3, #0
 80096de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096e0:	9308      	str	r3, [sp, #32]
 80096e2:	9b00      	ldr	r3, [sp, #0]
 80096e4:	4413      	add	r3, r2
 80096e6:	9302      	str	r3, [sp, #8]
 80096e8:	3301      	adds	r3, #1
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	9303      	str	r3, [sp, #12]
 80096ee:	bfb8      	it	lt
 80096f0:	2301      	movlt	r3, #1
 80096f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80096f4:	2200      	movs	r2, #0
 80096f6:	6042      	str	r2, [r0, #4]
 80096f8:	2204      	movs	r2, #4
 80096fa:	f102 0614 	add.w	r6, r2, #20
 80096fe:	429e      	cmp	r6, r3
 8009700:	6841      	ldr	r1, [r0, #4]
 8009702:	d93d      	bls.n	8009780 <_dtoa_r+0x318>
 8009704:	4620      	mov	r0, r4
 8009706:	f000 fca9 	bl	800a05c <_Balloc>
 800970a:	9001      	str	r0, [sp, #4]
 800970c:	2800      	cmp	r0, #0
 800970e:	d13b      	bne.n	8009788 <_dtoa_r+0x320>
 8009710:	4b11      	ldr	r3, [pc, #68]	; (8009758 <_dtoa_r+0x2f0>)
 8009712:	4602      	mov	r2, r0
 8009714:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009718:	e6c0      	b.n	800949c <_dtoa_r+0x34>
 800971a:	2301      	movs	r3, #1
 800971c:	e7df      	b.n	80096de <_dtoa_r+0x276>
 800971e:	bf00      	nop
 8009720:	636f4361 	.word	0x636f4361
 8009724:	3fd287a7 	.word	0x3fd287a7
 8009728:	8b60c8b3 	.word	0x8b60c8b3
 800972c:	3fc68a28 	.word	0x3fc68a28
 8009730:	509f79fb 	.word	0x509f79fb
 8009734:	3fd34413 	.word	0x3fd34413
 8009738:	0800bba5 	.word	0x0800bba5
 800973c:	0800bbbc 	.word	0x0800bbbc
 8009740:	7ff00000 	.word	0x7ff00000
 8009744:	0800bba1 	.word	0x0800bba1
 8009748:	0800bb98 	.word	0x0800bb98
 800974c:	0800bb75 	.word	0x0800bb75
 8009750:	3ff80000 	.word	0x3ff80000
 8009754:	0800bcb0 	.word	0x0800bcb0
 8009758:	0800bc17 	.word	0x0800bc17
 800975c:	2501      	movs	r5, #1
 800975e:	2300      	movs	r3, #0
 8009760:	9306      	str	r3, [sp, #24]
 8009762:	9508      	str	r5, [sp, #32]
 8009764:	f04f 33ff 	mov.w	r3, #4294967295
 8009768:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800976c:	2200      	movs	r2, #0
 800976e:	2312      	movs	r3, #18
 8009770:	e7b0      	b.n	80096d4 <_dtoa_r+0x26c>
 8009772:	2301      	movs	r3, #1
 8009774:	9308      	str	r3, [sp, #32]
 8009776:	e7f5      	b.n	8009764 <_dtoa_r+0x2fc>
 8009778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800977a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800977e:	e7b8      	b.n	80096f2 <_dtoa_r+0x28a>
 8009780:	3101      	adds	r1, #1
 8009782:	6041      	str	r1, [r0, #4]
 8009784:	0052      	lsls	r2, r2, #1
 8009786:	e7b8      	b.n	80096fa <_dtoa_r+0x292>
 8009788:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800978a:	9a01      	ldr	r2, [sp, #4]
 800978c:	601a      	str	r2, [r3, #0]
 800978e:	9b03      	ldr	r3, [sp, #12]
 8009790:	2b0e      	cmp	r3, #14
 8009792:	f200 809d 	bhi.w	80098d0 <_dtoa_r+0x468>
 8009796:	2d00      	cmp	r5, #0
 8009798:	f000 809a 	beq.w	80098d0 <_dtoa_r+0x468>
 800979c:	9b00      	ldr	r3, [sp, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	dd32      	ble.n	8009808 <_dtoa_r+0x3a0>
 80097a2:	4ab7      	ldr	r2, [pc, #732]	; (8009a80 <_dtoa_r+0x618>)
 80097a4:	f003 030f 	and.w	r3, r3, #15
 80097a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80097ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80097b0:	9b00      	ldr	r3, [sp, #0]
 80097b2:	05d8      	lsls	r0, r3, #23
 80097b4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80097b8:	d516      	bpl.n	80097e8 <_dtoa_r+0x380>
 80097ba:	4bb2      	ldr	r3, [pc, #712]	; (8009a84 <_dtoa_r+0x61c>)
 80097bc:	ec51 0b19 	vmov	r0, r1, d9
 80097c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80097c4:	f7f7 f85a 	bl	800087c <__aeabi_ddiv>
 80097c8:	f007 070f 	and.w	r7, r7, #15
 80097cc:	4682      	mov	sl, r0
 80097ce:	468b      	mov	fp, r1
 80097d0:	2503      	movs	r5, #3
 80097d2:	4eac      	ldr	r6, [pc, #688]	; (8009a84 <_dtoa_r+0x61c>)
 80097d4:	b957      	cbnz	r7, 80097ec <_dtoa_r+0x384>
 80097d6:	4642      	mov	r2, r8
 80097d8:	464b      	mov	r3, r9
 80097da:	4650      	mov	r0, sl
 80097dc:	4659      	mov	r1, fp
 80097de:	f7f7 f84d 	bl	800087c <__aeabi_ddiv>
 80097e2:	4682      	mov	sl, r0
 80097e4:	468b      	mov	fp, r1
 80097e6:	e028      	b.n	800983a <_dtoa_r+0x3d2>
 80097e8:	2502      	movs	r5, #2
 80097ea:	e7f2      	b.n	80097d2 <_dtoa_r+0x36a>
 80097ec:	07f9      	lsls	r1, r7, #31
 80097ee:	d508      	bpl.n	8009802 <_dtoa_r+0x39a>
 80097f0:	4640      	mov	r0, r8
 80097f2:	4649      	mov	r1, r9
 80097f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80097f8:	f7f6 ff16 	bl	8000628 <__aeabi_dmul>
 80097fc:	3501      	adds	r5, #1
 80097fe:	4680      	mov	r8, r0
 8009800:	4689      	mov	r9, r1
 8009802:	107f      	asrs	r7, r7, #1
 8009804:	3608      	adds	r6, #8
 8009806:	e7e5      	b.n	80097d4 <_dtoa_r+0x36c>
 8009808:	f000 809b 	beq.w	8009942 <_dtoa_r+0x4da>
 800980c:	9b00      	ldr	r3, [sp, #0]
 800980e:	4f9d      	ldr	r7, [pc, #628]	; (8009a84 <_dtoa_r+0x61c>)
 8009810:	425e      	negs	r6, r3
 8009812:	4b9b      	ldr	r3, [pc, #620]	; (8009a80 <_dtoa_r+0x618>)
 8009814:	f006 020f 	and.w	r2, r6, #15
 8009818:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800981c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009820:	ec51 0b19 	vmov	r0, r1, d9
 8009824:	f7f6 ff00 	bl	8000628 <__aeabi_dmul>
 8009828:	1136      	asrs	r6, r6, #4
 800982a:	4682      	mov	sl, r0
 800982c:	468b      	mov	fp, r1
 800982e:	2300      	movs	r3, #0
 8009830:	2502      	movs	r5, #2
 8009832:	2e00      	cmp	r6, #0
 8009834:	d17a      	bne.n	800992c <_dtoa_r+0x4c4>
 8009836:	2b00      	cmp	r3, #0
 8009838:	d1d3      	bne.n	80097e2 <_dtoa_r+0x37a>
 800983a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800983c:	2b00      	cmp	r3, #0
 800983e:	f000 8082 	beq.w	8009946 <_dtoa_r+0x4de>
 8009842:	4b91      	ldr	r3, [pc, #580]	; (8009a88 <_dtoa_r+0x620>)
 8009844:	2200      	movs	r2, #0
 8009846:	4650      	mov	r0, sl
 8009848:	4659      	mov	r1, fp
 800984a:	f7f7 f95f 	bl	8000b0c <__aeabi_dcmplt>
 800984e:	2800      	cmp	r0, #0
 8009850:	d079      	beq.n	8009946 <_dtoa_r+0x4de>
 8009852:	9b03      	ldr	r3, [sp, #12]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d076      	beq.n	8009946 <_dtoa_r+0x4de>
 8009858:	9b02      	ldr	r3, [sp, #8]
 800985a:	2b00      	cmp	r3, #0
 800985c:	dd36      	ble.n	80098cc <_dtoa_r+0x464>
 800985e:	9b00      	ldr	r3, [sp, #0]
 8009860:	4650      	mov	r0, sl
 8009862:	4659      	mov	r1, fp
 8009864:	1e5f      	subs	r7, r3, #1
 8009866:	2200      	movs	r2, #0
 8009868:	4b88      	ldr	r3, [pc, #544]	; (8009a8c <_dtoa_r+0x624>)
 800986a:	f7f6 fedd 	bl	8000628 <__aeabi_dmul>
 800986e:	9e02      	ldr	r6, [sp, #8]
 8009870:	4682      	mov	sl, r0
 8009872:	468b      	mov	fp, r1
 8009874:	3501      	adds	r5, #1
 8009876:	4628      	mov	r0, r5
 8009878:	f7f6 fe6c 	bl	8000554 <__aeabi_i2d>
 800987c:	4652      	mov	r2, sl
 800987e:	465b      	mov	r3, fp
 8009880:	f7f6 fed2 	bl	8000628 <__aeabi_dmul>
 8009884:	4b82      	ldr	r3, [pc, #520]	; (8009a90 <_dtoa_r+0x628>)
 8009886:	2200      	movs	r2, #0
 8009888:	f7f6 fd18 	bl	80002bc <__adddf3>
 800988c:	46d0      	mov	r8, sl
 800988e:	46d9      	mov	r9, fp
 8009890:	4682      	mov	sl, r0
 8009892:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009896:	2e00      	cmp	r6, #0
 8009898:	d158      	bne.n	800994c <_dtoa_r+0x4e4>
 800989a:	4b7e      	ldr	r3, [pc, #504]	; (8009a94 <_dtoa_r+0x62c>)
 800989c:	2200      	movs	r2, #0
 800989e:	4640      	mov	r0, r8
 80098a0:	4649      	mov	r1, r9
 80098a2:	f7f6 fd09 	bl	80002b8 <__aeabi_dsub>
 80098a6:	4652      	mov	r2, sl
 80098a8:	465b      	mov	r3, fp
 80098aa:	4680      	mov	r8, r0
 80098ac:	4689      	mov	r9, r1
 80098ae:	f7f7 f94b 	bl	8000b48 <__aeabi_dcmpgt>
 80098b2:	2800      	cmp	r0, #0
 80098b4:	f040 8295 	bne.w	8009de2 <_dtoa_r+0x97a>
 80098b8:	4652      	mov	r2, sl
 80098ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80098be:	4640      	mov	r0, r8
 80098c0:	4649      	mov	r1, r9
 80098c2:	f7f7 f923 	bl	8000b0c <__aeabi_dcmplt>
 80098c6:	2800      	cmp	r0, #0
 80098c8:	f040 8289 	bne.w	8009dde <_dtoa_r+0x976>
 80098cc:	ec5b ab19 	vmov	sl, fp, d9
 80098d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	f2c0 8148 	blt.w	8009b68 <_dtoa_r+0x700>
 80098d8:	9a00      	ldr	r2, [sp, #0]
 80098da:	2a0e      	cmp	r2, #14
 80098dc:	f300 8144 	bgt.w	8009b68 <_dtoa_r+0x700>
 80098e0:	4b67      	ldr	r3, [pc, #412]	; (8009a80 <_dtoa_r+0x618>)
 80098e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80098ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	f280 80d5 	bge.w	8009a9c <_dtoa_r+0x634>
 80098f2:	9b03      	ldr	r3, [sp, #12]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	f300 80d1 	bgt.w	8009a9c <_dtoa_r+0x634>
 80098fa:	f040 826f 	bne.w	8009ddc <_dtoa_r+0x974>
 80098fe:	4b65      	ldr	r3, [pc, #404]	; (8009a94 <_dtoa_r+0x62c>)
 8009900:	2200      	movs	r2, #0
 8009902:	4640      	mov	r0, r8
 8009904:	4649      	mov	r1, r9
 8009906:	f7f6 fe8f 	bl	8000628 <__aeabi_dmul>
 800990a:	4652      	mov	r2, sl
 800990c:	465b      	mov	r3, fp
 800990e:	f7f7 f911 	bl	8000b34 <__aeabi_dcmpge>
 8009912:	9e03      	ldr	r6, [sp, #12]
 8009914:	4637      	mov	r7, r6
 8009916:	2800      	cmp	r0, #0
 8009918:	f040 8245 	bne.w	8009da6 <_dtoa_r+0x93e>
 800991c:	9d01      	ldr	r5, [sp, #4]
 800991e:	2331      	movs	r3, #49	; 0x31
 8009920:	f805 3b01 	strb.w	r3, [r5], #1
 8009924:	9b00      	ldr	r3, [sp, #0]
 8009926:	3301      	adds	r3, #1
 8009928:	9300      	str	r3, [sp, #0]
 800992a:	e240      	b.n	8009dae <_dtoa_r+0x946>
 800992c:	07f2      	lsls	r2, r6, #31
 800992e:	d505      	bpl.n	800993c <_dtoa_r+0x4d4>
 8009930:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009934:	f7f6 fe78 	bl	8000628 <__aeabi_dmul>
 8009938:	3501      	adds	r5, #1
 800993a:	2301      	movs	r3, #1
 800993c:	1076      	asrs	r6, r6, #1
 800993e:	3708      	adds	r7, #8
 8009940:	e777      	b.n	8009832 <_dtoa_r+0x3ca>
 8009942:	2502      	movs	r5, #2
 8009944:	e779      	b.n	800983a <_dtoa_r+0x3d2>
 8009946:	9f00      	ldr	r7, [sp, #0]
 8009948:	9e03      	ldr	r6, [sp, #12]
 800994a:	e794      	b.n	8009876 <_dtoa_r+0x40e>
 800994c:	9901      	ldr	r1, [sp, #4]
 800994e:	4b4c      	ldr	r3, [pc, #304]	; (8009a80 <_dtoa_r+0x618>)
 8009950:	4431      	add	r1, r6
 8009952:	910d      	str	r1, [sp, #52]	; 0x34
 8009954:	9908      	ldr	r1, [sp, #32]
 8009956:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800995a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800995e:	2900      	cmp	r1, #0
 8009960:	d043      	beq.n	80099ea <_dtoa_r+0x582>
 8009962:	494d      	ldr	r1, [pc, #308]	; (8009a98 <_dtoa_r+0x630>)
 8009964:	2000      	movs	r0, #0
 8009966:	f7f6 ff89 	bl	800087c <__aeabi_ddiv>
 800996a:	4652      	mov	r2, sl
 800996c:	465b      	mov	r3, fp
 800996e:	f7f6 fca3 	bl	80002b8 <__aeabi_dsub>
 8009972:	9d01      	ldr	r5, [sp, #4]
 8009974:	4682      	mov	sl, r0
 8009976:	468b      	mov	fp, r1
 8009978:	4649      	mov	r1, r9
 800997a:	4640      	mov	r0, r8
 800997c:	f7f7 f904 	bl	8000b88 <__aeabi_d2iz>
 8009980:	4606      	mov	r6, r0
 8009982:	f7f6 fde7 	bl	8000554 <__aeabi_i2d>
 8009986:	4602      	mov	r2, r0
 8009988:	460b      	mov	r3, r1
 800998a:	4640      	mov	r0, r8
 800998c:	4649      	mov	r1, r9
 800998e:	f7f6 fc93 	bl	80002b8 <__aeabi_dsub>
 8009992:	3630      	adds	r6, #48	; 0x30
 8009994:	f805 6b01 	strb.w	r6, [r5], #1
 8009998:	4652      	mov	r2, sl
 800999a:	465b      	mov	r3, fp
 800999c:	4680      	mov	r8, r0
 800999e:	4689      	mov	r9, r1
 80099a0:	f7f7 f8b4 	bl	8000b0c <__aeabi_dcmplt>
 80099a4:	2800      	cmp	r0, #0
 80099a6:	d163      	bne.n	8009a70 <_dtoa_r+0x608>
 80099a8:	4642      	mov	r2, r8
 80099aa:	464b      	mov	r3, r9
 80099ac:	4936      	ldr	r1, [pc, #216]	; (8009a88 <_dtoa_r+0x620>)
 80099ae:	2000      	movs	r0, #0
 80099b0:	f7f6 fc82 	bl	80002b8 <__aeabi_dsub>
 80099b4:	4652      	mov	r2, sl
 80099b6:	465b      	mov	r3, fp
 80099b8:	f7f7 f8a8 	bl	8000b0c <__aeabi_dcmplt>
 80099bc:	2800      	cmp	r0, #0
 80099be:	f040 80b5 	bne.w	8009b2c <_dtoa_r+0x6c4>
 80099c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099c4:	429d      	cmp	r5, r3
 80099c6:	d081      	beq.n	80098cc <_dtoa_r+0x464>
 80099c8:	4b30      	ldr	r3, [pc, #192]	; (8009a8c <_dtoa_r+0x624>)
 80099ca:	2200      	movs	r2, #0
 80099cc:	4650      	mov	r0, sl
 80099ce:	4659      	mov	r1, fp
 80099d0:	f7f6 fe2a 	bl	8000628 <__aeabi_dmul>
 80099d4:	4b2d      	ldr	r3, [pc, #180]	; (8009a8c <_dtoa_r+0x624>)
 80099d6:	4682      	mov	sl, r0
 80099d8:	468b      	mov	fp, r1
 80099da:	4640      	mov	r0, r8
 80099dc:	4649      	mov	r1, r9
 80099de:	2200      	movs	r2, #0
 80099e0:	f7f6 fe22 	bl	8000628 <__aeabi_dmul>
 80099e4:	4680      	mov	r8, r0
 80099e6:	4689      	mov	r9, r1
 80099e8:	e7c6      	b.n	8009978 <_dtoa_r+0x510>
 80099ea:	4650      	mov	r0, sl
 80099ec:	4659      	mov	r1, fp
 80099ee:	f7f6 fe1b 	bl	8000628 <__aeabi_dmul>
 80099f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099f4:	9d01      	ldr	r5, [sp, #4]
 80099f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80099f8:	4682      	mov	sl, r0
 80099fa:	468b      	mov	fp, r1
 80099fc:	4649      	mov	r1, r9
 80099fe:	4640      	mov	r0, r8
 8009a00:	f7f7 f8c2 	bl	8000b88 <__aeabi_d2iz>
 8009a04:	4606      	mov	r6, r0
 8009a06:	f7f6 fda5 	bl	8000554 <__aeabi_i2d>
 8009a0a:	3630      	adds	r6, #48	; 0x30
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	460b      	mov	r3, r1
 8009a10:	4640      	mov	r0, r8
 8009a12:	4649      	mov	r1, r9
 8009a14:	f7f6 fc50 	bl	80002b8 <__aeabi_dsub>
 8009a18:	f805 6b01 	strb.w	r6, [r5], #1
 8009a1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a1e:	429d      	cmp	r5, r3
 8009a20:	4680      	mov	r8, r0
 8009a22:	4689      	mov	r9, r1
 8009a24:	f04f 0200 	mov.w	r2, #0
 8009a28:	d124      	bne.n	8009a74 <_dtoa_r+0x60c>
 8009a2a:	4b1b      	ldr	r3, [pc, #108]	; (8009a98 <_dtoa_r+0x630>)
 8009a2c:	4650      	mov	r0, sl
 8009a2e:	4659      	mov	r1, fp
 8009a30:	f7f6 fc44 	bl	80002bc <__adddf3>
 8009a34:	4602      	mov	r2, r0
 8009a36:	460b      	mov	r3, r1
 8009a38:	4640      	mov	r0, r8
 8009a3a:	4649      	mov	r1, r9
 8009a3c:	f7f7 f884 	bl	8000b48 <__aeabi_dcmpgt>
 8009a40:	2800      	cmp	r0, #0
 8009a42:	d173      	bne.n	8009b2c <_dtoa_r+0x6c4>
 8009a44:	4652      	mov	r2, sl
 8009a46:	465b      	mov	r3, fp
 8009a48:	4913      	ldr	r1, [pc, #76]	; (8009a98 <_dtoa_r+0x630>)
 8009a4a:	2000      	movs	r0, #0
 8009a4c:	f7f6 fc34 	bl	80002b8 <__aeabi_dsub>
 8009a50:	4602      	mov	r2, r0
 8009a52:	460b      	mov	r3, r1
 8009a54:	4640      	mov	r0, r8
 8009a56:	4649      	mov	r1, r9
 8009a58:	f7f7 f858 	bl	8000b0c <__aeabi_dcmplt>
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	f43f af35 	beq.w	80098cc <_dtoa_r+0x464>
 8009a62:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009a64:	1e6b      	subs	r3, r5, #1
 8009a66:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a68:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009a6c:	2b30      	cmp	r3, #48	; 0x30
 8009a6e:	d0f8      	beq.n	8009a62 <_dtoa_r+0x5fa>
 8009a70:	9700      	str	r7, [sp, #0]
 8009a72:	e049      	b.n	8009b08 <_dtoa_r+0x6a0>
 8009a74:	4b05      	ldr	r3, [pc, #20]	; (8009a8c <_dtoa_r+0x624>)
 8009a76:	f7f6 fdd7 	bl	8000628 <__aeabi_dmul>
 8009a7a:	4680      	mov	r8, r0
 8009a7c:	4689      	mov	r9, r1
 8009a7e:	e7bd      	b.n	80099fc <_dtoa_r+0x594>
 8009a80:	0800bcb0 	.word	0x0800bcb0
 8009a84:	0800bc88 	.word	0x0800bc88
 8009a88:	3ff00000 	.word	0x3ff00000
 8009a8c:	40240000 	.word	0x40240000
 8009a90:	401c0000 	.word	0x401c0000
 8009a94:	40140000 	.word	0x40140000
 8009a98:	3fe00000 	.word	0x3fe00000
 8009a9c:	9d01      	ldr	r5, [sp, #4]
 8009a9e:	4656      	mov	r6, sl
 8009aa0:	465f      	mov	r7, fp
 8009aa2:	4642      	mov	r2, r8
 8009aa4:	464b      	mov	r3, r9
 8009aa6:	4630      	mov	r0, r6
 8009aa8:	4639      	mov	r1, r7
 8009aaa:	f7f6 fee7 	bl	800087c <__aeabi_ddiv>
 8009aae:	f7f7 f86b 	bl	8000b88 <__aeabi_d2iz>
 8009ab2:	4682      	mov	sl, r0
 8009ab4:	f7f6 fd4e 	bl	8000554 <__aeabi_i2d>
 8009ab8:	4642      	mov	r2, r8
 8009aba:	464b      	mov	r3, r9
 8009abc:	f7f6 fdb4 	bl	8000628 <__aeabi_dmul>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	460b      	mov	r3, r1
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	4639      	mov	r1, r7
 8009ac8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009acc:	f7f6 fbf4 	bl	80002b8 <__aeabi_dsub>
 8009ad0:	f805 6b01 	strb.w	r6, [r5], #1
 8009ad4:	9e01      	ldr	r6, [sp, #4]
 8009ad6:	9f03      	ldr	r7, [sp, #12]
 8009ad8:	1bae      	subs	r6, r5, r6
 8009ada:	42b7      	cmp	r7, r6
 8009adc:	4602      	mov	r2, r0
 8009ade:	460b      	mov	r3, r1
 8009ae0:	d135      	bne.n	8009b4e <_dtoa_r+0x6e6>
 8009ae2:	f7f6 fbeb 	bl	80002bc <__adddf3>
 8009ae6:	4642      	mov	r2, r8
 8009ae8:	464b      	mov	r3, r9
 8009aea:	4606      	mov	r6, r0
 8009aec:	460f      	mov	r7, r1
 8009aee:	f7f7 f82b 	bl	8000b48 <__aeabi_dcmpgt>
 8009af2:	b9d0      	cbnz	r0, 8009b2a <_dtoa_r+0x6c2>
 8009af4:	4642      	mov	r2, r8
 8009af6:	464b      	mov	r3, r9
 8009af8:	4630      	mov	r0, r6
 8009afa:	4639      	mov	r1, r7
 8009afc:	f7f6 fffc 	bl	8000af8 <__aeabi_dcmpeq>
 8009b00:	b110      	cbz	r0, 8009b08 <_dtoa_r+0x6a0>
 8009b02:	f01a 0f01 	tst.w	sl, #1
 8009b06:	d110      	bne.n	8009b2a <_dtoa_r+0x6c2>
 8009b08:	4620      	mov	r0, r4
 8009b0a:	ee18 1a10 	vmov	r1, s16
 8009b0e:	f000 fae5 	bl	800a0dc <_Bfree>
 8009b12:	2300      	movs	r3, #0
 8009b14:	9800      	ldr	r0, [sp, #0]
 8009b16:	702b      	strb	r3, [r5, #0]
 8009b18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b1a:	3001      	adds	r0, #1
 8009b1c:	6018      	str	r0, [r3, #0]
 8009b1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	f43f acf1 	beq.w	8009508 <_dtoa_r+0xa0>
 8009b26:	601d      	str	r5, [r3, #0]
 8009b28:	e4ee      	b.n	8009508 <_dtoa_r+0xa0>
 8009b2a:	9f00      	ldr	r7, [sp, #0]
 8009b2c:	462b      	mov	r3, r5
 8009b2e:	461d      	mov	r5, r3
 8009b30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b34:	2a39      	cmp	r2, #57	; 0x39
 8009b36:	d106      	bne.n	8009b46 <_dtoa_r+0x6de>
 8009b38:	9a01      	ldr	r2, [sp, #4]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d1f7      	bne.n	8009b2e <_dtoa_r+0x6c6>
 8009b3e:	9901      	ldr	r1, [sp, #4]
 8009b40:	2230      	movs	r2, #48	; 0x30
 8009b42:	3701      	adds	r7, #1
 8009b44:	700a      	strb	r2, [r1, #0]
 8009b46:	781a      	ldrb	r2, [r3, #0]
 8009b48:	3201      	adds	r2, #1
 8009b4a:	701a      	strb	r2, [r3, #0]
 8009b4c:	e790      	b.n	8009a70 <_dtoa_r+0x608>
 8009b4e:	4ba6      	ldr	r3, [pc, #664]	; (8009de8 <_dtoa_r+0x980>)
 8009b50:	2200      	movs	r2, #0
 8009b52:	f7f6 fd69 	bl	8000628 <__aeabi_dmul>
 8009b56:	2200      	movs	r2, #0
 8009b58:	2300      	movs	r3, #0
 8009b5a:	4606      	mov	r6, r0
 8009b5c:	460f      	mov	r7, r1
 8009b5e:	f7f6 ffcb 	bl	8000af8 <__aeabi_dcmpeq>
 8009b62:	2800      	cmp	r0, #0
 8009b64:	d09d      	beq.n	8009aa2 <_dtoa_r+0x63a>
 8009b66:	e7cf      	b.n	8009b08 <_dtoa_r+0x6a0>
 8009b68:	9a08      	ldr	r2, [sp, #32]
 8009b6a:	2a00      	cmp	r2, #0
 8009b6c:	f000 80d7 	beq.w	8009d1e <_dtoa_r+0x8b6>
 8009b70:	9a06      	ldr	r2, [sp, #24]
 8009b72:	2a01      	cmp	r2, #1
 8009b74:	f300 80ba 	bgt.w	8009cec <_dtoa_r+0x884>
 8009b78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b7a:	2a00      	cmp	r2, #0
 8009b7c:	f000 80b2 	beq.w	8009ce4 <_dtoa_r+0x87c>
 8009b80:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009b84:	9e07      	ldr	r6, [sp, #28]
 8009b86:	9d04      	ldr	r5, [sp, #16]
 8009b88:	9a04      	ldr	r2, [sp, #16]
 8009b8a:	441a      	add	r2, r3
 8009b8c:	9204      	str	r2, [sp, #16]
 8009b8e:	9a05      	ldr	r2, [sp, #20]
 8009b90:	2101      	movs	r1, #1
 8009b92:	441a      	add	r2, r3
 8009b94:	4620      	mov	r0, r4
 8009b96:	9205      	str	r2, [sp, #20]
 8009b98:	f000 fb58 	bl	800a24c <__i2b>
 8009b9c:	4607      	mov	r7, r0
 8009b9e:	2d00      	cmp	r5, #0
 8009ba0:	dd0c      	ble.n	8009bbc <_dtoa_r+0x754>
 8009ba2:	9b05      	ldr	r3, [sp, #20]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	dd09      	ble.n	8009bbc <_dtoa_r+0x754>
 8009ba8:	42ab      	cmp	r3, r5
 8009baa:	9a04      	ldr	r2, [sp, #16]
 8009bac:	bfa8      	it	ge
 8009bae:	462b      	movge	r3, r5
 8009bb0:	1ad2      	subs	r2, r2, r3
 8009bb2:	9204      	str	r2, [sp, #16]
 8009bb4:	9a05      	ldr	r2, [sp, #20]
 8009bb6:	1aed      	subs	r5, r5, r3
 8009bb8:	1ad3      	subs	r3, r2, r3
 8009bba:	9305      	str	r3, [sp, #20]
 8009bbc:	9b07      	ldr	r3, [sp, #28]
 8009bbe:	b31b      	cbz	r3, 8009c08 <_dtoa_r+0x7a0>
 8009bc0:	9b08      	ldr	r3, [sp, #32]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	f000 80af 	beq.w	8009d26 <_dtoa_r+0x8be>
 8009bc8:	2e00      	cmp	r6, #0
 8009bca:	dd13      	ble.n	8009bf4 <_dtoa_r+0x78c>
 8009bcc:	4639      	mov	r1, r7
 8009bce:	4632      	mov	r2, r6
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	f000 fbfb 	bl	800a3cc <__pow5mult>
 8009bd6:	ee18 2a10 	vmov	r2, s16
 8009bda:	4601      	mov	r1, r0
 8009bdc:	4607      	mov	r7, r0
 8009bde:	4620      	mov	r0, r4
 8009be0:	f000 fb4a 	bl	800a278 <__multiply>
 8009be4:	ee18 1a10 	vmov	r1, s16
 8009be8:	4680      	mov	r8, r0
 8009bea:	4620      	mov	r0, r4
 8009bec:	f000 fa76 	bl	800a0dc <_Bfree>
 8009bf0:	ee08 8a10 	vmov	s16, r8
 8009bf4:	9b07      	ldr	r3, [sp, #28]
 8009bf6:	1b9a      	subs	r2, r3, r6
 8009bf8:	d006      	beq.n	8009c08 <_dtoa_r+0x7a0>
 8009bfa:	ee18 1a10 	vmov	r1, s16
 8009bfe:	4620      	mov	r0, r4
 8009c00:	f000 fbe4 	bl	800a3cc <__pow5mult>
 8009c04:	ee08 0a10 	vmov	s16, r0
 8009c08:	2101      	movs	r1, #1
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	f000 fb1e 	bl	800a24c <__i2b>
 8009c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	4606      	mov	r6, r0
 8009c16:	f340 8088 	ble.w	8009d2a <_dtoa_r+0x8c2>
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	4601      	mov	r1, r0
 8009c1e:	4620      	mov	r0, r4
 8009c20:	f000 fbd4 	bl	800a3cc <__pow5mult>
 8009c24:	9b06      	ldr	r3, [sp, #24]
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	4606      	mov	r6, r0
 8009c2a:	f340 8081 	ble.w	8009d30 <_dtoa_r+0x8c8>
 8009c2e:	f04f 0800 	mov.w	r8, #0
 8009c32:	6933      	ldr	r3, [r6, #16]
 8009c34:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009c38:	6918      	ldr	r0, [r3, #16]
 8009c3a:	f000 fab7 	bl	800a1ac <__hi0bits>
 8009c3e:	f1c0 0020 	rsb	r0, r0, #32
 8009c42:	9b05      	ldr	r3, [sp, #20]
 8009c44:	4418      	add	r0, r3
 8009c46:	f010 001f 	ands.w	r0, r0, #31
 8009c4a:	f000 8092 	beq.w	8009d72 <_dtoa_r+0x90a>
 8009c4e:	f1c0 0320 	rsb	r3, r0, #32
 8009c52:	2b04      	cmp	r3, #4
 8009c54:	f340 808a 	ble.w	8009d6c <_dtoa_r+0x904>
 8009c58:	f1c0 001c 	rsb	r0, r0, #28
 8009c5c:	9b04      	ldr	r3, [sp, #16]
 8009c5e:	4403      	add	r3, r0
 8009c60:	9304      	str	r3, [sp, #16]
 8009c62:	9b05      	ldr	r3, [sp, #20]
 8009c64:	4403      	add	r3, r0
 8009c66:	4405      	add	r5, r0
 8009c68:	9305      	str	r3, [sp, #20]
 8009c6a:	9b04      	ldr	r3, [sp, #16]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	dd07      	ble.n	8009c80 <_dtoa_r+0x818>
 8009c70:	ee18 1a10 	vmov	r1, s16
 8009c74:	461a      	mov	r2, r3
 8009c76:	4620      	mov	r0, r4
 8009c78:	f000 fc02 	bl	800a480 <__lshift>
 8009c7c:	ee08 0a10 	vmov	s16, r0
 8009c80:	9b05      	ldr	r3, [sp, #20]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	dd05      	ble.n	8009c92 <_dtoa_r+0x82a>
 8009c86:	4631      	mov	r1, r6
 8009c88:	461a      	mov	r2, r3
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	f000 fbf8 	bl	800a480 <__lshift>
 8009c90:	4606      	mov	r6, r0
 8009c92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d06e      	beq.n	8009d76 <_dtoa_r+0x90e>
 8009c98:	ee18 0a10 	vmov	r0, s16
 8009c9c:	4631      	mov	r1, r6
 8009c9e:	f000 fc5f 	bl	800a560 <__mcmp>
 8009ca2:	2800      	cmp	r0, #0
 8009ca4:	da67      	bge.n	8009d76 <_dtoa_r+0x90e>
 8009ca6:	9b00      	ldr	r3, [sp, #0]
 8009ca8:	3b01      	subs	r3, #1
 8009caa:	ee18 1a10 	vmov	r1, s16
 8009cae:	9300      	str	r3, [sp, #0]
 8009cb0:	220a      	movs	r2, #10
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	f000 fa33 	bl	800a120 <__multadd>
 8009cba:	9b08      	ldr	r3, [sp, #32]
 8009cbc:	ee08 0a10 	vmov	s16, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f000 81b1 	beq.w	800a028 <_dtoa_r+0xbc0>
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	4639      	mov	r1, r7
 8009cca:	220a      	movs	r2, #10
 8009ccc:	4620      	mov	r0, r4
 8009cce:	f000 fa27 	bl	800a120 <__multadd>
 8009cd2:	9b02      	ldr	r3, [sp, #8]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	4607      	mov	r7, r0
 8009cd8:	f300 808e 	bgt.w	8009df8 <_dtoa_r+0x990>
 8009cdc:	9b06      	ldr	r3, [sp, #24]
 8009cde:	2b02      	cmp	r3, #2
 8009ce0:	dc51      	bgt.n	8009d86 <_dtoa_r+0x91e>
 8009ce2:	e089      	b.n	8009df8 <_dtoa_r+0x990>
 8009ce4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ce6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009cea:	e74b      	b.n	8009b84 <_dtoa_r+0x71c>
 8009cec:	9b03      	ldr	r3, [sp, #12]
 8009cee:	1e5e      	subs	r6, r3, #1
 8009cf0:	9b07      	ldr	r3, [sp, #28]
 8009cf2:	42b3      	cmp	r3, r6
 8009cf4:	bfbf      	itttt	lt
 8009cf6:	9b07      	ldrlt	r3, [sp, #28]
 8009cf8:	9607      	strlt	r6, [sp, #28]
 8009cfa:	1af2      	sublt	r2, r6, r3
 8009cfc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009cfe:	bfb6      	itet	lt
 8009d00:	189b      	addlt	r3, r3, r2
 8009d02:	1b9e      	subge	r6, r3, r6
 8009d04:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009d06:	9b03      	ldr	r3, [sp, #12]
 8009d08:	bfb8      	it	lt
 8009d0a:	2600      	movlt	r6, #0
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	bfb7      	itett	lt
 8009d10:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009d14:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009d18:	1a9d      	sublt	r5, r3, r2
 8009d1a:	2300      	movlt	r3, #0
 8009d1c:	e734      	b.n	8009b88 <_dtoa_r+0x720>
 8009d1e:	9e07      	ldr	r6, [sp, #28]
 8009d20:	9d04      	ldr	r5, [sp, #16]
 8009d22:	9f08      	ldr	r7, [sp, #32]
 8009d24:	e73b      	b.n	8009b9e <_dtoa_r+0x736>
 8009d26:	9a07      	ldr	r2, [sp, #28]
 8009d28:	e767      	b.n	8009bfa <_dtoa_r+0x792>
 8009d2a:	9b06      	ldr	r3, [sp, #24]
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	dc18      	bgt.n	8009d62 <_dtoa_r+0x8fa>
 8009d30:	f1ba 0f00 	cmp.w	sl, #0
 8009d34:	d115      	bne.n	8009d62 <_dtoa_r+0x8fa>
 8009d36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d3a:	b993      	cbnz	r3, 8009d62 <_dtoa_r+0x8fa>
 8009d3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d40:	0d1b      	lsrs	r3, r3, #20
 8009d42:	051b      	lsls	r3, r3, #20
 8009d44:	b183      	cbz	r3, 8009d68 <_dtoa_r+0x900>
 8009d46:	9b04      	ldr	r3, [sp, #16]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	9304      	str	r3, [sp, #16]
 8009d4c:	9b05      	ldr	r3, [sp, #20]
 8009d4e:	3301      	adds	r3, #1
 8009d50:	9305      	str	r3, [sp, #20]
 8009d52:	f04f 0801 	mov.w	r8, #1
 8009d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	f47f af6a 	bne.w	8009c32 <_dtoa_r+0x7ca>
 8009d5e:	2001      	movs	r0, #1
 8009d60:	e76f      	b.n	8009c42 <_dtoa_r+0x7da>
 8009d62:	f04f 0800 	mov.w	r8, #0
 8009d66:	e7f6      	b.n	8009d56 <_dtoa_r+0x8ee>
 8009d68:	4698      	mov	r8, r3
 8009d6a:	e7f4      	b.n	8009d56 <_dtoa_r+0x8ee>
 8009d6c:	f43f af7d 	beq.w	8009c6a <_dtoa_r+0x802>
 8009d70:	4618      	mov	r0, r3
 8009d72:	301c      	adds	r0, #28
 8009d74:	e772      	b.n	8009c5c <_dtoa_r+0x7f4>
 8009d76:	9b03      	ldr	r3, [sp, #12]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	dc37      	bgt.n	8009dec <_dtoa_r+0x984>
 8009d7c:	9b06      	ldr	r3, [sp, #24]
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	dd34      	ble.n	8009dec <_dtoa_r+0x984>
 8009d82:	9b03      	ldr	r3, [sp, #12]
 8009d84:	9302      	str	r3, [sp, #8]
 8009d86:	9b02      	ldr	r3, [sp, #8]
 8009d88:	b96b      	cbnz	r3, 8009da6 <_dtoa_r+0x93e>
 8009d8a:	4631      	mov	r1, r6
 8009d8c:	2205      	movs	r2, #5
 8009d8e:	4620      	mov	r0, r4
 8009d90:	f000 f9c6 	bl	800a120 <__multadd>
 8009d94:	4601      	mov	r1, r0
 8009d96:	4606      	mov	r6, r0
 8009d98:	ee18 0a10 	vmov	r0, s16
 8009d9c:	f000 fbe0 	bl	800a560 <__mcmp>
 8009da0:	2800      	cmp	r0, #0
 8009da2:	f73f adbb 	bgt.w	800991c <_dtoa_r+0x4b4>
 8009da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009da8:	9d01      	ldr	r5, [sp, #4]
 8009daa:	43db      	mvns	r3, r3
 8009dac:	9300      	str	r3, [sp, #0]
 8009dae:	f04f 0800 	mov.w	r8, #0
 8009db2:	4631      	mov	r1, r6
 8009db4:	4620      	mov	r0, r4
 8009db6:	f000 f991 	bl	800a0dc <_Bfree>
 8009dba:	2f00      	cmp	r7, #0
 8009dbc:	f43f aea4 	beq.w	8009b08 <_dtoa_r+0x6a0>
 8009dc0:	f1b8 0f00 	cmp.w	r8, #0
 8009dc4:	d005      	beq.n	8009dd2 <_dtoa_r+0x96a>
 8009dc6:	45b8      	cmp	r8, r7
 8009dc8:	d003      	beq.n	8009dd2 <_dtoa_r+0x96a>
 8009dca:	4641      	mov	r1, r8
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f000 f985 	bl	800a0dc <_Bfree>
 8009dd2:	4639      	mov	r1, r7
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	f000 f981 	bl	800a0dc <_Bfree>
 8009dda:	e695      	b.n	8009b08 <_dtoa_r+0x6a0>
 8009ddc:	2600      	movs	r6, #0
 8009dde:	4637      	mov	r7, r6
 8009de0:	e7e1      	b.n	8009da6 <_dtoa_r+0x93e>
 8009de2:	9700      	str	r7, [sp, #0]
 8009de4:	4637      	mov	r7, r6
 8009de6:	e599      	b.n	800991c <_dtoa_r+0x4b4>
 8009de8:	40240000 	.word	0x40240000
 8009dec:	9b08      	ldr	r3, [sp, #32]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	f000 80ca 	beq.w	8009f88 <_dtoa_r+0xb20>
 8009df4:	9b03      	ldr	r3, [sp, #12]
 8009df6:	9302      	str	r3, [sp, #8]
 8009df8:	2d00      	cmp	r5, #0
 8009dfa:	dd05      	ble.n	8009e08 <_dtoa_r+0x9a0>
 8009dfc:	4639      	mov	r1, r7
 8009dfe:	462a      	mov	r2, r5
 8009e00:	4620      	mov	r0, r4
 8009e02:	f000 fb3d 	bl	800a480 <__lshift>
 8009e06:	4607      	mov	r7, r0
 8009e08:	f1b8 0f00 	cmp.w	r8, #0
 8009e0c:	d05b      	beq.n	8009ec6 <_dtoa_r+0xa5e>
 8009e0e:	6879      	ldr	r1, [r7, #4]
 8009e10:	4620      	mov	r0, r4
 8009e12:	f000 f923 	bl	800a05c <_Balloc>
 8009e16:	4605      	mov	r5, r0
 8009e18:	b928      	cbnz	r0, 8009e26 <_dtoa_r+0x9be>
 8009e1a:	4b87      	ldr	r3, [pc, #540]	; (800a038 <_dtoa_r+0xbd0>)
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009e22:	f7ff bb3b 	b.w	800949c <_dtoa_r+0x34>
 8009e26:	693a      	ldr	r2, [r7, #16]
 8009e28:	3202      	adds	r2, #2
 8009e2a:	0092      	lsls	r2, r2, #2
 8009e2c:	f107 010c 	add.w	r1, r7, #12
 8009e30:	300c      	adds	r0, #12
 8009e32:	f7fe fded 	bl	8008a10 <memcpy>
 8009e36:	2201      	movs	r2, #1
 8009e38:	4629      	mov	r1, r5
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	f000 fb20 	bl	800a480 <__lshift>
 8009e40:	9b01      	ldr	r3, [sp, #4]
 8009e42:	f103 0901 	add.w	r9, r3, #1
 8009e46:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	9305      	str	r3, [sp, #20]
 8009e4e:	f00a 0301 	and.w	r3, sl, #1
 8009e52:	46b8      	mov	r8, r7
 8009e54:	9304      	str	r3, [sp, #16]
 8009e56:	4607      	mov	r7, r0
 8009e58:	4631      	mov	r1, r6
 8009e5a:	ee18 0a10 	vmov	r0, s16
 8009e5e:	f7ff fa77 	bl	8009350 <quorem>
 8009e62:	4641      	mov	r1, r8
 8009e64:	9002      	str	r0, [sp, #8]
 8009e66:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009e6a:	ee18 0a10 	vmov	r0, s16
 8009e6e:	f000 fb77 	bl	800a560 <__mcmp>
 8009e72:	463a      	mov	r2, r7
 8009e74:	9003      	str	r0, [sp, #12]
 8009e76:	4631      	mov	r1, r6
 8009e78:	4620      	mov	r0, r4
 8009e7a:	f000 fb8d 	bl	800a598 <__mdiff>
 8009e7e:	68c2      	ldr	r2, [r0, #12]
 8009e80:	f109 3bff 	add.w	fp, r9, #4294967295
 8009e84:	4605      	mov	r5, r0
 8009e86:	bb02      	cbnz	r2, 8009eca <_dtoa_r+0xa62>
 8009e88:	4601      	mov	r1, r0
 8009e8a:	ee18 0a10 	vmov	r0, s16
 8009e8e:	f000 fb67 	bl	800a560 <__mcmp>
 8009e92:	4602      	mov	r2, r0
 8009e94:	4629      	mov	r1, r5
 8009e96:	4620      	mov	r0, r4
 8009e98:	9207      	str	r2, [sp, #28]
 8009e9a:	f000 f91f 	bl	800a0dc <_Bfree>
 8009e9e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009ea2:	ea43 0102 	orr.w	r1, r3, r2
 8009ea6:	9b04      	ldr	r3, [sp, #16]
 8009ea8:	430b      	orrs	r3, r1
 8009eaa:	464d      	mov	r5, r9
 8009eac:	d10f      	bne.n	8009ece <_dtoa_r+0xa66>
 8009eae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009eb2:	d02a      	beq.n	8009f0a <_dtoa_r+0xaa2>
 8009eb4:	9b03      	ldr	r3, [sp, #12]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	dd02      	ble.n	8009ec0 <_dtoa_r+0xa58>
 8009eba:	9b02      	ldr	r3, [sp, #8]
 8009ebc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009ec0:	f88b a000 	strb.w	sl, [fp]
 8009ec4:	e775      	b.n	8009db2 <_dtoa_r+0x94a>
 8009ec6:	4638      	mov	r0, r7
 8009ec8:	e7ba      	b.n	8009e40 <_dtoa_r+0x9d8>
 8009eca:	2201      	movs	r2, #1
 8009ecc:	e7e2      	b.n	8009e94 <_dtoa_r+0xa2c>
 8009ece:	9b03      	ldr	r3, [sp, #12]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	db04      	blt.n	8009ede <_dtoa_r+0xa76>
 8009ed4:	9906      	ldr	r1, [sp, #24]
 8009ed6:	430b      	orrs	r3, r1
 8009ed8:	9904      	ldr	r1, [sp, #16]
 8009eda:	430b      	orrs	r3, r1
 8009edc:	d122      	bne.n	8009f24 <_dtoa_r+0xabc>
 8009ede:	2a00      	cmp	r2, #0
 8009ee0:	ddee      	ble.n	8009ec0 <_dtoa_r+0xa58>
 8009ee2:	ee18 1a10 	vmov	r1, s16
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	4620      	mov	r0, r4
 8009eea:	f000 fac9 	bl	800a480 <__lshift>
 8009eee:	4631      	mov	r1, r6
 8009ef0:	ee08 0a10 	vmov	s16, r0
 8009ef4:	f000 fb34 	bl	800a560 <__mcmp>
 8009ef8:	2800      	cmp	r0, #0
 8009efa:	dc03      	bgt.n	8009f04 <_dtoa_r+0xa9c>
 8009efc:	d1e0      	bne.n	8009ec0 <_dtoa_r+0xa58>
 8009efe:	f01a 0f01 	tst.w	sl, #1
 8009f02:	d0dd      	beq.n	8009ec0 <_dtoa_r+0xa58>
 8009f04:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009f08:	d1d7      	bne.n	8009eba <_dtoa_r+0xa52>
 8009f0a:	2339      	movs	r3, #57	; 0x39
 8009f0c:	f88b 3000 	strb.w	r3, [fp]
 8009f10:	462b      	mov	r3, r5
 8009f12:	461d      	mov	r5, r3
 8009f14:	3b01      	subs	r3, #1
 8009f16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009f1a:	2a39      	cmp	r2, #57	; 0x39
 8009f1c:	d071      	beq.n	800a002 <_dtoa_r+0xb9a>
 8009f1e:	3201      	adds	r2, #1
 8009f20:	701a      	strb	r2, [r3, #0]
 8009f22:	e746      	b.n	8009db2 <_dtoa_r+0x94a>
 8009f24:	2a00      	cmp	r2, #0
 8009f26:	dd07      	ble.n	8009f38 <_dtoa_r+0xad0>
 8009f28:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009f2c:	d0ed      	beq.n	8009f0a <_dtoa_r+0xaa2>
 8009f2e:	f10a 0301 	add.w	r3, sl, #1
 8009f32:	f88b 3000 	strb.w	r3, [fp]
 8009f36:	e73c      	b.n	8009db2 <_dtoa_r+0x94a>
 8009f38:	9b05      	ldr	r3, [sp, #20]
 8009f3a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009f3e:	4599      	cmp	r9, r3
 8009f40:	d047      	beq.n	8009fd2 <_dtoa_r+0xb6a>
 8009f42:	ee18 1a10 	vmov	r1, s16
 8009f46:	2300      	movs	r3, #0
 8009f48:	220a      	movs	r2, #10
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	f000 f8e8 	bl	800a120 <__multadd>
 8009f50:	45b8      	cmp	r8, r7
 8009f52:	ee08 0a10 	vmov	s16, r0
 8009f56:	f04f 0300 	mov.w	r3, #0
 8009f5a:	f04f 020a 	mov.w	r2, #10
 8009f5e:	4641      	mov	r1, r8
 8009f60:	4620      	mov	r0, r4
 8009f62:	d106      	bne.n	8009f72 <_dtoa_r+0xb0a>
 8009f64:	f000 f8dc 	bl	800a120 <__multadd>
 8009f68:	4680      	mov	r8, r0
 8009f6a:	4607      	mov	r7, r0
 8009f6c:	f109 0901 	add.w	r9, r9, #1
 8009f70:	e772      	b.n	8009e58 <_dtoa_r+0x9f0>
 8009f72:	f000 f8d5 	bl	800a120 <__multadd>
 8009f76:	4639      	mov	r1, r7
 8009f78:	4680      	mov	r8, r0
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	220a      	movs	r2, #10
 8009f7e:	4620      	mov	r0, r4
 8009f80:	f000 f8ce 	bl	800a120 <__multadd>
 8009f84:	4607      	mov	r7, r0
 8009f86:	e7f1      	b.n	8009f6c <_dtoa_r+0xb04>
 8009f88:	9b03      	ldr	r3, [sp, #12]
 8009f8a:	9302      	str	r3, [sp, #8]
 8009f8c:	9d01      	ldr	r5, [sp, #4]
 8009f8e:	ee18 0a10 	vmov	r0, s16
 8009f92:	4631      	mov	r1, r6
 8009f94:	f7ff f9dc 	bl	8009350 <quorem>
 8009f98:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009f9c:	9b01      	ldr	r3, [sp, #4]
 8009f9e:	f805 ab01 	strb.w	sl, [r5], #1
 8009fa2:	1aea      	subs	r2, r5, r3
 8009fa4:	9b02      	ldr	r3, [sp, #8]
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	dd09      	ble.n	8009fbe <_dtoa_r+0xb56>
 8009faa:	ee18 1a10 	vmov	r1, s16
 8009fae:	2300      	movs	r3, #0
 8009fb0:	220a      	movs	r2, #10
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	f000 f8b4 	bl	800a120 <__multadd>
 8009fb8:	ee08 0a10 	vmov	s16, r0
 8009fbc:	e7e7      	b.n	8009f8e <_dtoa_r+0xb26>
 8009fbe:	9b02      	ldr	r3, [sp, #8]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	bfc8      	it	gt
 8009fc4:	461d      	movgt	r5, r3
 8009fc6:	9b01      	ldr	r3, [sp, #4]
 8009fc8:	bfd8      	it	le
 8009fca:	2501      	movle	r5, #1
 8009fcc:	441d      	add	r5, r3
 8009fce:	f04f 0800 	mov.w	r8, #0
 8009fd2:	ee18 1a10 	vmov	r1, s16
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	4620      	mov	r0, r4
 8009fda:	f000 fa51 	bl	800a480 <__lshift>
 8009fde:	4631      	mov	r1, r6
 8009fe0:	ee08 0a10 	vmov	s16, r0
 8009fe4:	f000 fabc 	bl	800a560 <__mcmp>
 8009fe8:	2800      	cmp	r0, #0
 8009fea:	dc91      	bgt.n	8009f10 <_dtoa_r+0xaa8>
 8009fec:	d102      	bne.n	8009ff4 <_dtoa_r+0xb8c>
 8009fee:	f01a 0f01 	tst.w	sl, #1
 8009ff2:	d18d      	bne.n	8009f10 <_dtoa_r+0xaa8>
 8009ff4:	462b      	mov	r3, r5
 8009ff6:	461d      	mov	r5, r3
 8009ff8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ffc:	2a30      	cmp	r2, #48	; 0x30
 8009ffe:	d0fa      	beq.n	8009ff6 <_dtoa_r+0xb8e>
 800a000:	e6d7      	b.n	8009db2 <_dtoa_r+0x94a>
 800a002:	9a01      	ldr	r2, [sp, #4]
 800a004:	429a      	cmp	r2, r3
 800a006:	d184      	bne.n	8009f12 <_dtoa_r+0xaaa>
 800a008:	9b00      	ldr	r3, [sp, #0]
 800a00a:	3301      	adds	r3, #1
 800a00c:	9300      	str	r3, [sp, #0]
 800a00e:	2331      	movs	r3, #49	; 0x31
 800a010:	7013      	strb	r3, [r2, #0]
 800a012:	e6ce      	b.n	8009db2 <_dtoa_r+0x94a>
 800a014:	4b09      	ldr	r3, [pc, #36]	; (800a03c <_dtoa_r+0xbd4>)
 800a016:	f7ff ba95 	b.w	8009544 <_dtoa_r+0xdc>
 800a01a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	f47f aa6e 	bne.w	80094fe <_dtoa_r+0x96>
 800a022:	4b07      	ldr	r3, [pc, #28]	; (800a040 <_dtoa_r+0xbd8>)
 800a024:	f7ff ba8e 	b.w	8009544 <_dtoa_r+0xdc>
 800a028:	9b02      	ldr	r3, [sp, #8]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	dcae      	bgt.n	8009f8c <_dtoa_r+0xb24>
 800a02e:	9b06      	ldr	r3, [sp, #24]
 800a030:	2b02      	cmp	r3, #2
 800a032:	f73f aea8 	bgt.w	8009d86 <_dtoa_r+0x91e>
 800a036:	e7a9      	b.n	8009f8c <_dtoa_r+0xb24>
 800a038:	0800bc17 	.word	0x0800bc17
 800a03c:	0800bb74 	.word	0x0800bb74
 800a040:	0800bb98 	.word	0x0800bb98

0800a044 <_localeconv_r>:
 800a044:	4800      	ldr	r0, [pc, #0]	; (800a048 <_localeconv_r+0x4>)
 800a046:	4770      	bx	lr
 800a048:	20000164 	.word	0x20000164

0800a04c <malloc>:
 800a04c:	4b02      	ldr	r3, [pc, #8]	; (800a058 <malloc+0xc>)
 800a04e:	4601      	mov	r1, r0
 800a050:	6818      	ldr	r0, [r3, #0]
 800a052:	f000 bc09 	b.w	800a868 <_malloc_r>
 800a056:	bf00      	nop
 800a058:	20000010 	.word	0x20000010

0800a05c <_Balloc>:
 800a05c:	b570      	push	{r4, r5, r6, lr}
 800a05e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a060:	4604      	mov	r4, r0
 800a062:	460d      	mov	r5, r1
 800a064:	b976      	cbnz	r6, 800a084 <_Balloc+0x28>
 800a066:	2010      	movs	r0, #16
 800a068:	f7ff fff0 	bl	800a04c <malloc>
 800a06c:	4602      	mov	r2, r0
 800a06e:	6260      	str	r0, [r4, #36]	; 0x24
 800a070:	b920      	cbnz	r0, 800a07c <_Balloc+0x20>
 800a072:	4b18      	ldr	r3, [pc, #96]	; (800a0d4 <_Balloc+0x78>)
 800a074:	4818      	ldr	r0, [pc, #96]	; (800a0d8 <_Balloc+0x7c>)
 800a076:	2166      	movs	r1, #102	; 0x66
 800a078:	f000 fdd6 	bl	800ac28 <__assert_func>
 800a07c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a080:	6006      	str	r6, [r0, #0]
 800a082:	60c6      	str	r6, [r0, #12]
 800a084:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a086:	68f3      	ldr	r3, [r6, #12]
 800a088:	b183      	cbz	r3, 800a0ac <_Balloc+0x50>
 800a08a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a092:	b9b8      	cbnz	r0, 800a0c4 <_Balloc+0x68>
 800a094:	2101      	movs	r1, #1
 800a096:	fa01 f605 	lsl.w	r6, r1, r5
 800a09a:	1d72      	adds	r2, r6, #5
 800a09c:	0092      	lsls	r2, r2, #2
 800a09e:	4620      	mov	r0, r4
 800a0a0:	f000 fb60 	bl	800a764 <_calloc_r>
 800a0a4:	b160      	cbz	r0, 800a0c0 <_Balloc+0x64>
 800a0a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a0aa:	e00e      	b.n	800a0ca <_Balloc+0x6e>
 800a0ac:	2221      	movs	r2, #33	; 0x21
 800a0ae:	2104      	movs	r1, #4
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	f000 fb57 	bl	800a764 <_calloc_r>
 800a0b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0b8:	60f0      	str	r0, [r6, #12]
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d1e4      	bne.n	800a08a <_Balloc+0x2e>
 800a0c0:	2000      	movs	r0, #0
 800a0c2:	bd70      	pop	{r4, r5, r6, pc}
 800a0c4:	6802      	ldr	r2, [r0, #0]
 800a0c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a0d0:	e7f7      	b.n	800a0c2 <_Balloc+0x66>
 800a0d2:	bf00      	nop
 800a0d4:	0800bba5 	.word	0x0800bba5
 800a0d8:	0800bc28 	.word	0x0800bc28

0800a0dc <_Bfree>:
 800a0dc:	b570      	push	{r4, r5, r6, lr}
 800a0de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a0e0:	4605      	mov	r5, r0
 800a0e2:	460c      	mov	r4, r1
 800a0e4:	b976      	cbnz	r6, 800a104 <_Bfree+0x28>
 800a0e6:	2010      	movs	r0, #16
 800a0e8:	f7ff ffb0 	bl	800a04c <malloc>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	6268      	str	r0, [r5, #36]	; 0x24
 800a0f0:	b920      	cbnz	r0, 800a0fc <_Bfree+0x20>
 800a0f2:	4b09      	ldr	r3, [pc, #36]	; (800a118 <_Bfree+0x3c>)
 800a0f4:	4809      	ldr	r0, [pc, #36]	; (800a11c <_Bfree+0x40>)
 800a0f6:	218a      	movs	r1, #138	; 0x8a
 800a0f8:	f000 fd96 	bl	800ac28 <__assert_func>
 800a0fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a100:	6006      	str	r6, [r0, #0]
 800a102:	60c6      	str	r6, [r0, #12]
 800a104:	b13c      	cbz	r4, 800a116 <_Bfree+0x3a>
 800a106:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a108:	6862      	ldr	r2, [r4, #4]
 800a10a:	68db      	ldr	r3, [r3, #12]
 800a10c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a110:	6021      	str	r1, [r4, #0]
 800a112:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a116:	bd70      	pop	{r4, r5, r6, pc}
 800a118:	0800bba5 	.word	0x0800bba5
 800a11c:	0800bc28 	.word	0x0800bc28

0800a120 <__multadd>:
 800a120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a124:	690d      	ldr	r5, [r1, #16]
 800a126:	4607      	mov	r7, r0
 800a128:	460c      	mov	r4, r1
 800a12a:	461e      	mov	r6, r3
 800a12c:	f101 0c14 	add.w	ip, r1, #20
 800a130:	2000      	movs	r0, #0
 800a132:	f8dc 3000 	ldr.w	r3, [ip]
 800a136:	b299      	uxth	r1, r3
 800a138:	fb02 6101 	mla	r1, r2, r1, r6
 800a13c:	0c1e      	lsrs	r6, r3, #16
 800a13e:	0c0b      	lsrs	r3, r1, #16
 800a140:	fb02 3306 	mla	r3, r2, r6, r3
 800a144:	b289      	uxth	r1, r1
 800a146:	3001      	adds	r0, #1
 800a148:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a14c:	4285      	cmp	r5, r0
 800a14e:	f84c 1b04 	str.w	r1, [ip], #4
 800a152:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a156:	dcec      	bgt.n	800a132 <__multadd+0x12>
 800a158:	b30e      	cbz	r6, 800a19e <__multadd+0x7e>
 800a15a:	68a3      	ldr	r3, [r4, #8]
 800a15c:	42ab      	cmp	r3, r5
 800a15e:	dc19      	bgt.n	800a194 <__multadd+0x74>
 800a160:	6861      	ldr	r1, [r4, #4]
 800a162:	4638      	mov	r0, r7
 800a164:	3101      	adds	r1, #1
 800a166:	f7ff ff79 	bl	800a05c <_Balloc>
 800a16a:	4680      	mov	r8, r0
 800a16c:	b928      	cbnz	r0, 800a17a <__multadd+0x5a>
 800a16e:	4602      	mov	r2, r0
 800a170:	4b0c      	ldr	r3, [pc, #48]	; (800a1a4 <__multadd+0x84>)
 800a172:	480d      	ldr	r0, [pc, #52]	; (800a1a8 <__multadd+0x88>)
 800a174:	21b5      	movs	r1, #181	; 0xb5
 800a176:	f000 fd57 	bl	800ac28 <__assert_func>
 800a17a:	6922      	ldr	r2, [r4, #16]
 800a17c:	3202      	adds	r2, #2
 800a17e:	f104 010c 	add.w	r1, r4, #12
 800a182:	0092      	lsls	r2, r2, #2
 800a184:	300c      	adds	r0, #12
 800a186:	f7fe fc43 	bl	8008a10 <memcpy>
 800a18a:	4621      	mov	r1, r4
 800a18c:	4638      	mov	r0, r7
 800a18e:	f7ff ffa5 	bl	800a0dc <_Bfree>
 800a192:	4644      	mov	r4, r8
 800a194:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a198:	3501      	adds	r5, #1
 800a19a:	615e      	str	r6, [r3, #20]
 800a19c:	6125      	str	r5, [r4, #16]
 800a19e:	4620      	mov	r0, r4
 800a1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1a4:	0800bc17 	.word	0x0800bc17
 800a1a8:	0800bc28 	.word	0x0800bc28

0800a1ac <__hi0bits>:
 800a1ac:	0c03      	lsrs	r3, r0, #16
 800a1ae:	041b      	lsls	r3, r3, #16
 800a1b0:	b9d3      	cbnz	r3, 800a1e8 <__hi0bits+0x3c>
 800a1b2:	0400      	lsls	r0, r0, #16
 800a1b4:	2310      	movs	r3, #16
 800a1b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a1ba:	bf04      	itt	eq
 800a1bc:	0200      	lsleq	r0, r0, #8
 800a1be:	3308      	addeq	r3, #8
 800a1c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a1c4:	bf04      	itt	eq
 800a1c6:	0100      	lsleq	r0, r0, #4
 800a1c8:	3304      	addeq	r3, #4
 800a1ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a1ce:	bf04      	itt	eq
 800a1d0:	0080      	lsleq	r0, r0, #2
 800a1d2:	3302      	addeq	r3, #2
 800a1d4:	2800      	cmp	r0, #0
 800a1d6:	db05      	blt.n	800a1e4 <__hi0bits+0x38>
 800a1d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a1dc:	f103 0301 	add.w	r3, r3, #1
 800a1e0:	bf08      	it	eq
 800a1e2:	2320      	moveq	r3, #32
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	4770      	bx	lr
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	e7e4      	b.n	800a1b6 <__hi0bits+0xa>

0800a1ec <__lo0bits>:
 800a1ec:	6803      	ldr	r3, [r0, #0]
 800a1ee:	f013 0207 	ands.w	r2, r3, #7
 800a1f2:	4601      	mov	r1, r0
 800a1f4:	d00b      	beq.n	800a20e <__lo0bits+0x22>
 800a1f6:	07da      	lsls	r2, r3, #31
 800a1f8:	d423      	bmi.n	800a242 <__lo0bits+0x56>
 800a1fa:	0798      	lsls	r0, r3, #30
 800a1fc:	bf49      	itett	mi
 800a1fe:	085b      	lsrmi	r3, r3, #1
 800a200:	089b      	lsrpl	r3, r3, #2
 800a202:	2001      	movmi	r0, #1
 800a204:	600b      	strmi	r3, [r1, #0]
 800a206:	bf5c      	itt	pl
 800a208:	600b      	strpl	r3, [r1, #0]
 800a20a:	2002      	movpl	r0, #2
 800a20c:	4770      	bx	lr
 800a20e:	b298      	uxth	r0, r3
 800a210:	b9a8      	cbnz	r0, 800a23e <__lo0bits+0x52>
 800a212:	0c1b      	lsrs	r3, r3, #16
 800a214:	2010      	movs	r0, #16
 800a216:	b2da      	uxtb	r2, r3
 800a218:	b90a      	cbnz	r2, 800a21e <__lo0bits+0x32>
 800a21a:	3008      	adds	r0, #8
 800a21c:	0a1b      	lsrs	r3, r3, #8
 800a21e:	071a      	lsls	r2, r3, #28
 800a220:	bf04      	itt	eq
 800a222:	091b      	lsreq	r3, r3, #4
 800a224:	3004      	addeq	r0, #4
 800a226:	079a      	lsls	r2, r3, #30
 800a228:	bf04      	itt	eq
 800a22a:	089b      	lsreq	r3, r3, #2
 800a22c:	3002      	addeq	r0, #2
 800a22e:	07da      	lsls	r2, r3, #31
 800a230:	d403      	bmi.n	800a23a <__lo0bits+0x4e>
 800a232:	085b      	lsrs	r3, r3, #1
 800a234:	f100 0001 	add.w	r0, r0, #1
 800a238:	d005      	beq.n	800a246 <__lo0bits+0x5a>
 800a23a:	600b      	str	r3, [r1, #0]
 800a23c:	4770      	bx	lr
 800a23e:	4610      	mov	r0, r2
 800a240:	e7e9      	b.n	800a216 <__lo0bits+0x2a>
 800a242:	2000      	movs	r0, #0
 800a244:	4770      	bx	lr
 800a246:	2020      	movs	r0, #32
 800a248:	4770      	bx	lr
	...

0800a24c <__i2b>:
 800a24c:	b510      	push	{r4, lr}
 800a24e:	460c      	mov	r4, r1
 800a250:	2101      	movs	r1, #1
 800a252:	f7ff ff03 	bl	800a05c <_Balloc>
 800a256:	4602      	mov	r2, r0
 800a258:	b928      	cbnz	r0, 800a266 <__i2b+0x1a>
 800a25a:	4b05      	ldr	r3, [pc, #20]	; (800a270 <__i2b+0x24>)
 800a25c:	4805      	ldr	r0, [pc, #20]	; (800a274 <__i2b+0x28>)
 800a25e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a262:	f000 fce1 	bl	800ac28 <__assert_func>
 800a266:	2301      	movs	r3, #1
 800a268:	6144      	str	r4, [r0, #20]
 800a26a:	6103      	str	r3, [r0, #16]
 800a26c:	bd10      	pop	{r4, pc}
 800a26e:	bf00      	nop
 800a270:	0800bc17 	.word	0x0800bc17
 800a274:	0800bc28 	.word	0x0800bc28

0800a278 <__multiply>:
 800a278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a27c:	4691      	mov	r9, r2
 800a27e:	690a      	ldr	r2, [r1, #16]
 800a280:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a284:	429a      	cmp	r2, r3
 800a286:	bfb8      	it	lt
 800a288:	460b      	movlt	r3, r1
 800a28a:	460c      	mov	r4, r1
 800a28c:	bfbc      	itt	lt
 800a28e:	464c      	movlt	r4, r9
 800a290:	4699      	movlt	r9, r3
 800a292:	6927      	ldr	r7, [r4, #16]
 800a294:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a298:	68a3      	ldr	r3, [r4, #8]
 800a29a:	6861      	ldr	r1, [r4, #4]
 800a29c:	eb07 060a 	add.w	r6, r7, sl
 800a2a0:	42b3      	cmp	r3, r6
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	bfb8      	it	lt
 800a2a6:	3101      	addlt	r1, #1
 800a2a8:	f7ff fed8 	bl	800a05c <_Balloc>
 800a2ac:	b930      	cbnz	r0, 800a2bc <__multiply+0x44>
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	4b44      	ldr	r3, [pc, #272]	; (800a3c4 <__multiply+0x14c>)
 800a2b2:	4845      	ldr	r0, [pc, #276]	; (800a3c8 <__multiply+0x150>)
 800a2b4:	f240 115d 	movw	r1, #349	; 0x15d
 800a2b8:	f000 fcb6 	bl	800ac28 <__assert_func>
 800a2bc:	f100 0514 	add.w	r5, r0, #20
 800a2c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a2c4:	462b      	mov	r3, r5
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	4543      	cmp	r3, r8
 800a2ca:	d321      	bcc.n	800a310 <__multiply+0x98>
 800a2cc:	f104 0314 	add.w	r3, r4, #20
 800a2d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a2d4:	f109 0314 	add.w	r3, r9, #20
 800a2d8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a2dc:	9202      	str	r2, [sp, #8]
 800a2de:	1b3a      	subs	r2, r7, r4
 800a2e0:	3a15      	subs	r2, #21
 800a2e2:	f022 0203 	bic.w	r2, r2, #3
 800a2e6:	3204      	adds	r2, #4
 800a2e8:	f104 0115 	add.w	r1, r4, #21
 800a2ec:	428f      	cmp	r7, r1
 800a2ee:	bf38      	it	cc
 800a2f0:	2204      	movcc	r2, #4
 800a2f2:	9201      	str	r2, [sp, #4]
 800a2f4:	9a02      	ldr	r2, [sp, #8]
 800a2f6:	9303      	str	r3, [sp, #12]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d80c      	bhi.n	800a316 <__multiply+0x9e>
 800a2fc:	2e00      	cmp	r6, #0
 800a2fe:	dd03      	ble.n	800a308 <__multiply+0x90>
 800a300:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a304:	2b00      	cmp	r3, #0
 800a306:	d05a      	beq.n	800a3be <__multiply+0x146>
 800a308:	6106      	str	r6, [r0, #16]
 800a30a:	b005      	add	sp, #20
 800a30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a310:	f843 2b04 	str.w	r2, [r3], #4
 800a314:	e7d8      	b.n	800a2c8 <__multiply+0x50>
 800a316:	f8b3 a000 	ldrh.w	sl, [r3]
 800a31a:	f1ba 0f00 	cmp.w	sl, #0
 800a31e:	d024      	beq.n	800a36a <__multiply+0xf2>
 800a320:	f104 0e14 	add.w	lr, r4, #20
 800a324:	46a9      	mov	r9, r5
 800a326:	f04f 0c00 	mov.w	ip, #0
 800a32a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a32e:	f8d9 1000 	ldr.w	r1, [r9]
 800a332:	fa1f fb82 	uxth.w	fp, r2
 800a336:	b289      	uxth	r1, r1
 800a338:	fb0a 110b 	mla	r1, sl, fp, r1
 800a33c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a340:	f8d9 2000 	ldr.w	r2, [r9]
 800a344:	4461      	add	r1, ip
 800a346:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a34a:	fb0a c20b 	mla	r2, sl, fp, ip
 800a34e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a352:	b289      	uxth	r1, r1
 800a354:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a358:	4577      	cmp	r7, lr
 800a35a:	f849 1b04 	str.w	r1, [r9], #4
 800a35e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a362:	d8e2      	bhi.n	800a32a <__multiply+0xb2>
 800a364:	9a01      	ldr	r2, [sp, #4]
 800a366:	f845 c002 	str.w	ip, [r5, r2]
 800a36a:	9a03      	ldr	r2, [sp, #12]
 800a36c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a370:	3304      	adds	r3, #4
 800a372:	f1b9 0f00 	cmp.w	r9, #0
 800a376:	d020      	beq.n	800a3ba <__multiply+0x142>
 800a378:	6829      	ldr	r1, [r5, #0]
 800a37a:	f104 0c14 	add.w	ip, r4, #20
 800a37e:	46ae      	mov	lr, r5
 800a380:	f04f 0a00 	mov.w	sl, #0
 800a384:	f8bc b000 	ldrh.w	fp, [ip]
 800a388:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a38c:	fb09 220b 	mla	r2, r9, fp, r2
 800a390:	4492      	add	sl, r2
 800a392:	b289      	uxth	r1, r1
 800a394:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a398:	f84e 1b04 	str.w	r1, [lr], #4
 800a39c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a3a0:	f8be 1000 	ldrh.w	r1, [lr]
 800a3a4:	0c12      	lsrs	r2, r2, #16
 800a3a6:	fb09 1102 	mla	r1, r9, r2, r1
 800a3aa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a3ae:	4567      	cmp	r7, ip
 800a3b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a3b4:	d8e6      	bhi.n	800a384 <__multiply+0x10c>
 800a3b6:	9a01      	ldr	r2, [sp, #4]
 800a3b8:	50a9      	str	r1, [r5, r2]
 800a3ba:	3504      	adds	r5, #4
 800a3bc:	e79a      	b.n	800a2f4 <__multiply+0x7c>
 800a3be:	3e01      	subs	r6, #1
 800a3c0:	e79c      	b.n	800a2fc <__multiply+0x84>
 800a3c2:	bf00      	nop
 800a3c4:	0800bc17 	.word	0x0800bc17
 800a3c8:	0800bc28 	.word	0x0800bc28

0800a3cc <__pow5mult>:
 800a3cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3d0:	4615      	mov	r5, r2
 800a3d2:	f012 0203 	ands.w	r2, r2, #3
 800a3d6:	4606      	mov	r6, r0
 800a3d8:	460f      	mov	r7, r1
 800a3da:	d007      	beq.n	800a3ec <__pow5mult+0x20>
 800a3dc:	4c25      	ldr	r4, [pc, #148]	; (800a474 <__pow5mult+0xa8>)
 800a3de:	3a01      	subs	r2, #1
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a3e6:	f7ff fe9b 	bl	800a120 <__multadd>
 800a3ea:	4607      	mov	r7, r0
 800a3ec:	10ad      	asrs	r5, r5, #2
 800a3ee:	d03d      	beq.n	800a46c <__pow5mult+0xa0>
 800a3f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a3f2:	b97c      	cbnz	r4, 800a414 <__pow5mult+0x48>
 800a3f4:	2010      	movs	r0, #16
 800a3f6:	f7ff fe29 	bl	800a04c <malloc>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	6270      	str	r0, [r6, #36]	; 0x24
 800a3fe:	b928      	cbnz	r0, 800a40c <__pow5mult+0x40>
 800a400:	4b1d      	ldr	r3, [pc, #116]	; (800a478 <__pow5mult+0xac>)
 800a402:	481e      	ldr	r0, [pc, #120]	; (800a47c <__pow5mult+0xb0>)
 800a404:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a408:	f000 fc0e 	bl	800ac28 <__assert_func>
 800a40c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a410:	6004      	str	r4, [r0, #0]
 800a412:	60c4      	str	r4, [r0, #12]
 800a414:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a418:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a41c:	b94c      	cbnz	r4, 800a432 <__pow5mult+0x66>
 800a41e:	f240 2171 	movw	r1, #625	; 0x271
 800a422:	4630      	mov	r0, r6
 800a424:	f7ff ff12 	bl	800a24c <__i2b>
 800a428:	2300      	movs	r3, #0
 800a42a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a42e:	4604      	mov	r4, r0
 800a430:	6003      	str	r3, [r0, #0]
 800a432:	f04f 0900 	mov.w	r9, #0
 800a436:	07eb      	lsls	r3, r5, #31
 800a438:	d50a      	bpl.n	800a450 <__pow5mult+0x84>
 800a43a:	4639      	mov	r1, r7
 800a43c:	4622      	mov	r2, r4
 800a43e:	4630      	mov	r0, r6
 800a440:	f7ff ff1a 	bl	800a278 <__multiply>
 800a444:	4639      	mov	r1, r7
 800a446:	4680      	mov	r8, r0
 800a448:	4630      	mov	r0, r6
 800a44a:	f7ff fe47 	bl	800a0dc <_Bfree>
 800a44e:	4647      	mov	r7, r8
 800a450:	106d      	asrs	r5, r5, #1
 800a452:	d00b      	beq.n	800a46c <__pow5mult+0xa0>
 800a454:	6820      	ldr	r0, [r4, #0]
 800a456:	b938      	cbnz	r0, 800a468 <__pow5mult+0x9c>
 800a458:	4622      	mov	r2, r4
 800a45a:	4621      	mov	r1, r4
 800a45c:	4630      	mov	r0, r6
 800a45e:	f7ff ff0b 	bl	800a278 <__multiply>
 800a462:	6020      	str	r0, [r4, #0]
 800a464:	f8c0 9000 	str.w	r9, [r0]
 800a468:	4604      	mov	r4, r0
 800a46a:	e7e4      	b.n	800a436 <__pow5mult+0x6a>
 800a46c:	4638      	mov	r0, r7
 800a46e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a472:	bf00      	nop
 800a474:	0800bd78 	.word	0x0800bd78
 800a478:	0800bba5 	.word	0x0800bba5
 800a47c:	0800bc28 	.word	0x0800bc28

0800a480 <__lshift>:
 800a480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a484:	460c      	mov	r4, r1
 800a486:	6849      	ldr	r1, [r1, #4]
 800a488:	6923      	ldr	r3, [r4, #16]
 800a48a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a48e:	68a3      	ldr	r3, [r4, #8]
 800a490:	4607      	mov	r7, r0
 800a492:	4691      	mov	r9, r2
 800a494:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a498:	f108 0601 	add.w	r6, r8, #1
 800a49c:	42b3      	cmp	r3, r6
 800a49e:	db0b      	blt.n	800a4b8 <__lshift+0x38>
 800a4a0:	4638      	mov	r0, r7
 800a4a2:	f7ff fddb 	bl	800a05c <_Balloc>
 800a4a6:	4605      	mov	r5, r0
 800a4a8:	b948      	cbnz	r0, 800a4be <__lshift+0x3e>
 800a4aa:	4602      	mov	r2, r0
 800a4ac:	4b2a      	ldr	r3, [pc, #168]	; (800a558 <__lshift+0xd8>)
 800a4ae:	482b      	ldr	r0, [pc, #172]	; (800a55c <__lshift+0xdc>)
 800a4b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a4b4:	f000 fbb8 	bl	800ac28 <__assert_func>
 800a4b8:	3101      	adds	r1, #1
 800a4ba:	005b      	lsls	r3, r3, #1
 800a4bc:	e7ee      	b.n	800a49c <__lshift+0x1c>
 800a4be:	2300      	movs	r3, #0
 800a4c0:	f100 0114 	add.w	r1, r0, #20
 800a4c4:	f100 0210 	add.w	r2, r0, #16
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	4553      	cmp	r3, sl
 800a4cc:	db37      	blt.n	800a53e <__lshift+0xbe>
 800a4ce:	6920      	ldr	r0, [r4, #16]
 800a4d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a4d4:	f104 0314 	add.w	r3, r4, #20
 800a4d8:	f019 091f 	ands.w	r9, r9, #31
 800a4dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a4e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a4e4:	d02f      	beq.n	800a546 <__lshift+0xc6>
 800a4e6:	f1c9 0e20 	rsb	lr, r9, #32
 800a4ea:	468a      	mov	sl, r1
 800a4ec:	f04f 0c00 	mov.w	ip, #0
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	fa02 f209 	lsl.w	r2, r2, r9
 800a4f6:	ea42 020c 	orr.w	r2, r2, ip
 800a4fa:	f84a 2b04 	str.w	r2, [sl], #4
 800a4fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800a502:	4298      	cmp	r0, r3
 800a504:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a508:	d8f2      	bhi.n	800a4f0 <__lshift+0x70>
 800a50a:	1b03      	subs	r3, r0, r4
 800a50c:	3b15      	subs	r3, #21
 800a50e:	f023 0303 	bic.w	r3, r3, #3
 800a512:	3304      	adds	r3, #4
 800a514:	f104 0215 	add.w	r2, r4, #21
 800a518:	4290      	cmp	r0, r2
 800a51a:	bf38      	it	cc
 800a51c:	2304      	movcc	r3, #4
 800a51e:	f841 c003 	str.w	ip, [r1, r3]
 800a522:	f1bc 0f00 	cmp.w	ip, #0
 800a526:	d001      	beq.n	800a52c <__lshift+0xac>
 800a528:	f108 0602 	add.w	r6, r8, #2
 800a52c:	3e01      	subs	r6, #1
 800a52e:	4638      	mov	r0, r7
 800a530:	612e      	str	r6, [r5, #16]
 800a532:	4621      	mov	r1, r4
 800a534:	f7ff fdd2 	bl	800a0dc <_Bfree>
 800a538:	4628      	mov	r0, r5
 800a53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a53e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a542:	3301      	adds	r3, #1
 800a544:	e7c1      	b.n	800a4ca <__lshift+0x4a>
 800a546:	3904      	subs	r1, #4
 800a548:	f853 2b04 	ldr.w	r2, [r3], #4
 800a54c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a550:	4298      	cmp	r0, r3
 800a552:	d8f9      	bhi.n	800a548 <__lshift+0xc8>
 800a554:	e7ea      	b.n	800a52c <__lshift+0xac>
 800a556:	bf00      	nop
 800a558:	0800bc17 	.word	0x0800bc17
 800a55c:	0800bc28 	.word	0x0800bc28

0800a560 <__mcmp>:
 800a560:	b530      	push	{r4, r5, lr}
 800a562:	6902      	ldr	r2, [r0, #16]
 800a564:	690c      	ldr	r4, [r1, #16]
 800a566:	1b12      	subs	r2, r2, r4
 800a568:	d10e      	bne.n	800a588 <__mcmp+0x28>
 800a56a:	f100 0314 	add.w	r3, r0, #20
 800a56e:	3114      	adds	r1, #20
 800a570:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a574:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a578:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a57c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a580:	42a5      	cmp	r5, r4
 800a582:	d003      	beq.n	800a58c <__mcmp+0x2c>
 800a584:	d305      	bcc.n	800a592 <__mcmp+0x32>
 800a586:	2201      	movs	r2, #1
 800a588:	4610      	mov	r0, r2
 800a58a:	bd30      	pop	{r4, r5, pc}
 800a58c:	4283      	cmp	r3, r0
 800a58e:	d3f3      	bcc.n	800a578 <__mcmp+0x18>
 800a590:	e7fa      	b.n	800a588 <__mcmp+0x28>
 800a592:	f04f 32ff 	mov.w	r2, #4294967295
 800a596:	e7f7      	b.n	800a588 <__mcmp+0x28>

0800a598 <__mdiff>:
 800a598:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a59c:	460c      	mov	r4, r1
 800a59e:	4606      	mov	r6, r0
 800a5a0:	4611      	mov	r1, r2
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	4690      	mov	r8, r2
 800a5a6:	f7ff ffdb 	bl	800a560 <__mcmp>
 800a5aa:	1e05      	subs	r5, r0, #0
 800a5ac:	d110      	bne.n	800a5d0 <__mdiff+0x38>
 800a5ae:	4629      	mov	r1, r5
 800a5b0:	4630      	mov	r0, r6
 800a5b2:	f7ff fd53 	bl	800a05c <_Balloc>
 800a5b6:	b930      	cbnz	r0, 800a5c6 <__mdiff+0x2e>
 800a5b8:	4b3a      	ldr	r3, [pc, #232]	; (800a6a4 <__mdiff+0x10c>)
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	f240 2132 	movw	r1, #562	; 0x232
 800a5c0:	4839      	ldr	r0, [pc, #228]	; (800a6a8 <__mdiff+0x110>)
 800a5c2:	f000 fb31 	bl	800ac28 <__assert_func>
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a5cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5d0:	bfa4      	itt	ge
 800a5d2:	4643      	movge	r3, r8
 800a5d4:	46a0      	movge	r8, r4
 800a5d6:	4630      	mov	r0, r6
 800a5d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a5dc:	bfa6      	itte	ge
 800a5de:	461c      	movge	r4, r3
 800a5e0:	2500      	movge	r5, #0
 800a5e2:	2501      	movlt	r5, #1
 800a5e4:	f7ff fd3a 	bl	800a05c <_Balloc>
 800a5e8:	b920      	cbnz	r0, 800a5f4 <__mdiff+0x5c>
 800a5ea:	4b2e      	ldr	r3, [pc, #184]	; (800a6a4 <__mdiff+0x10c>)
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a5f2:	e7e5      	b.n	800a5c0 <__mdiff+0x28>
 800a5f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a5f8:	6926      	ldr	r6, [r4, #16]
 800a5fa:	60c5      	str	r5, [r0, #12]
 800a5fc:	f104 0914 	add.w	r9, r4, #20
 800a600:	f108 0514 	add.w	r5, r8, #20
 800a604:	f100 0e14 	add.w	lr, r0, #20
 800a608:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a60c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a610:	f108 0210 	add.w	r2, r8, #16
 800a614:	46f2      	mov	sl, lr
 800a616:	2100      	movs	r1, #0
 800a618:	f859 3b04 	ldr.w	r3, [r9], #4
 800a61c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a620:	fa1f f883 	uxth.w	r8, r3
 800a624:	fa11 f18b 	uxtah	r1, r1, fp
 800a628:	0c1b      	lsrs	r3, r3, #16
 800a62a:	eba1 0808 	sub.w	r8, r1, r8
 800a62e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a632:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a636:	fa1f f888 	uxth.w	r8, r8
 800a63a:	1419      	asrs	r1, r3, #16
 800a63c:	454e      	cmp	r6, r9
 800a63e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a642:	f84a 3b04 	str.w	r3, [sl], #4
 800a646:	d8e7      	bhi.n	800a618 <__mdiff+0x80>
 800a648:	1b33      	subs	r3, r6, r4
 800a64a:	3b15      	subs	r3, #21
 800a64c:	f023 0303 	bic.w	r3, r3, #3
 800a650:	3304      	adds	r3, #4
 800a652:	3415      	adds	r4, #21
 800a654:	42a6      	cmp	r6, r4
 800a656:	bf38      	it	cc
 800a658:	2304      	movcc	r3, #4
 800a65a:	441d      	add	r5, r3
 800a65c:	4473      	add	r3, lr
 800a65e:	469e      	mov	lr, r3
 800a660:	462e      	mov	r6, r5
 800a662:	4566      	cmp	r6, ip
 800a664:	d30e      	bcc.n	800a684 <__mdiff+0xec>
 800a666:	f10c 0203 	add.w	r2, ip, #3
 800a66a:	1b52      	subs	r2, r2, r5
 800a66c:	f022 0203 	bic.w	r2, r2, #3
 800a670:	3d03      	subs	r5, #3
 800a672:	45ac      	cmp	ip, r5
 800a674:	bf38      	it	cc
 800a676:	2200      	movcc	r2, #0
 800a678:	441a      	add	r2, r3
 800a67a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a67e:	b17b      	cbz	r3, 800a6a0 <__mdiff+0x108>
 800a680:	6107      	str	r7, [r0, #16]
 800a682:	e7a3      	b.n	800a5cc <__mdiff+0x34>
 800a684:	f856 8b04 	ldr.w	r8, [r6], #4
 800a688:	fa11 f288 	uxtah	r2, r1, r8
 800a68c:	1414      	asrs	r4, r2, #16
 800a68e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a692:	b292      	uxth	r2, r2
 800a694:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a698:	f84e 2b04 	str.w	r2, [lr], #4
 800a69c:	1421      	asrs	r1, r4, #16
 800a69e:	e7e0      	b.n	800a662 <__mdiff+0xca>
 800a6a0:	3f01      	subs	r7, #1
 800a6a2:	e7ea      	b.n	800a67a <__mdiff+0xe2>
 800a6a4:	0800bc17 	.word	0x0800bc17
 800a6a8:	0800bc28 	.word	0x0800bc28

0800a6ac <__d2b>:
 800a6ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a6b0:	4689      	mov	r9, r1
 800a6b2:	2101      	movs	r1, #1
 800a6b4:	ec57 6b10 	vmov	r6, r7, d0
 800a6b8:	4690      	mov	r8, r2
 800a6ba:	f7ff fccf 	bl	800a05c <_Balloc>
 800a6be:	4604      	mov	r4, r0
 800a6c0:	b930      	cbnz	r0, 800a6d0 <__d2b+0x24>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	4b25      	ldr	r3, [pc, #148]	; (800a75c <__d2b+0xb0>)
 800a6c6:	4826      	ldr	r0, [pc, #152]	; (800a760 <__d2b+0xb4>)
 800a6c8:	f240 310a 	movw	r1, #778	; 0x30a
 800a6cc:	f000 faac 	bl	800ac28 <__assert_func>
 800a6d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a6d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a6d8:	bb35      	cbnz	r5, 800a728 <__d2b+0x7c>
 800a6da:	2e00      	cmp	r6, #0
 800a6dc:	9301      	str	r3, [sp, #4]
 800a6de:	d028      	beq.n	800a732 <__d2b+0x86>
 800a6e0:	4668      	mov	r0, sp
 800a6e2:	9600      	str	r6, [sp, #0]
 800a6e4:	f7ff fd82 	bl	800a1ec <__lo0bits>
 800a6e8:	9900      	ldr	r1, [sp, #0]
 800a6ea:	b300      	cbz	r0, 800a72e <__d2b+0x82>
 800a6ec:	9a01      	ldr	r2, [sp, #4]
 800a6ee:	f1c0 0320 	rsb	r3, r0, #32
 800a6f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a6f6:	430b      	orrs	r3, r1
 800a6f8:	40c2      	lsrs	r2, r0
 800a6fa:	6163      	str	r3, [r4, #20]
 800a6fc:	9201      	str	r2, [sp, #4]
 800a6fe:	9b01      	ldr	r3, [sp, #4]
 800a700:	61a3      	str	r3, [r4, #24]
 800a702:	2b00      	cmp	r3, #0
 800a704:	bf14      	ite	ne
 800a706:	2202      	movne	r2, #2
 800a708:	2201      	moveq	r2, #1
 800a70a:	6122      	str	r2, [r4, #16]
 800a70c:	b1d5      	cbz	r5, 800a744 <__d2b+0x98>
 800a70e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a712:	4405      	add	r5, r0
 800a714:	f8c9 5000 	str.w	r5, [r9]
 800a718:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a71c:	f8c8 0000 	str.w	r0, [r8]
 800a720:	4620      	mov	r0, r4
 800a722:	b003      	add	sp, #12
 800a724:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a728:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a72c:	e7d5      	b.n	800a6da <__d2b+0x2e>
 800a72e:	6161      	str	r1, [r4, #20]
 800a730:	e7e5      	b.n	800a6fe <__d2b+0x52>
 800a732:	a801      	add	r0, sp, #4
 800a734:	f7ff fd5a 	bl	800a1ec <__lo0bits>
 800a738:	9b01      	ldr	r3, [sp, #4]
 800a73a:	6163      	str	r3, [r4, #20]
 800a73c:	2201      	movs	r2, #1
 800a73e:	6122      	str	r2, [r4, #16]
 800a740:	3020      	adds	r0, #32
 800a742:	e7e3      	b.n	800a70c <__d2b+0x60>
 800a744:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a748:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a74c:	f8c9 0000 	str.w	r0, [r9]
 800a750:	6918      	ldr	r0, [r3, #16]
 800a752:	f7ff fd2b 	bl	800a1ac <__hi0bits>
 800a756:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a75a:	e7df      	b.n	800a71c <__d2b+0x70>
 800a75c:	0800bc17 	.word	0x0800bc17
 800a760:	0800bc28 	.word	0x0800bc28

0800a764 <_calloc_r>:
 800a764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a766:	fba1 2402 	umull	r2, r4, r1, r2
 800a76a:	b94c      	cbnz	r4, 800a780 <_calloc_r+0x1c>
 800a76c:	4611      	mov	r1, r2
 800a76e:	9201      	str	r2, [sp, #4]
 800a770:	f000 f87a 	bl	800a868 <_malloc_r>
 800a774:	9a01      	ldr	r2, [sp, #4]
 800a776:	4605      	mov	r5, r0
 800a778:	b930      	cbnz	r0, 800a788 <_calloc_r+0x24>
 800a77a:	4628      	mov	r0, r5
 800a77c:	b003      	add	sp, #12
 800a77e:	bd30      	pop	{r4, r5, pc}
 800a780:	220c      	movs	r2, #12
 800a782:	6002      	str	r2, [r0, #0]
 800a784:	2500      	movs	r5, #0
 800a786:	e7f8      	b.n	800a77a <_calloc_r+0x16>
 800a788:	4621      	mov	r1, r4
 800a78a:	f7fe f94f 	bl	8008a2c <memset>
 800a78e:	e7f4      	b.n	800a77a <_calloc_r+0x16>

0800a790 <_free_r>:
 800a790:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a792:	2900      	cmp	r1, #0
 800a794:	d044      	beq.n	800a820 <_free_r+0x90>
 800a796:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a79a:	9001      	str	r0, [sp, #4]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	f1a1 0404 	sub.w	r4, r1, #4
 800a7a2:	bfb8      	it	lt
 800a7a4:	18e4      	addlt	r4, r4, r3
 800a7a6:	f000 fa9b 	bl	800ace0 <__malloc_lock>
 800a7aa:	4a1e      	ldr	r2, [pc, #120]	; (800a824 <_free_r+0x94>)
 800a7ac:	9801      	ldr	r0, [sp, #4]
 800a7ae:	6813      	ldr	r3, [r2, #0]
 800a7b0:	b933      	cbnz	r3, 800a7c0 <_free_r+0x30>
 800a7b2:	6063      	str	r3, [r4, #4]
 800a7b4:	6014      	str	r4, [r2, #0]
 800a7b6:	b003      	add	sp, #12
 800a7b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7bc:	f000 ba96 	b.w	800acec <__malloc_unlock>
 800a7c0:	42a3      	cmp	r3, r4
 800a7c2:	d908      	bls.n	800a7d6 <_free_r+0x46>
 800a7c4:	6825      	ldr	r5, [r4, #0]
 800a7c6:	1961      	adds	r1, r4, r5
 800a7c8:	428b      	cmp	r3, r1
 800a7ca:	bf01      	itttt	eq
 800a7cc:	6819      	ldreq	r1, [r3, #0]
 800a7ce:	685b      	ldreq	r3, [r3, #4]
 800a7d0:	1949      	addeq	r1, r1, r5
 800a7d2:	6021      	streq	r1, [r4, #0]
 800a7d4:	e7ed      	b.n	800a7b2 <_free_r+0x22>
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	b10b      	cbz	r3, 800a7e0 <_free_r+0x50>
 800a7dc:	42a3      	cmp	r3, r4
 800a7de:	d9fa      	bls.n	800a7d6 <_free_r+0x46>
 800a7e0:	6811      	ldr	r1, [r2, #0]
 800a7e2:	1855      	adds	r5, r2, r1
 800a7e4:	42a5      	cmp	r5, r4
 800a7e6:	d10b      	bne.n	800a800 <_free_r+0x70>
 800a7e8:	6824      	ldr	r4, [r4, #0]
 800a7ea:	4421      	add	r1, r4
 800a7ec:	1854      	adds	r4, r2, r1
 800a7ee:	42a3      	cmp	r3, r4
 800a7f0:	6011      	str	r1, [r2, #0]
 800a7f2:	d1e0      	bne.n	800a7b6 <_free_r+0x26>
 800a7f4:	681c      	ldr	r4, [r3, #0]
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	6053      	str	r3, [r2, #4]
 800a7fa:	4421      	add	r1, r4
 800a7fc:	6011      	str	r1, [r2, #0]
 800a7fe:	e7da      	b.n	800a7b6 <_free_r+0x26>
 800a800:	d902      	bls.n	800a808 <_free_r+0x78>
 800a802:	230c      	movs	r3, #12
 800a804:	6003      	str	r3, [r0, #0]
 800a806:	e7d6      	b.n	800a7b6 <_free_r+0x26>
 800a808:	6825      	ldr	r5, [r4, #0]
 800a80a:	1961      	adds	r1, r4, r5
 800a80c:	428b      	cmp	r3, r1
 800a80e:	bf04      	itt	eq
 800a810:	6819      	ldreq	r1, [r3, #0]
 800a812:	685b      	ldreq	r3, [r3, #4]
 800a814:	6063      	str	r3, [r4, #4]
 800a816:	bf04      	itt	eq
 800a818:	1949      	addeq	r1, r1, r5
 800a81a:	6021      	streq	r1, [r4, #0]
 800a81c:	6054      	str	r4, [r2, #4]
 800a81e:	e7ca      	b.n	800a7b6 <_free_r+0x26>
 800a820:	b003      	add	sp, #12
 800a822:	bd30      	pop	{r4, r5, pc}
 800a824:	20004360 	.word	0x20004360

0800a828 <sbrk_aligned>:
 800a828:	b570      	push	{r4, r5, r6, lr}
 800a82a:	4e0e      	ldr	r6, [pc, #56]	; (800a864 <sbrk_aligned+0x3c>)
 800a82c:	460c      	mov	r4, r1
 800a82e:	6831      	ldr	r1, [r6, #0]
 800a830:	4605      	mov	r5, r0
 800a832:	b911      	cbnz	r1, 800a83a <sbrk_aligned+0x12>
 800a834:	f000 f9e8 	bl	800ac08 <_sbrk_r>
 800a838:	6030      	str	r0, [r6, #0]
 800a83a:	4621      	mov	r1, r4
 800a83c:	4628      	mov	r0, r5
 800a83e:	f000 f9e3 	bl	800ac08 <_sbrk_r>
 800a842:	1c43      	adds	r3, r0, #1
 800a844:	d00a      	beq.n	800a85c <sbrk_aligned+0x34>
 800a846:	1cc4      	adds	r4, r0, #3
 800a848:	f024 0403 	bic.w	r4, r4, #3
 800a84c:	42a0      	cmp	r0, r4
 800a84e:	d007      	beq.n	800a860 <sbrk_aligned+0x38>
 800a850:	1a21      	subs	r1, r4, r0
 800a852:	4628      	mov	r0, r5
 800a854:	f000 f9d8 	bl	800ac08 <_sbrk_r>
 800a858:	3001      	adds	r0, #1
 800a85a:	d101      	bne.n	800a860 <sbrk_aligned+0x38>
 800a85c:	f04f 34ff 	mov.w	r4, #4294967295
 800a860:	4620      	mov	r0, r4
 800a862:	bd70      	pop	{r4, r5, r6, pc}
 800a864:	20004364 	.word	0x20004364

0800a868 <_malloc_r>:
 800a868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a86c:	1ccd      	adds	r5, r1, #3
 800a86e:	f025 0503 	bic.w	r5, r5, #3
 800a872:	3508      	adds	r5, #8
 800a874:	2d0c      	cmp	r5, #12
 800a876:	bf38      	it	cc
 800a878:	250c      	movcc	r5, #12
 800a87a:	2d00      	cmp	r5, #0
 800a87c:	4607      	mov	r7, r0
 800a87e:	db01      	blt.n	800a884 <_malloc_r+0x1c>
 800a880:	42a9      	cmp	r1, r5
 800a882:	d905      	bls.n	800a890 <_malloc_r+0x28>
 800a884:	230c      	movs	r3, #12
 800a886:	603b      	str	r3, [r7, #0]
 800a888:	2600      	movs	r6, #0
 800a88a:	4630      	mov	r0, r6
 800a88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a890:	4e2e      	ldr	r6, [pc, #184]	; (800a94c <_malloc_r+0xe4>)
 800a892:	f000 fa25 	bl	800ace0 <__malloc_lock>
 800a896:	6833      	ldr	r3, [r6, #0]
 800a898:	461c      	mov	r4, r3
 800a89a:	bb34      	cbnz	r4, 800a8ea <_malloc_r+0x82>
 800a89c:	4629      	mov	r1, r5
 800a89e:	4638      	mov	r0, r7
 800a8a0:	f7ff ffc2 	bl	800a828 <sbrk_aligned>
 800a8a4:	1c43      	adds	r3, r0, #1
 800a8a6:	4604      	mov	r4, r0
 800a8a8:	d14d      	bne.n	800a946 <_malloc_r+0xde>
 800a8aa:	6834      	ldr	r4, [r6, #0]
 800a8ac:	4626      	mov	r6, r4
 800a8ae:	2e00      	cmp	r6, #0
 800a8b0:	d140      	bne.n	800a934 <_malloc_r+0xcc>
 800a8b2:	6823      	ldr	r3, [r4, #0]
 800a8b4:	4631      	mov	r1, r6
 800a8b6:	4638      	mov	r0, r7
 800a8b8:	eb04 0803 	add.w	r8, r4, r3
 800a8bc:	f000 f9a4 	bl	800ac08 <_sbrk_r>
 800a8c0:	4580      	cmp	r8, r0
 800a8c2:	d13a      	bne.n	800a93a <_malloc_r+0xd2>
 800a8c4:	6821      	ldr	r1, [r4, #0]
 800a8c6:	3503      	adds	r5, #3
 800a8c8:	1a6d      	subs	r5, r5, r1
 800a8ca:	f025 0503 	bic.w	r5, r5, #3
 800a8ce:	3508      	adds	r5, #8
 800a8d0:	2d0c      	cmp	r5, #12
 800a8d2:	bf38      	it	cc
 800a8d4:	250c      	movcc	r5, #12
 800a8d6:	4629      	mov	r1, r5
 800a8d8:	4638      	mov	r0, r7
 800a8da:	f7ff ffa5 	bl	800a828 <sbrk_aligned>
 800a8de:	3001      	adds	r0, #1
 800a8e0:	d02b      	beq.n	800a93a <_malloc_r+0xd2>
 800a8e2:	6823      	ldr	r3, [r4, #0]
 800a8e4:	442b      	add	r3, r5
 800a8e6:	6023      	str	r3, [r4, #0]
 800a8e8:	e00e      	b.n	800a908 <_malloc_r+0xa0>
 800a8ea:	6822      	ldr	r2, [r4, #0]
 800a8ec:	1b52      	subs	r2, r2, r5
 800a8ee:	d41e      	bmi.n	800a92e <_malloc_r+0xc6>
 800a8f0:	2a0b      	cmp	r2, #11
 800a8f2:	d916      	bls.n	800a922 <_malloc_r+0xba>
 800a8f4:	1961      	adds	r1, r4, r5
 800a8f6:	42a3      	cmp	r3, r4
 800a8f8:	6025      	str	r5, [r4, #0]
 800a8fa:	bf18      	it	ne
 800a8fc:	6059      	strne	r1, [r3, #4]
 800a8fe:	6863      	ldr	r3, [r4, #4]
 800a900:	bf08      	it	eq
 800a902:	6031      	streq	r1, [r6, #0]
 800a904:	5162      	str	r2, [r4, r5]
 800a906:	604b      	str	r3, [r1, #4]
 800a908:	4638      	mov	r0, r7
 800a90a:	f104 060b 	add.w	r6, r4, #11
 800a90e:	f000 f9ed 	bl	800acec <__malloc_unlock>
 800a912:	f026 0607 	bic.w	r6, r6, #7
 800a916:	1d23      	adds	r3, r4, #4
 800a918:	1af2      	subs	r2, r6, r3
 800a91a:	d0b6      	beq.n	800a88a <_malloc_r+0x22>
 800a91c:	1b9b      	subs	r3, r3, r6
 800a91e:	50a3      	str	r3, [r4, r2]
 800a920:	e7b3      	b.n	800a88a <_malloc_r+0x22>
 800a922:	6862      	ldr	r2, [r4, #4]
 800a924:	42a3      	cmp	r3, r4
 800a926:	bf0c      	ite	eq
 800a928:	6032      	streq	r2, [r6, #0]
 800a92a:	605a      	strne	r2, [r3, #4]
 800a92c:	e7ec      	b.n	800a908 <_malloc_r+0xa0>
 800a92e:	4623      	mov	r3, r4
 800a930:	6864      	ldr	r4, [r4, #4]
 800a932:	e7b2      	b.n	800a89a <_malloc_r+0x32>
 800a934:	4634      	mov	r4, r6
 800a936:	6876      	ldr	r6, [r6, #4]
 800a938:	e7b9      	b.n	800a8ae <_malloc_r+0x46>
 800a93a:	230c      	movs	r3, #12
 800a93c:	603b      	str	r3, [r7, #0]
 800a93e:	4638      	mov	r0, r7
 800a940:	f000 f9d4 	bl	800acec <__malloc_unlock>
 800a944:	e7a1      	b.n	800a88a <_malloc_r+0x22>
 800a946:	6025      	str	r5, [r4, #0]
 800a948:	e7de      	b.n	800a908 <_malloc_r+0xa0>
 800a94a:	bf00      	nop
 800a94c:	20004360 	.word	0x20004360

0800a950 <__ssputs_r>:
 800a950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a954:	688e      	ldr	r6, [r1, #8]
 800a956:	429e      	cmp	r6, r3
 800a958:	4682      	mov	sl, r0
 800a95a:	460c      	mov	r4, r1
 800a95c:	4690      	mov	r8, r2
 800a95e:	461f      	mov	r7, r3
 800a960:	d838      	bhi.n	800a9d4 <__ssputs_r+0x84>
 800a962:	898a      	ldrh	r2, [r1, #12]
 800a964:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a968:	d032      	beq.n	800a9d0 <__ssputs_r+0x80>
 800a96a:	6825      	ldr	r5, [r4, #0]
 800a96c:	6909      	ldr	r1, [r1, #16]
 800a96e:	eba5 0901 	sub.w	r9, r5, r1
 800a972:	6965      	ldr	r5, [r4, #20]
 800a974:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a978:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a97c:	3301      	adds	r3, #1
 800a97e:	444b      	add	r3, r9
 800a980:	106d      	asrs	r5, r5, #1
 800a982:	429d      	cmp	r5, r3
 800a984:	bf38      	it	cc
 800a986:	461d      	movcc	r5, r3
 800a988:	0553      	lsls	r3, r2, #21
 800a98a:	d531      	bpl.n	800a9f0 <__ssputs_r+0xa0>
 800a98c:	4629      	mov	r1, r5
 800a98e:	f7ff ff6b 	bl	800a868 <_malloc_r>
 800a992:	4606      	mov	r6, r0
 800a994:	b950      	cbnz	r0, 800a9ac <__ssputs_r+0x5c>
 800a996:	230c      	movs	r3, #12
 800a998:	f8ca 3000 	str.w	r3, [sl]
 800a99c:	89a3      	ldrh	r3, [r4, #12]
 800a99e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9a2:	81a3      	strh	r3, [r4, #12]
 800a9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ac:	6921      	ldr	r1, [r4, #16]
 800a9ae:	464a      	mov	r2, r9
 800a9b0:	f7fe f82e 	bl	8008a10 <memcpy>
 800a9b4:	89a3      	ldrh	r3, [r4, #12]
 800a9b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a9ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9be:	81a3      	strh	r3, [r4, #12]
 800a9c0:	6126      	str	r6, [r4, #16]
 800a9c2:	6165      	str	r5, [r4, #20]
 800a9c4:	444e      	add	r6, r9
 800a9c6:	eba5 0509 	sub.w	r5, r5, r9
 800a9ca:	6026      	str	r6, [r4, #0]
 800a9cc:	60a5      	str	r5, [r4, #8]
 800a9ce:	463e      	mov	r6, r7
 800a9d0:	42be      	cmp	r6, r7
 800a9d2:	d900      	bls.n	800a9d6 <__ssputs_r+0x86>
 800a9d4:	463e      	mov	r6, r7
 800a9d6:	6820      	ldr	r0, [r4, #0]
 800a9d8:	4632      	mov	r2, r6
 800a9da:	4641      	mov	r1, r8
 800a9dc:	f000 f966 	bl	800acac <memmove>
 800a9e0:	68a3      	ldr	r3, [r4, #8]
 800a9e2:	1b9b      	subs	r3, r3, r6
 800a9e4:	60a3      	str	r3, [r4, #8]
 800a9e6:	6823      	ldr	r3, [r4, #0]
 800a9e8:	4433      	add	r3, r6
 800a9ea:	6023      	str	r3, [r4, #0]
 800a9ec:	2000      	movs	r0, #0
 800a9ee:	e7db      	b.n	800a9a8 <__ssputs_r+0x58>
 800a9f0:	462a      	mov	r2, r5
 800a9f2:	f000 f981 	bl	800acf8 <_realloc_r>
 800a9f6:	4606      	mov	r6, r0
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	d1e1      	bne.n	800a9c0 <__ssputs_r+0x70>
 800a9fc:	6921      	ldr	r1, [r4, #16]
 800a9fe:	4650      	mov	r0, sl
 800aa00:	f7ff fec6 	bl	800a790 <_free_r>
 800aa04:	e7c7      	b.n	800a996 <__ssputs_r+0x46>
	...

0800aa08 <_svfiprintf_r>:
 800aa08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa0c:	4698      	mov	r8, r3
 800aa0e:	898b      	ldrh	r3, [r1, #12]
 800aa10:	061b      	lsls	r3, r3, #24
 800aa12:	b09d      	sub	sp, #116	; 0x74
 800aa14:	4607      	mov	r7, r0
 800aa16:	460d      	mov	r5, r1
 800aa18:	4614      	mov	r4, r2
 800aa1a:	d50e      	bpl.n	800aa3a <_svfiprintf_r+0x32>
 800aa1c:	690b      	ldr	r3, [r1, #16]
 800aa1e:	b963      	cbnz	r3, 800aa3a <_svfiprintf_r+0x32>
 800aa20:	2140      	movs	r1, #64	; 0x40
 800aa22:	f7ff ff21 	bl	800a868 <_malloc_r>
 800aa26:	6028      	str	r0, [r5, #0]
 800aa28:	6128      	str	r0, [r5, #16]
 800aa2a:	b920      	cbnz	r0, 800aa36 <_svfiprintf_r+0x2e>
 800aa2c:	230c      	movs	r3, #12
 800aa2e:	603b      	str	r3, [r7, #0]
 800aa30:	f04f 30ff 	mov.w	r0, #4294967295
 800aa34:	e0d1      	b.n	800abda <_svfiprintf_r+0x1d2>
 800aa36:	2340      	movs	r3, #64	; 0x40
 800aa38:	616b      	str	r3, [r5, #20]
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	9309      	str	r3, [sp, #36]	; 0x24
 800aa3e:	2320      	movs	r3, #32
 800aa40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa44:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa48:	2330      	movs	r3, #48	; 0x30
 800aa4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800abf4 <_svfiprintf_r+0x1ec>
 800aa4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa52:	f04f 0901 	mov.w	r9, #1
 800aa56:	4623      	mov	r3, r4
 800aa58:	469a      	mov	sl, r3
 800aa5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa5e:	b10a      	cbz	r2, 800aa64 <_svfiprintf_r+0x5c>
 800aa60:	2a25      	cmp	r2, #37	; 0x25
 800aa62:	d1f9      	bne.n	800aa58 <_svfiprintf_r+0x50>
 800aa64:	ebba 0b04 	subs.w	fp, sl, r4
 800aa68:	d00b      	beq.n	800aa82 <_svfiprintf_r+0x7a>
 800aa6a:	465b      	mov	r3, fp
 800aa6c:	4622      	mov	r2, r4
 800aa6e:	4629      	mov	r1, r5
 800aa70:	4638      	mov	r0, r7
 800aa72:	f7ff ff6d 	bl	800a950 <__ssputs_r>
 800aa76:	3001      	adds	r0, #1
 800aa78:	f000 80aa 	beq.w	800abd0 <_svfiprintf_r+0x1c8>
 800aa7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa7e:	445a      	add	r2, fp
 800aa80:	9209      	str	r2, [sp, #36]	; 0x24
 800aa82:	f89a 3000 	ldrb.w	r3, [sl]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	f000 80a2 	beq.w	800abd0 <_svfiprintf_r+0x1c8>
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa96:	f10a 0a01 	add.w	sl, sl, #1
 800aa9a:	9304      	str	r3, [sp, #16]
 800aa9c:	9307      	str	r3, [sp, #28]
 800aa9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aaa2:	931a      	str	r3, [sp, #104]	; 0x68
 800aaa4:	4654      	mov	r4, sl
 800aaa6:	2205      	movs	r2, #5
 800aaa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaac:	4851      	ldr	r0, [pc, #324]	; (800abf4 <_svfiprintf_r+0x1ec>)
 800aaae:	f7f5 fbaf 	bl	8000210 <memchr>
 800aab2:	9a04      	ldr	r2, [sp, #16]
 800aab4:	b9d8      	cbnz	r0, 800aaee <_svfiprintf_r+0xe6>
 800aab6:	06d0      	lsls	r0, r2, #27
 800aab8:	bf44      	itt	mi
 800aaba:	2320      	movmi	r3, #32
 800aabc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aac0:	0711      	lsls	r1, r2, #28
 800aac2:	bf44      	itt	mi
 800aac4:	232b      	movmi	r3, #43	; 0x2b
 800aac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aaca:	f89a 3000 	ldrb.w	r3, [sl]
 800aace:	2b2a      	cmp	r3, #42	; 0x2a
 800aad0:	d015      	beq.n	800aafe <_svfiprintf_r+0xf6>
 800aad2:	9a07      	ldr	r2, [sp, #28]
 800aad4:	4654      	mov	r4, sl
 800aad6:	2000      	movs	r0, #0
 800aad8:	f04f 0c0a 	mov.w	ip, #10
 800aadc:	4621      	mov	r1, r4
 800aade:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aae2:	3b30      	subs	r3, #48	; 0x30
 800aae4:	2b09      	cmp	r3, #9
 800aae6:	d94e      	bls.n	800ab86 <_svfiprintf_r+0x17e>
 800aae8:	b1b0      	cbz	r0, 800ab18 <_svfiprintf_r+0x110>
 800aaea:	9207      	str	r2, [sp, #28]
 800aaec:	e014      	b.n	800ab18 <_svfiprintf_r+0x110>
 800aaee:	eba0 0308 	sub.w	r3, r0, r8
 800aaf2:	fa09 f303 	lsl.w	r3, r9, r3
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	9304      	str	r3, [sp, #16]
 800aafa:	46a2      	mov	sl, r4
 800aafc:	e7d2      	b.n	800aaa4 <_svfiprintf_r+0x9c>
 800aafe:	9b03      	ldr	r3, [sp, #12]
 800ab00:	1d19      	adds	r1, r3, #4
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	9103      	str	r1, [sp, #12]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	bfbb      	ittet	lt
 800ab0a:	425b      	neglt	r3, r3
 800ab0c:	f042 0202 	orrlt.w	r2, r2, #2
 800ab10:	9307      	strge	r3, [sp, #28]
 800ab12:	9307      	strlt	r3, [sp, #28]
 800ab14:	bfb8      	it	lt
 800ab16:	9204      	strlt	r2, [sp, #16]
 800ab18:	7823      	ldrb	r3, [r4, #0]
 800ab1a:	2b2e      	cmp	r3, #46	; 0x2e
 800ab1c:	d10c      	bne.n	800ab38 <_svfiprintf_r+0x130>
 800ab1e:	7863      	ldrb	r3, [r4, #1]
 800ab20:	2b2a      	cmp	r3, #42	; 0x2a
 800ab22:	d135      	bne.n	800ab90 <_svfiprintf_r+0x188>
 800ab24:	9b03      	ldr	r3, [sp, #12]
 800ab26:	1d1a      	adds	r2, r3, #4
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	9203      	str	r2, [sp, #12]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	bfb8      	it	lt
 800ab30:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab34:	3402      	adds	r4, #2
 800ab36:	9305      	str	r3, [sp, #20]
 800ab38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ac04 <_svfiprintf_r+0x1fc>
 800ab3c:	7821      	ldrb	r1, [r4, #0]
 800ab3e:	2203      	movs	r2, #3
 800ab40:	4650      	mov	r0, sl
 800ab42:	f7f5 fb65 	bl	8000210 <memchr>
 800ab46:	b140      	cbz	r0, 800ab5a <_svfiprintf_r+0x152>
 800ab48:	2340      	movs	r3, #64	; 0x40
 800ab4a:	eba0 000a 	sub.w	r0, r0, sl
 800ab4e:	fa03 f000 	lsl.w	r0, r3, r0
 800ab52:	9b04      	ldr	r3, [sp, #16]
 800ab54:	4303      	orrs	r3, r0
 800ab56:	3401      	adds	r4, #1
 800ab58:	9304      	str	r3, [sp, #16]
 800ab5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab5e:	4826      	ldr	r0, [pc, #152]	; (800abf8 <_svfiprintf_r+0x1f0>)
 800ab60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab64:	2206      	movs	r2, #6
 800ab66:	f7f5 fb53 	bl	8000210 <memchr>
 800ab6a:	2800      	cmp	r0, #0
 800ab6c:	d038      	beq.n	800abe0 <_svfiprintf_r+0x1d8>
 800ab6e:	4b23      	ldr	r3, [pc, #140]	; (800abfc <_svfiprintf_r+0x1f4>)
 800ab70:	bb1b      	cbnz	r3, 800abba <_svfiprintf_r+0x1b2>
 800ab72:	9b03      	ldr	r3, [sp, #12]
 800ab74:	3307      	adds	r3, #7
 800ab76:	f023 0307 	bic.w	r3, r3, #7
 800ab7a:	3308      	adds	r3, #8
 800ab7c:	9303      	str	r3, [sp, #12]
 800ab7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab80:	4433      	add	r3, r6
 800ab82:	9309      	str	r3, [sp, #36]	; 0x24
 800ab84:	e767      	b.n	800aa56 <_svfiprintf_r+0x4e>
 800ab86:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab8a:	460c      	mov	r4, r1
 800ab8c:	2001      	movs	r0, #1
 800ab8e:	e7a5      	b.n	800aadc <_svfiprintf_r+0xd4>
 800ab90:	2300      	movs	r3, #0
 800ab92:	3401      	adds	r4, #1
 800ab94:	9305      	str	r3, [sp, #20]
 800ab96:	4619      	mov	r1, r3
 800ab98:	f04f 0c0a 	mov.w	ip, #10
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aba2:	3a30      	subs	r2, #48	; 0x30
 800aba4:	2a09      	cmp	r2, #9
 800aba6:	d903      	bls.n	800abb0 <_svfiprintf_r+0x1a8>
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d0c5      	beq.n	800ab38 <_svfiprintf_r+0x130>
 800abac:	9105      	str	r1, [sp, #20]
 800abae:	e7c3      	b.n	800ab38 <_svfiprintf_r+0x130>
 800abb0:	fb0c 2101 	mla	r1, ip, r1, r2
 800abb4:	4604      	mov	r4, r0
 800abb6:	2301      	movs	r3, #1
 800abb8:	e7f0      	b.n	800ab9c <_svfiprintf_r+0x194>
 800abba:	ab03      	add	r3, sp, #12
 800abbc:	9300      	str	r3, [sp, #0]
 800abbe:	462a      	mov	r2, r5
 800abc0:	4b0f      	ldr	r3, [pc, #60]	; (800ac00 <_svfiprintf_r+0x1f8>)
 800abc2:	a904      	add	r1, sp, #16
 800abc4:	4638      	mov	r0, r7
 800abc6:	f7fd ffd9 	bl	8008b7c <_printf_float>
 800abca:	1c42      	adds	r2, r0, #1
 800abcc:	4606      	mov	r6, r0
 800abce:	d1d6      	bne.n	800ab7e <_svfiprintf_r+0x176>
 800abd0:	89ab      	ldrh	r3, [r5, #12]
 800abd2:	065b      	lsls	r3, r3, #25
 800abd4:	f53f af2c 	bmi.w	800aa30 <_svfiprintf_r+0x28>
 800abd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abda:	b01d      	add	sp, #116	; 0x74
 800abdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abe0:	ab03      	add	r3, sp, #12
 800abe2:	9300      	str	r3, [sp, #0]
 800abe4:	462a      	mov	r2, r5
 800abe6:	4b06      	ldr	r3, [pc, #24]	; (800ac00 <_svfiprintf_r+0x1f8>)
 800abe8:	a904      	add	r1, sp, #16
 800abea:	4638      	mov	r0, r7
 800abec:	f7fe fa6a 	bl	80090c4 <_printf_i>
 800abf0:	e7eb      	b.n	800abca <_svfiprintf_r+0x1c2>
 800abf2:	bf00      	nop
 800abf4:	0800bd84 	.word	0x0800bd84
 800abf8:	0800bd8e 	.word	0x0800bd8e
 800abfc:	08008b7d 	.word	0x08008b7d
 800ac00:	0800a951 	.word	0x0800a951
 800ac04:	0800bd8a 	.word	0x0800bd8a

0800ac08 <_sbrk_r>:
 800ac08:	b538      	push	{r3, r4, r5, lr}
 800ac0a:	4d06      	ldr	r5, [pc, #24]	; (800ac24 <_sbrk_r+0x1c>)
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	4604      	mov	r4, r0
 800ac10:	4608      	mov	r0, r1
 800ac12:	602b      	str	r3, [r5, #0]
 800ac14:	f7f7 fd0e 	bl	8002634 <_sbrk>
 800ac18:	1c43      	adds	r3, r0, #1
 800ac1a:	d102      	bne.n	800ac22 <_sbrk_r+0x1a>
 800ac1c:	682b      	ldr	r3, [r5, #0]
 800ac1e:	b103      	cbz	r3, 800ac22 <_sbrk_r+0x1a>
 800ac20:	6023      	str	r3, [r4, #0]
 800ac22:	bd38      	pop	{r3, r4, r5, pc}
 800ac24:	20004368 	.word	0x20004368

0800ac28 <__assert_func>:
 800ac28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac2a:	4614      	mov	r4, r2
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	4b09      	ldr	r3, [pc, #36]	; (800ac54 <__assert_func+0x2c>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	4605      	mov	r5, r0
 800ac34:	68d8      	ldr	r0, [r3, #12]
 800ac36:	b14c      	cbz	r4, 800ac4c <__assert_func+0x24>
 800ac38:	4b07      	ldr	r3, [pc, #28]	; (800ac58 <__assert_func+0x30>)
 800ac3a:	9100      	str	r1, [sp, #0]
 800ac3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac40:	4906      	ldr	r1, [pc, #24]	; (800ac5c <__assert_func+0x34>)
 800ac42:	462b      	mov	r3, r5
 800ac44:	f000 f80e 	bl	800ac64 <fiprintf>
 800ac48:	f000 faac 	bl	800b1a4 <abort>
 800ac4c:	4b04      	ldr	r3, [pc, #16]	; (800ac60 <__assert_func+0x38>)
 800ac4e:	461c      	mov	r4, r3
 800ac50:	e7f3      	b.n	800ac3a <__assert_func+0x12>
 800ac52:	bf00      	nop
 800ac54:	20000010 	.word	0x20000010
 800ac58:	0800bd95 	.word	0x0800bd95
 800ac5c:	0800bda2 	.word	0x0800bda2
 800ac60:	0800bdd0 	.word	0x0800bdd0

0800ac64 <fiprintf>:
 800ac64:	b40e      	push	{r1, r2, r3}
 800ac66:	b503      	push	{r0, r1, lr}
 800ac68:	4601      	mov	r1, r0
 800ac6a:	ab03      	add	r3, sp, #12
 800ac6c:	4805      	ldr	r0, [pc, #20]	; (800ac84 <fiprintf+0x20>)
 800ac6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac72:	6800      	ldr	r0, [r0, #0]
 800ac74:	9301      	str	r3, [sp, #4]
 800ac76:	f000 f897 	bl	800ada8 <_vfiprintf_r>
 800ac7a:	b002      	add	sp, #8
 800ac7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac80:	b003      	add	sp, #12
 800ac82:	4770      	bx	lr
 800ac84:	20000010 	.word	0x20000010

0800ac88 <__ascii_mbtowc>:
 800ac88:	b082      	sub	sp, #8
 800ac8a:	b901      	cbnz	r1, 800ac8e <__ascii_mbtowc+0x6>
 800ac8c:	a901      	add	r1, sp, #4
 800ac8e:	b142      	cbz	r2, 800aca2 <__ascii_mbtowc+0x1a>
 800ac90:	b14b      	cbz	r3, 800aca6 <__ascii_mbtowc+0x1e>
 800ac92:	7813      	ldrb	r3, [r2, #0]
 800ac94:	600b      	str	r3, [r1, #0]
 800ac96:	7812      	ldrb	r2, [r2, #0]
 800ac98:	1e10      	subs	r0, r2, #0
 800ac9a:	bf18      	it	ne
 800ac9c:	2001      	movne	r0, #1
 800ac9e:	b002      	add	sp, #8
 800aca0:	4770      	bx	lr
 800aca2:	4610      	mov	r0, r2
 800aca4:	e7fb      	b.n	800ac9e <__ascii_mbtowc+0x16>
 800aca6:	f06f 0001 	mvn.w	r0, #1
 800acaa:	e7f8      	b.n	800ac9e <__ascii_mbtowc+0x16>

0800acac <memmove>:
 800acac:	4288      	cmp	r0, r1
 800acae:	b510      	push	{r4, lr}
 800acb0:	eb01 0402 	add.w	r4, r1, r2
 800acb4:	d902      	bls.n	800acbc <memmove+0x10>
 800acb6:	4284      	cmp	r4, r0
 800acb8:	4623      	mov	r3, r4
 800acba:	d807      	bhi.n	800accc <memmove+0x20>
 800acbc:	1e43      	subs	r3, r0, #1
 800acbe:	42a1      	cmp	r1, r4
 800acc0:	d008      	beq.n	800acd4 <memmove+0x28>
 800acc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acca:	e7f8      	b.n	800acbe <memmove+0x12>
 800accc:	4402      	add	r2, r0
 800acce:	4601      	mov	r1, r0
 800acd0:	428a      	cmp	r2, r1
 800acd2:	d100      	bne.n	800acd6 <memmove+0x2a>
 800acd4:	bd10      	pop	{r4, pc}
 800acd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800acde:	e7f7      	b.n	800acd0 <memmove+0x24>

0800ace0 <__malloc_lock>:
 800ace0:	4801      	ldr	r0, [pc, #4]	; (800ace8 <__malloc_lock+0x8>)
 800ace2:	f000 bc1f 	b.w	800b524 <__retarget_lock_acquire_recursive>
 800ace6:	bf00      	nop
 800ace8:	2000436c 	.word	0x2000436c

0800acec <__malloc_unlock>:
 800acec:	4801      	ldr	r0, [pc, #4]	; (800acf4 <__malloc_unlock+0x8>)
 800acee:	f000 bc1a 	b.w	800b526 <__retarget_lock_release_recursive>
 800acf2:	bf00      	nop
 800acf4:	2000436c 	.word	0x2000436c

0800acf8 <_realloc_r>:
 800acf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acfc:	4680      	mov	r8, r0
 800acfe:	4614      	mov	r4, r2
 800ad00:	460e      	mov	r6, r1
 800ad02:	b921      	cbnz	r1, 800ad0e <_realloc_r+0x16>
 800ad04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad08:	4611      	mov	r1, r2
 800ad0a:	f7ff bdad 	b.w	800a868 <_malloc_r>
 800ad0e:	b92a      	cbnz	r2, 800ad1c <_realloc_r+0x24>
 800ad10:	f7ff fd3e 	bl	800a790 <_free_r>
 800ad14:	4625      	mov	r5, r4
 800ad16:	4628      	mov	r0, r5
 800ad18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad1c:	f000 fc6a 	bl	800b5f4 <_malloc_usable_size_r>
 800ad20:	4284      	cmp	r4, r0
 800ad22:	4607      	mov	r7, r0
 800ad24:	d802      	bhi.n	800ad2c <_realloc_r+0x34>
 800ad26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ad2a:	d812      	bhi.n	800ad52 <_realloc_r+0x5a>
 800ad2c:	4621      	mov	r1, r4
 800ad2e:	4640      	mov	r0, r8
 800ad30:	f7ff fd9a 	bl	800a868 <_malloc_r>
 800ad34:	4605      	mov	r5, r0
 800ad36:	2800      	cmp	r0, #0
 800ad38:	d0ed      	beq.n	800ad16 <_realloc_r+0x1e>
 800ad3a:	42bc      	cmp	r4, r7
 800ad3c:	4622      	mov	r2, r4
 800ad3e:	4631      	mov	r1, r6
 800ad40:	bf28      	it	cs
 800ad42:	463a      	movcs	r2, r7
 800ad44:	f7fd fe64 	bl	8008a10 <memcpy>
 800ad48:	4631      	mov	r1, r6
 800ad4a:	4640      	mov	r0, r8
 800ad4c:	f7ff fd20 	bl	800a790 <_free_r>
 800ad50:	e7e1      	b.n	800ad16 <_realloc_r+0x1e>
 800ad52:	4635      	mov	r5, r6
 800ad54:	e7df      	b.n	800ad16 <_realloc_r+0x1e>

0800ad56 <__sfputc_r>:
 800ad56:	6893      	ldr	r3, [r2, #8]
 800ad58:	3b01      	subs	r3, #1
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	b410      	push	{r4}
 800ad5e:	6093      	str	r3, [r2, #8]
 800ad60:	da08      	bge.n	800ad74 <__sfputc_r+0x1e>
 800ad62:	6994      	ldr	r4, [r2, #24]
 800ad64:	42a3      	cmp	r3, r4
 800ad66:	db01      	blt.n	800ad6c <__sfputc_r+0x16>
 800ad68:	290a      	cmp	r1, #10
 800ad6a:	d103      	bne.n	800ad74 <__sfputc_r+0x1e>
 800ad6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad70:	f000 b94a 	b.w	800b008 <__swbuf_r>
 800ad74:	6813      	ldr	r3, [r2, #0]
 800ad76:	1c58      	adds	r0, r3, #1
 800ad78:	6010      	str	r0, [r2, #0]
 800ad7a:	7019      	strb	r1, [r3, #0]
 800ad7c:	4608      	mov	r0, r1
 800ad7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <__sfputs_r>:
 800ad84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad86:	4606      	mov	r6, r0
 800ad88:	460f      	mov	r7, r1
 800ad8a:	4614      	mov	r4, r2
 800ad8c:	18d5      	adds	r5, r2, r3
 800ad8e:	42ac      	cmp	r4, r5
 800ad90:	d101      	bne.n	800ad96 <__sfputs_r+0x12>
 800ad92:	2000      	movs	r0, #0
 800ad94:	e007      	b.n	800ada6 <__sfputs_r+0x22>
 800ad96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad9a:	463a      	mov	r2, r7
 800ad9c:	4630      	mov	r0, r6
 800ad9e:	f7ff ffda 	bl	800ad56 <__sfputc_r>
 800ada2:	1c43      	adds	r3, r0, #1
 800ada4:	d1f3      	bne.n	800ad8e <__sfputs_r+0xa>
 800ada6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ada8 <_vfiprintf_r>:
 800ada8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adac:	460d      	mov	r5, r1
 800adae:	b09d      	sub	sp, #116	; 0x74
 800adb0:	4614      	mov	r4, r2
 800adb2:	4698      	mov	r8, r3
 800adb4:	4606      	mov	r6, r0
 800adb6:	b118      	cbz	r0, 800adc0 <_vfiprintf_r+0x18>
 800adb8:	6983      	ldr	r3, [r0, #24]
 800adba:	b90b      	cbnz	r3, 800adc0 <_vfiprintf_r+0x18>
 800adbc:	f000 fb14 	bl	800b3e8 <__sinit>
 800adc0:	4b89      	ldr	r3, [pc, #548]	; (800afe8 <_vfiprintf_r+0x240>)
 800adc2:	429d      	cmp	r5, r3
 800adc4:	d11b      	bne.n	800adfe <_vfiprintf_r+0x56>
 800adc6:	6875      	ldr	r5, [r6, #4]
 800adc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adca:	07d9      	lsls	r1, r3, #31
 800adcc:	d405      	bmi.n	800adda <_vfiprintf_r+0x32>
 800adce:	89ab      	ldrh	r3, [r5, #12]
 800add0:	059a      	lsls	r2, r3, #22
 800add2:	d402      	bmi.n	800adda <_vfiprintf_r+0x32>
 800add4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800add6:	f000 fba5 	bl	800b524 <__retarget_lock_acquire_recursive>
 800adda:	89ab      	ldrh	r3, [r5, #12]
 800addc:	071b      	lsls	r3, r3, #28
 800adde:	d501      	bpl.n	800ade4 <_vfiprintf_r+0x3c>
 800ade0:	692b      	ldr	r3, [r5, #16]
 800ade2:	b9eb      	cbnz	r3, 800ae20 <_vfiprintf_r+0x78>
 800ade4:	4629      	mov	r1, r5
 800ade6:	4630      	mov	r0, r6
 800ade8:	f000 f96e 	bl	800b0c8 <__swsetup_r>
 800adec:	b1c0      	cbz	r0, 800ae20 <_vfiprintf_r+0x78>
 800adee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adf0:	07dc      	lsls	r4, r3, #31
 800adf2:	d50e      	bpl.n	800ae12 <_vfiprintf_r+0x6a>
 800adf4:	f04f 30ff 	mov.w	r0, #4294967295
 800adf8:	b01d      	add	sp, #116	; 0x74
 800adfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adfe:	4b7b      	ldr	r3, [pc, #492]	; (800afec <_vfiprintf_r+0x244>)
 800ae00:	429d      	cmp	r5, r3
 800ae02:	d101      	bne.n	800ae08 <_vfiprintf_r+0x60>
 800ae04:	68b5      	ldr	r5, [r6, #8]
 800ae06:	e7df      	b.n	800adc8 <_vfiprintf_r+0x20>
 800ae08:	4b79      	ldr	r3, [pc, #484]	; (800aff0 <_vfiprintf_r+0x248>)
 800ae0a:	429d      	cmp	r5, r3
 800ae0c:	bf08      	it	eq
 800ae0e:	68f5      	ldreq	r5, [r6, #12]
 800ae10:	e7da      	b.n	800adc8 <_vfiprintf_r+0x20>
 800ae12:	89ab      	ldrh	r3, [r5, #12]
 800ae14:	0598      	lsls	r0, r3, #22
 800ae16:	d4ed      	bmi.n	800adf4 <_vfiprintf_r+0x4c>
 800ae18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae1a:	f000 fb84 	bl	800b526 <__retarget_lock_release_recursive>
 800ae1e:	e7e9      	b.n	800adf4 <_vfiprintf_r+0x4c>
 800ae20:	2300      	movs	r3, #0
 800ae22:	9309      	str	r3, [sp, #36]	; 0x24
 800ae24:	2320      	movs	r3, #32
 800ae26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae2a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae2e:	2330      	movs	r3, #48	; 0x30
 800ae30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aff4 <_vfiprintf_r+0x24c>
 800ae34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae38:	f04f 0901 	mov.w	r9, #1
 800ae3c:	4623      	mov	r3, r4
 800ae3e:	469a      	mov	sl, r3
 800ae40:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae44:	b10a      	cbz	r2, 800ae4a <_vfiprintf_r+0xa2>
 800ae46:	2a25      	cmp	r2, #37	; 0x25
 800ae48:	d1f9      	bne.n	800ae3e <_vfiprintf_r+0x96>
 800ae4a:	ebba 0b04 	subs.w	fp, sl, r4
 800ae4e:	d00b      	beq.n	800ae68 <_vfiprintf_r+0xc0>
 800ae50:	465b      	mov	r3, fp
 800ae52:	4622      	mov	r2, r4
 800ae54:	4629      	mov	r1, r5
 800ae56:	4630      	mov	r0, r6
 800ae58:	f7ff ff94 	bl	800ad84 <__sfputs_r>
 800ae5c:	3001      	adds	r0, #1
 800ae5e:	f000 80aa 	beq.w	800afb6 <_vfiprintf_r+0x20e>
 800ae62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae64:	445a      	add	r2, fp
 800ae66:	9209      	str	r2, [sp, #36]	; 0x24
 800ae68:	f89a 3000 	ldrb.w	r3, [sl]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	f000 80a2 	beq.w	800afb6 <_vfiprintf_r+0x20e>
 800ae72:	2300      	movs	r3, #0
 800ae74:	f04f 32ff 	mov.w	r2, #4294967295
 800ae78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae7c:	f10a 0a01 	add.w	sl, sl, #1
 800ae80:	9304      	str	r3, [sp, #16]
 800ae82:	9307      	str	r3, [sp, #28]
 800ae84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae88:	931a      	str	r3, [sp, #104]	; 0x68
 800ae8a:	4654      	mov	r4, sl
 800ae8c:	2205      	movs	r2, #5
 800ae8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae92:	4858      	ldr	r0, [pc, #352]	; (800aff4 <_vfiprintf_r+0x24c>)
 800ae94:	f7f5 f9bc 	bl	8000210 <memchr>
 800ae98:	9a04      	ldr	r2, [sp, #16]
 800ae9a:	b9d8      	cbnz	r0, 800aed4 <_vfiprintf_r+0x12c>
 800ae9c:	06d1      	lsls	r1, r2, #27
 800ae9e:	bf44      	itt	mi
 800aea0:	2320      	movmi	r3, #32
 800aea2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aea6:	0713      	lsls	r3, r2, #28
 800aea8:	bf44      	itt	mi
 800aeaa:	232b      	movmi	r3, #43	; 0x2b
 800aeac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aeb0:	f89a 3000 	ldrb.w	r3, [sl]
 800aeb4:	2b2a      	cmp	r3, #42	; 0x2a
 800aeb6:	d015      	beq.n	800aee4 <_vfiprintf_r+0x13c>
 800aeb8:	9a07      	ldr	r2, [sp, #28]
 800aeba:	4654      	mov	r4, sl
 800aebc:	2000      	movs	r0, #0
 800aebe:	f04f 0c0a 	mov.w	ip, #10
 800aec2:	4621      	mov	r1, r4
 800aec4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aec8:	3b30      	subs	r3, #48	; 0x30
 800aeca:	2b09      	cmp	r3, #9
 800aecc:	d94e      	bls.n	800af6c <_vfiprintf_r+0x1c4>
 800aece:	b1b0      	cbz	r0, 800aefe <_vfiprintf_r+0x156>
 800aed0:	9207      	str	r2, [sp, #28]
 800aed2:	e014      	b.n	800aefe <_vfiprintf_r+0x156>
 800aed4:	eba0 0308 	sub.w	r3, r0, r8
 800aed8:	fa09 f303 	lsl.w	r3, r9, r3
 800aedc:	4313      	orrs	r3, r2
 800aede:	9304      	str	r3, [sp, #16]
 800aee0:	46a2      	mov	sl, r4
 800aee2:	e7d2      	b.n	800ae8a <_vfiprintf_r+0xe2>
 800aee4:	9b03      	ldr	r3, [sp, #12]
 800aee6:	1d19      	adds	r1, r3, #4
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	9103      	str	r1, [sp, #12]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	bfbb      	ittet	lt
 800aef0:	425b      	neglt	r3, r3
 800aef2:	f042 0202 	orrlt.w	r2, r2, #2
 800aef6:	9307      	strge	r3, [sp, #28]
 800aef8:	9307      	strlt	r3, [sp, #28]
 800aefa:	bfb8      	it	lt
 800aefc:	9204      	strlt	r2, [sp, #16]
 800aefe:	7823      	ldrb	r3, [r4, #0]
 800af00:	2b2e      	cmp	r3, #46	; 0x2e
 800af02:	d10c      	bne.n	800af1e <_vfiprintf_r+0x176>
 800af04:	7863      	ldrb	r3, [r4, #1]
 800af06:	2b2a      	cmp	r3, #42	; 0x2a
 800af08:	d135      	bne.n	800af76 <_vfiprintf_r+0x1ce>
 800af0a:	9b03      	ldr	r3, [sp, #12]
 800af0c:	1d1a      	adds	r2, r3, #4
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	9203      	str	r2, [sp, #12]
 800af12:	2b00      	cmp	r3, #0
 800af14:	bfb8      	it	lt
 800af16:	f04f 33ff 	movlt.w	r3, #4294967295
 800af1a:	3402      	adds	r4, #2
 800af1c:	9305      	str	r3, [sp, #20]
 800af1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b004 <_vfiprintf_r+0x25c>
 800af22:	7821      	ldrb	r1, [r4, #0]
 800af24:	2203      	movs	r2, #3
 800af26:	4650      	mov	r0, sl
 800af28:	f7f5 f972 	bl	8000210 <memchr>
 800af2c:	b140      	cbz	r0, 800af40 <_vfiprintf_r+0x198>
 800af2e:	2340      	movs	r3, #64	; 0x40
 800af30:	eba0 000a 	sub.w	r0, r0, sl
 800af34:	fa03 f000 	lsl.w	r0, r3, r0
 800af38:	9b04      	ldr	r3, [sp, #16]
 800af3a:	4303      	orrs	r3, r0
 800af3c:	3401      	adds	r4, #1
 800af3e:	9304      	str	r3, [sp, #16]
 800af40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af44:	482c      	ldr	r0, [pc, #176]	; (800aff8 <_vfiprintf_r+0x250>)
 800af46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af4a:	2206      	movs	r2, #6
 800af4c:	f7f5 f960 	bl	8000210 <memchr>
 800af50:	2800      	cmp	r0, #0
 800af52:	d03f      	beq.n	800afd4 <_vfiprintf_r+0x22c>
 800af54:	4b29      	ldr	r3, [pc, #164]	; (800affc <_vfiprintf_r+0x254>)
 800af56:	bb1b      	cbnz	r3, 800afa0 <_vfiprintf_r+0x1f8>
 800af58:	9b03      	ldr	r3, [sp, #12]
 800af5a:	3307      	adds	r3, #7
 800af5c:	f023 0307 	bic.w	r3, r3, #7
 800af60:	3308      	adds	r3, #8
 800af62:	9303      	str	r3, [sp, #12]
 800af64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af66:	443b      	add	r3, r7
 800af68:	9309      	str	r3, [sp, #36]	; 0x24
 800af6a:	e767      	b.n	800ae3c <_vfiprintf_r+0x94>
 800af6c:	fb0c 3202 	mla	r2, ip, r2, r3
 800af70:	460c      	mov	r4, r1
 800af72:	2001      	movs	r0, #1
 800af74:	e7a5      	b.n	800aec2 <_vfiprintf_r+0x11a>
 800af76:	2300      	movs	r3, #0
 800af78:	3401      	adds	r4, #1
 800af7a:	9305      	str	r3, [sp, #20]
 800af7c:	4619      	mov	r1, r3
 800af7e:	f04f 0c0a 	mov.w	ip, #10
 800af82:	4620      	mov	r0, r4
 800af84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af88:	3a30      	subs	r2, #48	; 0x30
 800af8a:	2a09      	cmp	r2, #9
 800af8c:	d903      	bls.n	800af96 <_vfiprintf_r+0x1ee>
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d0c5      	beq.n	800af1e <_vfiprintf_r+0x176>
 800af92:	9105      	str	r1, [sp, #20]
 800af94:	e7c3      	b.n	800af1e <_vfiprintf_r+0x176>
 800af96:	fb0c 2101 	mla	r1, ip, r1, r2
 800af9a:	4604      	mov	r4, r0
 800af9c:	2301      	movs	r3, #1
 800af9e:	e7f0      	b.n	800af82 <_vfiprintf_r+0x1da>
 800afa0:	ab03      	add	r3, sp, #12
 800afa2:	9300      	str	r3, [sp, #0]
 800afa4:	462a      	mov	r2, r5
 800afa6:	4b16      	ldr	r3, [pc, #88]	; (800b000 <_vfiprintf_r+0x258>)
 800afa8:	a904      	add	r1, sp, #16
 800afaa:	4630      	mov	r0, r6
 800afac:	f7fd fde6 	bl	8008b7c <_printf_float>
 800afb0:	4607      	mov	r7, r0
 800afb2:	1c78      	adds	r0, r7, #1
 800afb4:	d1d6      	bne.n	800af64 <_vfiprintf_r+0x1bc>
 800afb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afb8:	07d9      	lsls	r1, r3, #31
 800afba:	d405      	bmi.n	800afc8 <_vfiprintf_r+0x220>
 800afbc:	89ab      	ldrh	r3, [r5, #12]
 800afbe:	059a      	lsls	r2, r3, #22
 800afc0:	d402      	bmi.n	800afc8 <_vfiprintf_r+0x220>
 800afc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afc4:	f000 faaf 	bl	800b526 <__retarget_lock_release_recursive>
 800afc8:	89ab      	ldrh	r3, [r5, #12]
 800afca:	065b      	lsls	r3, r3, #25
 800afcc:	f53f af12 	bmi.w	800adf4 <_vfiprintf_r+0x4c>
 800afd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afd2:	e711      	b.n	800adf8 <_vfiprintf_r+0x50>
 800afd4:	ab03      	add	r3, sp, #12
 800afd6:	9300      	str	r3, [sp, #0]
 800afd8:	462a      	mov	r2, r5
 800afda:	4b09      	ldr	r3, [pc, #36]	; (800b000 <_vfiprintf_r+0x258>)
 800afdc:	a904      	add	r1, sp, #16
 800afde:	4630      	mov	r0, r6
 800afe0:	f7fe f870 	bl	80090c4 <_printf_i>
 800afe4:	e7e4      	b.n	800afb0 <_vfiprintf_r+0x208>
 800afe6:	bf00      	nop
 800afe8:	0800befc 	.word	0x0800befc
 800afec:	0800bf1c 	.word	0x0800bf1c
 800aff0:	0800bedc 	.word	0x0800bedc
 800aff4:	0800bd84 	.word	0x0800bd84
 800aff8:	0800bd8e 	.word	0x0800bd8e
 800affc:	08008b7d 	.word	0x08008b7d
 800b000:	0800ad85 	.word	0x0800ad85
 800b004:	0800bd8a 	.word	0x0800bd8a

0800b008 <__swbuf_r>:
 800b008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b00a:	460e      	mov	r6, r1
 800b00c:	4614      	mov	r4, r2
 800b00e:	4605      	mov	r5, r0
 800b010:	b118      	cbz	r0, 800b01a <__swbuf_r+0x12>
 800b012:	6983      	ldr	r3, [r0, #24]
 800b014:	b90b      	cbnz	r3, 800b01a <__swbuf_r+0x12>
 800b016:	f000 f9e7 	bl	800b3e8 <__sinit>
 800b01a:	4b21      	ldr	r3, [pc, #132]	; (800b0a0 <__swbuf_r+0x98>)
 800b01c:	429c      	cmp	r4, r3
 800b01e:	d12b      	bne.n	800b078 <__swbuf_r+0x70>
 800b020:	686c      	ldr	r4, [r5, #4]
 800b022:	69a3      	ldr	r3, [r4, #24]
 800b024:	60a3      	str	r3, [r4, #8]
 800b026:	89a3      	ldrh	r3, [r4, #12]
 800b028:	071a      	lsls	r2, r3, #28
 800b02a:	d52f      	bpl.n	800b08c <__swbuf_r+0x84>
 800b02c:	6923      	ldr	r3, [r4, #16]
 800b02e:	b36b      	cbz	r3, 800b08c <__swbuf_r+0x84>
 800b030:	6923      	ldr	r3, [r4, #16]
 800b032:	6820      	ldr	r0, [r4, #0]
 800b034:	1ac0      	subs	r0, r0, r3
 800b036:	6963      	ldr	r3, [r4, #20]
 800b038:	b2f6      	uxtb	r6, r6
 800b03a:	4283      	cmp	r3, r0
 800b03c:	4637      	mov	r7, r6
 800b03e:	dc04      	bgt.n	800b04a <__swbuf_r+0x42>
 800b040:	4621      	mov	r1, r4
 800b042:	4628      	mov	r0, r5
 800b044:	f000 f93c 	bl	800b2c0 <_fflush_r>
 800b048:	bb30      	cbnz	r0, 800b098 <__swbuf_r+0x90>
 800b04a:	68a3      	ldr	r3, [r4, #8]
 800b04c:	3b01      	subs	r3, #1
 800b04e:	60a3      	str	r3, [r4, #8]
 800b050:	6823      	ldr	r3, [r4, #0]
 800b052:	1c5a      	adds	r2, r3, #1
 800b054:	6022      	str	r2, [r4, #0]
 800b056:	701e      	strb	r6, [r3, #0]
 800b058:	6963      	ldr	r3, [r4, #20]
 800b05a:	3001      	adds	r0, #1
 800b05c:	4283      	cmp	r3, r0
 800b05e:	d004      	beq.n	800b06a <__swbuf_r+0x62>
 800b060:	89a3      	ldrh	r3, [r4, #12]
 800b062:	07db      	lsls	r3, r3, #31
 800b064:	d506      	bpl.n	800b074 <__swbuf_r+0x6c>
 800b066:	2e0a      	cmp	r6, #10
 800b068:	d104      	bne.n	800b074 <__swbuf_r+0x6c>
 800b06a:	4621      	mov	r1, r4
 800b06c:	4628      	mov	r0, r5
 800b06e:	f000 f927 	bl	800b2c0 <_fflush_r>
 800b072:	b988      	cbnz	r0, 800b098 <__swbuf_r+0x90>
 800b074:	4638      	mov	r0, r7
 800b076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b078:	4b0a      	ldr	r3, [pc, #40]	; (800b0a4 <__swbuf_r+0x9c>)
 800b07a:	429c      	cmp	r4, r3
 800b07c:	d101      	bne.n	800b082 <__swbuf_r+0x7a>
 800b07e:	68ac      	ldr	r4, [r5, #8]
 800b080:	e7cf      	b.n	800b022 <__swbuf_r+0x1a>
 800b082:	4b09      	ldr	r3, [pc, #36]	; (800b0a8 <__swbuf_r+0xa0>)
 800b084:	429c      	cmp	r4, r3
 800b086:	bf08      	it	eq
 800b088:	68ec      	ldreq	r4, [r5, #12]
 800b08a:	e7ca      	b.n	800b022 <__swbuf_r+0x1a>
 800b08c:	4621      	mov	r1, r4
 800b08e:	4628      	mov	r0, r5
 800b090:	f000 f81a 	bl	800b0c8 <__swsetup_r>
 800b094:	2800      	cmp	r0, #0
 800b096:	d0cb      	beq.n	800b030 <__swbuf_r+0x28>
 800b098:	f04f 37ff 	mov.w	r7, #4294967295
 800b09c:	e7ea      	b.n	800b074 <__swbuf_r+0x6c>
 800b09e:	bf00      	nop
 800b0a0:	0800befc 	.word	0x0800befc
 800b0a4:	0800bf1c 	.word	0x0800bf1c
 800b0a8:	0800bedc 	.word	0x0800bedc

0800b0ac <__ascii_wctomb>:
 800b0ac:	b149      	cbz	r1, 800b0c2 <__ascii_wctomb+0x16>
 800b0ae:	2aff      	cmp	r2, #255	; 0xff
 800b0b0:	bf85      	ittet	hi
 800b0b2:	238a      	movhi	r3, #138	; 0x8a
 800b0b4:	6003      	strhi	r3, [r0, #0]
 800b0b6:	700a      	strbls	r2, [r1, #0]
 800b0b8:	f04f 30ff 	movhi.w	r0, #4294967295
 800b0bc:	bf98      	it	ls
 800b0be:	2001      	movls	r0, #1
 800b0c0:	4770      	bx	lr
 800b0c2:	4608      	mov	r0, r1
 800b0c4:	4770      	bx	lr
	...

0800b0c8 <__swsetup_r>:
 800b0c8:	4b32      	ldr	r3, [pc, #200]	; (800b194 <__swsetup_r+0xcc>)
 800b0ca:	b570      	push	{r4, r5, r6, lr}
 800b0cc:	681d      	ldr	r5, [r3, #0]
 800b0ce:	4606      	mov	r6, r0
 800b0d0:	460c      	mov	r4, r1
 800b0d2:	b125      	cbz	r5, 800b0de <__swsetup_r+0x16>
 800b0d4:	69ab      	ldr	r3, [r5, #24]
 800b0d6:	b913      	cbnz	r3, 800b0de <__swsetup_r+0x16>
 800b0d8:	4628      	mov	r0, r5
 800b0da:	f000 f985 	bl	800b3e8 <__sinit>
 800b0de:	4b2e      	ldr	r3, [pc, #184]	; (800b198 <__swsetup_r+0xd0>)
 800b0e0:	429c      	cmp	r4, r3
 800b0e2:	d10f      	bne.n	800b104 <__swsetup_r+0x3c>
 800b0e4:	686c      	ldr	r4, [r5, #4]
 800b0e6:	89a3      	ldrh	r3, [r4, #12]
 800b0e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b0ec:	0719      	lsls	r1, r3, #28
 800b0ee:	d42c      	bmi.n	800b14a <__swsetup_r+0x82>
 800b0f0:	06dd      	lsls	r5, r3, #27
 800b0f2:	d411      	bmi.n	800b118 <__swsetup_r+0x50>
 800b0f4:	2309      	movs	r3, #9
 800b0f6:	6033      	str	r3, [r6, #0]
 800b0f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b0fc:	81a3      	strh	r3, [r4, #12]
 800b0fe:	f04f 30ff 	mov.w	r0, #4294967295
 800b102:	e03e      	b.n	800b182 <__swsetup_r+0xba>
 800b104:	4b25      	ldr	r3, [pc, #148]	; (800b19c <__swsetup_r+0xd4>)
 800b106:	429c      	cmp	r4, r3
 800b108:	d101      	bne.n	800b10e <__swsetup_r+0x46>
 800b10a:	68ac      	ldr	r4, [r5, #8]
 800b10c:	e7eb      	b.n	800b0e6 <__swsetup_r+0x1e>
 800b10e:	4b24      	ldr	r3, [pc, #144]	; (800b1a0 <__swsetup_r+0xd8>)
 800b110:	429c      	cmp	r4, r3
 800b112:	bf08      	it	eq
 800b114:	68ec      	ldreq	r4, [r5, #12]
 800b116:	e7e6      	b.n	800b0e6 <__swsetup_r+0x1e>
 800b118:	0758      	lsls	r0, r3, #29
 800b11a:	d512      	bpl.n	800b142 <__swsetup_r+0x7a>
 800b11c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b11e:	b141      	cbz	r1, 800b132 <__swsetup_r+0x6a>
 800b120:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b124:	4299      	cmp	r1, r3
 800b126:	d002      	beq.n	800b12e <__swsetup_r+0x66>
 800b128:	4630      	mov	r0, r6
 800b12a:	f7ff fb31 	bl	800a790 <_free_r>
 800b12e:	2300      	movs	r3, #0
 800b130:	6363      	str	r3, [r4, #52]	; 0x34
 800b132:	89a3      	ldrh	r3, [r4, #12]
 800b134:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b138:	81a3      	strh	r3, [r4, #12]
 800b13a:	2300      	movs	r3, #0
 800b13c:	6063      	str	r3, [r4, #4]
 800b13e:	6923      	ldr	r3, [r4, #16]
 800b140:	6023      	str	r3, [r4, #0]
 800b142:	89a3      	ldrh	r3, [r4, #12]
 800b144:	f043 0308 	orr.w	r3, r3, #8
 800b148:	81a3      	strh	r3, [r4, #12]
 800b14a:	6923      	ldr	r3, [r4, #16]
 800b14c:	b94b      	cbnz	r3, 800b162 <__swsetup_r+0x9a>
 800b14e:	89a3      	ldrh	r3, [r4, #12]
 800b150:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b158:	d003      	beq.n	800b162 <__swsetup_r+0x9a>
 800b15a:	4621      	mov	r1, r4
 800b15c:	4630      	mov	r0, r6
 800b15e:	f000 fa09 	bl	800b574 <__smakebuf_r>
 800b162:	89a0      	ldrh	r0, [r4, #12]
 800b164:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b168:	f010 0301 	ands.w	r3, r0, #1
 800b16c:	d00a      	beq.n	800b184 <__swsetup_r+0xbc>
 800b16e:	2300      	movs	r3, #0
 800b170:	60a3      	str	r3, [r4, #8]
 800b172:	6963      	ldr	r3, [r4, #20]
 800b174:	425b      	negs	r3, r3
 800b176:	61a3      	str	r3, [r4, #24]
 800b178:	6923      	ldr	r3, [r4, #16]
 800b17a:	b943      	cbnz	r3, 800b18e <__swsetup_r+0xc6>
 800b17c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b180:	d1ba      	bne.n	800b0f8 <__swsetup_r+0x30>
 800b182:	bd70      	pop	{r4, r5, r6, pc}
 800b184:	0781      	lsls	r1, r0, #30
 800b186:	bf58      	it	pl
 800b188:	6963      	ldrpl	r3, [r4, #20]
 800b18a:	60a3      	str	r3, [r4, #8]
 800b18c:	e7f4      	b.n	800b178 <__swsetup_r+0xb0>
 800b18e:	2000      	movs	r0, #0
 800b190:	e7f7      	b.n	800b182 <__swsetup_r+0xba>
 800b192:	bf00      	nop
 800b194:	20000010 	.word	0x20000010
 800b198:	0800befc 	.word	0x0800befc
 800b19c:	0800bf1c 	.word	0x0800bf1c
 800b1a0:	0800bedc 	.word	0x0800bedc

0800b1a4 <abort>:
 800b1a4:	b508      	push	{r3, lr}
 800b1a6:	2006      	movs	r0, #6
 800b1a8:	f000 fa54 	bl	800b654 <raise>
 800b1ac:	2001      	movs	r0, #1
 800b1ae:	f7f7 f9c9 	bl	8002544 <_exit>
	...

0800b1b4 <__sflush_r>:
 800b1b4:	898a      	ldrh	r2, [r1, #12]
 800b1b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ba:	4605      	mov	r5, r0
 800b1bc:	0710      	lsls	r0, r2, #28
 800b1be:	460c      	mov	r4, r1
 800b1c0:	d458      	bmi.n	800b274 <__sflush_r+0xc0>
 800b1c2:	684b      	ldr	r3, [r1, #4]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	dc05      	bgt.n	800b1d4 <__sflush_r+0x20>
 800b1c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	dc02      	bgt.n	800b1d4 <__sflush_r+0x20>
 800b1ce:	2000      	movs	r0, #0
 800b1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1d6:	2e00      	cmp	r6, #0
 800b1d8:	d0f9      	beq.n	800b1ce <__sflush_r+0x1a>
 800b1da:	2300      	movs	r3, #0
 800b1dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b1e0:	682f      	ldr	r7, [r5, #0]
 800b1e2:	602b      	str	r3, [r5, #0]
 800b1e4:	d032      	beq.n	800b24c <__sflush_r+0x98>
 800b1e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b1e8:	89a3      	ldrh	r3, [r4, #12]
 800b1ea:	075a      	lsls	r2, r3, #29
 800b1ec:	d505      	bpl.n	800b1fa <__sflush_r+0x46>
 800b1ee:	6863      	ldr	r3, [r4, #4]
 800b1f0:	1ac0      	subs	r0, r0, r3
 800b1f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b1f4:	b10b      	cbz	r3, 800b1fa <__sflush_r+0x46>
 800b1f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b1f8:	1ac0      	subs	r0, r0, r3
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b200:	6a21      	ldr	r1, [r4, #32]
 800b202:	4628      	mov	r0, r5
 800b204:	47b0      	blx	r6
 800b206:	1c43      	adds	r3, r0, #1
 800b208:	89a3      	ldrh	r3, [r4, #12]
 800b20a:	d106      	bne.n	800b21a <__sflush_r+0x66>
 800b20c:	6829      	ldr	r1, [r5, #0]
 800b20e:	291d      	cmp	r1, #29
 800b210:	d82c      	bhi.n	800b26c <__sflush_r+0xb8>
 800b212:	4a2a      	ldr	r2, [pc, #168]	; (800b2bc <__sflush_r+0x108>)
 800b214:	40ca      	lsrs	r2, r1
 800b216:	07d6      	lsls	r6, r2, #31
 800b218:	d528      	bpl.n	800b26c <__sflush_r+0xb8>
 800b21a:	2200      	movs	r2, #0
 800b21c:	6062      	str	r2, [r4, #4]
 800b21e:	04d9      	lsls	r1, r3, #19
 800b220:	6922      	ldr	r2, [r4, #16]
 800b222:	6022      	str	r2, [r4, #0]
 800b224:	d504      	bpl.n	800b230 <__sflush_r+0x7c>
 800b226:	1c42      	adds	r2, r0, #1
 800b228:	d101      	bne.n	800b22e <__sflush_r+0x7a>
 800b22a:	682b      	ldr	r3, [r5, #0]
 800b22c:	b903      	cbnz	r3, 800b230 <__sflush_r+0x7c>
 800b22e:	6560      	str	r0, [r4, #84]	; 0x54
 800b230:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b232:	602f      	str	r7, [r5, #0]
 800b234:	2900      	cmp	r1, #0
 800b236:	d0ca      	beq.n	800b1ce <__sflush_r+0x1a>
 800b238:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b23c:	4299      	cmp	r1, r3
 800b23e:	d002      	beq.n	800b246 <__sflush_r+0x92>
 800b240:	4628      	mov	r0, r5
 800b242:	f7ff faa5 	bl	800a790 <_free_r>
 800b246:	2000      	movs	r0, #0
 800b248:	6360      	str	r0, [r4, #52]	; 0x34
 800b24a:	e7c1      	b.n	800b1d0 <__sflush_r+0x1c>
 800b24c:	6a21      	ldr	r1, [r4, #32]
 800b24e:	2301      	movs	r3, #1
 800b250:	4628      	mov	r0, r5
 800b252:	47b0      	blx	r6
 800b254:	1c41      	adds	r1, r0, #1
 800b256:	d1c7      	bne.n	800b1e8 <__sflush_r+0x34>
 800b258:	682b      	ldr	r3, [r5, #0]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d0c4      	beq.n	800b1e8 <__sflush_r+0x34>
 800b25e:	2b1d      	cmp	r3, #29
 800b260:	d001      	beq.n	800b266 <__sflush_r+0xb2>
 800b262:	2b16      	cmp	r3, #22
 800b264:	d101      	bne.n	800b26a <__sflush_r+0xb6>
 800b266:	602f      	str	r7, [r5, #0]
 800b268:	e7b1      	b.n	800b1ce <__sflush_r+0x1a>
 800b26a:	89a3      	ldrh	r3, [r4, #12]
 800b26c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b270:	81a3      	strh	r3, [r4, #12]
 800b272:	e7ad      	b.n	800b1d0 <__sflush_r+0x1c>
 800b274:	690f      	ldr	r7, [r1, #16]
 800b276:	2f00      	cmp	r7, #0
 800b278:	d0a9      	beq.n	800b1ce <__sflush_r+0x1a>
 800b27a:	0793      	lsls	r3, r2, #30
 800b27c:	680e      	ldr	r6, [r1, #0]
 800b27e:	bf08      	it	eq
 800b280:	694b      	ldreq	r3, [r1, #20]
 800b282:	600f      	str	r7, [r1, #0]
 800b284:	bf18      	it	ne
 800b286:	2300      	movne	r3, #0
 800b288:	eba6 0807 	sub.w	r8, r6, r7
 800b28c:	608b      	str	r3, [r1, #8]
 800b28e:	f1b8 0f00 	cmp.w	r8, #0
 800b292:	dd9c      	ble.n	800b1ce <__sflush_r+0x1a>
 800b294:	6a21      	ldr	r1, [r4, #32]
 800b296:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b298:	4643      	mov	r3, r8
 800b29a:	463a      	mov	r2, r7
 800b29c:	4628      	mov	r0, r5
 800b29e:	47b0      	blx	r6
 800b2a0:	2800      	cmp	r0, #0
 800b2a2:	dc06      	bgt.n	800b2b2 <__sflush_r+0xfe>
 800b2a4:	89a3      	ldrh	r3, [r4, #12]
 800b2a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2aa:	81a3      	strh	r3, [r4, #12]
 800b2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b2b0:	e78e      	b.n	800b1d0 <__sflush_r+0x1c>
 800b2b2:	4407      	add	r7, r0
 800b2b4:	eba8 0800 	sub.w	r8, r8, r0
 800b2b8:	e7e9      	b.n	800b28e <__sflush_r+0xda>
 800b2ba:	bf00      	nop
 800b2bc:	20400001 	.word	0x20400001

0800b2c0 <_fflush_r>:
 800b2c0:	b538      	push	{r3, r4, r5, lr}
 800b2c2:	690b      	ldr	r3, [r1, #16]
 800b2c4:	4605      	mov	r5, r0
 800b2c6:	460c      	mov	r4, r1
 800b2c8:	b913      	cbnz	r3, 800b2d0 <_fflush_r+0x10>
 800b2ca:	2500      	movs	r5, #0
 800b2cc:	4628      	mov	r0, r5
 800b2ce:	bd38      	pop	{r3, r4, r5, pc}
 800b2d0:	b118      	cbz	r0, 800b2da <_fflush_r+0x1a>
 800b2d2:	6983      	ldr	r3, [r0, #24]
 800b2d4:	b90b      	cbnz	r3, 800b2da <_fflush_r+0x1a>
 800b2d6:	f000 f887 	bl	800b3e8 <__sinit>
 800b2da:	4b14      	ldr	r3, [pc, #80]	; (800b32c <_fflush_r+0x6c>)
 800b2dc:	429c      	cmp	r4, r3
 800b2de:	d11b      	bne.n	800b318 <_fflush_r+0x58>
 800b2e0:	686c      	ldr	r4, [r5, #4]
 800b2e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d0ef      	beq.n	800b2ca <_fflush_r+0xa>
 800b2ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b2ec:	07d0      	lsls	r0, r2, #31
 800b2ee:	d404      	bmi.n	800b2fa <_fflush_r+0x3a>
 800b2f0:	0599      	lsls	r1, r3, #22
 800b2f2:	d402      	bmi.n	800b2fa <_fflush_r+0x3a>
 800b2f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2f6:	f000 f915 	bl	800b524 <__retarget_lock_acquire_recursive>
 800b2fa:	4628      	mov	r0, r5
 800b2fc:	4621      	mov	r1, r4
 800b2fe:	f7ff ff59 	bl	800b1b4 <__sflush_r>
 800b302:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b304:	07da      	lsls	r2, r3, #31
 800b306:	4605      	mov	r5, r0
 800b308:	d4e0      	bmi.n	800b2cc <_fflush_r+0xc>
 800b30a:	89a3      	ldrh	r3, [r4, #12]
 800b30c:	059b      	lsls	r3, r3, #22
 800b30e:	d4dd      	bmi.n	800b2cc <_fflush_r+0xc>
 800b310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b312:	f000 f908 	bl	800b526 <__retarget_lock_release_recursive>
 800b316:	e7d9      	b.n	800b2cc <_fflush_r+0xc>
 800b318:	4b05      	ldr	r3, [pc, #20]	; (800b330 <_fflush_r+0x70>)
 800b31a:	429c      	cmp	r4, r3
 800b31c:	d101      	bne.n	800b322 <_fflush_r+0x62>
 800b31e:	68ac      	ldr	r4, [r5, #8]
 800b320:	e7df      	b.n	800b2e2 <_fflush_r+0x22>
 800b322:	4b04      	ldr	r3, [pc, #16]	; (800b334 <_fflush_r+0x74>)
 800b324:	429c      	cmp	r4, r3
 800b326:	bf08      	it	eq
 800b328:	68ec      	ldreq	r4, [r5, #12]
 800b32a:	e7da      	b.n	800b2e2 <_fflush_r+0x22>
 800b32c:	0800befc 	.word	0x0800befc
 800b330:	0800bf1c 	.word	0x0800bf1c
 800b334:	0800bedc 	.word	0x0800bedc

0800b338 <std>:
 800b338:	2300      	movs	r3, #0
 800b33a:	b510      	push	{r4, lr}
 800b33c:	4604      	mov	r4, r0
 800b33e:	e9c0 3300 	strd	r3, r3, [r0]
 800b342:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b346:	6083      	str	r3, [r0, #8]
 800b348:	8181      	strh	r1, [r0, #12]
 800b34a:	6643      	str	r3, [r0, #100]	; 0x64
 800b34c:	81c2      	strh	r2, [r0, #14]
 800b34e:	6183      	str	r3, [r0, #24]
 800b350:	4619      	mov	r1, r3
 800b352:	2208      	movs	r2, #8
 800b354:	305c      	adds	r0, #92	; 0x5c
 800b356:	f7fd fb69 	bl	8008a2c <memset>
 800b35a:	4b05      	ldr	r3, [pc, #20]	; (800b370 <std+0x38>)
 800b35c:	6263      	str	r3, [r4, #36]	; 0x24
 800b35e:	4b05      	ldr	r3, [pc, #20]	; (800b374 <std+0x3c>)
 800b360:	62a3      	str	r3, [r4, #40]	; 0x28
 800b362:	4b05      	ldr	r3, [pc, #20]	; (800b378 <std+0x40>)
 800b364:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b366:	4b05      	ldr	r3, [pc, #20]	; (800b37c <std+0x44>)
 800b368:	6224      	str	r4, [r4, #32]
 800b36a:	6323      	str	r3, [r4, #48]	; 0x30
 800b36c:	bd10      	pop	{r4, pc}
 800b36e:	bf00      	nop
 800b370:	0800b68d 	.word	0x0800b68d
 800b374:	0800b6af 	.word	0x0800b6af
 800b378:	0800b6e7 	.word	0x0800b6e7
 800b37c:	0800b70b 	.word	0x0800b70b

0800b380 <_cleanup_r>:
 800b380:	4901      	ldr	r1, [pc, #4]	; (800b388 <_cleanup_r+0x8>)
 800b382:	f000 b8af 	b.w	800b4e4 <_fwalk_reent>
 800b386:	bf00      	nop
 800b388:	0800b2c1 	.word	0x0800b2c1

0800b38c <__sfmoreglue>:
 800b38c:	b570      	push	{r4, r5, r6, lr}
 800b38e:	2268      	movs	r2, #104	; 0x68
 800b390:	1e4d      	subs	r5, r1, #1
 800b392:	4355      	muls	r5, r2
 800b394:	460e      	mov	r6, r1
 800b396:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b39a:	f7ff fa65 	bl	800a868 <_malloc_r>
 800b39e:	4604      	mov	r4, r0
 800b3a0:	b140      	cbz	r0, 800b3b4 <__sfmoreglue+0x28>
 800b3a2:	2100      	movs	r1, #0
 800b3a4:	e9c0 1600 	strd	r1, r6, [r0]
 800b3a8:	300c      	adds	r0, #12
 800b3aa:	60a0      	str	r0, [r4, #8]
 800b3ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b3b0:	f7fd fb3c 	bl	8008a2c <memset>
 800b3b4:	4620      	mov	r0, r4
 800b3b6:	bd70      	pop	{r4, r5, r6, pc}

0800b3b8 <__sfp_lock_acquire>:
 800b3b8:	4801      	ldr	r0, [pc, #4]	; (800b3c0 <__sfp_lock_acquire+0x8>)
 800b3ba:	f000 b8b3 	b.w	800b524 <__retarget_lock_acquire_recursive>
 800b3be:	bf00      	nop
 800b3c0:	2000436d 	.word	0x2000436d

0800b3c4 <__sfp_lock_release>:
 800b3c4:	4801      	ldr	r0, [pc, #4]	; (800b3cc <__sfp_lock_release+0x8>)
 800b3c6:	f000 b8ae 	b.w	800b526 <__retarget_lock_release_recursive>
 800b3ca:	bf00      	nop
 800b3cc:	2000436d 	.word	0x2000436d

0800b3d0 <__sinit_lock_acquire>:
 800b3d0:	4801      	ldr	r0, [pc, #4]	; (800b3d8 <__sinit_lock_acquire+0x8>)
 800b3d2:	f000 b8a7 	b.w	800b524 <__retarget_lock_acquire_recursive>
 800b3d6:	bf00      	nop
 800b3d8:	2000436e 	.word	0x2000436e

0800b3dc <__sinit_lock_release>:
 800b3dc:	4801      	ldr	r0, [pc, #4]	; (800b3e4 <__sinit_lock_release+0x8>)
 800b3de:	f000 b8a2 	b.w	800b526 <__retarget_lock_release_recursive>
 800b3e2:	bf00      	nop
 800b3e4:	2000436e 	.word	0x2000436e

0800b3e8 <__sinit>:
 800b3e8:	b510      	push	{r4, lr}
 800b3ea:	4604      	mov	r4, r0
 800b3ec:	f7ff fff0 	bl	800b3d0 <__sinit_lock_acquire>
 800b3f0:	69a3      	ldr	r3, [r4, #24]
 800b3f2:	b11b      	cbz	r3, 800b3fc <__sinit+0x14>
 800b3f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3f8:	f7ff bff0 	b.w	800b3dc <__sinit_lock_release>
 800b3fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b400:	6523      	str	r3, [r4, #80]	; 0x50
 800b402:	4b13      	ldr	r3, [pc, #76]	; (800b450 <__sinit+0x68>)
 800b404:	4a13      	ldr	r2, [pc, #76]	; (800b454 <__sinit+0x6c>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	62a2      	str	r2, [r4, #40]	; 0x28
 800b40a:	42a3      	cmp	r3, r4
 800b40c:	bf04      	itt	eq
 800b40e:	2301      	moveq	r3, #1
 800b410:	61a3      	streq	r3, [r4, #24]
 800b412:	4620      	mov	r0, r4
 800b414:	f000 f820 	bl	800b458 <__sfp>
 800b418:	6060      	str	r0, [r4, #4]
 800b41a:	4620      	mov	r0, r4
 800b41c:	f000 f81c 	bl	800b458 <__sfp>
 800b420:	60a0      	str	r0, [r4, #8]
 800b422:	4620      	mov	r0, r4
 800b424:	f000 f818 	bl	800b458 <__sfp>
 800b428:	2200      	movs	r2, #0
 800b42a:	60e0      	str	r0, [r4, #12]
 800b42c:	2104      	movs	r1, #4
 800b42e:	6860      	ldr	r0, [r4, #4]
 800b430:	f7ff ff82 	bl	800b338 <std>
 800b434:	68a0      	ldr	r0, [r4, #8]
 800b436:	2201      	movs	r2, #1
 800b438:	2109      	movs	r1, #9
 800b43a:	f7ff ff7d 	bl	800b338 <std>
 800b43e:	68e0      	ldr	r0, [r4, #12]
 800b440:	2202      	movs	r2, #2
 800b442:	2112      	movs	r1, #18
 800b444:	f7ff ff78 	bl	800b338 <std>
 800b448:	2301      	movs	r3, #1
 800b44a:	61a3      	str	r3, [r4, #24]
 800b44c:	e7d2      	b.n	800b3f4 <__sinit+0xc>
 800b44e:	bf00      	nop
 800b450:	0800bb60 	.word	0x0800bb60
 800b454:	0800b381 	.word	0x0800b381

0800b458 <__sfp>:
 800b458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b45a:	4607      	mov	r7, r0
 800b45c:	f7ff ffac 	bl	800b3b8 <__sfp_lock_acquire>
 800b460:	4b1e      	ldr	r3, [pc, #120]	; (800b4dc <__sfp+0x84>)
 800b462:	681e      	ldr	r6, [r3, #0]
 800b464:	69b3      	ldr	r3, [r6, #24]
 800b466:	b913      	cbnz	r3, 800b46e <__sfp+0x16>
 800b468:	4630      	mov	r0, r6
 800b46a:	f7ff ffbd 	bl	800b3e8 <__sinit>
 800b46e:	3648      	adds	r6, #72	; 0x48
 800b470:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b474:	3b01      	subs	r3, #1
 800b476:	d503      	bpl.n	800b480 <__sfp+0x28>
 800b478:	6833      	ldr	r3, [r6, #0]
 800b47a:	b30b      	cbz	r3, 800b4c0 <__sfp+0x68>
 800b47c:	6836      	ldr	r6, [r6, #0]
 800b47e:	e7f7      	b.n	800b470 <__sfp+0x18>
 800b480:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b484:	b9d5      	cbnz	r5, 800b4bc <__sfp+0x64>
 800b486:	4b16      	ldr	r3, [pc, #88]	; (800b4e0 <__sfp+0x88>)
 800b488:	60e3      	str	r3, [r4, #12]
 800b48a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b48e:	6665      	str	r5, [r4, #100]	; 0x64
 800b490:	f000 f847 	bl	800b522 <__retarget_lock_init_recursive>
 800b494:	f7ff ff96 	bl	800b3c4 <__sfp_lock_release>
 800b498:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b49c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b4a0:	6025      	str	r5, [r4, #0]
 800b4a2:	61a5      	str	r5, [r4, #24]
 800b4a4:	2208      	movs	r2, #8
 800b4a6:	4629      	mov	r1, r5
 800b4a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b4ac:	f7fd fabe 	bl	8008a2c <memset>
 800b4b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b4b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4bc:	3468      	adds	r4, #104	; 0x68
 800b4be:	e7d9      	b.n	800b474 <__sfp+0x1c>
 800b4c0:	2104      	movs	r1, #4
 800b4c2:	4638      	mov	r0, r7
 800b4c4:	f7ff ff62 	bl	800b38c <__sfmoreglue>
 800b4c8:	4604      	mov	r4, r0
 800b4ca:	6030      	str	r0, [r6, #0]
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	d1d5      	bne.n	800b47c <__sfp+0x24>
 800b4d0:	f7ff ff78 	bl	800b3c4 <__sfp_lock_release>
 800b4d4:	230c      	movs	r3, #12
 800b4d6:	603b      	str	r3, [r7, #0]
 800b4d8:	e7ee      	b.n	800b4b8 <__sfp+0x60>
 800b4da:	bf00      	nop
 800b4dc:	0800bb60 	.word	0x0800bb60
 800b4e0:	ffff0001 	.word	0xffff0001

0800b4e4 <_fwalk_reent>:
 800b4e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4e8:	4606      	mov	r6, r0
 800b4ea:	4688      	mov	r8, r1
 800b4ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b4f0:	2700      	movs	r7, #0
 800b4f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4f6:	f1b9 0901 	subs.w	r9, r9, #1
 800b4fa:	d505      	bpl.n	800b508 <_fwalk_reent+0x24>
 800b4fc:	6824      	ldr	r4, [r4, #0]
 800b4fe:	2c00      	cmp	r4, #0
 800b500:	d1f7      	bne.n	800b4f2 <_fwalk_reent+0xe>
 800b502:	4638      	mov	r0, r7
 800b504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b508:	89ab      	ldrh	r3, [r5, #12]
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	d907      	bls.n	800b51e <_fwalk_reent+0x3a>
 800b50e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b512:	3301      	adds	r3, #1
 800b514:	d003      	beq.n	800b51e <_fwalk_reent+0x3a>
 800b516:	4629      	mov	r1, r5
 800b518:	4630      	mov	r0, r6
 800b51a:	47c0      	blx	r8
 800b51c:	4307      	orrs	r7, r0
 800b51e:	3568      	adds	r5, #104	; 0x68
 800b520:	e7e9      	b.n	800b4f6 <_fwalk_reent+0x12>

0800b522 <__retarget_lock_init_recursive>:
 800b522:	4770      	bx	lr

0800b524 <__retarget_lock_acquire_recursive>:
 800b524:	4770      	bx	lr

0800b526 <__retarget_lock_release_recursive>:
 800b526:	4770      	bx	lr

0800b528 <__swhatbuf_r>:
 800b528:	b570      	push	{r4, r5, r6, lr}
 800b52a:	460e      	mov	r6, r1
 800b52c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b530:	2900      	cmp	r1, #0
 800b532:	b096      	sub	sp, #88	; 0x58
 800b534:	4614      	mov	r4, r2
 800b536:	461d      	mov	r5, r3
 800b538:	da08      	bge.n	800b54c <__swhatbuf_r+0x24>
 800b53a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b53e:	2200      	movs	r2, #0
 800b540:	602a      	str	r2, [r5, #0]
 800b542:	061a      	lsls	r2, r3, #24
 800b544:	d410      	bmi.n	800b568 <__swhatbuf_r+0x40>
 800b546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b54a:	e00e      	b.n	800b56a <__swhatbuf_r+0x42>
 800b54c:	466a      	mov	r2, sp
 800b54e:	f000 f903 	bl	800b758 <_fstat_r>
 800b552:	2800      	cmp	r0, #0
 800b554:	dbf1      	blt.n	800b53a <__swhatbuf_r+0x12>
 800b556:	9a01      	ldr	r2, [sp, #4]
 800b558:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b55c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b560:	425a      	negs	r2, r3
 800b562:	415a      	adcs	r2, r3
 800b564:	602a      	str	r2, [r5, #0]
 800b566:	e7ee      	b.n	800b546 <__swhatbuf_r+0x1e>
 800b568:	2340      	movs	r3, #64	; 0x40
 800b56a:	2000      	movs	r0, #0
 800b56c:	6023      	str	r3, [r4, #0]
 800b56e:	b016      	add	sp, #88	; 0x58
 800b570:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b574 <__smakebuf_r>:
 800b574:	898b      	ldrh	r3, [r1, #12]
 800b576:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b578:	079d      	lsls	r5, r3, #30
 800b57a:	4606      	mov	r6, r0
 800b57c:	460c      	mov	r4, r1
 800b57e:	d507      	bpl.n	800b590 <__smakebuf_r+0x1c>
 800b580:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b584:	6023      	str	r3, [r4, #0]
 800b586:	6123      	str	r3, [r4, #16]
 800b588:	2301      	movs	r3, #1
 800b58a:	6163      	str	r3, [r4, #20]
 800b58c:	b002      	add	sp, #8
 800b58e:	bd70      	pop	{r4, r5, r6, pc}
 800b590:	ab01      	add	r3, sp, #4
 800b592:	466a      	mov	r2, sp
 800b594:	f7ff ffc8 	bl	800b528 <__swhatbuf_r>
 800b598:	9900      	ldr	r1, [sp, #0]
 800b59a:	4605      	mov	r5, r0
 800b59c:	4630      	mov	r0, r6
 800b59e:	f7ff f963 	bl	800a868 <_malloc_r>
 800b5a2:	b948      	cbnz	r0, 800b5b8 <__smakebuf_r+0x44>
 800b5a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5a8:	059a      	lsls	r2, r3, #22
 800b5aa:	d4ef      	bmi.n	800b58c <__smakebuf_r+0x18>
 800b5ac:	f023 0303 	bic.w	r3, r3, #3
 800b5b0:	f043 0302 	orr.w	r3, r3, #2
 800b5b4:	81a3      	strh	r3, [r4, #12]
 800b5b6:	e7e3      	b.n	800b580 <__smakebuf_r+0xc>
 800b5b8:	4b0d      	ldr	r3, [pc, #52]	; (800b5f0 <__smakebuf_r+0x7c>)
 800b5ba:	62b3      	str	r3, [r6, #40]	; 0x28
 800b5bc:	89a3      	ldrh	r3, [r4, #12]
 800b5be:	6020      	str	r0, [r4, #0]
 800b5c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5c4:	81a3      	strh	r3, [r4, #12]
 800b5c6:	9b00      	ldr	r3, [sp, #0]
 800b5c8:	6163      	str	r3, [r4, #20]
 800b5ca:	9b01      	ldr	r3, [sp, #4]
 800b5cc:	6120      	str	r0, [r4, #16]
 800b5ce:	b15b      	cbz	r3, 800b5e8 <__smakebuf_r+0x74>
 800b5d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5d4:	4630      	mov	r0, r6
 800b5d6:	f000 f8d1 	bl	800b77c <_isatty_r>
 800b5da:	b128      	cbz	r0, 800b5e8 <__smakebuf_r+0x74>
 800b5dc:	89a3      	ldrh	r3, [r4, #12]
 800b5de:	f023 0303 	bic.w	r3, r3, #3
 800b5e2:	f043 0301 	orr.w	r3, r3, #1
 800b5e6:	81a3      	strh	r3, [r4, #12]
 800b5e8:	89a0      	ldrh	r0, [r4, #12]
 800b5ea:	4305      	orrs	r5, r0
 800b5ec:	81a5      	strh	r5, [r4, #12]
 800b5ee:	e7cd      	b.n	800b58c <__smakebuf_r+0x18>
 800b5f0:	0800b381 	.word	0x0800b381

0800b5f4 <_malloc_usable_size_r>:
 800b5f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5f8:	1f18      	subs	r0, r3, #4
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	bfbc      	itt	lt
 800b5fe:	580b      	ldrlt	r3, [r1, r0]
 800b600:	18c0      	addlt	r0, r0, r3
 800b602:	4770      	bx	lr

0800b604 <_raise_r>:
 800b604:	291f      	cmp	r1, #31
 800b606:	b538      	push	{r3, r4, r5, lr}
 800b608:	4604      	mov	r4, r0
 800b60a:	460d      	mov	r5, r1
 800b60c:	d904      	bls.n	800b618 <_raise_r+0x14>
 800b60e:	2316      	movs	r3, #22
 800b610:	6003      	str	r3, [r0, #0]
 800b612:	f04f 30ff 	mov.w	r0, #4294967295
 800b616:	bd38      	pop	{r3, r4, r5, pc}
 800b618:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b61a:	b112      	cbz	r2, 800b622 <_raise_r+0x1e>
 800b61c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b620:	b94b      	cbnz	r3, 800b636 <_raise_r+0x32>
 800b622:	4620      	mov	r0, r4
 800b624:	f000 f830 	bl	800b688 <_getpid_r>
 800b628:	462a      	mov	r2, r5
 800b62a:	4601      	mov	r1, r0
 800b62c:	4620      	mov	r0, r4
 800b62e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b632:	f000 b817 	b.w	800b664 <_kill_r>
 800b636:	2b01      	cmp	r3, #1
 800b638:	d00a      	beq.n	800b650 <_raise_r+0x4c>
 800b63a:	1c59      	adds	r1, r3, #1
 800b63c:	d103      	bne.n	800b646 <_raise_r+0x42>
 800b63e:	2316      	movs	r3, #22
 800b640:	6003      	str	r3, [r0, #0]
 800b642:	2001      	movs	r0, #1
 800b644:	e7e7      	b.n	800b616 <_raise_r+0x12>
 800b646:	2400      	movs	r4, #0
 800b648:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b64c:	4628      	mov	r0, r5
 800b64e:	4798      	blx	r3
 800b650:	2000      	movs	r0, #0
 800b652:	e7e0      	b.n	800b616 <_raise_r+0x12>

0800b654 <raise>:
 800b654:	4b02      	ldr	r3, [pc, #8]	; (800b660 <raise+0xc>)
 800b656:	4601      	mov	r1, r0
 800b658:	6818      	ldr	r0, [r3, #0]
 800b65a:	f7ff bfd3 	b.w	800b604 <_raise_r>
 800b65e:	bf00      	nop
 800b660:	20000010 	.word	0x20000010

0800b664 <_kill_r>:
 800b664:	b538      	push	{r3, r4, r5, lr}
 800b666:	4d07      	ldr	r5, [pc, #28]	; (800b684 <_kill_r+0x20>)
 800b668:	2300      	movs	r3, #0
 800b66a:	4604      	mov	r4, r0
 800b66c:	4608      	mov	r0, r1
 800b66e:	4611      	mov	r1, r2
 800b670:	602b      	str	r3, [r5, #0]
 800b672:	f7f6 ff57 	bl	8002524 <_kill>
 800b676:	1c43      	adds	r3, r0, #1
 800b678:	d102      	bne.n	800b680 <_kill_r+0x1c>
 800b67a:	682b      	ldr	r3, [r5, #0]
 800b67c:	b103      	cbz	r3, 800b680 <_kill_r+0x1c>
 800b67e:	6023      	str	r3, [r4, #0]
 800b680:	bd38      	pop	{r3, r4, r5, pc}
 800b682:	bf00      	nop
 800b684:	20004368 	.word	0x20004368

0800b688 <_getpid_r>:
 800b688:	f7f6 bf44 	b.w	8002514 <_getpid>

0800b68c <__sread>:
 800b68c:	b510      	push	{r4, lr}
 800b68e:	460c      	mov	r4, r1
 800b690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b694:	f000 f894 	bl	800b7c0 <_read_r>
 800b698:	2800      	cmp	r0, #0
 800b69a:	bfab      	itete	ge
 800b69c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b69e:	89a3      	ldrhlt	r3, [r4, #12]
 800b6a0:	181b      	addge	r3, r3, r0
 800b6a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b6a6:	bfac      	ite	ge
 800b6a8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b6aa:	81a3      	strhlt	r3, [r4, #12]
 800b6ac:	bd10      	pop	{r4, pc}

0800b6ae <__swrite>:
 800b6ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6b2:	461f      	mov	r7, r3
 800b6b4:	898b      	ldrh	r3, [r1, #12]
 800b6b6:	05db      	lsls	r3, r3, #23
 800b6b8:	4605      	mov	r5, r0
 800b6ba:	460c      	mov	r4, r1
 800b6bc:	4616      	mov	r6, r2
 800b6be:	d505      	bpl.n	800b6cc <__swrite+0x1e>
 800b6c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6c4:	2302      	movs	r3, #2
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f000 f868 	bl	800b79c <_lseek_r>
 800b6cc:	89a3      	ldrh	r3, [r4, #12]
 800b6ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b6d6:	81a3      	strh	r3, [r4, #12]
 800b6d8:	4632      	mov	r2, r6
 800b6da:	463b      	mov	r3, r7
 800b6dc:	4628      	mov	r0, r5
 800b6de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6e2:	f000 b817 	b.w	800b714 <_write_r>

0800b6e6 <__sseek>:
 800b6e6:	b510      	push	{r4, lr}
 800b6e8:	460c      	mov	r4, r1
 800b6ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6ee:	f000 f855 	bl	800b79c <_lseek_r>
 800b6f2:	1c43      	adds	r3, r0, #1
 800b6f4:	89a3      	ldrh	r3, [r4, #12]
 800b6f6:	bf15      	itete	ne
 800b6f8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b6fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b6fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b702:	81a3      	strheq	r3, [r4, #12]
 800b704:	bf18      	it	ne
 800b706:	81a3      	strhne	r3, [r4, #12]
 800b708:	bd10      	pop	{r4, pc}

0800b70a <__sclose>:
 800b70a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b70e:	f000 b813 	b.w	800b738 <_close_r>
	...

0800b714 <_write_r>:
 800b714:	b538      	push	{r3, r4, r5, lr}
 800b716:	4d07      	ldr	r5, [pc, #28]	; (800b734 <_write_r+0x20>)
 800b718:	4604      	mov	r4, r0
 800b71a:	4608      	mov	r0, r1
 800b71c:	4611      	mov	r1, r2
 800b71e:	2200      	movs	r2, #0
 800b720:	602a      	str	r2, [r5, #0]
 800b722:	461a      	mov	r2, r3
 800b724:	f7f6 ff35 	bl	8002592 <_write>
 800b728:	1c43      	adds	r3, r0, #1
 800b72a:	d102      	bne.n	800b732 <_write_r+0x1e>
 800b72c:	682b      	ldr	r3, [r5, #0]
 800b72e:	b103      	cbz	r3, 800b732 <_write_r+0x1e>
 800b730:	6023      	str	r3, [r4, #0]
 800b732:	bd38      	pop	{r3, r4, r5, pc}
 800b734:	20004368 	.word	0x20004368

0800b738 <_close_r>:
 800b738:	b538      	push	{r3, r4, r5, lr}
 800b73a:	4d06      	ldr	r5, [pc, #24]	; (800b754 <_close_r+0x1c>)
 800b73c:	2300      	movs	r3, #0
 800b73e:	4604      	mov	r4, r0
 800b740:	4608      	mov	r0, r1
 800b742:	602b      	str	r3, [r5, #0]
 800b744:	f7f6 ff41 	bl	80025ca <_close>
 800b748:	1c43      	adds	r3, r0, #1
 800b74a:	d102      	bne.n	800b752 <_close_r+0x1a>
 800b74c:	682b      	ldr	r3, [r5, #0]
 800b74e:	b103      	cbz	r3, 800b752 <_close_r+0x1a>
 800b750:	6023      	str	r3, [r4, #0]
 800b752:	bd38      	pop	{r3, r4, r5, pc}
 800b754:	20004368 	.word	0x20004368

0800b758 <_fstat_r>:
 800b758:	b538      	push	{r3, r4, r5, lr}
 800b75a:	4d07      	ldr	r5, [pc, #28]	; (800b778 <_fstat_r+0x20>)
 800b75c:	2300      	movs	r3, #0
 800b75e:	4604      	mov	r4, r0
 800b760:	4608      	mov	r0, r1
 800b762:	4611      	mov	r1, r2
 800b764:	602b      	str	r3, [r5, #0]
 800b766:	f7f6 ff3c 	bl	80025e2 <_fstat>
 800b76a:	1c43      	adds	r3, r0, #1
 800b76c:	d102      	bne.n	800b774 <_fstat_r+0x1c>
 800b76e:	682b      	ldr	r3, [r5, #0]
 800b770:	b103      	cbz	r3, 800b774 <_fstat_r+0x1c>
 800b772:	6023      	str	r3, [r4, #0]
 800b774:	bd38      	pop	{r3, r4, r5, pc}
 800b776:	bf00      	nop
 800b778:	20004368 	.word	0x20004368

0800b77c <_isatty_r>:
 800b77c:	b538      	push	{r3, r4, r5, lr}
 800b77e:	4d06      	ldr	r5, [pc, #24]	; (800b798 <_isatty_r+0x1c>)
 800b780:	2300      	movs	r3, #0
 800b782:	4604      	mov	r4, r0
 800b784:	4608      	mov	r0, r1
 800b786:	602b      	str	r3, [r5, #0]
 800b788:	f7f6 ff3b 	bl	8002602 <_isatty>
 800b78c:	1c43      	adds	r3, r0, #1
 800b78e:	d102      	bne.n	800b796 <_isatty_r+0x1a>
 800b790:	682b      	ldr	r3, [r5, #0]
 800b792:	b103      	cbz	r3, 800b796 <_isatty_r+0x1a>
 800b794:	6023      	str	r3, [r4, #0]
 800b796:	bd38      	pop	{r3, r4, r5, pc}
 800b798:	20004368 	.word	0x20004368

0800b79c <_lseek_r>:
 800b79c:	b538      	push	{r3, r4, r5, lr}
 800b79e:	4d07      	ldr	r5, [pc, #28]	; (800b7bc <_lseek_r+0x20>)
 800b7a0:	4604      	mov	r4, r0
 800b7a2:	4608      	mov	r0, r1
 800b7a4:	4611      	mov	r1, r2
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	602a      	str	r2, [r5, #0]
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	f7f6 ff34 	bl	8002618 <_lseek>
 800b7b0:	1c43      	adds	r3, r0, #1
 800b7b2:	d102      	bne.n	800b7ba <_lseek_r+0x1e>
 800b7b4:	682b      	ldr	r3, [r5, #0]
 800b7b6:	b103      	cbz	r3, 800b7ba <_lseek_r+0x1e>
 800b7b8:	6023      	str	r3, [r4, #0]
 800b7ba:	bd38      	pop	{r3, r4, r5, pc}
 800b7bc:	20004368 	.word	0x20004368

0800b7c0 <_read_r>:
 800b7c0:	b538      	push	{r3, r4, r5, lr}
 800b7c2:	4d07      	ldr	r5, [pc, #28]	; (800b7e0 <_read_r+0x20>)
 800b7c4:	4604      	mov	r4, r0
 800b7c6:	4608      	mov	r0, r1
 800b7c8:	4611      	mov	r1, r2
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	602a      	str	r2, [r5, #0]
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	f7f6 fec2 	bl	8002558 <_read>
 800b7d4:	1c43      	adds	r3, r0, #1
 800b7d6:	d102      	bne.n	800b7de <_read_r+0x1e>
 800b7d8:	682b      	ldr	r3, [r5, #0]
 800b7da:	b103      	cbz	r3, 800b7de <_read_r+0x1e>
 800b7dc:	6023      	str	r3, [r4, #0]
 800b7de:	bd38      	pop	{r3, r4, r5, pc}
 800b7e0:	20004368 	.word	0x20004368

0800b7e4 <_init>:
 800b7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7e6:	bf00      	nop
 800b7e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ea:	bc08      	pop	{r3}
 800b7ec:	469e      	mov	lr, r3
 800b7ee:	4770      	bx	lr

0800b7f0 <_fini>:
 800b7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7f2:	bf00      	nop
 800b7f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7f6:	bc08      	pop	{r3}
 800b7f8:	469e      	mov	lr, r3
 800b7fa:	4770      	bx	lr
