
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f74  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08007114  08007114  00017114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073fc  080073fc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080073fc  080073fc  000173fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007404  08007404  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007404  08007404  00017404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007408  08007408  00017408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800740c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000411c  20000074  08007480  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004190  08007480  00024190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014dca  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f6f  00000000  00000000  00034e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  00037de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  00039048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179e1  00000000  00000000  0003a188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141cd  00000000  00000000  00051b69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000966a7  00000000  00000000  00065d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fc3dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005088  00000000  00000000  000fc430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080070fc 	.word	0x080070fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080070fc 	.word	0x080070fc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000090 	.word	0x20000090
 80005e4:	200000e4 	.word	0x200000e4

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b0c8      	sub	sp, #288	; 0x120
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f000 feab 	bl	8001348 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f905 	bl	8000800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 f9a3 	bl	8000940 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fa:	f000 f977 	bl	80008ec <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80005fe:	f000 f969 	bl	80008d4 <MX_NVIC_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of PrintMtx */
  osMutexDef(PrintMtx);
 8000602:	2300      	movs	r3, #0
 8000604:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8000608:	2300      	movs	r3, #0
 800060a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  PrintMtxHandle = osMutexCreate(osMutex(PrintMtx));
 800060e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000612:	4618      	mov	r0, r3
 8000614:	f003 fb12 	bl	8003c3c <osMutexCreate>
 8000618:	4603      	mov	r3, r0
 800061a:	4a64      	ldr	r2, [pc, #400]	; (80007ac <main+0x1c4>)
 800061c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ImuTask */
  osThreadDef(ImuTask, StartImuTask, osPriorityLow, 0, 128);
 800061e:	4b64      	ldr	r3, [pc, #400]	; (80007b0 <main+0x1c8>)
 8000620:	f107 04fc 	add.w	r4, r7, #252	; 0xfc
 8000624:	461d      	mov	r5, r3
 8000626:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000628:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800062e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ImuTaskHandle = osThreadCreate(osThread(ImuTask), NULL);
 8000632:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f003 fa12 	bl	8003a62 <osThreadCreate>
 800063e:	4603      	mov	r3, r0
 8000640:	4a5c      	ldr	r2, [pc, #368]	; (80007b4 <main+0x1cc>)
 8000642:	6013      	str	r3, [r2, #0]

  /* definition and creation of GpsTask */
  osThreadDef(GpsTask, StartGpsTask, osPriorityLow, 0, 128);
 8000644:	4b5c      	ldr	r3, [pc, #368]	; (80007b8 <main+0x1d0>)
 8000646:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 800064a:	461d      	mov	r5, r3
 800064c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000650:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000654:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GpsTaskHandle = osThreadCreate(osThread(GpsTask), NULL);
 8000658:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f003 f9ff 	bl	8003a62 <osThreadCreate>
 8000664:	4603      	mov	r3, r0
 8000666:	4a55      	ldr	r2, [pc, #340]	; (80007bc <main+0x1d4>)
 8000668:	6013      	str	r3, [r2, #0]

  /* definition and creation of KFTask */
  osThreadDef(KFTask, StartKFTask, osPriorityLow, 0, 128);
 800066a:	4b55      	ldr	r3, [pc, #340]	; (80007c0 <main+0x1d8>)
 800066c:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8000670:	461d      	mov	r5, r3
 8000672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000676:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800067a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  KFTaskHandle = osThreadCreate(osThread(KFTask), NULL);
 800067e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f003 f9ec 	bl	8003a62 <osThreadCreate>
 800068a:	4603      	mov	r3, r0
 800068c:	4a4d      	ldr	r2, [pc, #308]	; (80007c4 <main+0x1dc>)
 800068e:	6013      	str	r3, [r2, #0]

  /* definition and creation of RadarTask */
  osThreadDef(RadarTask, StartRadarTask, osPriorityLow, 0, 128);
 8000690:	4b4d      	ldr	r3, [pc, #308]	; (80007c8 <main+0x1e0>)
 8000692:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000696:	461d      	mov	r5, r3
 8000698:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800069a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800069c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RadarTaskHandle = osThreadCreate(osThread(RadarTask), NULL);
 80006a4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 f9d9 	bl	8003a62 <osThreadCreate>
 80006b0:	4603      	mov	r3, r0
 80006b2:	4a46      	ldr	r2, [pc, #280]	; (80007cc <main+0x1e4>)
 80006b4:	6013      	str	r3, [r2, #0]

  /* definition and creation of UartTask */
  osThreadDef(UartTask, StartUartTask, osPriorityLow, 0, 128);
 80006b6:	4b46      	ldr	r3, [pc, #280]	; (80007d0 <main+0x1e8>)
 80006b8:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80006bc:	461d      	mov	r5, r3
 80006be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UartTaskHandle = osThreadCreate(osThread(UartTask), NULL);
 80006ca:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006ce:	2100      	movs	r1, #0
 80006d0:	4618      	mov	r0, r3
 80006d2:	f003 f9c6 	bl	8003a62 <osThreadCreate>
 80006d6:	4603      	mov	r3, r0
 80006d8:	4a3e      	ldr	r2, [pc, #248]	; (80007d4 <main+0x1ec>)
 80006da:	6013      	str	r3, [r2, #0]

  /* definition and creation of ExButtonIntTask */
  osThreadDef(ExButtonIntTask, StartExButtonIntTask, osPriorityHigh, 0, 128);
 80006dc:	4b3e      	ldr	r3, [pc, #248]	; (80007d8 <main+0x1f0>)
 80006de:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80006e2:	461d      	mov	r5, r3
 80006e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ExButtonIntTaskHandle = osThreadCreate(osThread(ExButtonIntTask), NULL);
 80006f0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f003 f9b3 	bl	8003a62 <osThreadCreate>
 80006fc:	4603      	mov	r3, r0
 80006fe:	4a37      	ldr	r2, [pc, #220]	; (80007dc <main+0x1f4>)
 8000700:	6013      	str	r3, [r2, #0]

  /* definition and creation of LcdTask */
  osThreadDef(LcdTask, StartLcdTask, osPriorityLow, 0, 128);
 8000702:	4b37      	ldr	r3, [pc, #220]	; (80007e0 <main+0x1f8>)
 8000704:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000708:	461d      	mov	r5, r3
 800070a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800070c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000712:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LcdTaskHandle = osThreadCreate(osThread(LcdTask), NULL);
 8000716:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800071a:	2100      	movs	r1, #0
 800071c:	4618      	mov	r0, r3
 800071e:	f003 f9a0 	bl	8003a62 <osThreadCreate>
 8000722:	4603      	mov	r3, r0
 8000724:	4a2f      	ldr	r2, [pc, #188]	; (80007e4 <main+0x1fc>)
 8000726:	6013      	str	r3, [r2, #0]

  /* definition and creation of MotorTask */
  osThreadDef(MotorTask, StartMotorTask, osPriorityAboveNormal, 0, 128);
 8000728:	4b2f      	ldr	r3, [pc, #188]	; (80007e8 <main+0x200>)
 800072a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800072e:	461d      	mov	r5, r3
 8000730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000734:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000738:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotorTaskHandle = osThreadCreate(osThread(MotorTask), NULL);
 800073c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f003 f98d 	bl	8003a62 <osThreadCreate>
 8000748:	4603      	mov	r3, r0
 800074a:	4a28      	ldr	r2, [pc, #160]	; (80007ec <main+0x204>)
 800074c:	6013      	str	r3, [r2, #0]

  /* definition and creation of MainTask */
  osThreadDef(MainTask, StartMainTask, osPriorityNormal, 0, 128);
 800074e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000752:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000756:	4a26      	ldr	r2, [pc, #152]	; (80007f0 <main+0x208>)
 8000758:	461c      	mov	r4, r3
 800075a:	4615      	mov	r5, r2
 800075c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800075e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000760:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000764:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f003 f977 	bl	8003a62 <osThreadCreate>
 8000774:	4603      	mov	r3, r0
 8000776:	4a1f      	ldr	r2, [pc, #124]	; (80007f4 <main+0x20c>)
 8000778:	6013      	str	r3, [r2, #0]

  /* definition and creation of ObjectDetectTas */
  osThreadDef(ObjectDetectTas, StartObjectDetectTask, osPriorityHigh, 0, 128);
 800077a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800077e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000782:	4a1d      	ldr	r2, [pc, #116]	; (80007f8 <main+0x210>)
 8000784:	461c      	mov	r4, r3
 8000786:	4615      	mov	r5, r2
 8000788:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800078a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800078c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000790:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ObjectDetectTasHandle = osThreadCreate(osThread(ObjectDetectTas), NULL);
 8000794:	463b      	mov	r3, r7
 8000796:	2100      	movs	r1, #0
 8000798:	4618      	mov	r0, r3
 800079a:	f003 f962 	bl	8003a62 <osThreadCreate>
 800079e:	4603      	mov	r3, r0
 80007a0:	4a16      	ldr	r2, [pc, #88]	; (80007fc <main+0x214>)
 80007a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007a4:	f003 f956 	bl	8003a54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <main+0x1c0>
 80007aa:	bf00      	nop
 80007ac:	20000350 	.word	0x20000350
 80007b0:	08007184 	.word	0x08007184
 80007b4:	20000328 	.word	0x20000328
 80007b8:	080071a0 	.word	0x080071a0
 80007bc:	2000032c 	.word	0x2000032c
 80007c0:	080071bc 	.word	0x080071bc
 80007c4:	20000330 	.word	0x20000330
 80007c8:	080071d8 	.word	0x080071d8
 80007cc:	20000334 	.word	0x20000334
 80007d0:	080071f4 	.word	0x080071f4
 80007d4:	20000338 	.word	0x20000338
 80007d8:	08007210 	.word	0x08007210
 80007dc:	2000033c 	.word	0x2000033c
 80007e0:	0800722c 	.word	0x0800722c
 80007e4:	20000340 	.word	0x20000340
 80007e8:	08007248 	.word	0x08007248
 80007ec:	20000344 	.word	0x20000344
 80007f0:	08007264 	.word	0x08007264
 80007f4:	20000348 	.word	0x20000348
 80007f8:	08007280 	.word	0x08007280
 80007fc:	2000034c 	.word	0x2000034c

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b094      	sub	sp, #80	; 0x50
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 0320 	add.w	r3, r7, #32
 800080a:	2230      	movs	r2, #48	; 0x30
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f006 f80c 	bl	800682c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	4b28      	ldr	r3, [pc, #160]	; (80008cc <SystemClock_Config+0xcc>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	4a27      	ldr	r2, [pc, #156]	; (80008cc <SystemClock_Config+0xcc>)
 800082e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000832:	6413      	str	r3, [r2, #64]	; 0x40
 8000834:	4b25      	ldr	r3, [pc, #148]	; (80008cc <SystemClock_Config+0xcc>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	4b22      	ldr	r3, [pc, #136]	; (80008d0 <SystemClock_Config+0xd0>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a21      	ldr	r2, [pc, #132]	; (80008d0 <SystemClock_Config+0xd0>)
 800084a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800084e:	6013      	str	r3, [r2, #0]
 8000850:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <SystemClock_Config+0xd0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800085c:	2302      	movs	r3, #2
 800085e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000860:	2301      	movs	r3, #1
 8000862:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000864:	2310      	movs	r3, #16
 8000866:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000868:	2302      	movs	r3, #2
 800086a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800086c:	2300      	movs	r3, #0
 800086e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000870:	2310      	movs	r3, #16
 8000872:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000874:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000878:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800087a:	2304      	movs	r3, #4
 800087c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800087e:	2304      	movs	r3, #4
 8000880:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000882:	f107 0320 	add.w	r3, r7, #32
 8000886:	4618      	mov	r0, r3
 8000888:	f001 f8fc 	bl	8001a84 <HAL_RCC_OscConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000892:	f000 fbd7 	bl	8001044 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000896:	230f      	movs	r3, #15
 8000898:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089a:	2302      	movs	r3, #2
 800089c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	2102      	movs	r1, #2
 80008b2:	4618      	mov	r0, r3
 80008b4:	f001 fb5e 	bl	8001f74 <HAL_RCC_ClockConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008be:	f000 fbc1 	bl	8001044 <Error_Handler>
  }
}
 80008c2:	bf00      	nop
 80008c4:	3750      	adds	r7, #80	; 0x50
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40007000 	.word	0x40007000

080008d4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80008d8:	2200      	movs	r2, #0
 80008da:	2105      	movs	r1, #5
 80008dc:	2028      	movs	r0, #40	; 0x28
 80008de:	f000 fe2d 	bl	800153c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008e2:	2028      	movs	r0, #40	; 0x28
 80008e4:	f000 fe46 	bl	8001574 <HAL_NVIC_EnableIRQ>
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}

080008ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 80008f2:	4a12      	ldr	r2, [pc, #72]	; (800093c <MX_USART2_UART_Init+0x50>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 80008f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000924:	f001 fff8 	bl	8002918 <HAL_UART_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800092e:	f000 fb89 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200002e4 	.word	0x200002e4
 800093c:	40004400 	.word	0x40004400

08000940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	; 0x28
 8000944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	4b3f      	ldr	r3, [pc, #252]	; (8000a58 <MX_GPIO_Init+0x118>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a3e      	ldr	r2, [pc, #248]	; (8000a58 <MX_GPIO_Init+0x118>)
 8000960:	f043 0304 	orr.w	r3, r3, #4
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b3c      	ldr	r3, [pc, #240]	; (8000a58 <MX_GPIO_Init+0x118>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0304 	and.w	r3, r3, #4
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	4b38      	ldr	r3, [pc, #224]	; (8000a58 <MX_GPIO_Init+0x118>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a37      	ldr	r2, [pc, #220]	; (8000a58 <MX_GPIO_Init+0x118>)
 800097c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b35      	ldr	r3, [pc, #212]	; (8000a58 <MX_GPIO_Init+0x118>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60bb      	str	r3, [r7, #8]
 8000992:	4b31      	ldr	r3, [pc, #196]	; (8000a58 <MX_GPIO_Init+0x118>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a30      	ldr	r2, [pc, #192]	; (8000a58 <MX_GPIO_Init+0x118>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b2e      	ldr	r3, [pc, #184]	; (8000a58 <MX_GPIO_Init+0x118>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	4b2a      	ldr	r3, [pc, #168]	; (8000a58 <MX_GPIO_Init+0x118>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a29      	ldr	r2, [pc, #164]	; (8000a58 <MX_GPIO_Init+0x118>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b27      	ldr	r3, [pc, #156]	; (8000a58 <MX_GPIO_Init+0x118>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2120      	movs	r1, #32
 80009ca:	4824      	ldr	r0, [pc, #144]	; (8000a5c <MX_GPIO_Init+0x11c>)
 80009cc:	f001 f80e 	bl	80019ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, YellowLed_Pin|RedLed_Pin|GreenLed_Pin|BlueLed_Pin, GPIO_PIN_RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	f24e 0102 	movw	r1, #57346	; 0xe002
 80009d6:	4822      	ldr	r0, [pc, #136]	; (8000a60 <MX_GPIO_Init+0x120>)
 80009d8:	f001 f808 	bl	80019ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009e2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4619      	mov	r1, r3
 80009f2:	481c      	ldr	r0, [pc, #112]	; (8000a64 <MX_GPIO_Init+0x124>)
 80009f4:	f000 fe5e 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009f8:	2320      	movs	r3, #32
 80009fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4813      	ldr	r0, [pc, #76]	; (8000a5c <MX_GPIO_Init+0x11c>)
 8000a10:	f000 fe50 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : YellowLed_Pin RedLed_Pin GreenLed_Pin BlueLed_Pin */
  GPIO_InitStruct.Pin = YellowLed_Pin|RedLed_Pin|GreenLed_Pin|BlueLed_Pin;
 8000a14:	f24e 0302 	movw	r3, #57346	; 0xe002
 8000a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <MX_GPIO_Init+0x120>)
 8000a2e:	f000 fe41 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ExButton_Pin */
  GPIO_InitStruct.Pin = ExButton_Pin;
 8000a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a38:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ExButton_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	4805      	ldr	r0, [pc, #20]	; (8000a60 <MX_GPIO_Init+0x120>)
 8000a4a:	f000 fe33 	bl	80016b4 <HAL_GPIO_Init>

}
 8000a4e:	bf00      	nop
 8000a50:	3728      	adds	r7, #40	; 0x28
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40020000 	.word	0x40020000
 8000a60:	40020400 	.word	0x40020400
 8000a64:	40020800 	.word	0x40020800

08000a68 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// overwrite the HAL_GPIO_EXTI_Callback function
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == ExButton_Pin) {
 8000a72:	88fb      	ldrh	r3, [r7, #6]
 8000a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a78:	d105      	bne.n	8000a86 <HAL_GPIO_EXTI_Callback+0x1e>
  	osSignalSet(ExButtonIntTaskHandle, SIGNAL_BUTTON_PRESS);
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2101      	movs	r1, #1
 8000a80:	4618      	mov	r0, r3
 8000a82:	f003 f84f 	bl	8003b24 <osSignalSet>
  }
  if(GPIO_Pin == B1_Pin) {
 8000a86:	88fb      	ldrh	r3, [r7, #6]
 8000a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a8c:	d105      	bne.n	8000a9a <HAL_GPIO_EXTI_Callback+0x32>
  	osSignalSet(ExButtonIntTaskHandle, SIGNAL_BUTTON_PRESS);
 8000a8e:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2101      	movs	r1, #1
 8000a94:	4618      	mov	r0, r3
 8000a96:	f003 f845 	bl	8003b24 <osSignalSet>
  }
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	2000033c 	.word	0x2000033c

08000aa8 <HAL_UART_RxCpltCallback>:

// interrupt callback method - when the data reception is complete, this is called
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	 // current UART
	uint8_t i;

	if (huart->Instance == USART2) {
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a34      	ldr	r2, [pc, #208]	; (8000b88 <HAL_UART_RxCpltCallback+0xe0>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d162      	bne.n	8000b80 <HAL_UART_RxCpltCallback+0xd8>
  	// Clear Rx_Buffer prior to use
  	if (Rx_indx == 0) {
 8000aba:	4b34      	ldr	r3, [pc, #208]	; (8000b8c <HAL_UART_RxCpltCallback+0xe4>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d107      	bne.n	8000ad2 <HAL_UART_RxCpltCallback+0x2a>
    	// turn on the yellow led
    	HAL_GPIO_WritePin(YellowLed_GPIO_Port, YellowLed_Pin, GPIO_PIN_SET);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	4832      	ldr	r0, [pc, #200]	; (8000b90 <HAL_UART_RxCpltCallback+0xe8>)
 8000ac8:	f000 ff90 	bl	80019ec <HAL_GPIO_WritePin>
    	EmptyBuffer(Rx_Buffer);
 8000acc:	4831      	ldr	r0, [pc, #196]	; (8000b94 <HAL_UART_RxCpltCallback+0xec>)
 8000ace:	f000 fa89 	bl	8000fe4 <EmptyBuffer>
  	}

  	// check for carriage return (ASCII: 13 == \r)
  	if (Rx_byte != 13) {
 8000ad2:	4b31      	ldr	r3, [pc, #196]	; (8000b98 <HAL_UART_RxCpltCallback+0xf0>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b0d      	cmp	r3, #13
 8000ad8:	d00b      	beq.n	8000af2 <HAL_UART_RxCpltCallback+0x4a>
  		Rx_Buffer[Rx_indx++] = Rx_byte; // add data to Rx_Buffer
 8000ada:	4b2c      	ldr	r3, [pc, #176]	; (8000b8c <HAL_UART_RxCpltCallback+0xe4>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	1c5a      	adds	r2, r3, #1
 8000ae0:	b2d1      	uxtb	r1, r2
 8000ae2:	4a2a      	ldr	r2, [pc, #168]	; (8000b8c <HAL_UART_RxCpltCallback+0xe4>)
 8000ae4:	7011      	strb	r1, [r2, #0]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	4b2b      	ldr	r3, [pc, #172]	; (8000b98 <HAL_UART_RxCpltCallback+0xf0>)
 8000aea:	7819      	ldrb	r1, [r3, #0]
 8000aec:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <HAL_UART_RxCpltCallback+0xec>)
 8000aee:	5499      	strb	r1, [r3, r2]
 8000af0:	e03b      	b.n	8000b6a <HAL_UART_RxCpltCallback+0xc2>
  	} else {
  		Rx_indx = 0;
 8000af2:	4b26      	ldr	r3, [pc, #152]	; (8000b8c <HAL_UART_RxCpltCallback+0xe4>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	701a      	strb	r2, [r3, #0]
  		Transfer_cplt = 1; // transfer complete, data is ready
 8000af8:	4b28      	ldr	r3, [pc, #160]	; (8000b9c <HAL_UART_RxCpltCallback+0xf4>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	701a      	strb	r2, [r3, #0]

  		// LED trigger phrase
  		if (strcmp(Rx_Buffer, "faster") == 0) {
 8000afe:	4928      	ldr	r1, [pc, #160]	; (8000ba0 <HAL_UART_RxCpltCallback+0xf8>)
 8000b00:	4824      	ldr	r0, [pc, #144]	; (8000b94 <HAL_UART_RxCpltCallback+0xec>)
 8000b02:	f7ff fb6d 	bl	80001e0 <strcmp>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d104      	bne.n	8000b16 <HAL_UART_RxCpltCallback+0x6e>
  			sprintf(msg, "Accelerating!");
 8000b0c:	4925      	ldr	r1, [pc, #148]	; (8000ba4 <HAL_UART_RxCpltCallback+0xfc>)
 8000b0e:	4826      	ldr	r0, [pc, #152]	; (8000ba8 <HAL_UART_RxCpltCallback+0x100>)
 8000b10:	f005 fe94 	bl	800683c <siprintf>
 8000b14:	e00f      	b.n	8000b36 <HAL_UART_RxCpltCallback+0x8e>
  		} else if (strcmp(Rx_Buffer, "slower")  == 0) {
 8000b16:	4925      	ldr	r1, [pc, #148]	; (8000bac <HAL_UART_RxCpltCallback+0x104>)
 8000b18:	481e      	ldr	r0, [pc, #120]	; (8000b94 <HAL_UART_RxCpltCallback+0xec>)
 8000b1a:	f7ff fb61 	bl	80001e0 <strcmp>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d104      	bne.n	8000b2e <HAL_UART_RxCpltCallback+0x86>
  			sprintf(msg, "Decelerating!");
 8000b24:	4922      	ldr	r1, [pc, #136]	; (8000bb0 <HAL_UART_RxCpltCallback+0x108>)
 8000b26:	4820      	ldr	r0, [pc, #128]	; (8000ba8 <HAL_UART_RxCpltCallback+0x100>)
 8000b28:	f005 fe88 	bl	800683c <siprintf>
 8000b2c:	e003      	b.n	8000b36 <HAL_UART_RxCpltCallback+0x8e>
  		} else {
  			sprintf(msg, "Unknown command.");
 8000b2e:	4921      	ldr	r1, [pc, #132]	; (8000bb4 <HAL_UART_RxCpltCallback+0x10c>)
 8000b30:	481d      	ldr	r0, [pc, #116]	; (8000ba8 <HAL_UART_RxCpltCallback+0x100>)
 8000b32:	f005 fe83 	bl	800683c <siprintf>
  		}

  		// send to UART
  		HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 8000b36:	2364      	movs	r3, #100	; 0x64
 8000b38:	2202      	movs	r2, #2
 8000b3a:	491f      	ldr	r1, [pc, #124]	; (8000bb8 <HAL_UART_RxCpltCallback+0x110>)
 8000b3c:	481f      	ldr	r0, [pc, #124]	; (8000bbc <HAL_UART_RxCpltCallback+0x114>)
 8000b3e:	f001 ff38 	bl	80029b2 <HAL_UART_Transmit>
  		HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000b42:	2364      	movs	r3, #100	; 0x64
 8000b44:	221e      	movs	r2, #30
 8000b46:	4918      	ldr	r1, [pc, #96]	; (8000ba8 <HAL_UART_RxCpltCallback+0x100>)
 8000b48:	481c      	ldr	r0, [pc, #112]	; (8000bbc <HAL_UART_RxCpltCallback+0x114>)
 8000b4a:	f001 ff32 	bl	80029b2 <HAL_UART_Transmit>
  		HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 8000b4e:	2364      	movs	r3, #100	; 0x64
 8000b50:	2202      	movs	r2, #2
 8000b52:	4919      	ldr	r1, [pc, #100]	; (8000bb8 <HAL_UART_RxCpltCallback+0x110>)
 8000b54:	4819      	ldr	r0, [pc, #100]	; (8000bbc <HAL_UART_RxCpltCallback+0x114>)
 8000b56:	f001 ff2c 	bl	80029b2 <HAL_UART_Transmit>
    	EmptyBuffer(msg);
 8000b5a:	4813      	ldr	r0, [pc, #76]	; (8000ba8 <HAL_UART_RxCpltCallback+0x100>)
 8000b5c:	f000 fa42 	bl	8000fe4 <EmptyBuffer>

    	// turn off the yellow led
    	HAL_GPIO_WritePin(YellowLed_GPIO_Port, YellowLed_Pin, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2102      	movs	r1, #2
 8000b64:	480a      	ldr	r0, [pc, #40]	; (8000b90 <HAL_UART_RxCpltCallback+0xe8>)
 8000b66:	f000 ff41 	bl	80019ec <HAL_GPIO_WritePin>
  	}

  	// activate UART
  	HAL_UART_Receive_IT(&huart2, &Rx_byte, 1);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	490a      	ldr	r1, [pc, #40]	; (8000b98 <HAL_UART_RxCpltCallback+0xf0>)
 8000b6e:	4813      	ldr	r0, [pc, #76]	; (8000bbc <HAL_UART_RxCpltCallback+0x114>)
 8000b70:	f001 ffb1 	bl	8002ad6 <HAL_UART_Receive_IT>
  	// send to UART
  	HAL_UART_Transmit(&huart2, &Rx_byte, 1, 100);
 8000b74:	2364      	movs	r3, #100	; 0x64
 8000b76:	2201      	movs	r2, #1
 8000b78:	4907      	ldr	r1, [pc, #28]	; (8000b98 <HAL_UART_RxCpltCallback+0xf0>)
 8000b7a:	4810      	ldr	r0, [pc, #64]	; (8000bbc <HAL_UART_RxCpltCallback+0x114>)
 8000b7c:	f001 ff19 	bl	80029b2 <HAL_UART_Transmit>
	}
}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40004400 	.word	0x40004400
 8000b8c:	20000355 	.word	0x20000355
 8000b90:	40020400 	.word	0x40020400
 8000b94:	20000358 	.word	0x20000358
 8000b98:	20000354 	.word	0x20000354
 8000b9c:	20000356 	.word	0x20000356
 8000ba0:	0800729c 	.word	0x0800729c
 8000ba4:	080072a4 	.word	0x080072a4
 8000ba8:	200003bc 	.word	0x200003bc
 8000bac:	080072b4 	.word	0x080072b4
 8000bb0:	080072bc 	.word	0x080072bc
 8000bb4:	080072cc 	.word	0x080072cc
 8000bb8:	080072e0 	.word	0x080072e0
 8000bbc:	200002e4 	.word	0x200002e4

08000bc0 <StartImuTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartImuTask */
void StartImuTask(void const * argument)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <StartImuTask+0x44>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f003 f84b 	bl	8003c6c <osMutexWait>
	sprintf(msg, "IMU GO\r\n");
 8000bd6:	490c      	ldr	r1, [pc, #48]	; (8000c08 <StartImuTask+0x48>)
 8000bd8:	480c      	ldr	r0, [pc, #48]	; (8000c0c <StartImuTask+0x4c>)
 8000bda:	f005 fe2f 	bl	800683c <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000bde:	2364      	movs	r3, #100	; 0x64
 8000be0:	221e      	movs	r2, #30
 8000be2:	490a      	ldr	r1, [pc, #40]	; (8000c0c <StartImuTask+0x4c>)
 8000be4:	480a      	ldr	r0, [pc, #40]	; (8000c10 <StartImuTask+0x50>)
 8000be6:	f001 fee4 	bl	80029b2 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8000bea:	4808      	ldr	r0, [pc, #32]	; (8000c0c <StartImuTask+0x4c>)
 8000bec:	f000 f9fa 	bl	8000fe4 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <StartImuTask+0x44>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f003 f887 	bl	8003d08 <osMutexRelease>
  /* Infinite loop */
  for(;;)
  {
    osDelay(10); // IMU signal every 0.01 sec
 8000bfa:	200a      	movs	r0, #10
 8000bfc:	f002 ff7d 	bl	8003afa <osDelay>
 8000c00:	e7fb      	b.n	8000bfa <StartImuTask+0x3a>
 8000c02:	bf00      	nop
 8000c04:	20000350 	.word	0x20000350
 8000c08:	080072e4 	.word	0x080072e4
 8000c0c:	200003bc 	.word	0x200003bc
 8000c10:	200002e4 	.word	0x200002e4

08000c14 <StartGpsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGpsTask */
void StartGpsTask(void const * argument)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGpsTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8000c1c:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <StartGpsTask+0x44>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f04f 31ff 	mov.w	r1, #4294967295
 8000c24:	4618      	mov	r0, r3
 8000c26:	f003 f821 	bl	8003c6c <osMutexWait>
	sprintf(msg, "GPS GO\r\n");
 8000c2a:	490c      	ldr	r1, [pc, #48]	; (8000c5c <StartGpsTask+0x48>)
 8000c2c:	480c      	ldr	r0, [pc, #48]	; (8000c60 <StartGpsTask+0x4c>)
 8000c2e:	f005 fe05 	bl	800683c <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000c32:	2364      	movs	r3, #100	; 0x64
 8000c34:	221e      	movs	r2, #30
 8000c36:	490a      	ldr	r1, [pc, #40]	; (8000c60 <StartGpsTask+0x4c>)
 8000c38:	480a      	ldr	r0, [pc, #40]	; (8000c64 <StartGpsTask+0x50>)
 8000c3a:	f001 feba 	bl	80029b2 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8000c3e:	4808      	ldr	r0, [pc, #32]	; (8000c60 <StartGpsTask+0x4c>)
 8000c40:	f000 f9d0 	bl	8000fe4 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <StartGpsTask+0x44>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f003 f85d 	bl	8003d08 <osMutexRelease>
  /* Infinite loop */
  for(;;)
  {
    osDelay(100); // GPS signal every 0.1 sec
 8000c4e:	2064      	movs	r0, #100	; 0x64
 8000c50:	f002 ff53 	bl	8003afa <osDelay>
 8000c54:	e7fb      	b.n	8000c4e <StartGpsTask+0x3a>
 8000c56:	bf00      	nop
 8000c58:	20000350 	.word	0x20000350
 8000c5c:	080072f0 	.word	0x080072f0
 8000c60:	200003bc 	.word	0x200003bc
 8000c64:	200002e4 	.word	0x200002e4

08000c68 <StartKFTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartKFTask */
void StartKFTask(void const * argument)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartKFTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8000c70:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <StartKFTask+0x44>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f04f 31ff 	mov.w	r1, #4294967295
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f002 fff7 	bl	8003c6c <osMutexWait>
	sprintf(msg, "KF GO\r\n");
 8000c7e:	490c      	ldr	r1, [pc, #48]	; (8000cb0 <StartKFTask+0x48>)
 8000c80:	480c      	ldr	r0, [pc, #48]	; (8000cb4 <StartKFTask+0x4c>)
 8000c82:	f005 fddb 	bl	800683c <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000c86:	2364      	movs	r3, #100	; 0x64
 8000c88:	221e      	movs	r2, #30
 8000c8a:	490a      	ldr	r1, [pc, #40]	; (8000cb4 <StartKFTask+0x4c>)
 8000c8c:	480a      	ldr	r0, [pc, #40]	; (8000cb8 <StartKFTask+0x50>)
 8000c8e:	f001 fe90 	bl	80029b2 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8000c92:	4808      	ldr	r0, [pc, #32]	; (8000cb4 <StartKFTask+0x4c>)
 8000c94:	f000 f9a6 	bl	8000fe4 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <StartKFTask+0x44>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f003 f833 	bl	8003d08 <osMutexRelease>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f002 ff29 	bl	8003afa <osDelay>
 8000ca8:	e7fb      	b.n	8000ca2 <StartKFTask+0x3a>
 8000caa:	bf00      	nop
 8000cac:	20000350 	.word	0x20000350
 8000cb0:	080072fc 	.word	0x080072fc
 8000cb4:	200003bc 	.word	0x200003bc
 8000cb8:	200002e4 	.word	0x200002e4

08000cbc <StartRadarTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRadarTask */
void StartRadarTask(void const * argument)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRadarTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <StartRadarTask+0x44>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f002 ffcd 	bl	8003c6c <osMutexWait>
	sprintf(msg, "Radar GO\r\n");
 8000cd2:	490c      	ldr	r1, [pc, #48]	; (8000d04 <StartRadarTask+0x48>)
 8000cd4:	480c      	ldr	r0, [pc, #48]	; (8000d08 <StartRadarTask+0x4c>)
 8000cd6:	f005 fdb1 	bl	800683c <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000cda:	2364      	movs	r3, #100	; 0x64
 8000cdc:	221e      	movs	r2, #30
 8000cde:	490a      	ldr	r1, [pc, #40]	; (8000d08 <StartRadarTask+0x4c>)
 8000ce0:	480a      	ldr	r0, [pc, #40]	; (8000d0c <StartRadarTask+0x50>)
 8000ce2:	f001 fe66 	bl	80029b2 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8000ce6:	4808      	ldr	r0, [pc, #32]	; (8000d08 <StartRadarTask+0x4c>)
 8000ce8:	f000 f97c 	bl	8000fe4 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <StartRadarTask+0x44>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f003 f809 	bl	8003d08 <osMutexRelease>
  /* Infinite loop */
  for(;;)
  {
//  	osSignalSet(ExButtonIntTaskHandle, SIGNAL_OBJECT_DETECT);
    osDelay(50); // Radar signal every 0.05 sec
 8000cf6:	2032      	movs	r0, #50	; 0x32
 8000cf8:	f002 feff 	bl	8003afa <osDelay>
 8000cfc:	e7fb      	b.n	8000cf6 <StartRadarTask+0x3a>
 8000cfe:	bf00      	nop
 8000d00:	20000350 	.word	0x20000350
 8000d04:	08007304 	.word	0x08007304
 8000d08:	200003bc 	.word	0x200003bc
 8000d0c:	200002e4 	.word	0x200002e4

08000d10 <StartUartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUartTask */
void StartUartTask(void const * argument)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUartTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <StartUartTask+0x3c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d20:	4618      	mov	r0, r3
 8000d22:	f002 ffa3 	bl	8003c6c <osMutexWait>
	sprintf(msg, "UART GO\r\n");
 8000d26:	490a      	ldr	r1, [pc, #40]	; (8000d50 <StartUartTask+0x40>)
 8000d28:	480a      	ldr	r0, [pc, #40]	; (8000d54 <StartUartTask+0x44>)
 8000d2a:	f005 fd87 	bl	800683c <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000d2e:	2364      	movs	r3, #100	; 0x64
 8000d30:	221e      	movs	r2, #30
 8000d32:	4908      	ldr	r1, [pc, #32]	; (8000d54 <StartUartTask+0x44>)
 8000d34:	4808      	ldr	r0, [pc, #32]	; (8000d58 <StartUartTask+0x48>)
 8000d36:	f001 fe3c 	bl	80029b2 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8000d3a:	4806      	ldr	r0, [pc, #24]	; (8000d54 <StartUartTask+0x44>)
 8000d3c:	f000 f952 	bl	8000fe4 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8000d40:	4b02      	ldr	r3, [pc, #8]	; (8000d4c <StartUartTask+0x3c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f002 ffdf 	bl	8003d08 <osMutexRelease>
  /* Infinite loop */
  for(;;)
 8000d4a:	e7fe      	b.n	8000d4a <StartUartTask+0x3a>
 8000d4c:	20000350 	.word	0x20000350
 8000d50:	08007310 	.word	0x08007310
 8000d54:	200003bc 	.word	0x200003bc
 8000d58:	200002e4 	.word	0x200002e4

08000d5c <StartExButtonIntTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartExButtonIntTask */
void StartExButtonIntTask(void const * argument)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartExButtonIntTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8000d64:	4b24      	ldr	r3, [pc, #144]	; (8000df8 <StartExButtonIntTask+0x9c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f04f 31ff 	mov.w	r1, #4294967295
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f002 ff7d 	bl	8003c6c <osMutexWait>
	sprintf(msg, "ExButton GO\r\n");
 8000d72:	4922      	ldr	r1, [pc, #136]	; (8000dfc <StartExButtonIntTask+0xa0>)
 8000d74:	4822      	ldr	r0, [pc, #136]	; (8000e00 <StartExButtonIntTask+0xa4>)
 8000d76:	f005 fd61 	bl	800683c <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000d7a:	2364      	movs	r3, #100	; 0x64
 8000d7c:	221e      	movs	r2, #30
 8000d7e:	4920      	ldr	r1, [pc, #128]	; (8000e00 <StartExButtonIntTask+0xa4>)
 8000d80:	4820      	ldr	r0, [pc, #128]	; (8000e04 <StartExButtonIntTask+0xa8>)
 8000d82:	f001 fe16 	bl	80029b2 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8000d86:	481e      	ldr	r0, [pc, #120]	; (8000e00 <StartExButtonIntTask+0xa4>)
 8000d88:	f000 f92c 	bl	8000fe4 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8000d8c:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <StartExButtonIntTask+0x9c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f002 ffb9 	bl	8003d08 <osMutexRelease>
  /* Infinite loop */
  for(;;)
  {
  	//wait for signal
  	osSignalWait(SIGNAL_BUTTON_PRESS, osWaitForever);
 8000d96:	463b      	mov	r3, r7
 8000d98:	f04f 32ff 	mov.w	r2, #4294967295
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f002 ff00 	bl	8003ba4 <osSignalWait>

  	// print to uart
  	sprintf(msg, "Button pressed...\r\n");
 8000da4:	4918      	ldr	r1, [pc, #96]	; (8000e08 <StartExButtonIntTask+0xac>)
 8000da6:	4816      	ldr	r0, [pc, #88]	; (8000e00 <StartExButtonIntTask+0xa4>)
 8000da8:	f005 fd48 	bl	800683c <siprintf>
  	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000dac:	2364      	movs	r3, #100	; 0x64
 8000dae:	221e      	movs	r2, #30
 8000db0:	4913      	ldr	r1, [pc, #76]	; (8000e00 <StartExButtonIntTask+0xa4>)
 8000db2:	4814      	ldr	r0, [pc, #80]	; (8000e04 <StartExButtonIntTask+0xa8>)
 8000db4:	f001 fdfd 	bl	80029b2 <HAL_UART_Transmit>
  	EmptyBuffer(msg);
 8000db8:	4811      	ldr	r0, [pc, #68]	; (8000e00 <StartExButtonIntTask+0xa4>)
 8000dba:	f000 f913 	bl	8000fe4 <EmptyBuffer>

  	// toggle led
  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000dbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc2:	4812      	ldr	r0, [pc, #72]	; (8000e0c <StartExButtonIntTask+0xb0>)
 8000dc4:	f000 fe2b 	bl	8001a1e <HAL_GPIO_TogglePin>
	  GPIO_PinState red_trig = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8000dc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dcc:	480f      	ldr	r0, [pc, #60]	; (8000e0c <StartExButtonIntTask+0xb0>)
 8000dce:	f000 fdf5 	bl	80019bc <HAL_GPIO_ReadPin>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	77fb      	strb	r3, [r7, #31]
	  if (red_trig == GPIO_PIN_SET){
 8000dd6:	7ffb      	ldrb	r3, [r7, #31]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d106      	bne.n	8000dea <StartExButtonIntTask+0x8e>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000de2:	480a      	ldr	r0, [pc, #40]	; (8000e0c <StartExButtonIntTask+0xb0>)
 8000de4:	f000 fe02 	bl	80019ec <HAL_GPIO_WritePin>
 8000de8:	e7d5      	b.n	8000d96 <StartExButtonIntTask+0x3a>
	  } else {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000dea:	2201      	movs	r2, #1
 8000dec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000df0:	4806      	ldr	r0, [pc, #24]	; (8000e0c <StartExButtonIntTask+0xb0>)
 8000df2:	f000 fdfb 	bl	80019ec <HAL_GPIO_WritePin>
  {
 8000df6:	e7ce      	b.n	8000d96 <StartExButtonIntTask+0x3a>
 8000df8:	20000350 	.word	0x20000350
 8000dfc:	0800731c 	.word	0x0800731c
 8000e00:	200003bc 	.word	0x200003bc
 8000e04:	200002e4 	.word	0x200002e4
 8000e08:	0800732c 	.word	0x0800732c
 8000e0c:	40020400 	.word	0x40020400

08000e10 <StartLcdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLcdTask */
void StartLcdTask(void const * argument)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLcdTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8000e18:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <StartLcdTask+0x44>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e20:	4618      	mov	r0, r3
 8000e22:	f002 ff23 	bl	8003c6c <osMutexWait>
	sprintf(msg, "LCD GO\r\n");
 8000e26:	490c      	ldr	r1, [pc, #48]	; (8000e58 <StartLcdTask+0x48>)
 8000e28:	480c      	ldr	r0, [pc, #48]	; (8000e5c <StartLcdTask+0x4c>)
 8000e2a:	f005 fd07 	bl	800683c <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000e2e:	2364      	movs	r3, #100	; 0x64
 8000e30:	221e      	movs	r2, #30
 8000e32:	490a      	ldr	r1, [pc, #40]	; (8000e5c <StartLcdTask+0x4c>)
 8000e34:	480a      	ldr	r0, [pc, #40]	; (8000e60 <StartLcdTask+0x50>)
 8000e36:	f001 fdbc 	bl	80029b2 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8000e3a:	4808      	ldr	r0, [pc, #32]	; (8000e5c <StartLcdTask+0x4c>)
 8000e3c:	f000 f8d2 	bl	8000fe4 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <StartLcdTask+0x44>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f002 ff5f 	bl	8003d08 <osMutexRelease>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f002 fe55 	bl	8003afa <osDelay>
 8000e50:	e7fb      	b.n	8000e4a <StartLcdTask+0x3a>
 8000e52:	bf00      	nop
 8000e54:	20000350 	.word	0x20000350
 8000e58:	08007340 	.word	0x08007340
 8000e5c:	200003bc 	.word	0x200003bc
 8000e60:	200002e4 	.word	0x200002e4

08000e64 <StartMotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void const * argument)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTask */
  /* Infinite loop */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8000e6c:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <StartMotorTask+0x4c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295
 8000e74:	4618      	mov	r0, r3
 8000e76:	f002 fef9 	bl	8003c6c <osMutexWait>
	sprintf(msg, "Motor GO\r\n");
 8000e7a:	490e      	ldr	r1, [pc, #56]	; (8000eb4 <StartMotorTask+0x50>)
 8000e7c:	480e      	ldr	r0, [pc, #56]	; (8000eb8 <StartMotorTask+0x54>)
 8000e7e:	f005 fcdd 	bl	800683c <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000e82:	2364      	movs	r3, #100	; 0x64
 8000e84:	221e      	movs	r2, #30
 8000e86:	490c      	ldr	r1, [pc, #48]	; (8000eb8 <StartMotorTask+0x54>)
 8000e88:	480c      	ldr	r0, [pc, #48]	; (8000ebc <StartMotorTask+0x58>)
 8000e8a:	f001 fd92 	bl	80029b2 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8000e8e:	480a      	ldr	r0, [pc, #40]	; (8000eb8 <StartMotorTask+0x54>)
 8000e90:	f000 f8a8 	bl	8000fe4 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <StartMotorTask+0x4c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f002 ff35 	bl	8003d08 <osMutexRelease>
	int lin_vel = 14; // 14 m/sec linear velocity
 8000e9e:	230e      	movs	r3, #14
 8000ea0:	60fb      	str	r3, [r7, #12]
	int ang_vel = 0.2; // 0.2 rad/sec angular velocity
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
  for(;;)
  {
  	// block until resumed
  	osThreadSuspend(NULL);
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f002 ff64 	bl	8003d74 <osThreadSuspend>
 8000eac:	e7fb      	b.n	8000ea6 <StartMotorTask+0x42>
 8000eae:	bf00      	nop
 8000eb0:	20000350 	.word	0x20000350
 8000eb4:	0800734c 	.word	0x0800734c
 8000eb8:	200003bc 	.word	0x200003bc
 8000ebc:	200002e4 	.word	0x200002e4

08000ec0 <StartMainTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMainTask */
void StartMainTask(void const * argument)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMainTask */
  /* Infinite loop */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8000ec8:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <StartMainTask+0x80>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f002 fecb 	bl	8003c6c <osMutexWait>
	sprintf(msg, "Main GO\r\n");
 8000ed6:	491b      	ldr	r1, [pc, #108]	; (8000f44 <StartMainTask+0x84>)
 8000ed8:	481b      	ldr	r0, [pc, #108]	; (8000f48 <StartMainTask+0x88>)
 8000eda:	f005 fcaf 	bl	800683c <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 200);
 8000ede:	23c8      	movs	r3, #200	; 0xc8
 8000ee0:	221e      	movs	r2, #30
 8000ee2:	4919      	ldr	r1, [pc, #100]	; (8000f48 <StartMainTask+0x88>)
 8000ee4:	4819      	ldr	r0, [pc, #100]	; (8000f4c <StartMainTask+0x8c>)
 8000ee6:	f001 fd64 	bl	80029b2 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8000eea:	4817      	ldr	r0, [pc, #92]	; (8000f48 <StartMainTask+0x88>)
 8000eec:	f000 f87a 	bl	8000fe4 <EmptyBuffer>
	sprintf(msg, "Enabling UART...\r\n");
 8000ef0:	4917      	ldr	r1, [pc, #92]	; (8000f50 <StartMainTask+0x90>)
 8000ef2:	4815      	ldr	r0, [pc, #84]	; (8000f48 <StartMainTask+0x88>)
 8000ef4:	f005 fca2 	bl	800683c <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000ef8:	2364      	movs	r3, #100	; 0x64
 8000efa:	221e      	movs	r2, #30
 8000efc:	4912      	ldr	r1, [pc, #72]	; (8000f48 <StartMainTask+0x88>)
 8000efe:	4813      	ldr	r0, [pc, #76]	; (8000f4c <StartMainTask+0x8c>)
 8000f00:	f001 fd57 	bl	80029b2 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8000f04:	4810      	ldr	r0, [pc, #64]	; (8000f48 <StartMainTask+0x88>)
 8000f06:	f000 f86d 	bl	8000fe4 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <StartMainTask+0x80>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f002 fefa 	bl	8003d08 <osMutexRelease>
	// enable UART receive
	HAL_UART_Receive_IT(&huart2, &Rx_byte, 1);
 8000f14:	2201      	movs	r2, #1
 8000f16:	490f      	ldr	r1, [pc, #60]	; (8000f54 <StartMainTask+0x94>)
 8000f18:	480c      	ldr	r0, [pc, #48]	; (8000f4c <StartMainTask+0x8c>)
 8000f1a:	f001 fddc 	bl	8002ad6 <HAL_UART_Receive_IT>
  for(;;)
  {
  	sprintf(msg, "-Main\r\n");
 8000f1e:	490e      	ldr	r1, [pc, #56]	; (8000f58 <StartMainTask+0x98>)
 8000f20:	4809      	ldr	r0, [pc, #36]	; (8000f48 <StartMainTask+0x88>)
 8000f22:	f005 fc8b 	bl	800683c <siprintf>
  	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000f26:	2364      	movs	r3, #100	; 0x64
 8000f28:	221e      	movs	r2, #30
 8000f2a:	4907      	ldr	r1, [pc, #28]	; (8000f48 <StartMainTask+0x88>)
 8000f2c:	4807      	ldr	r0, [pc, #28]	; (8000f4c <StartMainTask+0x8c>)
 8000f2e:	f001 fd40 	bl	80029b2 <HAL_UART_Transmit>
  	EmptyBuffer(msg);
 8000f32:	4805      	ldr	r0, [pc, #20]	; (8000f48 <StartMainTask+0x88>)
 8000f34:	f000 f856 	bl	8000fe4 <EmptyBuffer>

  	// suspend main until it is resumed
  	osThreadSuspend(NULL);
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f002 ff1b 	bl	8003d74 <osThreadSuspend>
  	sprintf(msg, "-Main\r\n");
 8000f3e:	e7ee      	b.n	8000f1e <StartMainTask+0x5e>
 8000f40:	20000350 	.word	0x20000350
 8000f44:	08007358 	.word	0x08007358
 8000f48:	200003bc 	.word	0x200003bc
 8000f4c:	200002e4 	.word	0x200002e4
 8000f50:	08007364 	.word	0x08007364
 8000f54:	20000354 	.word	0x20000354
 8000f58:	08007378 	.word	0x08007378

08000f5c <StartObjectDetectTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartObjectDetectTask */
void StartObjectDetectTask(void const * argument)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartObjectDetectTask */
	osMutexWait(PrintMtxHandle, osWaitForever);
 8000f64:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <StartObjectDetectTask+0x70>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f04f 31ff 	mov.w	r1, #4294967295
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f002 fe7d 	bl	8003c6c <osMutexWait>
	sprintf(msg, "ObjDetect GO\r\n");
 8000f72:	4917      	ldr	r1, [pc, #92]	; (8000fd0 <StartObjectDetectTask+0x74>)
 8000f74:	4817      	ldr	r0, [pc, #92]	; (8000fd4 <StartObjectDetectTask+0x78>)
 8000f76:	f005 fc61 	bl	800683c <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000f7a:	2364      	movs	r3, #100	; 0x64
 8000f7c:	221e      	movs	r2, #30
 8000f7e:	4915      	ldr	r1, [pc, #84]	; (8000fd4 <StartObjectDetectTask+0x78>)
 8000f80:	4815      	ldr	r0, [pc, #84]	; (8000fd8 <StartObjectDetectTask+0x7c>)
 8000f82:	f001 fd16 	bl	80029b2 <HAL_UART_Transmit>
	EmptyBuffer(msg);
 8000f86:	4813      	ldr	r0, [pc, #76]	; (8000fd4 <StartObjectDetectTask+0x78>)
 8000f88:	f000 f82c 	bl	8000fe4 <EmptyBuffer>
	osMutexRelease(PrintMtxHandle);
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <StartObjectDetectTask+0x70>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f002 feb9 	bl	8003d08 <osMutexRelease>
  /* Infinite loop */
  for(;;)
  {
  	//wait for signal
  	osSignalWait(SIGNAL_OBJECT_DETECT, osWaitForever);
 8000f96:	463b      	mov	r3, r7
 8000f98:	f04f 32ff 	mov.w	r2, #4294967295
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f002 fe00 	bl	8003ba4 <osSignalWait>

  	// print to uart
  	sprintf(msg, "Object detected...\r\n");
 8000fa4:	490d      	ldr	r1, [pc, #52]	; (8000fdc <StartObjectDetectTask+0x80>)
 8000fa6:	480b      	ldr	r0, [pc, #44]	; (8000fd4 <StartObjectDetectTask+0x78>)
 8000fa8:	f005 fc48 	bl	800683c <siprintf>
  	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000fac:	2364      	movs	r3, #100	; 0x64
 8000fae:	221e      	movs	r2, #30
 8000fb0:	4908      	ldr	r1, [pc, #32]	; (8000fd4 <StartObjectDetectTask+0x78>)
 8000fb2:	4809      	ldr	r0, [pc, #36]	; (8000fd8 <StartObjectDetectTask+0x7c>)
 8000fb4:	f001 fcfd 	bl	80029b2 <HAL_UART_Transmit>
  	EmptyBuffer(msg);
 8000fb8:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <StartObjectDetectTask+0x78>)
 8000fba:	f000 f813 	bl	8000fe4 <EmptyBuffer>

  	// toggle led
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fc4:	4806      	ldr	r0, [pc, #24]	; (8000fe0 <StartObjectDetectTask+0x84>)
 8000fc6:	f000 fd11 	bl	80019ec <HAL_GPIO_WritePin>
  	osSignalWait(SIGNAL_OBJECT_DETECT, osWaitForever);
 8000fca:	e7e4      	b.n	8000f96 <StartObjectDetectTask+0x3a>
 8000fcc:	20000350 	.word	0x20000350
 8000fd0:	08007380 	.word	0x08007380
 8000fd4:	200003bc 	.word	0x200003bc
 8000fd8:	200002e4 	.word	0x200002e4
 8000fdc:	08007390 	.word	0x08007390
 8000fe0:	40020400 	.word	0x40020400

08000fe4 <EmptyBuffer>:
  }
  /* USER CODE END StartObjectDetectTask */
}

// helper function to clear a string
void EmptyBuffer(char* buf){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	uint8_t i;
	int s = strlen(buf);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff f901 	bl	80001f4 <strlen>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	60bb      	str	r3, [r7, #8]

	for (i=0; i<s; i++) {
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73fb      	strb	r3, [r7, #15]
 8000ffa:	e007      	b.n	800100c <EmptyBuffer+0x28>
		buf[i] = 0;
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
	for (i=0; i<s; i++) {
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	3301      	adds	r3, #1
 800100a:	73fb      	strb	r3, [r7, #15]
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	429a      	cmp	r2, r3
 8001012:	dcf3      	bgt.n	8000ffc <EmptyBuffer+0x18>
	}
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d101      	bne.n	8001036 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001032:	f000 f9ab 	bl	800138c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40014400 	.word	0x40014400

08001044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001048:	b672      	cpsid	i
}
 800104a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800104c:	e7fe      	b.n	800104c <Error_Handler+0x8>
	...

08001050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <HAL_MspInit+0x54>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	4a11      	ldr	r2, [pc, #68]	; (80010a4 <HAL_MspInit+0x54>)
 8001060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001064:	6453      	str	r3, [r2, #68]	; 0x44
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <HAL_MspInit+0x54>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	603b      	str	r3, [r7, #0]
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <HAL_MspInit+0x54>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <HAL_MspInit+0x54>)
 800107c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001080:	6413      	str	r3, [r2, #64]	; 0x40
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <HAL_MspInit+0x54>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108a:	603b      	str	r3, [r7, #0]
 800108c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	210f      	movs	r1, #15
 8001092:	f06f 0001 	mvn.w	r0, #1
 8001096:	f000 fa51 	bl	800153c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800

080010a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a1d      	ldr	r2, [pc, #116]	; (800113c <HAL_UART_MspInit+0x94>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d133      	bne.n	8001132 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <HAL_UART_MspInit+0x98>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	4a1b      	ldr	r2, [pc, #108]	; (8001140 <HAL_UART_MspInit+0x98>)
 80010d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d8:	6413      	str	r3, [r2, #64]	; 0x40
 80010da:	4b19      	ldr	r3, [pc, #100]	; (8001140 <HAL_UART_MspInit+0x98>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <HAL_UART_MspInit+0x98>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a14      	ldr	r2, [pc, #80]	; (8001140 <HAL_UART_MspInit+0x98>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_UART_MspInit+0x98>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001102:	230c      	movs	r3, #12
 8001104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110e:	2303      	movs	r3, #3
 8001110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001112:	2307      	movs	r3, #7
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4809      	ldr	r0, [pc, #36]	; (8001144 <HAL_UART_MspInit+0x9c>)
 800111e:	f000 fac9 	bl	80016b4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2105      	movs	r1, #5
 8001126:	2026      	movs	r0, #38	; 0x26
 8001128:	f000 fa08 	bl	800153c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800112c:	2026      	movs	r0, #38	; 0x26
 800112e:	f000 fa21 	bl	8001574 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001132:	bf00      	nop
 8001134:	3728      	adds	r7, #40	; 0x28
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40004400 	.word	0x40004400
 8001140:	40023800 	.word	0x40023800
 8001144:	40020000 	.word	0x40020000

08001148 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08c      	sub	sp, #48	; 0x30
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001158:	2200      	movs	r2, #0
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	2019      	movs	r0, #25
 800115e:	f000 f9ed 	bl	800153c <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001162:	2019      	movs	r0, #25
 8001164:	f000 fa06 	bl	8001574 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <HAL_InitTick+0xa0>)
 800116e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001170:	4a1d      	ldr	r2, [pc, #116]	; (80011e8 <HAL_InitTick+0xa0>)
 8001172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001176:	6453      	str	r3, [r2, #68]	; 0x44
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <HAL_InitTick+0xa0>)
 800117a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001184:	f107 0210 	add.w	r2, r7, #16
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4611      	mov	r1, r2
 800118e:	4618      	mov	r0, r3
 8001190:	f001 f910 	bl	80023b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001194:	f001 f8fa 	bl	800238c <HAL_RCC_GetPCLK2Freq>
 8001198:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800119a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800119c:	4a13      	ldr	r2, [pc, #76]	; (80011ec <HAL_InitTick+0xa4>)
 800119e:	fba2 2303 	umull	r2, r3, r2, r3
 80011a2:	0c9b      	lsrs	r3, r3, #18
 80011a4:	3b01      	subs	r3, #1
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <HAL_InitTick+0xa8>)
 80011aa:	4a12      	ldr	r2, [pc, #72]	; (80011f4 <HAL_InitTick+0xac>)
 80011ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80011ae:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <HAL_InitTick+0xa8>)
 80011b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011b4:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80011b6:	4a0e      	ldr	r2, [pc, #56]	; (80011f0 <HAL_InitTick+0xa8>)
 80011b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ba:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <HAL_InitTick+0xa8>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <HAL_InitTick+0xa8>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 80011c8:	4809      	ldr	r0, [pc, #36]	; (80011f0 <HAL_InitTick+0xa8>)
 80011ca:	f001 f925 	bl	8002418 <HAL_TIM_Base_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d104      	bne.n	80011de <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 80011d4:	4806      	ldr	r0, [pc, #24]	; (80011f0 <HAL_InitTick+0xa8>)
 80011d6:	f001 f979 	bl	80024cc <HAL_TIM_Base_Start_IT>
 80011da:	4603      	mov	r3, r0
 80011dc:	e000      	b.n	80011e0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3730      	adds	r7, #48	; 0x30
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40023800 	.word	0x40023800
 80011ec:	431bde83 	.word	0x431bde83
 80011f0:	200003dc 	.word	0x200003dc
 80011f4:	40014400 	.word	0x40014400

080011f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <NMI_Handler+0x4>

080011fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001202:	e7fe      	b.n	8001202 <HardFault_Handler+0x4>

08001204 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <MemManage_Handler+0x4>

0800120a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120e:	e7fe      	b.n	800120e <BusFault_Handler+0x4>

08001210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <UsageFault_Handler+0x4>

08001216 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800122a:	f001 f9b1 	bl	8002590 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200003dc 	.word	0x200003dc

08001238 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800123c:	4802      	ldr	r0, [pc, #8]	; (8001248 <USART2_IRQHandler+0x10>)
 800123e:	f001 fc7b 	bl	8002b38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200002e4 	.word	0x200002e4

0800124c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ExButton_Pin);
 8001250:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001254:	f000 fbfe 	bl	8001a54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001258:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800125c:	f000 fbfa 	bl	8001a54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800126c:	4a14      	ldr	r2, [pc, #80]	; (80012c0 <_sbrk+0x5c>)
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <_sbrk+0x60>)
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001278:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <_sbrk+0x64>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d102      	bne.n	8001286 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001280:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <_sbrk+0x64>)
 8001282:	4a12      	ldr	r2, [pc, #72]	; (80012cc <_sbrk+0x68>)
 8001284:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001286:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <_sbrk+0x64>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	429a      	cmp	r2, r3
 8001292:	d207      	bcs.n	80012a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001294:	f005 fa92 	bl	80067bc <__errno>
 8001298:	4603      	mov	r3, r0
 800129a:	220c      	movs	r2, #12
 800129c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	e009      	b.n	80012b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a4:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <_sbrk+0x64>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012aa:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <_sbrk+0x64>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	4a05      	ldr	r2, [pc, #20]	; (80012c8 <_sbrk+0x64>)
 80012b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012b6:	68fb      	ldr	r3, [r7, #12]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20020000 	.word	0x20020000
 80012c4:	00000400 	.word	0x00000400
 80012c8:	20000424 	.word	0x20000424
 80012cc:	20004190 	.word	0x20004190

080012d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <SystemInit+0x20>)
 80012d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012da:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <SystemInit+0x20>)
 80012dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800132c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012f8:	480d      	ldr	r0, [pc, #52]	; (8001330 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012fa:	490e      	ldr	r1, [pc, #56]	; (8001334 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012fc:	4a0e      	ldr	r2, [pc, #56]	; (8001338 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001300:	e002      	b.n	8001308 <LoopCopyDataInit>

08001302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001306:	3304      	adds	r3, #4

08001308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800130c:	d3f9      	bcc.n	8001302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130e:	4a0b      	ldr	r2, [pc, #44]	; (800133c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001310:	4c0b      	ldr	r4, [pc, #44]	; (8001340 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001314:	e001      	b.n	800131a <LoopFillZerobss>

08001316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001318:	3204      	adds	r2, #4

0800131a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800131c:	d3fb      	bcc.n	8001316 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800131e:	f7ff ffd7 	bl	80012d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001322:	f005 fa51 	bl	80067c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001326:	f7ff f95f 	bl	80005e8 <main>
  bx  lr    
 800132a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800132c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001334:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001338:	0800740c 	.word	0x0800740c
  ldr r2, =_sbss
 800133c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001340:	20004190 	.word	0x20004190

08001344 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001344:	e7fe      	b.n	8001344 <ADC_IRQHandler>
	...

08001348 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800134c:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <HAL_Init+0x40>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a0d      	ldr	r2, [pc, #52]	; (8001388 <HAL_Init+0x40>)
 8001352:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001356:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001358:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <HAL_Init+0x40>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <HAL_Init+0x40>)
 800135e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001362:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <HAL_Init+0x40>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a07      	ldr	r2, [pc, #28]	; (8001388 <HAL_Init+0x40>)
 800136a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001370:	2003      	movs	r0, #3
 8001372:	f000 f8d8 	bl	8001526 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001376:	200f      	movs	r0, #15
 8001378:	f7ff fee6 	bl	8001148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800137c:	f7ff fe68 	bl	8001050 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40023c00 	.word	0x40023c00

0800138c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_IncTick+0x20>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_IncTick+0x24>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4413      	add	r3, r2
 800139c:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <HAL_IncTick+0x24>)
 800139e:	6013      	str	r3, [r2, #0]
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20000008 	.word	0x20000008
 80013b0:	20000428 	.word	0x20000428

080013b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return uwTick;
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <HAL_GetTick+0x14>)
 80013ba:	681b      	ldr	r3, [r3, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000428 	.word	0x20000428

080013cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e8:	4013      	ands	r3, r2
 80013ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fe:	4a04      	ldr	r2, [pc, #16]	; (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	60d3      	str	r3, [r2, #12]
}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001418:	4b04      	ldr	r3, [pc, #16]	; (800142c <__NVIC_GetPriorityGrouping+0x18>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	0a1b      	lsrs	r3, r3, #8
 800141e:	f003 0307 	and.w	r3, r3, #7
}
 8001422:	4618      	mov	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	2b00      	cmp	r3, #0
 8001440:	db0b      	blt.n	800145a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	f003 021f 	and.w	r2, r3, #31
 8001448:	4907      	ldr	r1, [pc, #28]	; (8001468 <__NVIC_EnableIRQ+0x38>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	095b      	lsrs	r3, r3, #5
 8001450:	2001      	movs	r0, #1
 8001452:	fa00 f202 	lsl.w	r2, r0, r2
 8001456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000e100 	.word	0xe000e100

0800146c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	2b00      	cmp	r3, #0
 800147e:	db0a      	blt.n	8001496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	b2da      	uxtb	r2, r3
 8001484:	490c      	ldr	r1, [pc, #48]	; (80014b8 <__NVIC_SetPriority+0x4c>)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	0112      	lsls	r2, r2, #4
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	440b      	add	r3, r1
 8001490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001494:	e00a      	b.n	80014ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4908      	ldr	r1, [pc, #32]	; (80014bc <__NVIC_SetPriority+0x50>)
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	f003 030f 	and.w	r3, r3, #15
 80014a2:	3b04      	subs	r3, #4
 80014a4:	0112      	lsls	r2, r2, #4
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	440b      	add	r3, r1
 80014aa:	761a      	strb	r2, [r3, #24]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000e100 	.word	0xe000e100
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b089      	sub	sp, #36	; 0x24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f1c3 0307 	rsb	r3, r3, #7
 80014da:	2b04      	cmp	r3, #4
 80014dc:	bf28      	it	cs
 80014de:	2304      	movcs	r3, #4
 80014e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3304      	adds	r3, #4
 80014e6:	2b06      	cmp	r3, #6
 80014e8:	d902      	bls.n	80014f0 <NVIC_EncodePriority+0x30>
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3b03      	subs	r3, #3
 80014ee:	e000      	b.n	80014f2 <NVIC_EncodePriority+0x32>
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	f04f 32ff 	mov.w	r2, #4294967295
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43da      	mvns	r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	401a      	ands	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001508:	f04f 31ff 	mov.w	r1, #4294967295
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	fa01 f303 	lsl.w	r3, r1, r3
 8001512:	43d9      	mvns	r1, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	4313      	orrs	r3, r2
         );
}
 800151a:	4618      	mov	r0, r3
 800151c:	3724      	adds	r7, #36	; 0x24
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff ff4c 	bl	80013cc <__NVIC_SetPriorityGrouping>
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
 8001548:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800154e:	f7ff ff61 	bl	8001414 <__NVIC_GetPriorityGrouping>
 8001552:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	68b9      	ldr	r1, [r7, #8]
 8001558:	6978      	ldr	r0, [r7, #20]
 800155a:	f7ff ffb1 	bl	80014c0 <NVIC_EncodePriority>
 800155e:	4602      	mov	r2, r0
 8001560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001564:	4611      	mov	r1, r2
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff ff80 	bl	800146c <__NVIC_SetPriority>
}
 800156c:	bf00      	nop
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff ff54 	bl	8001430 <__NVIC_EnableIRQ>
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800159e:	f7ff ff09 	bl	80013b4 <HAL_GetTick>
 80015a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d008      	beq.n	80015c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2280      	movs	r2, #128	; 0x80
 80015b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e052      	b.n	8001668 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 0216 	bic.w	r2, r2, #22
 80015d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	695a      	ldr	r2, [r3, #20]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d103      	bne.n	80015f2 <HAL_DMA_Abort+0x62>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d007      	beq.n	8001602 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 0208 	bic.w	r2, r2, #8
 8001600:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 0201 	bic.w	r2, r2, #1
 8001610:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001612:	e013      	b.n	800163c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001614:	f7ff fece 	bl	80013b4 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b05      	cmp	r3, #5
 8001620:	d90c      	bls.n	800163c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2220      	movs	r2, #32
 8001626:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2203      	movs	r2, #3
 800162c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e015      	b.n	8001668 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1e4      	bne.n	8001614 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164e:	223f      	movs	r2, #63	; 0x3f
 8001650:	409a      	lsls	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2201      	movs	r2, #1
 800165a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d004      	beq.n	800168e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2280      	movs	r2, #128	; 0x80
 8001688:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e00c      	b.n	80016a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2205      	movs	r2, #5
 8001692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 0201 	bic.w	r2, r2, #1
 80016a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b089      	sub	sp, #36	; 0x24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
 80016ce:	e159      	b.n	8001984 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016d0:	2201      	movs	r2, #1
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	4013      	ands	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	f040 8148 	bne.w	800197e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 0303 	and.w	r3, r3, #3
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d005      	beq.n	8001706 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001702:	2b02      	cmp	r3, #2
 8001704:	d130      	bne.n	8001768 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	2203      	movs	r2, #3
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	68da      	ldr	r2, [r3, #12]
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4313      	orrs	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800173c:	2201      	movs	r2, #1
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	091b      	lsrs	r3, r3, #4
 8001752:	f003 0201 	and.w	r2, r3, #1
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	2b03      	cmp	r3, #3
 8001772:	d017      	beq.n	80017a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	2203      	movs	r2, #3
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 0303 	and.w	r3, r3, #3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d123      	bne.n	80017f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	08da      	lsrs	r2, r3, #3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3208      	adds	r2, #8
 80017b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	220f      	movs	r2, #15
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	691a      	ldr	r2, [r3, #16]
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	08da      	lsrs	r2, r3, #3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3208      	adds	r2, #8
 80017f2:	69b9      	ldr	r1, [r7, #24]
 80017f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	2203      	movs	r2, #3
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 0203 	and.w	r2, r3, #3
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4313      	orrs	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 80a2 	beq.w	800197e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	4b57      	ldr	r3, [pc, #348]	; (800199c <HAL_GPIO_Init+0x2e8>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	4a56      	ldr	r2, [pc, #344]	; (800199c <HAL_GPIO_Init+0x2e8>)
 8001844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001848:	6453      	str	r3, [r2, #68]	; 0x44
 800184a:	4b54      	ldr	r3, [pc, #336]	; (800199c <HAL_GPIO_Init+0x2e8>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001856:	4a52      	ldr	r2, [pc, #328]	; (80019a0 <HAL_GPIO_Init+0x2ec>)
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	089b      	lsrs	r3, r3, #2
 800185c:	3302      	adds	r3, #2
 800185e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001862:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	220f      	movs	r2, #15
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4013      	ands	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a49      	ldr	r2, [pc, #292]	; (80019a4 <HAL_GPIO_Init+0x2f0>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d019      	beq.n	80018b6 <HAL_GPIO_Init+0x202>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a48      	ldr	r2, [pc, #288]	; (80019a8 <HAL_GPIO_Init+0x2f4>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d013      	beq.n	80018b2 <HAL_GPIO_Init+0x1fe>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a47      	ldr	r2, [pc, #284]	; (80019ac <HAL_GPIO_Init+0x2f8>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d00d      	beq.n	80018ae <HAL_GPIO_Init+0x1fa>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a46      	ldr	r2, [pc, #280]	; (80019b0 <HAL_GPIO_Init+0x2fc>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d007      	beq.n	80018aa <HAL_GPIO_Init+0x1f6>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a45      	ldr	r2, [pc, #276]	; (80019b4 <HAL_GPIO_Init+0x300>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d101      	bne.n	80018a6 <HAL_GPIO_Init+0x1f2>
 80018a2:	2304      	movs	r3, #4
 80018a4:	e008      	b.n	80018b8 <HAL_GPIO_Init+0x204>
 80018a6:	2307      	movs	r3, #7
 80018a8:	e006      	b.n	80018b8 <HAL_GPIO_Init+0x204>
 80018aa:	2303      	movs	r3, #3
 80018ac:	e004      	b.n	80018b8 <HAL_GPIO_Init+0x204>
 80018ae:	2302      	movs	r3, #2
 80018b0:	e002      	b.n	80018b8 <HAL_GPIO_Init+0x204>
 80018b2:	2301      	movs	r3, #1
 80018b4:	e000      	b.n	80018b8 <HAL_GPIO_Init+0x204>
 80018b6:	2300      	movs	r3, #0
 80018b8:	69fa      	ldr	r2, [r7, #28]
 80018ba:	f002 0203 	and.w	r2, r2, #3
 80018be:	0092      	lsls	r2, r2, #2
 80018c0:	4093      	lsls	r3, r2
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018c8:	4935      	ldr	r1, [pc, #212]	; (80019a0 <HAL_GPIO_Init+0x2ec>)
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	089b      	lsrs	r3, r3, #2
 80018ce:	3302      	adds	r3, #2
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018d6:	4b38      	ldr	r3, [pc, #224]	; (80019b8 <HAL_GPIO_Init+0x304>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	43db      	mvns	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018fa:	4a2f      	ldr	r2, [pc, #188]	; (80019b8 <HAL_GPIO_Init+0x304>)
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001900:	4b2d      	ldr	r3, [pc, #180]	; (80019b8 <HAL_GPIO_Init+0x304>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001924:	4a24      	ldr	r2, [pc, #144]	; (80019b8 <HAL_GPIO_Init+0x304>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800192a:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <HAL_GPIO_Init+0x304>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	43db      	mvns	r3, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800194e:	4a1a      	ldr	r2, [pc, #104]	; (80019b8 <HAL_GPIO_Init+0x304>)
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001954:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <HAL_GPIO_Init+0x304>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001978:	4a0f      	ldr	r2, [pc, #60]	; (80019b8 <HAL_GPIO_Init+0x304>)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3301      	adds	r3, #1
 8001982:	61fb      	str	r3, [r7, #28]
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	2b0f      	cmp	r3, #15
 8001988:	f67f aea2 	bls.w	80016d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800198c:	bf00      	nop
 800198e:	bf00      	nop
 8001990:	3724      	adds	r7, #36	; 0x24
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800
 80019a0:	40013800 	.word	0x40013800
 80019a4:	40020000 	.word	0x40020000
 80019a8:	40020400 	.word	0x40020400
 80019ac:	40020800 	.word	0x40020800
 80019b0:	40020c00 	.word	0x40020c00
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40013c00 	.word	0x40013c00

080019bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691a      	ldr	r2, [r3, #16]
 80019cc:	887b      	ldrh	r3, [r7, #2]
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d002      	beq.n	80019da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019d4:	2301      	movs	r3, #1
 80019d6:	73fb      	strb	r3, [r7, #15]
 80019d8:	e001      	b.n	80019de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019da:	2300      	movs	r3, #0
 80019dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019de:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	807b      	strh	r3, [r7, #2]
 80019f8:	4613      	mov	r3, r2
 80019fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019fc:	787b      	ldrb	r3, [r7, #1]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a02:	887a      	ldrh	r2, [r7, #2]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a08:	e003      	b.n	8001a12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a0a:	887b      	ldrh	r3, [r7, #2]
 8001a0c:	041a      	lsls	r2, r3, #16
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	619a      	str	r2, [r3, #24]
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b085      	sub	sp, #20
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	460b      	mov	r3, r1
 8001a28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a30:	887a      	ldrh	r2, [r7, #2]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	4013      	ands	r3, r2
 8001a36:	041a      	lsls	r2, r3, #16
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	43d9      	mvns	r1, r3
 8001a3c:	887b      	ldrh	r3, [r7, #2]
 8001a3e:	400b      	ands	r3, r1
 8001a40:	431a      	orrs	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	619a      	str	r2, [r3, #24]
}
 8001a46:	bf00      	nop
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
	...

08001a54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a5e:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a60:	695a      	ldr	r2, [r3, #20]
 8001a62:	88fb      	ldrh	r3, [r7, #6]
 8001a64:	4013      	ands	r3, r2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d006      	beq.n	8001a78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a6a:	4a05      	ldr	r2, [pc, #20]	; (8001a80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a6c:	88fb      	ldrh	r3, [r7, #6]
 8001a6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a70:	88fb      	ldrh	r3, [r7, #6]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fff8 	bl	8000a68 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40013c00 	.word	0x40013c00

08001a84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e267      	b.n	8001f66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d075      	beq.n	8001b8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001aa2:	4b88      	ldr	r3, [pc, #544]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	d00c      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aae:	4b85      	ldr	r3, [pc, #532]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ab6:	2b08      	cmp	r3, #8
 8001ab8:	d112      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aba:	4b82      	ldr	r3, [pc, #520]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ac2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ac6:	d10b      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac8:	4b7e      	ldr	r3, [pc, #504]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d05b      	beq.n	8001b8c <HAL_RCC_OscConfig+0x108>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d157      	bne.n	8001b8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e242      	b.n	8001f66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae8:	d106      	bne.n	8001af8 <HAL_RCC_OscConfig+0x74>
 8001aea:	4b76      	ldr	r3, [pc, #472]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a75      	ldr	r2, [pc, #468]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	e01d      	b.n	8001b34 <HAL_RCC_OscConfig+0xb0>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b00:	d10c      	bne.n	8001b1c <HAL_RCC_OscConfig+0x98>
 8001b02:	4b70      	ldr	r3, [pc, #448]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a6f      	ldr	r2, [pc, #444]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4b6d      	ldr	r3, [pc, #436]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a6c      	ldr	r2, [pc, #432]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	e00b      	b.n	8001b34 <HAL_RCC_OscConfig+0xb0>
 8001b1c:	4b69      	ldr	r3, [pc, #420]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a68      	ldr	r2, [pc, #416]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	4b66      	ldr	r3, [pc, #408]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a65      	ldr	r2, [pc, #404]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d013      	beq.n	8001b64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3c:	f7ff fc3a 	bl	80013b4 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b44:	f7ff fc36 	bl	80013b4 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b64      	cmp	r3, #100	; 0x64
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e207      	b.n	8001f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b56:	4b5b      	ldr	r3, [pc, #364]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0xc0>
 8001b62:	e014      	b.n	8001b8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7ff fc26 	bl	80013b4 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b6c:	f7ff fc22 	bl	80013b4 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b64      	cmp	r3, #100	; 0x64
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e1f3      	b.n	8001f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b7e:	4b51      	ldr	r3, [pc, #324]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0xe8>
 8001b8a:	e000      	b.n	8001b8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d063      	beq.n	8001c62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b9a:	4b4a      	ldr	r3, [pc, #296]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00b      	beq.n	8001bbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ba6:	4b47      	ldr	r3, [pc, #284]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d11c      	bne.n	8001bec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bb2:	4b44      	ldr	r3, [pc, #272]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d116      	bne.n	8001bec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bbe:	4b41      	ldr	r3, [pc, #260]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d005      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x152>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d001      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e1c7      	b.n	8001f66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd6:	4b3b      	ldr	r3, [pc, #236]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	4937      	ldr	r1, [pc, #220]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bea:	e03a      	b.n	8001c62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d020      	beq.n	8001c36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf4:	4b34      	ldr	r3, [pc, #208]	; (8001cc8 <HAL_RCC_OscConfig+0x244>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfa:	f7ff fbdb 	bl	80013b4 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c02:	f7ff fbd7 	bl	80013b4 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e1a8      	b.n	8001f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c14:	4b2b      	ldr	r3, [pc, #172]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0f0      	beq.n	8001c02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c20:	4b28      	ldr	r3, [pc, #160]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	4925      	ldr	r1, [pc, #148]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	600b      	str	r3, [r1, #0]
 8001c34:	e015      	b.n	8001c62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c36:	4b24      	ldr	r3, [pc, #144]	; (8001cc8 <HAL_RCC_OscConfig+0x244>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3c:	f7ff fbba 	bl	80013b4 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c44:	f7ff fbb6 	bl	80013b4 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e187      	b.n	8001f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c56:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f0      	bne.n	8001c44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d036      	beq.n	8001cdc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d016      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c76:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <HAL_RCC_OscConfig+0x248>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7c:	f7ff fb9a 	bl	80013b4 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c84:	f7ff fb96 	bl	80013b4 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e167      	b.n	8001f66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c96:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0x200>
 8001ca2:	e01b      	b.n	8001cdc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ca4:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <HAL_RCC_OscConfig+0x248>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001caa:	f7ff fb83 	bl	80013b4 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb0:	e00e      	b.n	8001cd0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cb2:	f7ff fb7f 	bl	80013b4 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d907      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e150      	b.n	8001f66 <HAL_RCC_OscConfig+0x4e2>
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	42470000 	.word	0x42470000
 8001ccc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd0:	4b88      	ldr	r3, [pc, #544]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1ea      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 8097 	beq.w	8001e18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cea:	2300      	movs	r3, #0
 8001cec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cee:	4b81      	ldr	r3, [pc, #516]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10f      	bne.n	8001d1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	4b7d      	ldr	r3, [pc, #500]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	4a7c      	ldr	r2, [pc, #496]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d08:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0a:	4b7a      	ldr	r3, [pc, #488]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d16:	2301      	movs	r3, #1
 8001d18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1a:	4b77      	ldr	r3, [pc, #476]	; (8001ef8 <HAL_RCC_OscConfig+0x474>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d118      	bne.n	8001d58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d26:	4b74      	ldr	r3, [pc, #464]	; (8001ef8 <HAL_RCC_OscConfig+0x474>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a73      	ldr	r2, [pc, #460]	; (8001ef8 <HAL_RCC_OscConfig+0x474>)
 8001d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d32:	f7ff fb3f 	bl	80013b4 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3a:	f7ff fb3b 	bl	80013b4 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e10c      	b.n	8001f66 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4c:	4b6a      	ldr	r3, [pc, #424]	; (8001ef8 <HAL_RCC_OscConfig+0x474>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d106      	bne.n	8001d6e <HAL_RCC_OscConfig+0x2ea>
 8001d60:	4b64      	ldr	r3, [pc, #400]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d64:	4a63      	ldr	r2, [pc, #396]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d6c:	e01c      	b.n	8001da8 <HAL_RCC_OscConfig+0x324>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	2b05      	cmp	r3, #5
 8001d74:	d10c      	bne.n	8001d90 <HAL_RCC_OscConfig+0x30c>
 8001d76:	4b5f      	ldr	r3, [pc, #380]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7a:	4a5e      	ldr	r2, [pc, #376]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001d7c:	f043 0304 	orr.w	r3, r3, #4
 8001d80:	6713      	str	r3, [r2, #112]	; 0x70
 8001d82:	4b5c      	ldr	r3, [pc, #368]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d86:	4a5b      	ldr	r2, [pc, #364]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d8e:	e00b      	b.n	8001da8 <HAL_RCC_OscConfig+0x324>
 8001d90:	4b58      	ldr	r3, [pc, #352]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d94:	4a57      	ldr	r2, [pc, #348]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001d96:	f023 0301 	bic.w	r3, r3, #1
 8001d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d9c:	4b55      	ldr	r3, [pc, #340]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da0:	4a54      	ldr	r2, [pc, #336]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001da2:	f023 0304 	bic.w	r3, r3, #4
 8001da6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d015      	beq.n	8001ddc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db0:	f7ff fb00 	bl	80013b4 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db6:	e00a      	b.n	8001dce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001db8:	f7ff fafc 	bl	80013b4 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e0cb      	b.n	8001f66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dce:	4b49      	ldr	r3, [pc, #292]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0ee      	beq.n	8001db8 <HAL_RCC_OscConfig+0x334>
 8001dda:	e014      	b.n	8001e06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ddc:	f7ff faea 	bl	80013b4 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de2:	e00a      	b.n	8001dfa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001de4:	f7ff fae6 	bl	80013b4 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e0b5      	b.n	8001f66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dfa:	4b3e      	ldr	r3, [pc, #248]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1ee      	bne.n	8001de4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e06:	7dfb      	ldrb	r3, [r7, #23]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d105      	bne.n	8001e18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e0c:	4b39      	ldr	r3, [pc, #228]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	4a38      	ldr	r2, [pc, #224]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001e12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 80a1 	beq.w	8001f64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e22:	4b34      	ldr	r3, [pc, #208]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 030c 	and.w	r3, r3, #12
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d05c      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d141      	bne.n	8001eba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e36:	4b31      	ldr	r3, [pc, #196]	; (8001efc <HAL_RCC_OscConfig+0x478>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3c:	f7ff faba 	bl	80013b4 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e44:	f7ff fab6 	bl	80013b4 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e087      	b.n	8001f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e56:	4b27      	ldr	r3, [pc, #156]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69da      	ldr	r2, [r3, #28]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	019b      	lsls	r3, r3, #6
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e78:	085b      	lsrs	r3, r3, #1
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	041b      	lsls	r3, r3, #16
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e84:	061b      	lsls	r3, r3, #24
 8001e86:	491b      	ldr	r1, [pc, #108]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <HAL_RCC_OscConfig+0x478>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e92:	f7ff fa8f 	bl	80013b4 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e9a:	f7ff fa8b 	bl	80013b4 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e05c      	b.n	8001f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eac:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0f0      	beq.n	8001e9a <HAL_RCC_OscConfig+0x416>
 8001eb8:	e054      	b.n	8001f64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eba:	4b10      	ldr	r3, [pc, #64]	; (8001efc <HAL_RCC_OscConfig+0x478>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec0:	f7ff fa78 	bl	80013b4 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec8:	f7ff fa74 	bl	80013b4 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e045      	b.n	8001f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eda:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x444>
 8001ee6:	e03d      	b.n	8001f64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d107      	bne.n	8001f00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e038      	b.n	8001f66 <HAL_RCC_OscConfig+0x4e2>
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40007000 	.word	0x40007000
 8001efc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f00:	4b1b      	ldr	r3, [pc, #108]	; (8001f70 <HAL_RCC_OscConfig+0x4ec>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d028      	beq.n	8001f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d121      	bne.n	8001f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d11a      	bne.n	8001f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f30:	4013      	ands	r3, r2
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d111      	bne.n	8001f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f46:	085b      	lsrs	r3, r3, #1
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d107      	bne.n	8001f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e000      	b.n	8001f66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40023800 	.word	0x40023800

08001f74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e0cc      	b.n	8002122 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f88:	4b68      	ldr	r3, [pc, #416]	; (800212c <HAL_RCC_ClockConfig+0x1b8>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d90c      	bls.n	8001fb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f96:	4b65      	ldr	r3, [pc, #404]	; (800212c <HAL_RCC_ClockConfig+0x1b8>)
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9e:	4b63      	ldr	r3, [pc, #396]	; (800212c <HAL_RCC_ClockConfig+0x1b8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e0b8      	b.n	8002122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d020      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc8:	4b59      	ldr	r3, [pc, #356]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	4a58      	ldr	r2, [pc, #352]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 8001fce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d005      	beq.n	8001fec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fe0:	4b53      	ldr	r3, [pc, #332]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	4a52      	ldr	r2, [pc, #328]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fec:	4b50      	ldr	r3, [pc, #320]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	494d      	ldr	r1, [pc, #308]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d044      	beq.n	8002094 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d107      	bne.n	8002022 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002012:	4b47      	ldr	r3, [pc, #284]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d119      	bne.n	8002052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e07f      	b.n	8002122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b02      	cmp	r3, #2
 8002028:	d003      	beq.n	8002032 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800202e:	2b03      	cmp	r3, #3
 8002030:	d107      	bne.n	8002042 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002032:	4b3f      	ldr	r3, [pc, #252]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d109      	bne.n	8002052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e06f      	b.n	8002122 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002042:	4b3b      	ldr	r3, [pc, #236]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e067      	b.n	8002122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002052:	4b37      	ldr	r3, [pc, #220]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f023 0203 	bic.w	r2, r3, #3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	4934      	ldr	r1, [pc, #208]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 8002060:	4313      	orrs	r3, r2
 8002062:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002064:	f7ff f9a6 	bl	80013b4 <HAL_GetTick>
 8002068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206a:	e00a      	b.n	8002082 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800206c:	f7ff f9a2 	bl	80013b4 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	f241 3288 	movw	r2, #5000	; 0x1388
 800207a:	4293      	cmp	r3, r2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e04f      	b.n	8002122 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002082:	4b2b      	ldr	r3, [pc, #172]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 020c 	and.w	r2, r3, #12
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	429a      	cmp	r2, r3
 8002092:	d1eb      	bne.n	800206c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002094:	4b25      	ldr	r3, [pc, #148]	; (800212c <HAL_RCC_ClockConfig+0x1b8>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d20c      	bcs.n	80020bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a2:	4b22      	ldr	r3, [pc, #136]	; (800212c <HAL_RCC_ClockConfig+0x1b8>)
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020aa:	4b20      	ldr	r3, [pc, #128]	; (800212c <HAL_RCC_ClockConfig+0x1b8>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d001      	beq.n	80020bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e032      	b.n	8002122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d008      	beq.n	80020da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c8:	4b19      	ldr	r3, [pc, #100]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	4916      	ldr	r1, [pc, #88]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d009      	beq.n	80020fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020e6:	4b12      	ldr	r3, [pc, #72]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	490e      	ldr	r1, [pc, #56]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020fa:	f000 f821 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 80020fe:	4602      	mov	r2, r0
 8002100:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	091b      	lsrs	r3, r3, #4
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	490a      	ldr	r1, [pc, #40]	; (8002134 <HAL_RCC_ClockConfig+0x1c0>)
 800210c:	5ccb      	ldrb	r3, [r1, r3]
 800210e:	fa22 f303 	lsr.w	r3, r2, r3
 8002112:	4a09      	ldr	r2, [pc, #36]	; (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 8002114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002116:	4b09      	ldr	r3, [pc, #36]	; (800213c <HAL_RCC_ClockConfig+0x1c8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff f814 	bl	8001148 <HAL_InitTick>

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40023c00 	.word	0x40023c00
 8002130:	40023800 	.word	0x40023800
 8002134:	080073b0 	.word	0x080073b0
 8002138:	20000000 	.word	0x20000000
 800213c:	20000004 	.word	0x20000004

08002140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002144:	b094      	sub	sp, #80	; 0x50
 8002146:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	647b      	str	r3, [r7, #68]	; 0x44
 800214c:	2300      	movs	r3, #0
 800214e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002150:	2300      	movs	r3, #0
 8002152:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002154:	2300      	movs	r3, #0
 8002156:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002158:	4b79      	ldr	r3, [pc, #484]	; (8002340 <HAL_RCC_GetSysClockFreq+0x200>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 030c 	and.w	r3, r3, #12
 8002160:	2b08      	cmp	r3, #8
 8002162:	d00d      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0x40>
 8002164:	2b08      	cmp	r3, #8
 8002166:	f200 80e1 	bhi.w	800232c <HAL_RCC_GetSysClockFreq+0x1ec>
 800216a:	2b00      	cmp	r3, #0
 800216c:	d002      	beq.n	8002174 <HAL_RCC_GetSysClockFreq+0x34>
 800216e:	2b04      	cmp	r3, #4
 8002170:	d003      	beq.n	800217a <HAL_RCC_GetSysClockFreq+0x3a>
 8002172:	e0db      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002174:	4b73      	ldr	r3, [pc, #460]	; (8002344 <HAL_RCC_GetSysClockFreq+0x204>)
 8002176:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002178:	e0db      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800217a:	4b73      	ldr	r3, [pc, #460]	; (8002348 <HAL_RCC_GetSysClockFreq+0x208>)
 800217c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800217e:	e0d8      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002180:	4b6f      	ldr	r3, [pc, #444]	; (8002340 <HAL_RCC_GetSysClockFreq+0x200>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002188:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800218a:	4b6d      	ldr	r3, [pc, #436]	; (8002340 <HAL_RCC_GetSysClockFreq+0x200>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d063      	beq.n	800225e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002196:	4b6a      	ldr	r3, [pc, #424]	; (8002340 <HAL_RCC_GetSysClockFreq+0x200>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	099b      	lsrs	r3, r3, #6
 800219c:	2200      	movs	r2, #0
 800219e:	63bb      	str	r3, [r7, #56]	; 0x38
 80021a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80021a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021a8:	633b      	str	r3, [r7, #48]	; 0x30
 80021aa:	2300      	movs	r3, #0
 80021ac:	637b      	str	r3, [r7, #52]	; 0x34
 80021ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80021b2:	4622      	mov	r2, r4
 80021b4:	462b      	mov	r3, r5
 80021b6:	f04f 0000 	mov.w	r0, #0
 80021ba:	f04f 0100 	mov.w	r1, #0
 80021be:	0159      	lsls	r1, r3, #5
 80021c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021c4:	0150      	lsls	r0, r2, #5
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	4621      	mov	r1, r4
 80021cc:	1a51      	subs	r1, r2, r1
 80021ce:	6139      	str	r1, [r7, #16]
 80021d0:	4629      	mov	r1, r5
 80021d2:	eb63 0301 	sbc.w	r3, r3, r1
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	f04f 0200 	mov.w	r2, #0
 80021dc:	f04f 0300 	mov.w	r3, #0
 80021e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021e4:	4659      	mov	r1, fp
 80021e6:	018b      	lsls	r3, r1, #6
 80021e8:	4651      	mov	r1, sl
 80021ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021ee:	4651      	mov	r1, sl
 80021f0:	018a      	lsls	r2, r1, #6
 80021f2:	4651      	mov	r1, sl
 80021f4:	ebb2 0801 	subs.w	r8, r2, r1
 80021f8:	4659      	mov	r1, fp
 80021fa:	eb63 0901 	sbc.w	r9, r3, r1
 80021fe:	f04f 0200 	mov.w	r2, #0
 8002202:	f04f 0300 	mov.w	r3, #0
 8002206:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800220a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800220e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002212:	4690      	mov	r8, r2
 8002214:	4699      	mov	r9, r3
 8002216:	4623      	mov	r3, r4
 8002218:	eb18 0303 	adds.w	r3, r8, r3
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	462b      	mov	r3, r5
 8002220:	eb49 0303 	adc.w	r3, r9, r3
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	f04f 0200 	mov.w	r2, #0
 800222a:	f04f 0300 	mov.w	r3, #0
 800222e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002232:	4629      	mov	r1, r5
 8002234:	024b      	lsls	r3, r1, #9
 8002236:	4621      	mov	r1, r4
 8002238:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800223c:	4621      	mov	r1, r4
 800223e:	024a      	lsls	r2, r1, #9
 8002240:	4610      	mov	r0, r2
 8002242:	4619      	mov	r1, r3
 8002244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002246:	2200      	movs	r2, #0
 8002248:	62bb      	str	r3, [r7, #40]	; 0x28
 800224a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800224c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002250:	f7fe f82e 	bl	80002b0 <__aeabi_uldivmod>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4613      	mov	r3, r2
 800225a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800225c:	e058      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800225e:	4b38      	ldr	r3, [pc, #224]	; (8002340 <HAL_RCC_GetSysClockFreq+0x200>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	099b      	lsrs	r3, r3, #6
 8002264:	2200      	movs	r2, #0
 8002266:	4618      	mov	r0, r3
 8002268:	4611      	mov	r1, r2
 800226a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800226e:	623b      	str	r3, [r7, #32]
 8002270:	2300      	movs	r3, #0
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
 8002274:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002278:	4642      	mov	r2, r8
 800227a:	464b      	mov	r3, r9
 800227c:	f04f 0000 	mov.w	r0, #0
 8002280:	f04f 0100 	mov.w	r1, #0
 8002284:	0159      	lsls	r1, r3, #5
 8002286:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800228a:	0150      	lsls	r0, r2, #5
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4641      	mov	r1, r8
 8002292:	ebb2 0a01 	subs.w	sl, r2, r1
 8002296:	4649      	mov	r1, r9
 8002298:	eb63 0b01 	sbc.w	fp, r3, r1
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	f04f 0300 	mov.w	r3, #0
 80022a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022b0:	ebb2 040a 	subs.w	r4, r2, sl
 80022b4:	eb63 050b 	sbc.w	r5, r3, fp
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	f04f 0300 	mov.w	r3, #0
 80022c0:	00eb      	lsls	r3, r5, #3
 80022c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022c6:	00e2      	lsls	r2, r4, #3
 80022c8:	4614      	mov	r4, r2
 80022ca:	461d      	mov	r5, r3
 80022cc:	4643      	mov	r3, r8
 80022ce:	18e3      	adds	r3, r4, r3
 80022d0:	603b      	str	r3, [r7, #0]
 80022d2:	464b      	mov	r3, r9
 80022d4:	eb45 0303 	adc.w	r3, r5, r3
 80022d8:	607b      	str	r3, [r7, #4]
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	f04f 0300 	mov.w	r3, #0
 80022e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022e6:	4629      	mov	r1, r5
 80022e8:	028b      	lsls	r3, r1, #10
 80022ea:	4621      	mov	r1, r4
 80022ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022f0:	4621      	mov	r1, r4
 80022f2:	028a      	lsls	r2, r1, #10
 80022f4:	4610      	mov	r0, r2
 80022f6:	4619      	mov	r1, r3
 80022f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022fa:	2200      	movs	r2, #0
 80022fc:	61bb      	str	r3, [r7, #24]
 80022fe:	61fa      	str	r2, [r7, #28]
 8002300:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002304:	f7fd ffd4 	bl	80002b0 <__aeabi_uldivmod>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4613      	mov	r3, r2
 800230e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002310:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <HAL_RCC_GetSysClockFreq+0x200>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	0c1b      	lsrs	r3, r3, #16
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	3301      	adds	r3, #1
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002320:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002324:	fbb2 f3f3 	udiv	r3, r2, r3
 8002328:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800232a:	e002      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800232c:	4b05      	ldr	r3, [pc, #20]	; (8002344 <HAL_RCC_GetSysClockFreq+0x204>)
 800232e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002334:	4618      	mov	r0, r3
 8002336:	3750      	adds	r7, #80	; 0x50
 8002338:	46bd      	mov	sp, r7
 800233a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800
 8002344:	00f42400 	.word	0x00f42400
 8002348:	007a1200 	.word	0x007a1200

0800234c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <HAL_RCC_GetHCLKFreq+0x14>)
 8002352:	681b      	ldr	r3, [r3, #0]
}
 8002354:	4618      	mov	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	20000000 	.word	0x20000000

08002364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002368:	f7ff fff0 	bl	800234c <HAL_RCC_GetHCLKFreq>
 800236c:	4602      	mov	r2, r0
 800236e:	4b05      	ldr	r3, [pc, #20]	; (8002384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	0a9b      	lsrs	r3, r3, #10
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	4903      	ldr	r1, [pc, #12]	; (8002388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800237a:	5ccb      	ldrb	r3, [r1, r3]
 800237c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002380:	4618      	mov	r0, r3
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40023800 	.word	0x40023800
 8002388:	080073c0 	.word	0x080073c0

0800238c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002390:	f7ff ffdc 	bl	800234c <HAL_RCC_GetHCLKFreq>
 8002394:	4602      	mov	r2, r0
 8002396:	4b05      	ldr	r3, [pc, #20]	; (80023ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	0b5b      	lsrs	r3, r3, #13
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	4903      	ldr	r1, [pc, #12]	; (80023b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023a2:	5ccb      	ldrb	r3, [r1, r3]
 80023a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40023800 	.word	0x40023800
 80023b0:	080073c0 	.word	0x080073c0

080023b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	220f      	movs	r2, #15
 80023c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023c4:	4b12      	ldr	r3, [pc, #72]	; (8002410 <HAL_RCC_GetClockConfig+0x5c>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 0203 	and.w	r2, r3, #3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023d0:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <HAL_RCC_GetClockConfig+0x5c>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023dc:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <HAL_RCC_GetClockConfig+0x5c>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80023e8:	4b09      	ldr	r3, [pc, #36]	; (8002410 <HAL_RCC_GetClockConfig+0x5c>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	08db      	lsrs	r3, r3, #3
 80023ee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80023f6:	4b07      	ldr	r3, [pc, #28]	; (8002414 <HAL_RCC_GetClockConfig+0x60>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0207 	and.w	r2, r3, #7
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	601a      	str	r2, [r3, #0]
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	40023800 	.word	0x40023800
 8002414:	40023c00 	.word	0x40023c00

08002418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e041      	b.n	80024ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d106      	bne.n	8002444 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f839 	bl	80024b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2202      	movs	r2, #2
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3304      	adds	r3, #4
 8002454:	4619      	mov	r1, r3
 8002456:	4610      	mov	r0, r2
 8002458:	f000 f9ca 	bl	80027f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
	...

080024cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d001      	beq.n	80024e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e044      	b.n	800256e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0201 	orr.w	r2, r2, #1
 80024fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a1e      	ldr	r2, [pc, #120]	; (800257c <HAL_TIM_Base_Start_IT+0xb0>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d018      	beq.n	8002538 <HAL_TIM_Base_Start_IT+0x6c>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800250e:	d013      	beq.n	8002538 <HAL_TIM_Base_Start_IT+0x6c>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a1a      	ldr	r2, [pc, #104]	; (8002580 <HAL_TIM_Base_Start_IT+0xb4>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d00e      	beq.n	8002538 <HAL_TIM_Base_Start_IT+0x6c>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a19      	ldr	r2, [pc, #100]	; (8002584 <HAL_TIM_Base_Start_IT+0xb8>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d009      	beq.n	8002538 <HAL_TIM_Base_Start_IT+0x6c>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a17      	ldr	r2, [pc, #92]	; (8002588 <HAL_TIM_Base_Start_IT+0xbc>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d004      	beq.n	8002538 <HAL_TIM_Base_Start_IT+0x6c>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a16      	ldr	r2, [pc, #88]	; (800258c <HAL_TIM_Base_Start_IT+0xc0>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d111      	bne.n	800255c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2b06      	cmp	r3, #6
 8002548:	d010      	beq.n	800256c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f042 0201 	orr.w	r2, r2, #1
 8002558:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800255a:	e007      	b.n	800256c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0201 	orr.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	40010000 	.word	0x40010000
 8002580:	40000400 	.word	0x40000400
 8002584:	40000800 	.word	0x40000800
 8002588:	40000c00 	.word	0x40000c00
 800258c:	40014000 	.word	0x40014000

08002590 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d122      	bne.n	80025ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d11b      	bne.n	80025ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 0202 	mvn.w	r2, #2
 80025bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f8ee 	bl	80027b4 <HAL_TIM_IC_CaptureCallback>
 80025d8:	e005      	b.n	80025e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f8e0 	bl	80027a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 f8f1 	bl	80027c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	f003 0304 	and.w	r3, r3, #4
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d122      	bne.n	8002640 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b04      	cmp	r3, #4
 8002606:	d11b      	bne.n	8002640 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f06f 0204 	mvn.w	r2, #4
 8002610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2202      	movs	r2, #2
 8002616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f8c4 	bl	80027b4 <HAL_TIM_IC_CaptureCallback>
 800262c:	e005      	b.n	800263a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f8b6 	bl	80027a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f8c7 	bl	80027c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b08      	cmp	r3, #8
 800264c:	d122      	bne.n	8002694 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b08      	cmp	r3, #8
 800265a:	d11b      	bne.n	8002694 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f06f 0208 	mvn.w	r2, #8
 8002664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2204      	movs	r2, #4
 800266a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f89a 	bl	80027b4 <HAL_TIM_IC_CaptureCallback>
 8002680:	e005      	b.n	800268e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f88c 	bl	80027a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f89d 	bl	80027c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	f003 0310 	and.w	r3, r3, #16
 800269e:	2b10      	cmp	r3, #16
 80026a0:	d122      	bne.n	80026e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	2b10      	cmp	r3, #16
 80026ae:	d11b      	bne.n	80026e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f06f 0210 	mvn.w	r2, #16
 80026b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2208      	movs	r2, #8
 80026be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f870 	bl	80027b4 <HAL_TIM_IC_CaptureCallback>
 80026d4:	e005      	b.n	80026e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f862 	bl	80027a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f873 	bl	80027c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d10e      	bne.n	8002714 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b01      	cmp	r3, #1
 8002702:	d107      	bne.n	8002714 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f06f 0201 	mvn.w	r2, #1
 800270c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7fe fc86 	bl	8001020 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271e:	2b80      	cmp	r3, #128	; 0x80
 8002720:	d10e      	bne.n	8002740 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272c:	2b80      	cmp	r3, #128	; 0x80
 800272e:	d107      	bne.n	8002740 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f8e2 	bl	8002904 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800274a:	2b40      	cmp	r3, #64	; 0x40
 800274c:	d10e      	bne.n	800276c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002758:	2b40      	cmp	r3, #64	; 0x40
 800275a:	d107      	bne.n	800276c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f838 	bl	80027dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f003 0320 	and.w	r3, r3, #32
 8002776:	2b20      	cmp	r3, #32
 8002778:	d10e      	bne.n	8002798 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f003 0320 	and.w	r3, r3, #32
 8002784:	2b20      	cmp	r3, #32
 8002786:	d107      	bne.n	8002798 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f06f 0220 	mvn.w	r2, #32
 8002790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f8ac 	bl	80028f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002798:	bf00      	nop
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a34      	ldr	r2, [pc, #208]	; (80028d4 <TIM_Base_SetConfig+0xe4>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d00f      	beq.n	8002828 <TIM_Base_SetConfig+0x38>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800280e:	d00b      	beq.n	8002828 <TIM_Base_SetConfig+0x38>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a31      	ldr	r2, [pc, #196]	; (80028d8 <TIM_Base_SetConfig+0xe8>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d007      	beq.n	8002828 <TIM_Base_SetConfig+0x38>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a30      	ldr	r2, [pc, #192]	; (80028dc <TIM_Base_SetConfig+0xec>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d003      	beq.n	8002828 <TIM_Base_SetConfig+0x38>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a2f      	ldr	r2, [pc, #188]	; (80028e0 <TIM_Base_SetConfig+0xf0>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d108      	bne.n	800283a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800282e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4313      	orrs	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a25      	ldr	r2, [pc, #148]	; (80028d4 <TIM_Base_SetConfig+0xe4>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d01b      	beq.n	800287a <TIM_Base_SetConfig+0x8a>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002848:	d017      	beq.n	800287a <TIM_Base_SetConfig+0x8a>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a22      	ldr	r2, [pc, #136]	; (80028d8 <TIM_Base_SetConfig+0xe8>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d013      	beq.n	800287a <TIM_Base_SetConfig+0x8a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a21      	ldr	r2, [pc, #132]	; (80028dc <TIM_Base_SetConfig+0xec>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d00f      	beq.n	800287a <TIM_Base_SetConfig+0x8a>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a20      	ldr	r2, [pc, #128]	; (80028e0 <TIM_Base_SetConfig+0xf0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d00b      	beq.n	800287a <TIM_Base_SetConfig+0x8a>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a1f      	ldr	r2, [pc, #124]	; (80028e4 <TIM_Base_SetConfig+0xf4>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d007      	beq.n	800287a <TIM_Base_SetConfig+0x8a>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a1e      	ldr	r2, [pc, #120]	; (80028e8 <TIM_Base_SetConfig+0xf8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d003      	beq.n	800287a <TIM_Base_SetConfig+0x8a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a1d      	ldr	r2, [pc, #116]	; (80028ec <TIM_Base_SetConfig+0xfc>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d108      	bne.n	800288c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	4313      	orrs	r3, r2
 800288a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	4313      	orrs	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a08      	ldr	r2, [pc, #32]	; (80028d4 <TIM_Base_SetConfig+0xe4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d103      	bne.n	80028c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	691a      	ldr	r2, [r3, #16]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	615a      	str	r2, [r3, #20]
}
 80028c6:	bf00      	nop
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	40010000 	.word	0x40010000
 80028d8:	40000400 	.word	0x40000400
 80028dc:	40000800 	.word	0x40000800
 80028e0:	40000c00 	.word	0x40000c00
 80028e4:	40014000 	.word	0x40014000
 80028e8:	40014400 	.word	0x40014400
 80028ec:	40014800 	.word	0x40014800

080028f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e03f      	b.n	80029aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7fe fbb2 	bl	80010a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2224      	movs	r2, #36	; 0x24
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800295a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 fddb 	bl	8003518 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002970:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695a      	ldr	r2, [r3, #20]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002980:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68da      	ldr	r2, [r3, #12]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002990:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2220      	movs	r2, #32
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2220      	movs	r2, #32
 80029a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b08a      	sub	sp, #40	; 0x28
 80029b6:	af02      	add	r7, sp, #8
 80029b8:	60f8      	str	r0, [r7, #12]
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	603b      	str	r3, [r7, #0]
 80029be:	4613      	mov	r3, r2
 80029c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b20      	cmp	r3, #32
 80029d0:	d17c      	bne.n	8002acc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d002      	beq.n	80029de <HAL_UART_Transmit+0x2c>
 80029d8:	88fb      	ldrh	r3, [r7, #6]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e075      	b.n	8002ace <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_UART_Transmit+0x3e>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e06e      	b.n	8002ace <HAL_UART_Transmit+0x11c>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2221      	movs	r2, #33	; 0x21
 8002a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a06:	f7fe fcd5 	bl	80013b4 <HAL_GetTick>
 8002a0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	88fa      	ldrh	r2, [r7, #6]
 8002a10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	88fa      	ldrh	r2, [r7, #6]
 8002a16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a20:	d108      	bne.n	8002a34 <HAL_UART_Transmit+0x82>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d104      	bne.n	8002a34 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	61bb      	str	r3, [r7, #24]
 8002a32:	e003      	b.n	8002a3c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002a44:	e02a      	b.n	8002a9c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2180      	movs	r1, #128	; 0x80
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 fb1f 	bl	8003094 <UART_WaitOnFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e036      	b.n	8002ace <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10b      	bne.n	8002a7e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	3302      	adds	r3, #2
 8002a7a:	61bb      	str	r3, [r7, #24]
 8002a7c:	e007      	b.n	8002a8e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	781a      	ldrb	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	3b01      	subs	r3, #1
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1cf      	bne.n	8002a46 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	2200      	movs	r2, #0
 8002aae:	2140      	movs	r1, #64	; 0x40
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 faef 	bl	8003094 <UART_WaitOnFlagUntilTimeout>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e006      	b.n	8002ace <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	e000      	b.n	8002ace <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002acc:	2302      	movs	r3, #2
  }
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3720      	adds	r7, #32
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b084      	sub	sp, #16
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	60f8      	str	r0, [r7, #12]
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b20      	cmp	r3, #32
 8002aee:	d11d      	bne.n	8002b2c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d002      	beq.n	8002afc <HAL_UART_Receive_IT+0x26>
 8002af6:	88fb      	ldrh	r3, [r7, #6]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e016      	b.n	8002b2e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d101      	bne.n	8002b0e <HAL_UART_Receive_IT+0x38>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e00f      	b.n	8002b2e <HAL_UART_Receive_IT+0x58>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002b1c:	88fb      	ldrh	r3, [r7, #6]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 fb24 	bl	8003170 <UART_Start_Receive_IT>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	e000      	b.n	8002b2e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002b2c:	2302      	movs	r3, #2
  }
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b0ba      	sub	sp, #232	; 0xe8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002b76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10f      	bne.n	8002b9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b82:	f003 0320 	and.w	r3, r3, #32
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d009      	beq.n	8002b9e <HAL_UART_IRQHandler+0x66>
 8002b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b8e:	f003 0320 	and.w	r3, r3, #32
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fc03 	bl	80033a2 <UART_Receive_IT>
      return;
 8002b9c:	e256      	b.n	800304c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 80de 	beq.w	8002d64 <HAL_UART_IRQHandler+0x22c>
 8002ba8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d106      	bne.n	8002bc2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bb8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 80d1 	beq.w	8002d64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00b      	beq.n	8002be6 <HAL_UART_IRQHandler+0xae>
 8002bce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d005      	beq.n	8002be6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	f043 0201 	orr.w	r2, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00b      	beq.n	8002c0a <HAL_UART_IRQHandler+0xd2>
 8002bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d005      	beq.n	8002c0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f043 0202 	orr.w	r2, r3, #2
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00b      	beq.n	8002c2e <HAL_UART_IRQHandler+0xf6>
 8002c16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d005      	beq.n	8002c2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f043 0204 	orr.w	r2, r3, #4
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d011      	beq.n	8002c5e <HAL_UART_IRQHandler+0x126>
 8002c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c3e:	f003 0320 	and.w	r3, r3, #32
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d105      	bne.n	8002c52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d005      	beq.n	8002c5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	f043 0208 	orr.w	r2, r3, #8
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 81ed 	beq.w	8003042 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c6c:	f003 0320 	and.w	r3, r3, #32
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d008      	beq.n	8002c86 <HAL_UART_IRQHandler+0x14e>
 8002c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c78:	f003 0320 	and.w	r3, r3, #32
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 fb8e 	bl	80033a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c90:	2b40      	cmp	r3, #64	; 0x40
 8002c92:	bf0c      	ite	eq
 8002c94:	2301      	moveq	r3, #1
 8002c96:	2300      	movne	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d103      	bne.n	8002cb2 <HAL_UART_IRQHandler+0x17a>
 8002caa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d04f      	beq.n	8002d52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fa96 	bl	80031e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc2:	2b40      	cmp	r3, #64	; 0x40
 8002cc4:	d141      	bne.n	8002d4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	3314      	adds	r3, #20
 8002ccc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cd4:	e853 3f00 	ldrex	r3, [r3]
 8002cd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002cdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ce0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ce4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	3314      	adds	r3, #20
 8002cee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002cf2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002cf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002cfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d02:	e841 2300 	strex	r3, r2, [r1]
 8002d06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002d0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1d9      	bne.n	8002cc6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d013      	beq.n	8002d42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1e:	4a7d      	ldr	r2, [pc, #500]	; (8002f14 <HAL_UART_IRQHandler+0x3dc>)
 8002d20:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fe fca2 	bl	8001670 <HAL_DMA_Abort_IT>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d016      	beq.n	8002d60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d40:	e00e      	b.n	8002d60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f990 	bl	8003068 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d48:	e00a      	b.n	8002d60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f98c 	bl	8003068 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d50:	e006      	b.n	8002d60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f988 	bl	8003068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002d5e:	e170      	b.n	8003042 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d60:	bf00      	nop
    return;
 8002d62:	e16e      	b.n	8003042 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	f040 814a 	bne.w	8003002 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d72:	f003 0310 	and.w	r3, r3, #16
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 8143 	beq.w	8003002 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d80:	f003 0310 	and.w	r3, r3, #16
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 813c 	beq.w	8003002 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002daa:	2b40      	cmp	r3, #64	; 0x40
 8002dac:	f040 80b4 	bne.w	8002f18 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002dbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 8140 	beq.w	8003046 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002dca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	f080 8139 	bcs.w	8003046 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002dda:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002de6:	f000 8088 	beq.w	8002efa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	330c      	adds	r3, #12
 8002df0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002df8:	e853 3f00 	ldrex	r3, [r3]
 8002dfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002e00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	330c      	adds	r3, #12
 8002e12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002e16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002e22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e26:	e841 2300 	strex	r3, r2, [r1]
 8002e2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002e2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1d9      	bne.n	8002dea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	3314      	adds	r3, #20
 8002e3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e40:	e853 3f00 	ldrex	r3, [r3]
 8002e44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002e46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e48:	f023 0301 	bic.w	r3, r3, #1
 8002e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	3314      	adds	r3, #20
 8002e56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e66:	e841 2300 	strex	r3, r2, [r1]
 8002e6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1e1      	bne.n	8002e36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	3314      	adds	r3, #20
 8002e78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e7c:	e853 3f00 	ldrex	r3, [r3]
 8002e80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	3314      	adds	r3, #20
 8002e92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e9e:	e841 2300 	strex	r3, r2, [r1]
 8002ea2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002ea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1e3      	bne.n	8002e72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2220      	movs	r2, #32
 8002eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	330c      	adds	r3, #12
 8002ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec2:	e853 3f00 	ldrex	r3, [r3]
 8002ec6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eca:	f023 0310 	bic.w	r3, r3, #16
 8002ece:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	330c      	adds	r3, #12
 8002ed8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002edc:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ede:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ee2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ee4:	e841 2300 	strex	r3, r2, [r1]
 8002ee8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002eea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1e3      	bne.n	8002eb8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fe fb4b 	bl	8001590 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	4619      	mov	r1, r3
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f8b6 	bl	800307c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f10:	e099      	b.n	8003046 <HAL_UART_IRQHandler+0x50e>
 8002f12:	bf00      	nop
 8002f14:	080032ab 	.word	0x080032ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 808b 	beq.w	800304a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002f34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 8086 	beq.w	800304a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	330c      	adds	r3, #12
 8002f44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f48:	e853 3f00 	ldrex	r3, [r3]
 8002f4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	330c      	adds	r3, #12
 8002f5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002f62:	647a      	str	r2, [r7, #68]	; 0x44
 8002f64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f6a:	e841 2300 	strex	r3, r2, [r1]
 8002f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1e3      	bne.n	8002f3e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	3314      	adds	r3, #20
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	e853 3f00 	ldrex	r3, [r3]
 8002f84:	623b      	str	r3, [r7, #32]
   return(result);
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	f023 0301 	bic.w	r3, r3, #1
 8002f8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	3314      	adds	r3, #20
 8002f96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f9a:	633a      	str	r2, [r7, #48]	; 0x30
 8002f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fa2:	e841 2300 	strex	r3, r2, [r1]
 8002fa6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1e3      	bne.n	8002f76 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	330c      	adds	r3, #12
 8002fc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	e853 3f00 	ldrex	r3, [r3]
 8002fca:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f023 0310 	bic.w	r3, r3, #16
 8002fd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	330c      	adds	r3, #12
 8002fdc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002fe0:	61fa      	str	r2, [r7, #28]
 8002fe2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe4:	69b9      	ldr	r1, [r7, #24]
 8002fe6:	69fa      	ldr	r2, [r7, #28]
 8002fe8:	e841 2300 	strex	r3, r2, [r1]
 8002fec:	617b      	str	r3, [r7, #20]
   return(result);
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1e3      	bne.n	8002fbc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ff4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f83e 	bl	800307c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003000:	e023      	b.n	800304a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300a:	2b00      	cmp	r3, #0
 800300c:	d009      	beq.n	8003022 <HAL_UART_IRQHandler+0x4ea>
 800300e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f959 	bl	80032d2 <UART_Transmit_IT>
    return;
 8003020:	e014      	b.n	800304c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00e      	beq.n	800304c <HAL_UART_IRQHandler+0x514>
 800302e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003036:	2b00      	cmp	r3, #0
 8003038:	d008      	beq.n	800304c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f999 	bl	8003372 <UART_EndTransmit_IT>
    return;
 8003040:	e004      	b.n	800304c <HAL_UART_IRQHandler+0x514>
    return;
 8003042:	bf00      	nop
 8003044:	e002      	b.n	800304c <HAL_UART_IRQHandler+0x514>
      return;
 8003046:	bf00      	nop
 8003048:	e000      	b.n	800304c <HAL_UART_IRQHandler+0x514>
      return;
 800304a:	bf00      	nop
  }
}
 800304c:	37e8      	adds	r7, #232	; 0xe8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop

08003054 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b090      	sub	sp, #64	; 0x40
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	603b      	str	r3, [r7, #0]
 80030a0:	4613      	mov	r3, r2
 80030a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030a4:	e050      	b.n	8003148 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ac:	d04c      	beq.n	8003148 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d007      	beq.n	80030c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80030b4:	f7fe f97e 	bl	80013b4 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d241      	bcs.n	8003148 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	330c      	adds	r3, #12
 80030ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ce:	e853 3f00 	ldrex	r3, [r3]
 80030d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	330c      	adds	r3, #12
 80030e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030e4:	637a      	str	r2, [r7, #52]	; 0x34
 80030e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030ec:	e841 2300 	strex	r3, r2, [r1]
 80030f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80030f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1e5      	bne.n	80030c4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	3314      	adds	r3, #20
 80030fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	e853 3f00 	ldrex	r3, [r3]
 8003106:	613b      	str	r3, [r7, #16]
   return(result);
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	f023 0301 	bic.w	r3, r3, #1
 800310e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	3314      	adds	r3, #20
 8003116:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003118:	623a      	str	r2, [r7, #32]
 800311a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800311c:	69f9      	ldr	r1, [r7, #28]
 800311e:	6a3a      	ldr	r2, [r7, #32]
 8003120:	e841 2300 	strex	r3, r2, [r1]
 8003124:	61bb      	str	r3, [r7, #24]
   return(result);
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1e5      	bne.n	80030f8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2220      	movs	r2, #32
 8003138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e00f      	b.n	8003168 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	4013      	ands	r3, r2
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	429a      	cmp	r2, r3
 8003156:	bf0c      	ite	eq
 8003158:	2301      	moveq	r3, #1
 800315a:	2300      	movne	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	461a      	mov	r2, r3
 8003160:	79fb      	ldrb	r3, [r7, #7]
 8003162:	429a      	cmp	r2, r3
 8003164:	d09f      	beq.n	80030a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3740      	adds	r7, #64	; 0x40
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	4613      	mov	r3, r2
 800317c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	88fa      	ldrh	r2, [r7, #6]
 8003188:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	88fa      	ldrh	r2, [r7, #6]
 800318e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2222      	movs	r2, #34	; 0x22
 800319a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031b4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	695a      	ldr	r2, [r3, #20]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f042 0201 	orr.w	r2, r2, #1
 80031c4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68da      	ldr	r2, [r3, #12]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f042 0220 	orr.w	r2, r2, #32
 80031d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b095      	sub	sp, #84	; 0x54
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	330c      	adds	r3, #12
 80031f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f6:	e853 3f00 	ldrex	r3, [r3]
 80031fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80031fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	330c      	adds	r3, #12
 800320a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800320c:	643a      	str	r2, [r7, #64]	; 0x40
 800320e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003210:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003212:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003214:	e841 2300 	strex	r3, r2, [r1]
 8003218:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800321a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1e5      	bne.n	80031ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	3314      	adds	r3, #20
 8003226:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	e853 3f00 	ldrex	r3, [r3]
 800322e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f023 0301 	bic.w	r3, r3, #1
 8003236:	64bb      	str	r3, [r7, #72]	; 0x48
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	3314      	adds	r3, #20
 800323e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003240:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003242:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003244:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003248:	e841 2300 	strex	r3, r2, [r1]
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1e5      	bne.n	8003220 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003258:	2b01      	cmp	r3, #1
 800325a:	d119      	bne.n	8003290 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	330c      	adds	r3, #12
 8003262:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	e853 3f00 	ldrex	r3, [r3]
 800326a:	60bb      	str	r3, [r7, #8]
   return(result);
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f023 0310 	bic.w	r3, r3, #16
 8003272:	647b      	str	r3, [r7, #68]	; 0x44
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	330c      	adds	r3, #12
 800327a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800327c:	61ba      	str	r2, [r7, #24]
 800327e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003280:	6979      	ldr	r1, [r7, #20]
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	e841 2300 	strex	r3, r2, [r1]
 8003288:	613b      	str	r3, [r7, #16]
   return(result);
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1e5      	bne.n	800325c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2220      	movs	r2, #32
 8003294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800329e:	bf00      	nop
 80032a0:	3754      	adds	r7, #84	; 0x54
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b084      	sub	sp, #16
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f7ff fecf 	bl	8003068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032ca:	bf00      	nop
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b085      	sub	sp, #20
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b21      	cmp	r3, #33	; 0x21
 80032e4:	d13e      	bne.n	8003364 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ee:	d114      	bne.n	800331a <UART_Transmit_IT+0x48>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d110      	bne.n	800331a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	461a      	mov	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800330c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	1c9a      	adds	r2, r3, #2
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	621a      	str	r2, [r3, #32]
 8003318:	e008      	b.n	800332c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	1c59      	adds	r1, r3, #1
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6211      	str	r1, [r2, #32]
 8003324:	781a      	ldrb	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003330:	b29b      	uxth	r3, r3
 8003332:	3b01      	subs	r3, #1
 8003334:	b29b      	uxth	r3, r3
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	4619      	mov	r1, r3
 800333a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10f      	bne.n	8003360 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68da      	ldr	r2, [r3, #12]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800334e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800335e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003360:	2300      	movs	r3, #0
 8003362:	e000      	b.n	8003366 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003364:	2302      	movs	r3, #2
  }
}
 8003366:	4618      	mov	r0, r3
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b082      	sub	sp, #8
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003388:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2220      	movs	r2, #32
 800338e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7ff fe5e 	bl	8003054 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b08c      	sub	sp, #48	; 0x30
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b22      	cmp	r3, #34	; 0x22
 80033b4:	f040 80ab 	bne.w	800350e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c0:	d117      	bne.n	80033f2 <UART_Receive_IT+0x50>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d113      	bne.n	80033f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80033ca:	2300      	movs	r3, #0
 80033cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	b29b      	uxth	r3, r3
 80033dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ea:	1c9a      	adds	r2, r3, #2
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	629a      	str	r2, [r3, #40]	; 0x28
 80033f0:	e026      	b.n	8003440 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003404:	d007      	beq.n	8003416 <UART_Receive_IT+0x74>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10a      	bne.n	8003424 <UART_Receive_IT+0x82>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d106      	bne.n	8003424 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	b2da      	uxtb	r2, r3
 800341e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003420:	701a      	strb	r2, [r3, #0]
 8003422:	e008      	b.n	8003436 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	b2db      	uxtb	r3, r3
 800342c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003430:	b2da      	uxtb	r2, r3
 8003432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003434:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343a:	1c5a      	adds	r2, r3, #1
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003444:	b29b      	uxth	r3, r3
 8003446:	3b01      	subs	r3, #1
 8003448:	b29b      	uxth	r3, r3
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	4619      	mov	r1, r3
 800344e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003450:	2b00      	cmp	r3, #0
 8003452:	d15a      	bne.n	800350a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0220 	bic.w	r2, r2, #32
 8003462:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003472:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	695a      	ldr	r2, [r3, #20]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0201 	bic.w	r2, r2, #1
 8003482:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003490:	2b01      	cmp	r3, #1
 8003492:	d135      	bne.n	8003500 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	330c      	adds	r3, #12
 80034a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	e853 3f00 	ldrex	r3, [r3]
 80034a8:	613b      	str	r3, [r7, #16]
   return(result);
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f023 0310 	bic.w	r3, r3, #16
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	330c      	adds	r3, #12
 80034b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ba:	623a      	str	r2, [r7, #32]
 80034bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034be:	69f9      	ldr	r1, [r7, #28]
 80034c0:	6a3a      	ldr	r2, [r7, #32]
 80034c2:	e841 2300 	strex	r3, r2, [r1]
 80034c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1e5      	bne.n	800349a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0310 	and.w	r3, r3, #16
 80034d8:	2b10      	cmp	r3, #16
 80034da:	d10a      	bne.n	80034f2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034dc:	2300      	movs	r3, #0
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034f6:	4619      	mov	r1, r3
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f7ff fdbf 	bl	800307c <HAL_UARTEx_RxEventCallback>
 80034fe:	e002      	b.n	8003506 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7fd fad1 	bl	8000aa8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003506:	2300      	movs	r3, #0
 8003508:	e002      	b.n	8003510 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800350a:	2300      	movs	r3, #0
 800350c:	e000      	b.n	8003510 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800350e:	2302      	movs	r3, #2
  }
}
 8003510:	4618      	mov	r0, r3
 8003512:	3730      	adds	r7, #48	; 0x30
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800351c:	b0c0      	sub	sp, #256	; 0x100
 800351e:	af00      	add	r7, sp, #0
 8003520:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003534:	68d9      	ldr	r1, [r3, #12]
 8003536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	ea40 0301 	orr.w	r3, r0, r1
 8003540:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	431a      	orrs	r2, r3
 8003550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	431a      	orrs	r2, r3
 8003558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003570:	f021 010c 	bic.w	r1, r1, #12
 8003574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800357e:	430b      	orrs	r3, r1
 8003580:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800358e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003592:	6999      	ldr	r1, [r3, #24]
 8003594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	ea40 0301 	orr.w	r3, r0, r1
 800359e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	4b8f      	ldr	r3, [pc, #572]	; (80037e4 <UART_SetConfig+0x2cc>)
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d005      	beq.n	80035b8 <UART_SetConfig+0xa0>
 80035ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	4b8d      	ldr	r3, [pc, #564]	; (80037e8 <UART_SetConfig+0x2d0>)
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d104      	bne.n	80035c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035b8:	f7fe fee8 	bl	800238c <HAL_RCC_GetPCLK2Freq>
 80035bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80035c0:	e003      	b.n	80035ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035c2:	f7fe fecf 	bl	8002364 <HAL_RCC_GetPCLK1Freq>
 80035c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035d4:	f040 810c 	bne.w	80037f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035dc:	2200      	movs	r2, #0
 80035de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80035e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80035e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80035ea:	4622      	mov	r2, r4
 80035ec:	462b      	mov	r3, r5
 80035ee:	1891      	adds	r1, r2, r2
 80035f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80035f2:	415b      	adcs	r3, r3
 80035f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80035fa:	4621      	mov	r1, r4
 80035fc:	eb12 0801 	adds.w	r8, r2, r1
 8003600:	4629      	mov	r1, r5
 8003602:	eb43 0901 	adc.w	r9, r3, r1
 8003606:	f04f 0200 	mov.w	r2, #0
 800360a:	f04f 0300 	mov.w	r3, #0
 800360e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003612:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003616:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800361a:	4690      	mov	r8, r2
 800361c:	4699      	mov	r9, r3
 800361e:	4623      	mov	r3, r4
 8003620:	eb18 0303 	adds.w	r3, r8, r3
 8003624:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003628:	462b      	mov	r3, r5
 800362a:	eb49 0303 	adc.w	r3, r9, r3
 800362e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800363e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003642:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003646:	460b      	mov	r3, r1
 8003648:	18db      	adds	r3, r3, r3
 800364a:	653b      	str	r3, [r7, #80]	; 0x50
 800364c:	4613      	mov	r3, r2
 800364e:	eb42 0303 	adc.w	r3, r2, r3
 8003652:	657b      	str	r3, [r7, #84]	; 0x54
 8003654:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003658:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800365c:	f7fc fe28 	bl	80002b0 <__aeabi_uldivmod>
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	4b61      	ldr	r3, [pc, #388]	; (80037ec <UART_SetConfig+0x2d4>)
 8003666:	fba3 2302 	umull	r2, r3, r3, r2
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	011c      	lsls	r4, r3, #4
 800366e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003672:	2200      	movs	r2, #0
 8003674:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003678:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800367c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003680:	4642      	mov	r2, r8
 8003682:	464b      	mov	r3, r9
 8003684:	1891      	adds	r1, r2, r2
 8003686:	64b9      	str	r1, [r7, #72]	; 0x48
 8003688:	415b      	adcs	r3, r3
 800368a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800368c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003690:	4641      	mov	r1, r8
 8003692:	eb12 0a01 	adds.w	sl, r2, r1
 8003696:	4649      	mov	r1, r9
 8003698:	eb43 0b01 	adc.w	fp, r3, r1
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	f04f 0300 	mov.w	r3, #0
 80036a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036b0:	4692      	mov	sl, r2
 80036b2:	469b      	mov	fp, r3
 80036b4:	4643      	mov	r3, r8
 80036b6:	eb1a 0303 	adds.w	r3, sl, r3
 80036ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036be:	464b      	mov	r3, r9
 80036c0:	eb4b 0303 	adc.w	r3, fp, r3
 80036c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80036c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80036d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80036dc:	460b      	mov	r3, r1
 80036de:	18db      	adds	r3, r3, r3
 80036e0:	643b      	str	r3, [r7, #64]	; 0x40
 80036e2:	4613      	mov	r3, r2
 80036e4:	eb42 0303 	adc.w	r3, r2, r3
 80036e8:	647b      	str	r3, [r7, #68]	; 0x44
 80036ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80036f2:	f7fc fddd 	bl	80002b0 <__aeabi_uldivmod>
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	4611      	mov	r1, r2
 80036fc:	4b3b      	ldr	r3, [pc, #236]	; (80037ec <UART_SetConfig+0x2d4>)
 80036fe:	fba3 2301 	umull	r2, r3, r3, r1
 8003702:	095b      	lsrs	r3, r3, #5
 8003704:	2264      	movs	r2, #100	; 0x64
 8003706:	fb02 f303 	mul.w	r3, r2, r3
 800370a:	1acb      	subs	r3, r1, r3
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003712:	4b36      	ldr	r3, [pc, #216]	; (80037ec <UART_SetConfig+0x2d4>)
 8003714:	fba3 2302 	umull	r2, r3, r3, r2
 8003718:	095b      	lsrs	r3, r3, #5
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003720:	441c      	add	r4, r3
 8003722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003726:	2200      	movs	r2, #0
 8003728:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800372c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003730:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003734:	4642      	mov	r2, r8
 8003736:	464b      	mov	r3, r9
 8003738:	1891      	adds	r1, r2, r2
 800373a:	63b9      	str	r1, [r7, #56]	; 0x38
 800373c:	415b      	adcs	r3, r3
 800373e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003740:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003744:	4641      	mov	r1, r8
 8003746:	1851      	adds	r1, r2, r1
 8003748:	6339      	str	r1, [r7, #48]	; 0x30
 800374a:	4649      	mov	r1, r9
 800374c:	414b      	adcs	r3, r1
 800374e:	637b      	str	r3, [r7, #52]	; 0x34
 8003750:	f04f 0200 	mov.w	r2, #0
 8003754:	f04f 0300 	mov.w	r3, #0
 8003758:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800375c:	4659      	mov	r1, fp
 800375e:	00cb      	lsls	r3, r1, #3
 8003760:	4651      	mov	r1, sl
 8003762:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003766:	4651      	mov	r1, sl
 8003768:	00ca      	lsls	r2, r1, #3
 800376a:	4610      	mov	r0, r2
 800376c:	4619      	mov	r1, r3
 800376e:	4603      	mov	r3, r0
 8003770:	4642      	mov	r2, r8
 8003772:	189b      	adds	r3, r3, r2
 8003774:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003778:	464b      	mov	r3, r9
 800377a:	460a      	mov	r2, r1
 800377c:	eb42 0303 	adc.w	r3, r2, r3
 8003780:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003790:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003794:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003798:	460b      	mov	r3, r1
 800379a:	18db      	adds	r3, r3, r3
 800379c:	62bb      	str	r3, [r7, #40]	; 0x28
 800379e:	4613      	mov	r3, r2
 80037a0:	eb42 0303 	adc.w	r3, r2, r3
 80037a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80037ae:	f7fc fd7f 	bl	80002b0 <__aeabi_uldivmod>
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	4b0d      	ldr	r3, [pc, #52]	; (80037ec <UART_SetConfig+0x2d4>)
 80037b8:	fba3 1302 	umull	r1, r3, r3, r2
 80037bc:	095b      	lsrs	r3, r3, #5
 80037be:	2164      	movs	r1, #100	; 0x64
 80037c0:	fb01 f303 	mul.w	r3, r1, r3
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	3332      	adds	r3, #50	; 0x32
 80037ca:	4a08      	ldr	r2, [pc, #32]	; (80037ec <UART_SetConfig+0x2d4>)
 80037cc:	fba2 2303 	umull	r2, r3, r2, r3
 80037d0:	095b      	lsrs	r3, r3, #5
 80037d2:	f003 0207 	and.w	r2, r3, #7
 80037d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4422      	add	r2, r4
 80037de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037e0:	e105      	b.n	80039ee <UART_SetConfig+0x4d6>
 80037e2:	bf00      	nop
 80037e4:	40011000 	.word	0x40011000
 80037e8:	40011400 	.word	0x40011400
 80037ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037f4:	2200      	movs	r2, #0
 80037f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80037fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003802:	4642      	mov	r2, r8
 8003804:	464b      	mov	r3, r9
 8003806:	1891      	adds	r1, r2, r2
 8003808:	6239      	str	r1, [r7, #32]
 800380a:	415b      	adcs	r3, r3
 800380c:	627b      	str	r3, [r7, #36]	; 0x24
 800380e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003812:	4641      	mov	r1, r8
 8003814:	1854      	adds	r4, r2, r1
 8003816:	4649      	mov	r1, r9
 8003818:	eb43 0501 	adc.w	r5, r3, r1
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	f04f 0300 	mov.w	r3, #0
 8003824:	00eb      	lsls	r3, r5, #3
 8003826:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800382a:	00e2      	lsls	r2, r4, #3
 800382c:	4614      	mov	r4, r2
 800382e:	461d      	mov	r5, r3
 8003830:	4643      	mov	r3, r8
 8003832:	18e3      	adds	r3, r4, r3
 8003834:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003838:	464b      	mov	r3, r9
 800383a:	eb45 0303 	adc.w	r3, r5, r3
 800383e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800384e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800385e:	4629      	mov	r1, r5
 8003860:	008b      	lsls	r3, r1, #2
 8003862:	4621      	mov	r1, r4
 8003864:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003868:	4621      	mov	r1, r4
 800386a:	008a      	lsls	r2, r1, #2
 800386c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003870:	f7fc fd1e 	bl	80002b0 <__aeabi_uldivmod>
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	4b60      	ldr	r3, [pc, #384]	; (80039fc <UART_SetConfig+0x4e4>)
 800387a:	fba3 2302 	umull	r2, r3, r3, r2
 800387e:	095b      	lsrs	r3, r3, #5
 8003880:	011c      	lsls	r4, r3, #4
 8003882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003886:	2200      	movs	r2, #0
 8003888:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800388c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003890:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003894:	4642      	mov	r2, r8
 8003896:	464b      	mov	r3, r9
 8003898:	1891      	adds	r1, r2, r2
 800389a:	61b9      	str	r1, [r7, #24]
 800389c:	415b      	adcs	r3, r3
 800389e:	61fb      	str	r3, [r7, #28]
 80038a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038a4:	4641      	mov	r1, r8
 80038a6:	1851      	adds	r1, r2, r1
 80038a8:	6139      	str	r1, [r7, #16]
 80038aa:	4649      	mov	r1, r9
 80038ac:	414b      	adcs	r3, r1
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038bc:	4659      	mov	r1, fp
 80038be:	00cb      	lsls	r3, r1, #3
 80038c0:	4651      	mov	r1, sl
 80038c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038c6:	4651      	mov	r1, sl
 80038c8:	00ca      	lsls	r2, r1, #3
 80038ca:	4610      	mov	r0, r2
 80038cc:	4619      	mov	r1, r3
 80038ce:	4603      	mov	r3, r0
 80038d0:	4642      	mov	r2, r8
 80038d2:	189b      	adds	r3, r3, r2
 80038d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038d8:	464b      	mov	r3, r9
 80038da:	460a      	mov	r2, r1
 80038dc:	eb42 0303 	adc.w	r3, r2, r3
 80038e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80038ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	f04f 0300 	mov.w	r3, #0
 80038f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80038fc:	4649      	mov	r1, r9
 80038fe:	008b      	lsls	r3, r1, #2
 8003900:	4641      	mov	r1, r8
 8003902:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003906:	4641      	mov	r1, r8
 8003908:	008a      	lsls	r2, r1, #2
 800390a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800390e:	f7fc fccf 	bl	80002b0 <__aeabi_uldivmod>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4b39      	ldr	r3, [pc, #228]	; (80039fc <UART_SetConfig+0x4e4>)
 8003918:	fba3 1302 	umull	r1, r3, r3, r2
 800391c:	095b      	lsrs	r3, r3, #5
 800391e:	2164      	movs	r1, #100	; 0x64
 8003920:	fb01 f303 	mul.w	r3, r1, r3
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	3332      	adds	r3, #50	; 0x32
 800392a:	4a34      	ldr	r2, [pc, #208]	; (80039fc <UART_SetConfig+0x4e4>)
 800392c:	fba2 2303 	umull	r2, r3, r2, r3
 8003930:	095b      	lsrs	r3, r3, #5
 8003932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003936:	441c      	add	r4, r3
 8003938:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800393c:	2200      	movs	r2, #0
 800393e:	673b      	str	r3, [r7, #112]	; 0x70
 8003940:	677a      	str	r2, [r7, #116]	; 0x74
 8003942:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003946:	4642      	mov	r2, r8
 8003948:	464b      	mov	r3, r9
 800394a:	1891      	adds	r1, r2, r2
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	415b      	adcs	r3, r3
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003956:	4641      	mov	r1, r8
 8003958:	1851      	adds	r1, r2, r1
 800395a:	6039      	str	r1, [r7, #0]
 800395c:	4649      	mov	r1, r9
 800395e:	414b      	adcs	r3, r1
 8003960:	607b      	str	r3, [r7, #4]
 8003962:	f04f 0200 	mov.w	r2, #0
 8003966:	f04f 0300 	mov.w	r3, #0
 800396a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800396e:	4659      	mov	r1, fp
 8003970:	00cb      	lsls	r3, r1, #3
 8003972:	4651      	mov	r1, sl
 8003974:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003978:	4651      	mov	r1, sl
 800397a:	00ca      	lsls	r2, r1, #3
 800397c:	4610      	mov	r0, r2
 800397e:	4619      	mov	r1, r3
 8003980:	4603      	mov	r3, r0
 8003982:	4642      	mov	r2, r8
 8003984:	189b      	adds	r3, r3, r2
 8003986:	66bb      	str	r3, [r7, #104]	; 0x68
 8003988:	464b      	mov	r3, r9
 800398a:	460a      	mov	r2, r1
 800398c:	eb42 0303 	adc.w	r3, r2, r3
 8003990:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	663b      	str	r3, [r7, #96]	; 0x60
 800399c:	667a      	str	r2, [r7, #100]	; 0x64
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	f04f 0300 	mov.w	r3, #0
 80039a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80039aa:	4649      	mov	r1, r9
 80039ac:	008b      	lsls	r3, r1, #2
 80039ae:	4641      	mov	r1, r8
 80039b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039b4:	4641      	mov	r1, r8
 80039b6:	008a      	lsls	r2, r1, #2
 80039b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80039bc:	f7fc fc78 	bl	80002b0 <__aeabi_uldivmod>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4b0d      	ldr	r3, [pc, #52]	; (80039fc <UART_SetConfig+0x4e4>)
 80039c6:	fba3 1302 	umull	r1, r3, r3, r2
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	2164      	movs	r1, #100	; 0x64
 80039ce:	fb01 f303 	mul.w	r3, r1, r3
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	3332      	adds	r3, #50	; 0x32
 80039d8:	4a08      	ldr	r2, [pc, #32]	; (80039fc <UART_SetConfig+0x4e4>)
 80039da:	fba2 2303 	umull	r2, r3, r2, r3
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	f003 020f 	and.w	r2, r3, #15
 80039e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4422      	add	r2, r4
 80039ec:	609a      	str	r2, [r3, #8]
}
 80039ee:	bf00      	nop
 80039f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80039f4:	46bd      	mov	sp, r7
 80039f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039fa:	bf00      	nop
 80039fc:	51eb851f 	.word	0x51eb851f

08003a00 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003a0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a12:	2b84      	cmp	r3, #132	; 0x84
 8003a14:	d005      	beq.n	8003a22 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003a16:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	3303      	adds	r3, #3
 8003a20:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003a22:	68fb      	ldr	r3, [r7, #12]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a36:	f3ef 8305 	mrs	r3, IPSR
 8003a3a:	607b      	str	r3, [r7, #4]
  return(result);
 8003a3c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	bf14      	ite	ne
 8003a42:	2301      	movne	r3, #1
 8003a44:	2300      	moveq	r3, #0
 8003a46:	b2db      	uxtb	r3, r3
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003a58:	f001 fa6c 	bl	8004f34 <vTaskStartScheduler>
  
  return osOK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003a62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a64:	b089      	sub	sp, #36	; 0x24
 8003a66:	af04      	add	r7, sp, #16
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d020      	beq.n	8003ab6 <osThreadCreate+0x54>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d01c      	beq.n	8003ab6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685c      	ldr	r4, [r3, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681d      	ldr	r5, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691e      	ldr	r6, [r3, #16]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7ff ffb6 	bl	8003a00 <makeFreeRtosPriority>
 8003a94:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a9e:	9202      	str	r2, [sp, #8]
 8003aa0:	9301      	str	r3, [sp, #4]
 8003aa2:	9100      	str	r1, [sp, #0]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	4632      	mov	r2, r6
 8003aa8:	4629      	mov	r1, r5
 8003aaa:	4620      	mov	r0, r4
 8003aac:	f000 ffe8 	bl	8004a80 <xTaskCreateStatic>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	e01c      	b.n	8003af0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685c      	ldr	r4, [r3, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ac2:	b29e      	uxth	r6, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff ff98 	bl	8003a00 <makeFreeRtosPriority>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	f107 030c 	add.w	r3, r7, #12
 8003ad6:	9301      	str	r3, [sp, #4]
 8003ad8:	9200      	str	r2, [sp, #0]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	4632      	mov	r2, r6
 8003ade:	4629      	mov	r1, r5
 8003ae0:	4620      	mov	r0, r4
 8003ae2:	f001 f82a 	bl	8004b3a <xTaskCreate>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d001      	beq.n	8003af0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003aec:	2300      	movs	r3, #0
 8003aee:	e000      	b.n	8003af2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003af0:	68fb      	ldr	r3, [r7, #12]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003afa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b084      	sub	sp, #16
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <osDelay+0x16>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	e000      	b.n	8003b12 <osDelay+0x18>
 8003b10:	2301      	movs	r3, #1
 8003b12:	4618      	mov	r0, r3
 8003b14:	f001 f948 	bl	8004da8 <vTaskDelay>
  
  return osOK;
 8003b18:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af02      	add	r7, sp, #8
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8003b32:	2300      	movs	r3, #0
 8003b34:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8003b36:	f7ff ff7b 	bl	8003a30 <inHandlerMode>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d01c      	beq.n	8003b7a <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8003b40:	6839      	ldr	r1, [r7, #0]
 8003b42:	f107 0208 	add.w	r2, r7, #8
 8003b46:	f107 030c 	add.w	r3, r7, #12
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	2201      	movs	r2, #1
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f002 f8b9 	bl	8005cc8 <xTaskGenericNotifyFromISR>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d002      	beq.n	8003b62 <osSignalSet+0x3e>
      return 0x80000000;
 8003b5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003b60:	e019      	b.n	8003b96 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d015      	beq.n	8003b94 <osSignalSet+0x70>
 8003b68:	4b0d      	ldr	r3, [pc, #52]	; (8003ba0 <osSignalSet+0x7c>)
 8003b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	f3bf 8f6f 	isb	sy
 8003b78:	e00c      	b.n	8003b94 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8003b7a:	6839      	ldr	r1, [r7, #0]
 8003b7c:	f107 0308 	add.w	r3, r7, #8
 8003b80:	2201      	movs	r2, #1
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f001 ffea 	bl	8005b5c <xTaskGenericNotify>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d002      	beq.n	8003b94 <osSignalSet+0x70>
    return 0x80000000;
 8003b8e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003b92:	e000      	b.n	8003b96 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8003b94:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	e000ed04 	.word	0xe000ed04

08003ba4 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8003ba4:	b590      	push	{r4, r7, lr}
 8003ba6:	b089      	sub	sp, #36	; 0x24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbe:	d103      	bne.n	8003bc8 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8003bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc4:	61fb      	str	r3, [r7, #28]
 8003bc6:	e009      	b.n	8003bdc <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d006      	beq.n	8003bdc <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <osSignalWait+0x38>
      ticks = 1;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8003bdc:	f7ff ff28 	bl	8003a30 <inHandlerMode>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d002      	beq.n	8003bec <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8003be6:	2382      	movs	r3, #130	; 0x82
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	e01b      	b.n	8003c24 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8003bec:	68b9      	ldr	r1, [r7, #8]
 8003bee:	f107 0310 	add.w	r3, r7, #16
 8003bf2:	1d1a      	adds	r2, r3, #4
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	2000      	movs	r0, #0
 8003bf8:	f001 ff56 	bl	8005aa8 <xTaskNotifyWait>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d008      	beq.n	8003c14 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d102      	bne.n	8003c0e <osSignalWait+0x6a>
 8003c08:	2300      	movs	r3, #0
 8003c0a:	613b      	str	r3, [r7, #16]
 8003c0c:	e00a      	b.n	8003c24 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8003c0e:	2340      	movs	r3, #64	; 0x40
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	e007      	b.n	8003c24 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	da02      	bge.n	8003c20 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8003c1a:	2386      	movs	r3, #134	; 0x86
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	e001      	b.n	8003c24 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8003c20:	2308      	movs	r3, #8
 8003c22:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	461c      	mov	r4, r3
 8003c28:	f107 0310 	add.w	r3, r7, #16
 8003c2c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003c30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	3724      	adds	r7, #36	; 0x24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd90      	pop	{r4, r7, pc}

08003c3c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d007      	beq.n	8003c5c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	4619      	mov	r1, r3
 8003c52:	2001      	movs	r0, #1
 8003c54:	f000 fab9 	bl	80041ca <xQueueCreateMutexStatic>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	e003      	b.n	8003c64 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8003c5c:	2001      	movs	r0, #1
 8003c5e:	f000 fa9c 	bl	800419a <xQueueCreateMutex>
 8003c62:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003c76:	2300      	movs	r3, #0
 8003c78:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <osMutexWait+0x18>
    return osErrorParameter;
 8003c80:	2380      	movs	r3, #128	; 0x80
 8003c82:	e03a      	b.n	8003cfa <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8003c84:	2300      	movs	r3, #0
 8003c86:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c8e:	d103      	bne.n	8003c98 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8003c90:	f04f 33ff 	mov.w	r3, #4294967295
 8003c94:	60fb      	str	r3, [r7, #12]
 8003c96:	e009      	b.n	8003cac <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d006      	beq.n	8003cac <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <osMutexWait+0x40>
      ticks = 1;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003cac:	f7ff fec0 	bl	8003a30 <inHandlerMode>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d017      	beq.n	8003ce6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003cb6:	f107 0308 	add.w	r3, r7, #8
 8003cba:	461a      	mov	r2, r3
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fd36 	bl	8004730 <xQueueReceiveFromISR>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d001      	beq.n	8003cce <osMutexWait+0x62>
      return osErrorOS;
 8003cca:	23ff      	movs	r3, #255	; 0xff
 8003ccc:	e015      	b.n	8003cfa <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d011      	beq.n	8003cf8 <osMutexWait+0x8c>
 8003cd4:	4b0b      	ldr	r3, [pc, #44]	; (8003d04 <osMutexWait+0x98>)
 8003cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	f3bf 8f6f 	isb	sy
 8003ce4:	e008      	b.n	8003cf8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8003ce6:	68f9      	ldr	r1, [r7, #12]
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 fc15 	bl	8004518 <xQueueSemaphoreTake>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d001      	beq.n	8003cf8 <osMutexWait+0x8c>
    return osErrorOS;
 8003cf4:	23ff      	movs	r3, #255	; 0xff
 8003cf6:	e000      	b.n	8003cfa <osMutexWait+0x8e>
  }
  
  return osOK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	e000ed04 	.word	0xe000ed04

08003d08 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003d10:	2300      	movs	r3, #0
 8003d12:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003d14:	2300      	movs	r3, #0
 8003d16:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8003d18:	f7ff fe8a 	bl	8003a30 <inHandlerMode>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d016      	beq.n	8003d50 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003d22:	f107 0308 	add.w	r3, r7, #8
 8003d26:	4619      	mov	r1, r3
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 fb67 	bl	80043fc <xQueueGiveFromISR>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d001      	beq.n	8003d38 <osMutexRelease+0x30>
      return osErrorOS;
 8003d34:	23ff      	movs	r3, #255	; 0xff
 8003d36:	e017      	b.n	8003d68 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d013      	beq.n	8003d66 <osMutexRelease+0x5e>
 8003d3e:	4b0c      	ldr	r3, [pc, #48]	; (8003d70 <osMutexRelease+0x68>)
 8003d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	f3bf 8f4f 	dsb	sy
 8003d4a:	f3bf 8f6f 	isb	sy
 8003d4e:	e00a      	b.n	8003d66 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8003d50:	2300      	movs	r3, #0
 8003d52:	2200      	movs	r2, #0
 8003d54:	2100      	movs	r1, #0
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 fa52 	bl	8004200 <xQueueGenericSend>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d001      	beq.n	8003d66 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8003d62:	23ff      	movs	r3, #255	; 0xff
 8003d64:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8003d66:	68fb      	ldr	r3, [r7, #12]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	e000ed04 	.word	0xe000ed04

08003d74 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f001 f847 	bl	8004e10 <vTaskSuspend>
  
  return osOK;
 8003d82:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f103 0208 	add.w	r2, r3, #8
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f04f 32ff 	mov.w	r2, #4294967295
 8003da4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f103 0208 	add.w	r2, r3, #8
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f103 0208 	add.w	r2, r3, #8
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003de6:	b480      	push	{r7}
 8003de8:	b085      	sub	sp, #20
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	601a      	str	r2, [r3, #0]
}
 8003e22:	bf00      	nop
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b085      	sub	sp, #20
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
 8003e36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e44:	d103      	bne.n	8003e4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	e00c      	b.n	8003e68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	3308      	adds	r3, #8
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	e002      	b.n	8003e5c <vListInsert+0x2e>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d2f6      	bcs.n	8003e56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	601a      	str	r2, [r3, #0]
}
 8003e94:	bf00      	nop
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	6892      	ldr	r2, [r2, #8]
 8003eb6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6852      	ldr	r2, [r2, #4]
 8003ec0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d103      	bne.n	8003ed4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	1e5a      	subs	r2, r3, #1
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10a      	bne.n	8003f1e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0c:	f383 8811 	msr	BASEPRI, r3
 8003f10:	f3bf 8f6f 	isb	sy
 8003f14:	f3bf 8f4f 	dsb	sy
 8003f18:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f1a:	bf00      	nop
 8003f1c:	e7fe      	b.n	8003f1c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003f1e:	f002 f941 	bl	80061a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2a:	68f9      	ldr	r1, [r7, #12]
 8003f2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f2e:	fb01 f303 	mul.w	r3, r1, r3
 8003f32:	441a      	add	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	68f9      	ldr	r1, [r7, #12]
 8003f52:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f54:	fb01 f303 	mul.w	r3, r1, r3
 8003f58:	441a      	add	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	22ff      	movs	r2, #255	; 0xff
 8003f62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	22ff      	movs	r2, #255	; 0xff
 8003f6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d114      	bne.n	8003f9e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d01a      	beq.n	8003fb2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	3310      	adds	r3, #16
 8003f80:	4618      	mov	r0, r3
 8003f82:	f001 fa19 	bl	80053b8 <xTaskRemoveFromEventList>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d012      	beq.n	8003fb2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f8c:	4b0c      	ldr	r3, [pc, #48]	; (8003fc0 <xQueueGenericReset+0xcc>)
 8003f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	f3bf 8f6f 	isb	sy
 8003f9c:	e009      	b.n	8003fb2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	3310      	adds	r3, #16
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff fef2 	bl	8003d8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	3324      	adds	r3, #36	; 0x24
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff feed 	bl	8003d8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003fb2:	f002 f927 	bl	8006204 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003fb6:	2301      	movs	r3, #1
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	e000ed04 	.word	0xe000ed04

08003fc4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b08e      	sub	sp, #56	; 0x38
 8003fc8:	af02      	add	r7, sp, #8
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
 8003fd0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10a      	bne.n	8003fee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fdc:	f383 8811 	msr	BASEPRI, r3
 8003fe0:	f3bf 8f6f 	isb	sy
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003fea:	bf00      	nop
 8003fec:	e7fe      	b.n	8003fec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10a      	bne.n	800400a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff8:	f383 8811 	msr	BASEPRI, r3
 8003ffc:	f3bf 8f6f 	isb	sy
 8004000:	f3bf 8f4f 	dsb	sy
 8004004:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004006:	bf00      	nop
 8004008:	e7fe      	b.n	8004008 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <xQueueGenericCreateStatic+0x52>
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <xQueueGenericCreateStatic+0x56>
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <xQueueGenericCreateStatic+0x58>
 800401a:	2300      	movs	r3, #0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10a      	bne.n	8004036 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	623b      	str	r3, [r7, #32]
}
 8004032:	bf00      	nop
 8004034:	e7fe      	b.n	8004034 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d102      	bne.n	8004042 <xQueueGenericCreateStatic+0x7e>
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <xQueueGenericCreateStatic+0x82>
 8004042:	2301      	movs	r3, #1
 8004044:	e000      	b.n	8004048 <xQueueGenericCreateStatic+0x84>
 8004046:	2300      	movs	r3, #0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10a      	bne.n	8004062 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800404c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004050:	f383 8811 	msr	BASEPRI, r3
 8004054:	f3bf 8f6f 	isb	sy
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	61fb      	str	r3, [r7, #28]
}
 800405e:	bf00      	nop
 8004060:	e7fe      	b.n	8004060 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004062:	2348      	movs	r3, #72	; 0x48
 8004064:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2b48      	cmp	r3, #72	; 0x48
 800406a:	d00a      	beq.n	8004082 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	61bb      	str	r3, [r7, #24]
}
 800407e:	bf00      	nop
 8004080:	e7fe      	b.n	8004080 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004082:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00d      	beq.n	80040aa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800408e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004096:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800409a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	4613      	mov	r3, r2
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	68b9      	ldr	r1, [r7, #8]
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 f83f 	bl	8004128 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80040aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3730      	adds	r7, #48	; 0x30
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b08a      	sub	sp, #40	; 0x28
 80040b8:	af02      	add	r7, sp, #8
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	4613      	mov	r3, r2
 80040c0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10a      	bne.n	80040de <xQueueGenericCreate+0x2a>
	__asm volatile
 80040c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040cc:	f383 8811 	msr	BASEPRI, r3
 80040d0:	f3bf 8f6f 	isb	sy
 80040d4:	f3bf 8f4f 	dsb	sy
 80040d8:	613b      	str	r3, [r7, #16]
}
 80040da:	bf00      	nop
 80040dc:	e7fe      	b.n	80040dc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	fb02 f303 	mul.w	r3, r2, r3
 80040e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	3348      	adds	r3, #72	; 0x48
 80040ec:	4618      	mov	r0, r3
 80040ee:	f002 f97b 	bl	80063e8 <pvPortMalloc>
 80040f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d011      	beq.n	800411e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	3348      	adds	r3, #72	; 0x48
 8004102:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800410c:	79fa      	ldrb	r2, [r7, #7]
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	4613      	mov	r3, r2
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	68b9      	ldr	r1, [r7, #8]
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f000 f805 	bl	8004128 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800411e:	69bb      	ldr	r3, [r7, #24]
	}
 8004120:	4618      	mov	r0, r3
 8004122:	3720      	adds	r7, #32
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
 8004134:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d103      	bne.n	8004144 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	e002      	b.n	800414a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004156:	2101      	movs	r1, #1
 8004158:	69b8      	ldr	r0, [r7, #24]
 800415a:	f7ff fecb 	bl	8003ef4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800415e:	bf00      	nop
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00e      	beq.n	8004192 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004186:	2300      	movs	r3, #0
 8004188:	2200      	movs	r2, #0
 800418a:	2100      	movs	r1, #0
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f837 	bl	8004200 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004192:	bf00      	nop
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800419a:	b580      	push	{r7, lr}
 800419c:	b086      	sub	sp, #24
 800419e:	af00      	add	r7, sp, #0
 80041a0:	4603      	mov	r3, r0
 80041a2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80041a4:	2301      	movs	r3, #1
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	2300      	movs	r3, #0
 80041aa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80041ac:	79fb      	ldrb	r3, [r7, #7]
 80041ae:	461a      	mov	r2, r3
 80041b0:	6939      	ldr	r1, [r7, #16]
 80041b2:	6978      	ldr	r0, [r7, #20]
 80041b4:	f7ff ff7e 	bl	80040b4 <xQueueGenericCreate>
 80041b8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f7ff ffd3 	bl	8004166 <prvInitialiseMutex>

		return xNewQueue;
 80041c0:	68fb      	ldr	r3, [r7, #12]
	}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3718      	adds	r7, #24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b088      	sub	sp, #32
 80041ce:	af02      	add	r7, sp, #8
 80041d0:	4603      	mov	r3, r0
 80041d2:	6039      	str	r1, [r7, #0]
 80041d4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80041d6:	2301      	movs	r3, #1
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	2300      	movs	r3, #0
 80041dc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2200      	movs	r2, #0
 80041e6:	6939      	ldr	r1, [r7, #16]
 80041e8:	6978      	ldr	r0, [r7, #20]
 80041ea:	f7ff feeb 	bl	8003fc4 <xQueueGenericCreateStatic>
 80041ee:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f7ff ffb8 	bl	8004166 <prvInitialiseMutex>

		return xNewQueue;
 80041f6:	68fb      	ldr	r3, [r7, #12]
	}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08e      	sub	sp, #56	; 0x38
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800420e:	2300      	movs	r3, #0
 8004210:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10a      	bne.n	8004232 <xQueueGenericSend+0x32>
	__asm volatile
 800421c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004220:	f383 8811 	msr	BASEPRI, r3
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	f3bf 8f4f 	dsb	sy
 800422c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800422e:	bf00      	nop
 8004230:	e7fe      	b.n	8004230 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d103      	bne.n	8004240 <xQueueGenericSend+0x40>
 8004238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <xQueueGenericSend+0x44>
 8004240:	2301      	movs	r3, #1
 8004242:	e000      	b.n	8004246 <xQueueGenericSend+0x46>
 8004244:	2300      	movs	r3, #0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10a      	bne.n	8004260 <xQueueGenericSend+0x60>
	__asm volatile
 800424a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424e:	f383 8811 	msr	BASEPRI, r3
 8004252:	f3bf 8f6f 	isb	sy
 8004256:	f3bf 8f4f 	dsb	sy
 800425a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800425c:	bf00      	nop
 800425e:	e7fe      	b.n	800425e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	2b02      	cmp	r3, #2
 8004264:	d103      	bne.n	800426e <xQueueGenericSend+0x6e>
 8004266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426a:	2b01      	cmp	r3, #1
 800426c:	d101      	bne.n	8004272 <xQueueGenericSend+0x72>
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <xQueueGenericSend+0x74>
 8004272:	2300      	movs	r3, #0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10a      	bne.n	800428e <xQueueGenericSend+0x8e>
	__asm volatile
 8004278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427c:	f383 8811 	msr	BASEPRI, r3
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	623b      	str	r3, [r7, #32]
}
 800428a:	bf00      	nop
 800428c:	e7fe      	b.n	800428c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800428e:	f001 fa4f 	bl	8005730 <xTaskGetSchedulerState>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d102      	bne.n	800429e <xQueueGenericSend+0x9e>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <xQueueGenericSend+0xa2>
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <xQueueGenericSend+0xa4>
 80042a2:	2300      	movs	r3, #0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10a      	bne.n	80042be <xQueueGenericSend+0xbe>
	__asm volatile
 80042a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ac:	f383 8811 	msr	BASEPRI, r3
 80042b0:	f3bf 8f6f 	isb	sy
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	61fb      	str	r3, [r7, #28]
}
 80042ba:	bf00      	nop
 80042bc:	e7fe      	b.n	80042bc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042be:	f001 ff71 	bl	80061a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d302      	bcc.n	80042d4 <xQueueGenericSend+0xd4>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d129      	bne.n	8004328 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	68b9      	ldr	r1, [r7, #8]
 80042d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042da:	f000 fac1 	bl	8004860 <prvCopyDataToQueue>
 80042de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d010      	beq.n	800430a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ea:	3324      	adds	r3, #36	; 0x24
 80042ec:	4618      	mov	r0, r3
 80042ee:	f001 f863 	bl	80053b8 <xTaskRemoveFromEventList>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d013      	beq.n	8004320 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80042f8:	4b3f      	ldr	r3, [pc, #252]	; (80043f8 <xQueueGenericSend+0x1f8>)
 80042fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	f3bf 8f6f 	isb	sy
 8004308:	e00a      	b.n	8004320 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800430a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430c:	2b00      	cmp	r3, #0
 800430e:	d007      	beq.n	8004320 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004310:	4b39      	ldr	r3, [pc, #228]	; (80043f8 <xQueueGenericSend+0x1f8>)
 8004312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004320:	f001 ff70 	bl	8006204 <vPortExitCritical>
				return pdPASS;
 8004324:	2301      	movs	r3, #1
 8004326:	e063      	b.n	80043f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d103      	bne.n	8004336 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800432e:	f001 ff69 	bl	8006204 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004332:	2300      	movs	r3, #0
 8004334:	e05c      	b.n	80043f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004338:	2b00      	cmp	r3, #0
 800433a:	d106      	bne.n	800434a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800433c:	f107 0314 	add.w	r3, r7, #20
 8004340:	4618      	mov	r0, r3
 8004342:	f001 f89b 	bl	800547c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004346:	2301      	movs	r3, #1
 8004348:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800434a:	f001 ff5b 	bl	8006204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800434e:	f000 fe51 	bl	8004ff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004352:	f001 ff27 	bl	80061a4 <vPortEnterCritical>
 8004356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004358:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800435c:	b25b      	sxtb	r3, r3
 800435e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004362:	d103      	bne.n	800436c <xQueueGenericSend+0x16c>
 8004364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800436c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004372:	b25b      	sxtb	r3, r3
 8004374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004378:	d103      	bne.n	8004382 <xQueueGenericSend+0x182>
 800437a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004382:	f001 ff3f 	bl	8006204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004386:	1d3a      	adds	r2, r7, #4
 8004388:	f107 0314 	add.w	r3, r7, #20
 800438c:	4611      	mov	r1, r2
 800438e:	4618      	mov	r0, r3
 8004390:	f001 f88a 	bl	80054a8 <xTaskCheckForTimeOut>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d124      	bne.n	80043e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800439a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800439c:	f000 fb58 	bl	8004a50 <prvIsQueueFull>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d018      	beq.n	80043d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80043a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a8:	3310      	adds	r3, #16
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	4611      	mov	r1, r2
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 ffde 	bl	8005370 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80043b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043b6:	f000 fae3 	bl	8004980 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80043ba:	f000 fe29 	bl	8005010 <xTaskResumeAll>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f47f af7c 	bne.w	80042be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80043c6:	4b0c      	ldr	r3, [pc, #48]	; (80043f8 <xQueueGenericSend+0x1f8>)
 80043c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	e772      	b.n	80042be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80043d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043da:	f000 fad1 	bl	8004980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043de:	f000 fe17 	bl	8005010 <xTaskResumeAll>
 80043e2:	e76c      	b.n	80042be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80043e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043e6:	f000 facb 	bl	8004980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043ea:	f000 fe11 	bl	8005010 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80043ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3738      	adds	r7, #56	; 0x38
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	e000ed04 	.word	0xe000ed04

080043fc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b08e      	sub	sp, #56	; 0x38
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800440a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10a      	bne.n	8004426 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004414:	f383 8811 	msr	BASEPRI, r3
 8004418:	f3bf 8f6f 	isb	sy
 800441c:	f3bf 8f4f 	dsb	sy
 8004420:	623b      	str	r3, [r7, #32]
}
 8004422:	bf00      	nop
 8004424:	e7fe      	b.n	8004424 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <xQueueGiveFromISR+0x48>
	__asm volatile
 800442e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004432:	f383 8811 	msr	BASEPRI, r3
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	61fb      	str	r3, [r7, #28]
}
 8004440:	bf00      	nop
 8004442:	e7fe      	b.n	8004442 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d103      	bne.n	8004454 <xQueueGiveFromISR+0x58>
 800444c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <xQueueGiveFromISR+0x5c>
 8004454:	2301      	movs	r3, #1
 8004456:	e000      	b.n	800445a <xQueueGiveFromISR+0x5e>
 8004458:	2300      	movs	r3, #0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10a      	bne.n	8004474 <xQueueGiveFromISR+0x78>
	__asm volatile
 800445e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004462:	f383 8811 	msr	BASEPRI, r3
 8004466:	f3bf 8f6f 	isb	sy
 800446a:	f3bf 8f4f 	dsb	sy
 800446e:	61bb      	str	r3, [r7, #24]
}
 8004470:	bf00      	nop
 8004472:	e7fe      	b.n	8004472 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004474:	f001 ff78 	bl	8006368 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004478:	f3ef 8211 	mrs	r2, BASEPRI
 800447c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004480:	f383 8811 	msr	BASEPRI, r3
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	617a      	str	r2, [r7, #20]
 800448e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004490:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004492:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d22b      	bcs.n	80044fc <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80044a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80044ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b0:	1c5a      	adds	r2, r3, #1
 80044b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80044b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80044ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044be:	d112      	bne.n	80044e6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d016      	beq.n	80044f6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ca:	3324      	adds	r3, #36	; 0x24
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 ff73 	bl	80053b8 <xTaskRemoveFromEventList>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00e      	beq.n	80044f6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00b      	beq.n	80044f6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2201      	movs	r2, #1
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	e007      	b.n	80044f6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80044e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044ea:	3301      	adds	r3, #1
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	b25a      	sxtb	r2, r3
 80044f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80044f6:	2301      	movs	r3, #1
 80044f8:	637b      	str	r3, [r7, #52]	; 0x34
 80044fa:	e001      	b.n	8004500 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80044fc:	2300      	movs	r3, #0
 80044fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004502:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800450a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800450c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800450e:	4618      	mov	r0, r3
 8004510:	3738      	adds	r7, #56	; 0x38
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
	...

08004518 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b08e      	sub	sp, #56	; 0x38
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004522:	2300      	movs	r3, #0
 8004524:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800452a:	2300      	movs	r3, #0
 800452c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800452e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10a      	bne.n	800454a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	623b      	str	r3, [r7, #32]
}
 8004546:	bf00      	nop
 8004548:	e7fe      	b.n	8004548 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800454a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004556:	f383 8811 	msr	BASEPRI, r3
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	61fb      	str	r3, [r7, #28]
}
 8004564:	bf00      	nop
 8004566:	e7fe      	b.n	8004566 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004568:	f001 f8e2 	bl	8005730 <xTaskGetSchedulerState>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d102      	bne.n	8004578 <xQueueSemaphoreTake+0x60>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <xQueueSemaphoreTake+0x64>
 8004578:	2301      	movs	r3, #1
 800457a:	e000      	b.n	800457e <xQueueSemaphoreTake+0x66>
 800457c:	2300      	movs	r3, #0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10a      	bne.n	8004598 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004586:	f383 8811 	msr	BASEPRI, r3
 800458a:	f3bf 8f6f 	isb	sy
 800458e:	f3bf 8f4f 	dsb	sy
 8004592:	61bb      	str	r3, [r7, #24]
}
 8004594:	bf00      	nop
 8004596:	e7fe      	b.n	8004596 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004598:	f001 fe04 	bl	80061a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800459c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80045a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d024      	beq.n	80045f2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80045a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045aa:	1e5a      	subs	r2, r3, #1
 80045ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ae:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d104      	bne.n	80045c2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80045b8:	f001 fa62 	bl	8005a80 <pvTaskIncrementMutexHeldCount>
 80045bc:	4602      	mov	r2, r0
 80045be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00f      	beq.n	80045ea <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045cc:	3310      	adds	r3, #16
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 fef2 	bl	80053b8 <xTaskRemoveFromEventList>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d007      	beq.n	80045ea <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80045da:	4b54      	ldr	r3, [pc, #336]	; (800472c <xQueueSemaphoreTake+0x214>)
 80045dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80045ea:	f001 fe0b 	bl	8006204 <vPortExitCritical>
				return pdPASS;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e097      	b.n	8004722 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d111      	bne.n	800461c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80045f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80045fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004602:	f383 8811 	msr	BASEPRI, r3
 8004606:	f3bf 8f6f 	isb	sy
 800460a:	f3bf 8f4f 	dsb	sy
 800460e:	617b      	str	r3, [r7, #20]
}
 8004610:	bf00      	nop
 8004612:	e7fe      	b.n	8004612 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004614:	f001 fdf6 	bl	8006204 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004618:	2300      	movs	r3, #0
 800461a:	e082      	b.n	8004722 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800461c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004622:	f107 030c 	add.w	r3, r7, #12
 8004626:	4618      	mov	r0, r3
 8004628:	f000 ff28 	bl	800547c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800462c:	2301      	movs	r3, #1
 800462e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004630:	f001 fde8 	bl	8006204 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004634:	f000 fcde 	bl	8004ff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004638:	f001 fdb4 	bl	80061a4 <vPortEnterCritical>
 800463c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004642:	b25b      	sxtb	r3, r3
 8004644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004648:	d103      	bne.n	8004652 <xQueueSemaphoreTake+0x13a>
 800464a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004654:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004658:	b25b      	sxtb	r3, r3
 800465a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465e:	d103      	bne.n	8004668 <xQueueSemaphoreTake+0x150>
 8004660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004668:	f001 fdcc 	bl	8006204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800466c:	463a      	mov	r2, r7
 800466e:	f107 030c 	add.w	r3, r7, #12
 8004672:	4611      	mov	r1, r2
 8004674:	4618      	mov	r0, r3
 8004676:	f000 ff17 	bl	80054a8 <xTaskCheckForTimeOut>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d132      	bne.n	80046e6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004680:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004682:	f000 f9cf 	bl	8004a24 <prvIsQueueEmpty>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d026      	beq.n	80046da <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800468c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d109      	bne.n	80046a8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004694:	f001 fd86 	bl	80061a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	4618      	mov	r0, r3
 800469e:	f001 f865 	bl	800576c <xTaskPriorityInherit>
 80046a2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80046a4:	f001 fdae 	bl	8006204 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80046a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046aa:	3324      	adds	r3, #36	; 0x24
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	4611      	mov	r1, r2
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 fe5d 	bl	8005370 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80046b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80046b8:	f000 f962 	bl	8004980 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80046bc:	f000 fca8 	bl	8005010 <xTaskResumeAll>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f47f af68 	bne.w	8004598 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80046c8:	4b18      	ldr	r3, [pc, #96]	; (800472c <xQueueSemaphoreTake+0x214>)
 80046ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	e75e      	b.n	8004598 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80046da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80046dc:	f000 f950 	bl	8004980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046e0:	f000 fc96 	bl	8005010 <xTaskResumeAll>
 80046e4:	e758      	b.n	8004598 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80046e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80046e8:	f000 f94a 	bl	8004980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046ec:	f000 fc90 	bl	8005010 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80046f2:	f000 f997 	bl	8004a24 <prvIsQueueEmpty>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f43f af4d 	beq.w	8004598 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80046fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00d      	beq.n	8004720 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004704:	f001 fd4e 	bl	80061a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004708:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800470a:	f000 f891 	bl	8004830 <prvGetDisinheritPriorityAfterTimeout>
 800470e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004716:	4618      	mov	r0, r3
 8004718:	f001 f924 	bl	8005964 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800471c:	f001 fd72 	bl	8006204 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004720:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004722:	4618      	mov	r0, r3
 8004724:	3738      	adds	r7, #56	; 0x38
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	e000ed04 	.word	0xe000ed04

08004730 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b08e      	sub	sp, #56	; 0x38
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10a      	bne.n	800475c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474a:	f383 8811 	msr	BASEPRI, r3
 800474e:	f3bf 8f6f 	isb	sy
 8004752:	f3bf 8f4f 	dsb	sy
 8004756:	623b      	str	r3, [r7, #32]
}
 8004758:	bf00      	nop
 800475a:	e7fe      	b.n	800475a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d103      	bne.n	800476a <xQueueReceiveFromISR+0x3a>
 8004762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <xQueueReceiveFromISR+0x3e>
 800476a:	2301      	movs	r3, #1
 800476c:	e000      	b.n	8004770 <xQueueReceiveFromISR+0x40>
 800476e:	2300      	movs	r3, #0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10a      	bne.n	800478a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004778:	f383 8811 	msr	BASEPRI, r3
 800477c:	f3bf 8f6f 	isb	sy
 8004780:	f3bf 8f4f 	dsb	sy
 8004784:	61fb      	str	r3, [r7, #28]
}
 8004786:	bf00      	nop
 8004788:	e7fe      	b.n	8004788 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800478a:	f001 fded 	bl	8006368 <vPortValidateInterruptPriority>
	__asm volatile
 800478e:	f3ef 8211 	mrs	r2, BASEPRI
 8004792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004796:	f383 8811 	msr	BASEPRI, r3
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	61ba      	str	r2, [r7, #24]
 80047a4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80047a6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d02f      	beq.n	8004816 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80047b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80047c0:	68b9      	ldr	r1, [r7, #8]
 80047c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047c4:	f000 f8b6 	bl	8004934 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80047c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ca:	1e5a      	subs	r2, r3, #1
 80047cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ce:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80047d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80047d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d8:	d112      	bne.n	8004800 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d016      	beq.n	8004810 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e4:	3310      	adds	r3, #16
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fde6 	bl	80053b8 <xTaskRemoveFromEventList>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00e      	beq.n	8004810 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00b      	beq.n	8004810 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	601a      	str	r2, [r3, #0]
 80047fe:	e007      	b.n	8004810 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004800:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004804:	3301      	adds	r3, #1
 8004806:	b2db      	uxtb	r3, r3
 8004808:	b25a      	sxtb	r2, r3
 800480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004810:	2301      	movs	r3, #1
 8004812:	637b      	str	r3, [r7, #52]	; 0x34
 8004814:	e001      	b.n	800481a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004816:	2300      	movs	r3, #0
 8004818:	637b      	str	r3, [r7, #52]	; 0x34
 800481a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f383 8811 	msr	BASEPRI, r3
}
 8004824:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004828:	4618      	mov	r0, r3
 800482a:	3738      	adds	r7, #56	; 0x38
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	2b00      	cmp	r3, #0
 800483e:	d006      	beq.n	800484e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f1c3 0307 	rsb	r3, r3, #7
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	e001      	b.n	8004852 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800484e:	2300      	movs	r3, #0
 8004850:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004852:	68fb      	ldr	r3, [r7, #12]
	}
 8004854:	4618      	mov	r0, r3
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800486c:	2300      	movs	r3, #0
 800486e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004874:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10d      	bne.n	800489a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d14d      	bne.n	8004922 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	4618      	mov	r0, r3
 800488c:	f000 ffe4 	bl	8005858 <xTaskPriorityDisinherit>
 8004890:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	609a      	str	r2, [r3, #8]
 8004898:	e043      	b.n	8004922 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d119      	bne.n	80048d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6858      	ldr	r0, [r3, #4]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	461a      	mov	r2, r3
 80048aa:	68b9      	ldr	r1, [r7, #8]
 80048ac:	f001 ffb0 	bl	8006810 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	441a      	add	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d32b      	bcc.n	8004922 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	605a      	str	r2, [r3, #4]
 80048d2:	e026      	b.n	8004922 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	68d8      	ldr	r0, [r3, #12]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048dc:	461a      	mov	r2, r3
 80048de:	68b9      	ldr	r1, [r7, #8]
 80048e0:	f001 ff96 	bl	8006810 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	68da      	ldr	r2, [r3, #12]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ec:	425b      	negs	r3, r3
 80048ee:	441a      	add	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	68da      	ldr	r2, [r3, #12]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d207      	bcs.n	8004910 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004908:	425b      	negs	r3, r3
 800490a:	441a      	add	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b02      	cmp	r3, #2
 8004914:	d105      	bne.n	8004922 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	3b01      	subs	r3, #1
 8004920:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800492a:	697b      	ldr	r3, [r7, #20]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3718      	adds	r7, #24
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	2b00      	cmp	r3, #0
 8004944:	d018      	beq.n	8004978 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	441a      	add	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68da      	ldr	r2, [r3, #12]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	429a      	cmp	r2, r3
 800495e:	d303      	bcc.n	8004968 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68d9      	ldr	r1, [r3, #12]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	461a      	mov	r2, r3
 8004972:	6838      	ldr	r0, [r7, #0]
 8004974:	f001 ff4c 	bl	8006810 <memcpy>
	}
}
 8004978:	bf00      	nop
 800497a:	3708      	adds	r7, #8
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004988:	f001 fc0c 	bl	80061a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004992:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004994:	e011      	b.n	80049ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	2b00      	cmp	r3, #0
 800499c:	d012      	beq.n	80049c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	3324      	adds	r3, #36	; 0x24
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fd08 	bl	80053b8 <xTaskRemoveFromEventList>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80049ae:	f000 fddd 	bl	800556c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80049b2:	7bfb      	ldrb	r3, [r7, #15]
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	dce9      	bgt.n	8004996 <prvUnlockQueue+0x16>
 80049c2:	e000      	b.n	80049c6 <prvUnlockQueue+0x46>
					break;
 80049c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	22ff      	movs	r2, #255	; 0xff
 80049ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80049ce:	f001 fc19 	bl	8006204 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80049d2:	f001 fbe7 	bl	80061a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049de:	e011      	b.n	8004a04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d012      	beq.n	8004a0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	3310      	adds	r3, #16
 80049ec:	4618      	mov	r0, r3
 80049ee:	f000 fce3 	bl	80053b8 <xTaskRemoveFromEventList>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80049f8:	f000 fdb8 	bl	800556c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80049fc:	7bbb      	ldrb	r3, [r7, #14]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	dce9      	bgt.n	80049e0 <prvUnlockQueue+0x60>
 8004a0c:	e000      	b.n	8004a10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004a0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	22ff      	movs	r2, #255	; 0xff
 8004a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004a18:	f001 fbf4 	bl	8006204 <vPortExitCritical>
}
 8004a1c:	bf00      	nop
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a2c:	f001 fbba 	bl	80061a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d102      	bne.n	8004a3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	e001      	b.n	8004a42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a42:	f001 fbdf 	bl	8006204 <vPortExitCritical>

	return xReturn;
 8004a46:	68fb      	ldr	r3, [r7, #12]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a58:	f001 fba4 	bl	80061a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d102      	bne.n	8004a6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	e001      	b.n	8004a72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a72:	f001 fbc7 	bl	8006204 <vPortExitCritical>

	return xReturn;
 8004a76:	68fb      	ldr	r3, [r7, #12]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b08e      	sub	sp, #56	; 0x38
 8004a84:	af04      	add	r7, sp, #16
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
 8004a8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10a      	bne.n	8004aaa <xTaskCreateStatic+0x2a>
	__asm volatile
 8004a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a98:	f383 8811 	msr	BASEPRI, r3
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	623b      	str	r3, [r7, #32]
}
 8004aa6:	bf00      	nop
 8004aa8:	e7fe      	b.n	8004aa8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10a      	bne.n	8004ac6 <xTaskCreateStatic+0x46>
	__asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	61fb      	str	r3, [r7, #28]
}
 8004ac2:	bf00      	nop
 8004ac4:	e7fe      	b.n	8004ac4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004ac6:	2354      	movs	r3, #84	; 0x54
 8004ac8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	2b54      	cmp	r3, #84	; 0x54
 8004ace:	d00a      	beq.n	8004ae6 <xTaskCreateStatic+0x66>
	__asm volatile
 8004ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	61bb      	str	r3, [r7, #24]
}
 8004ae2:	bf00      	nop
 8004ae4:	e7fe      	b.n	8004ae4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004ae6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d01e      	beq.n	8004b2c <xTaskCreateStatic+0xac>
 8004aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d01b      	beq.n	8004b2c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004afc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	2202      	movs	r2, #2
 8004b02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b06:	2300      	movs	r3, #0
 8004b08:	9303      	str	r3, [sp, #12]
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	9302      	str	r3, [sp, #8]
 8004b0e:	f107 0314 	add.w	r3, r7, #20
 8004b12:	9301      	str	r3, [sp, #4]
 8004b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	68b9      	ldr	r1, [r7, #8]
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f000 f850 	bl	8004bc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b26:	f000 f8d5 	bl	8004cd4 <prvAddNewTaskToReadyList>
 8004b2a:	e001      	b.n	8004b30 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004b30:	697b      	ldr	r3, [r7, #20]
	}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3728      	adds	r7, #40	; 0x28
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b08c      	sub	sp, #48	; 0x30
 8004b3e:	af04      	add	r7, sp, #16
 8004b40:	60f8      	str	r0, [r7, #12]
 8004b42:	60b9      	str	r1, [r7, #8]
 8004b44:	603b      	str	r3, [r7, #0]
 8004b46:	4613      	mov	r3, r2
 8004b48:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004b4a:	88fb      	ldrh	r3, [r7, #6]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f001 fc4a 	bl	80063e8 <pvPortMalloc>
 8004b54:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00e      	beq.n	8004b7a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004b5c:	2054      	movs	r0, #84	; 0x54
 8004b5e:	f001 fc43 	bl	80063e8 <pvPortMalloc>
 8004b62:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	631a      	str	r2, [r3, #48]	; 0x30
 8004b70:	e005      	b.n	8004b7e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b72:	6978      	ldr	r0, [r7, #20]
 8004b74:	f001 fd04 	bl	8006580 <vPortFree>
 8004b78:	e001      	b.n	8004b7e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d017      	beq.n	8004bb4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b8c:	88fa      	ldrh	r2, [r7, #6]
 8004b8e:	2300      	movs	r3, #0
 8004b90:	9303      	str	r3, [sp, #12]
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	9302      	str	r3, [sp, #8]
 8004b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b98:	9301      	str	r3, [sp, #4]
 8004b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	68b9      	ldr	r1, [r7, #8]
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f000 f80e 	bl	8004bc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ba8:	69f8      	ldr	r0, [r7, #28]
 8004baa:	f000 f893 	bl	8004cd4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	61bb      	str	r3, [r7, #24]
 8004bb2:	e002      	b.n	8004bba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8004bb8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004bba:	69bb      	ldr	r3, [r7, #24]
	}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3720      	adds	r7, #32
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b088      	sub	sp, #32
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
 8004bd0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	f023 0307 	bic.w	r3, r3, #7
 8004bea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00a      	beq.n	8004c0c <prvInitialiseNewTask+0x48>
	__asm volatile
 8004bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfa:	f383 8811 	msr	BASEPRI, r3
 8004bfe:	f3bf 8f6f 	isb	sy
 8004c02:	f3bf 8f4f 	dsb	sy
 8004c06:	617b      	str	r3, [r7, #20]
}
 8004c08:	bf00      	nop
 8004c0a:	e7fe      	b.n	8004c0a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d01f      	beq.n	8004c52 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c12:	2300      	movs	r3, #0
 8004c14:	61fb      	str	r3, [r7, #28]
 8004c16:	e012      	b.n	8004c3e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	7819      	ldrb	r1, [r3, #0]
 8004c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	4413      	add	r3, r2
 8004c26:	3334      	adds	r3, #52	; 0x34
 8004c28:	460a      	mov	r2, r1
 8004c2a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	4413      	add	r3, r2
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d006      	beq.n	8004c46 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	61fb      	str	r3, [r7, #28]
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	2b0f      	cmp	r3, #15
 8004c42:	d9e9      	bls.n	8004c18 <prvInitialiseNewTask+0x54>
 8004c44:	e000      	b.n	8004c48 <prvInitialiseNewTask+0x84>
			{
				break;
 8004c46:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c50:	e003      	b.n	8004c5a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5c:	2b06      	cmp	r3, #6
 8004c5e:	d901      	bls.n	8004c64 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c60:	2306      	movs	r3, #6
 8004c62:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c68:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c6e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c72:	2200      	movs	r2, #0
 8004c74:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c78:	3304      	adds	r3, #4
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7ff f8a6 	bl	8003dcc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c82:	3318      	adds	r3, #24
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7ff f8a1 	bl	8003dcc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c8e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c92:	f1c3 0207 	rsb	r2, r3, #7
 8004c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c98:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c9e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004cae:	683a      	ldr	r2, [r7, #0]
 8004cb0:	68f9      	ldr	r1, [r7, #12]
 8004cb2:	69b8      	ldr	r0, [r7, #24]
 8004cb4:	f001 f948 	bl	8005f48 <pxPortInitialiseStack>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cca:	bf00      	nop
 8004ccc:	3720      	adds	r7, #32
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
	...

08004cd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004cdc:	f001 fa62 	bl	80061a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ce0:	4b2a      	ldr	r3, [pc, #168]	; (8004d8c <prvAddNewTaskToReadyList+0xb8>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	4a29      	ldr	r2, [pc, #164]	; (8004d8c <prvAddNewTaskToReadyList+0xb8>)
 8004ce8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004cea:	4b29      	ldr	r3, [pc, #164]	; (8004d90 <prvAddNewTaskToReadyList+0xbc>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d109      	bne.n	8004d06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004cf2:	4a27      	ldr	r2, [pc, #156]	; (8004d90 <prvAddNewTaskToReadyList+0xbc>)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004cf8:	4b24      	ldr	r3, [pc, #144]	; (8004d8c <prvAddNewTaskToReadyList+0xb8>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d110      	bne.n	8004d22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004d00:	f000 fc58 	bl	80055b4 <prvInitialiseTaskLists>
 8004d04:	e00d      	b.n	8004d22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004d06:	4b23      	ldr	r3, [pc, #140]	; (8004d94 <prvAddNewTaskToReadyList+0xc0>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d109      	bne.n	8004d22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004d0e:	4b20      	ldr	r3, [pc, #128]	; (8004d90 <prvAddNewTaskToReadyList+0xbc>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d802      	bhi.n	8004d22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d1c:	4a1c      	ldr	r2, [pc, #112]	; (8004d90 <prvAddNewTaskToReadyList+0xbc>)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004d22:	4b1d      	ldr	r3, [pc, #116]	; (8004d98 <prvAddNewTaskToReadyList+0xc4>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3301      	adds	r3, #1
 8004d28:	4a1b      	ldr	r2, [pc, #108]	; (8004d98 <prvAddNewTaskToReadyList+0xc4>)
 8004d2a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d30:	2201      	movs	r2, #1
 8004d32:	409a      	lsls	r2, r3
 8004d34:	4b19      	ldr	r3, [pc, #100]	; (8004d9c <prvAddNewTaskToReadyList+0xc8>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	4a18      	ldr	r2, [pc, #96]	; (8004d9c <prvAddNewTaskToReadyList+0xc8>)
 8004d3c:	6013      	str	r3, [r2, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d42:	4613      	mov	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4a15      	ldr	r2, [pc, #84]	; (8004da0 <prvAddNewTaskToReadyList+0xcc>)
 8004d4c:	441a      	add	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	3304      	adds	r3, #4
 8004d52:	4619      	mov	r1, r3
 8004d54:	4610      	mov	r0, r2
 8004d56:	f7ff f846 	bl	8003de6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d5a:	f001 fa53 	bl	8006204 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d5e:	4b0d      	ldr	r3, [pc, #52]	; (8004d94 <prvAddNewTaskToReadyList+0xc0>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00e      	beq.n	8004d84 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d66:	4b0a      	ldr	r3, [pc, #40]	; (8004d90 <prvAddNewTaskToReadyList+0xbc>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d207      	bcs.n	8004d84 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d74:	4b0b      	ldr	r3, [pc, #44]	; (8004da4 <prvAddNewTaskToReadyList+0xd0>)
 8004d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d84:	bf00      	nop
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	2000052c 	.word	0x2000052c
 8004d90:	2000042c 	.word	0x2000042c
 8004d94:	20000538 	.word	0x20000538
 8004d98:	20000548 	.word	0x20000548
 8004d9c:	20000534 	.word	0x20000534
 8004da0:	20000430 	.word	0x20000430
 8004da4:	e000ed04 	.word	0xe000ed04

08004da8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004db0:	2300      	movs	r3, #0
 8004db2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d017      	beq.n	8004dea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004dba:	4b13      	ldr	r3, [pc, #76]	; (8004e08 <vTaskDelay+0x60>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <vTaskDelay+0x30>
	__asm volatile
 8004dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	60bb      	str	r3, [r7, #8]
}
 8004dd4:	bf00      	nop
 8004dd6:	e7fe      	b.n	8004dd6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004dd8:	f000 f90c 	bl	8004ff4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ddc:	2100      	movs	r1, #0
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f001 f84c 	bl	8005e7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004de4:	f000 f914 	bl	8005010 <xTaskResumeAll>
 8004de8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d107      	bne.n	8004e00 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004df0:	4b06      	ldr	r3, [pc, #24]	; (8004e0c <vTaskDelay+0x64>)
 8004df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e00:	bf00      	nop
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	20000554 	.word	0x20000554
 8004e0c:	e000ed04 	.word	0xe000ed04

08004e10 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004e18:	f001 f9c4 	bl	80061a4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d102      	bne.n	8004e28 <vTaskSuspend+0x18>
 8004e22:	4b3c      	ldr	r3, [pc, #240]	; (8004f14 <vTaskSuspend+0x104>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	e000      	b.n	8004e2a <vTaskSuspend+0x1a>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	3304      	adds	r3, #4
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7ff f835 	bl	8003ea0 <uxListRemove>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d115      	bne.n	8004e68 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e40:	4935      	ldr	r1, [pc, #212]	; (8004f18 <vTaskSuspend+0x108>)
 8004e42:	4613      	mov	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	440b      	add	r3, r1
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10a      	bne.n	8004e68 <vTaskSuspend+0x58>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e56:	2201      	movs	r2, #1
 8004e58:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5c:	43da      	mvns	r2, r3
 8004e5e:	4b2f      	ldr	r3, [pc, #188]	; (8004f1c <vTaskSuspend+0x10c>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4013      	ands	r3, r2
 8004e64:	4a2d      	ldr	r2, [pc, #180]	; (8004f1c <vTaskSuspend+0x10c>)
 8004e66:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d004      	beq.n	8004e7a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	3318      	adds	r3, #24
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7ff f813 	bl	8003ea0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	4619      	mov	r1, r3
 8004e80:	4827      	ldr	r0, [pc, #156]	; (8004f20 <vTaskSuspend+0x110>)
 8004e82:	f7fe ffb0 	bl	8003de6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d103      	bne.n	8004e9a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8004e9a:	f001 f9b3 	bl	8006204 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8004e9e:	4b21      	ldr	r3, [pc, #132]	; (8004f24 <vTaskSuspend+0x114>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d005      	beq.n	8004eb2 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8004ea6:	f001 f97d 	bl	80061a4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8004eaa:	f000 fc21 	bl	80056f0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8004eae:	f001 f9a9 	bl	8006204 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8004eb2:	4b18      	ldr	r3, [pc, #96]	; (8004f14 <vTaskSuspend+0x104>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d127      	bne.n	8004f0c <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8004ebc:	4b19      	ldr	r3, [pc, #100]	; (8004f24 <vTaskSuspend+0x114>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d017      	beq.n	8004ef4 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8004ec4:	4b18      	ldr	r3, [pc, #96]	; (8004f28 <vTaskSuspend+0x118>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00a      	beq.n	8004ee2 <vTaskSuspend+0xd2>
	__asm volatile
 8004ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed0:	f383 8811 	msr	BASEPRI, r3
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	60bb      	str	r3, [r7, #8]
}
 8004ede:	bf00      	nop
 8004ee0:	e7fe      	b.n	8004ee0 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8004ee2:	4b12      	ldr	r3, [pc, #72]	; (8004f2c <vTaskSuspend+0x11c>)
 8004ee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ef2:	e00b      	b.n	8004f0c <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8004ef4:	4b0a      	ldr	r3, [pc, #40]	; (8004f20 <vTaskSuspend+0x110>)
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	4b0d      	ldr	r3, [pc, #52]	; (8004f30 <vTaskSuspend+0x120>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d103      	bne.n	8004f08 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8004f00:	4b04      	ldr	r3, [pc, #16]	; (8004f14 <vTaskSuspend+0x104>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
	}
 8004f06:	e001      	b.n	8004f0c <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8004f08:	f000 f9d6 	bl	80052b8 <vTaskSwitchContext>
	}
 8004f0c:	bf00      	nop
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	2000042c 	.word	0x2000042c
 8004f18:	20000430 	.word	0x20000430
 8004f1c:	20000534 	.word	0x20000534
 8004f20:	20000518 	.word	0x20000518
 8004f24:	20000538 	.word	0x20000538
 8004f28:	20000554 	.word	0x20000554
 8004f2c:	e000ed04 	.word	0xe000ed04
 8004f30:	2000052c 	.word	0x2000052c

08004f34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b08a      	sub	sp, #40	; 0x28
 8004f38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f42:	463a      	mov	r2, r7
 8004f44:	1d39      	adds	r1, r7, #4
 8004f46:	f107 0308 	add.w	r3, r7, #8
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7fb fb32 	bl	80005b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f50:	6839      	ldr	r1, [r7, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	9202      	str	r2, [sp, #8]
 8004f58:	9301      	str	r3, [sp, #4]
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	460a      	mov	r2, r1
 8004f62:	491e      	ldr	r1, [pc, #120]	; (8004fdc <vTaskStartScheduler+0xa8>)
 8004f64:	481e      	ldr	r0, [pc, #120]	; (8004fe0 <vTaskStartScheduler+0xac>)
 8004f66:	f7ff fd8b 	bl	8004a80 <xTaskCreateStatic>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	4a1d      	ldr	r2, [pc, #116]	; (8004fe4 <vTaskStartScheduler+0xb0>)
 8004f6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f70:	4b1c      	ldr	r3, [pc, #112]	; (8004fe4 <vTaskStartScheduler+0xb0>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d002      	beq.n	8004f7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	e001      	b.n	8004f82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d116      	bne.n	8004fb6 <vTaskStartScheduler+0x82>
	__asm volatile
 8004f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8c:	f383 8811 	msr	BASEPRI, r3
 8004f90:	f3bf 8f6f 	isb	sy
 8004f94:	f3bf 8f4f 	dsb	sy
 8004f98:	613b      	str	r3, [r7, #16]
}
 8004f9a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f9c:	4b12      	ldr	r3, [pc, #72]	; (8004fe8 <vTaskStartScheduler+0xb4>)
 8004f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004fa4:	4b11      	ldr	r3, [pc, #68]	; (8004fec <vTaskStartScheduler+0xb8>)
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004faa:	4b11      	ldr	r3, [pc, #68]	; (8004ff0 <vTaskStartScheduler+0xbc>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004fb0:	f001 f856 	bl	8006060 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004fb4:	e00e      	b.n	8004fd4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbc:	d10a      	bne.n	8004fd4 <vTaskStartScheduler+0xa0>
	__asm volatile
 8004fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc2:	f383 8811 	msr	BASEPRI, r3
 8004fc6:	f3bf 8f6f 	isb	sy
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	60fb      	str	r3, [r7, #12]
}
 8004fd0:	bf00      	nop
 8004fd2:	e7fe      	b.n	8004fd2 <vTaskStartScheduler+0x9e>
}
 8004fd4:	bf00      	nop
 8004fd6:	3718      	adds	r7, #24
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	080073a8 	.word	0x080073a8
 8004fe0:	08005585 	.word	0x08005585
 8004fe4:	20000550 	.word	0x20000550
 8004fe8:	2000054c 	.word	0x2000054c
 8004fec:	20000538 	.word	0x20000538
 8004ff0:	20000530 	.word	0x20000530

08004ff4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004ff8:	4b04      	ldr	r3, [pc, #16]	; (800500c <vTaskSuspendAll+0x18>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	4a03      	ldr	r2, [pc, #12]	; (800500c <vTaskSuspendAll+0x18>)
 8005000:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005002:	bf00      	nop
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	20000554 	.word	0x20000554

08005010 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005016:	2300      	movs	r3, #0
 8005018:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800501a:	2300      	movs	r3, #0
 800501c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800501e:	4b41      	ldr	r3, [pc, #260]	; (8005124 <xTaskResumeAll+0x114>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10a      	bne.n	800503c <xTaskResumeAll+0x2c>
	__asm volatile
 8005026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502a:	f383 8811 	msr	BASEPRI, r3
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	603b      	str	r3, [r7, #0]
}
 8005038:	bf00      	nop
 800503a:	e7fe      	b.n	800503a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800503c:	f001 f8b2 	bl	80061a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005040:	4b38      	ldr	r3, [pc, #224]	; (8005124 <xTaskResumeAll+0x114>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3b01      	subs	r3, #1
 8005046:	4a37      	ldr	r2, [pc, #220]	; (8005124 <xTaskResumeAll+0x114>)
 8005048:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800504a:	4b36      	ldr	r3, [pc, #216]	; (8005124 <xTaskResumeAll+0x114>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d161      	bne.n	8005116 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005052:	4b35      	ldr	r3, [pc, #212]	; (8005128 <xTaskResumeAll+0x118>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d05d      	beq.n	8005116 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800505a:	e02e      	b.n	80050ba <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800505c:	4b33      	ldr	r3, [pc, #204]	; (800512c <xTaskResumeAll+0x11c>)
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	3318      	adds	r3, #24
 8005068:	4618      	mov	r0, r3
 800506a:	f7fe ff19 	bl	8003ea0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	3304      	adds	r3, #4
 8005072:	4618      	mov	r0, r3
 8005074:	f7fe ff14 	bl	8003ea0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507c:	2201      	movs	r2, #1
 800507e:	409a      	lsls	r2, r3
 8005080:	4b2b      	ldr	r3, [pc, #172]	; (8005130 <xTaskResumeAll+0x120>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4313      	orrs	r3, r2
 8005086:	4a2a      	ldr	r2, [pc, #168]	; (8005130 <xTaskResumeAll+0x120>)
 8005088:	6013      	str	r3, [r2, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800508e:	4613      	mov	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4a27      	ldr	r2, [pc, #156]	; (8005134 <xTaskResumeAll+0x124>)
 8005098:	441a      	add	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	3304      	adds	r3, #4
 800509e:	4619      	mov	r1, r3
 80050a0:	4610      	mov	r0, r2
 80050a2:	f7fe fea0 	bl	8003de6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050aa:	4b23      	ldr	r3, [pc, #140]	; (8005138 <xTaskResumeAll+0x128>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d302      	bcc.n	80050ba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80050b4:	4b21      	ldr	r3, [pc, #132]	; (800513c <xTaskResumeAll+0x12c>)
 80050b6:	2201      	movs	r2, #1
 80050b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050ba:	4b1c      	ldr	r3, [pc, #112]	; (800512c <xTaskResumeAll+0x11c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1cc      	bne.n	800505c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80050c8:	f000 fb12 	bl	80056f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80050cc:	4b1c      	ldr	r3, [pc, #112]	; (8005140 <xTaskResumeAll+0x130>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d010      	beq.n	80050fa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80050d8:	f000 f836 	bl	8005148 <xTaskIncrementTick>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d002      	beq.n	80050e8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80050e2:	4b16      	ldr	r3, [pc, #88]	; (800513c <xTaskResumeAll+0x12c>)
 80050e4:	2201      	movs	r2, #1
 80050e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3b01      	subs	r3, #1
 80050ec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1f1      	bne.n	80050d8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80050f4:	4b12      	ldr	r3, [pc, #72]	; (8005140 <xTaskResumeAll+0x130>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80050fa:	4b10      	ldr	r3, [pc, #64]	; (800513c <xTaskResumeAll+0x12c>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d009      	beq.n	8005116 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005102:	2301      	movs	r3, #1
 8005104:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005106:	4b0f      	ldr	r3, [pc, #60]	; (8005144 <xTaskResumeAll+0x134>)
 8005108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005116:	f001 f875 	bl	8006204 <vPortExitCritical>

	return xAlreadyYielded;
 800511a:	68bb      	ldr	r3, [r7, #8]
}
 800511c:	4618      	mov	r0, r3
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	20000554 	.word	0x20000554
 8005128:	2000052c 	.word	0x2000052c
 800512c:	200004ec 	.word	0x200004ec
 8005130:	20000534 	.word	0x20000534
 8005134:	20000430 	.word	0x20000430
 8005138:	2000042c 	.word	0x2000042c
 800513c:	20000540 	.word	0x20000540
 8005140:	2000053c 	.word	0x2000053c
 8005144:	e000ed04 	.word	0xe000ed04

08005148 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800514e:	2300      	movs	r3, #0
 8005150:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005152:	4b4e      	ldr	r3, [pc, #312]	; (800528c <xTaskIncrementTick+0x144>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	f040 808e 	bne.w	8005278 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800515c:	4b4c      	ldr	r3, [pc, #304]	; (8005290 <xTaskIncrementTick+0x148>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	3301      	adds	r3, #1
 8005162:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005164:	4a4a      	ldr	r2, [pc, #296]	; (8005290 <xTaskIncrementTick+0x148>)
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d120      	bne.n	80051b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005170:	4b48      	ldr	r3, [pc, #288]	; (8005294 <xTaskIncrementTick+0x14c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <xTaskIncrementTick+0x48>
	__asm volatile
 800517a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517e:	f383 8811 	msr	BASEPRI, r3
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	603b      	str	r3, [r7, #0]
}
 800518c:	bf00      	nop
 800518e:	e7fe      	b.n	800518e <xTaskIncrementTick+0x46>
 8005190:	4b40      	ldr	r3, [pc, #256]	; (8005294 <xTaskIncrementTick+0x14c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	4b40      	ldr	r3, [pc, #256]	; (8005298 <xTaskIncrementTick+0x150>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a3e      	ldr	r2, [pc, #248]	; (8005294 <xTaskIncrementTick+0x14c>)
 800519c:	6013      	str	r3, [r2, #0]
 800519e:	4a3e      	ldr	r2, [pc, #248]	; (8005298 <xTaskIncrementTick+0x150>)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6013      	str	r3, [r2, #0]
 80051a4:	4b3d      	ldr	r3, [pc, #244]	; (800529c <xTaskIncrementTick+0x154>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	3301      	adds	r3, #1
 80051aa:	4a3c      	ldr	r2, [pc, #240]	; (800529c <xTaskIncrementTick+0x154>)
 80051ac:	6013      	str	r3, [r2, #0]
 80051ae:	f000 fa9f 	bl	80056f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80051b2:	4b3b      	ldr	r3, [pc, #236]	; (80052a0 <xTaskIncrementTick+0x158>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d348      	bcc.n	800524e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051bc:	4b35      	ldr	r3, [pc, #212]	; (8005294 <xTaskIncrementTick+0x14c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d104      	bne.n	80051d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051c6:	4b36      	ldr	r3, [pc, #216]	; (80052a0 <xTaskIncrementTick+0x158>)
 80051c8:	f04f 32ff 	mov.w	r2, #4294967295
 80051cc:	601a      	str	r2, [r3, #0]
					break;
 80051ce:	e03e      	b.n	800524e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051d0:	4b30      	ldr	r3, [pc, #192]	; (8005294 <xTaskIncrementTick+0x14c>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d203      	bcs.n	80051f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80051e8:	4a2d      	ldr	r2, [pc, #180]	; (80052a0 <xTaskIncrementTick+0x158>)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80051ee:	e02e      	b.n	800524e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	3304      	adds	r3, #4
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7fe fe53 	bl	8003ea0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d004      	beq.n	800520c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	3318      	adds	r3, #24
 8005206:	4618      	mov	r0, r3
 8005208:	f7fe fe4a 	bl	8003ea0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005210:	2201      	movs	r2, #1
 8005212:	409a      	lsls	r2, r3
 8005214:	4b23      	ldr	r3, [pc, #140]	; (80052a4 <xTaskIncrementTick+0x15c>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4313      	orrs	r3, r2
 800521a:	4a22      	ldr	r2, [pc, #136]	; (80052a4 <xTaskIncrementTick+0x15c>)
 800521c:	6013      	str	r3, [r2, #0]
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005222:	4613      	mov	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4413      	add	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4a1f      	ldr	r2, [pc, #124]	; (80052a8 <xTaskIncrementTick+0x160>)
 800522c:	441a      	add	r2, r3
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	3304      	adds	r3, #4
 8005232:	4619      	mov	r1, r3
 8005234:	4610      	mov	r0, r2
 8005236:	f7fe fdd6 	bl	8003de6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800523e:	4b1b      	ldr	r3, [pc, #108]	; (80052ac <xTaskIncrementTick+0x164>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005244:	429a      	cmp	r2, r3
 8005246:	d3b9      	bcc.n	80051bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005248:	2301      	movs	r3, #1
 800524a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800524c:	e7b6      	b.n	80051bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800524e:	4b17      	ldr	r3, [pc, #92]	; (80052ac <xTaskIncrementTick+0x164>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005254:	4914      	ldr	r1, [pc, #80]	; (80052a8 <xTaskIncrementTick+0x160>)
 8005256:	4613      	mov	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4413      	add	r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	440b      	add	r3, r1
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d901      	bls.n	800526a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005266:	2301      	movs	r3, #1
 8005268:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800526a:	4b11      	ldr	r3, [pc, #68]	; (80052b0 <xTaskIncrementTick+0x168>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d007      	beq.n	8005282 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005272:	2301      	movs	r3, #1
 8005274:	617b      	str	r3, [r7, #20]
 8005276:	e004      	b.n	8005282 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005278:	4b0e      	ldr	r3, [pc, #56]	; (80052b4 <xTaskIncrementTick+0x16c>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	3301      	adds	r3, #1
 800527e:	4a0d      	ldr	r2, [pc, #52]	; (80052b4 <xTaskIncrementTick+0x16c>)
 8005280:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005282:	697b      	ldr	r3, [r7, #20]
}
 8005284:	4618      	mov	r0, r3
 8005286:	3718      	adds	r7, #24
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	20000554 	.word	0x20000554
 8005290:	20000530 	.word	0x20000530
 8005294:	200004e4 	.word	0x200004e4
 8005298:	200004e8 	.word	0x200004e8
 800529c:	20000544 	.word	0x20000544
 80052a0:	2000054c 	.word	0x2000054c
 80052a4:	20000534 	.word	0x20000534
 80052a8:	20000430 	.word	0x20000430
 80052ac:	2000042c 	.word	0x2000042c
 80052b0:	20000540 	.word	0x20000540
 80052b4:	2000053c 	.word	0x2000053c

080052b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80052b8:	b480      	push	{r7}
 80052ba:	b087      	sub	sp, #28
 80052bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80052be:	4b27      	ldr	r3, [pc, #156]	; (800535c <vTaskSwitchContext+0xa4>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80052c6:	4b26      	ldr	r3, [pc, #152]	; (8005360 <vTaskSwitchContext+0xa8>)
 80052c8:	2201      	movs	r2, #1
 80052ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80052cc:	e03f      	b.n	800534e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80052ce:	4b24      	ldr	r3, [pc, #144]	; (8005360 <vTaskSwitchContext+0xa8>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052d4:	4b23      	ldr	r3, [pc, #140]	; (8005364 <vTaskSwitchContext+0xac>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	fab3 f383 	clz	r3, r3
 80052e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80052e2:	7afb      	ldrb	r3, [r7, #11]
 80052e4:	f1c3 031f 	rsb	r3, r3, #31
 80052e8:	617b      	str	r3, [r7, #20]
 80052ea:	491f      	ldr	r1, [pc, #124]	; (8005368 <vTaskSwitchContext+0xb0>)
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	4613      	mov	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	440b      	add	r3, r1
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10a      	bne.n	8005314 <vTaskSwitchContext+0x5c>
	__asm volatile
 80052fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	607b      	str	r3, [r7, #4]
}
 8005310:	bf00      	nop
 8005312:	e7fe      	b.n	8005312 <vTaskSwitchContext+0x5a>
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	4613      	mov	r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4413      	add	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4a12      	ldr	r2, [pc, #72]	; (8005368 <vTaskSwitchContext+0xb0>)
 8005320:	4413      	add	r3, r2
 8005322:	613b      	str	r3, [r7, #16]
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	605a      	str	r2, [r3, #4]
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	3308      	adds	r3, #8
 8005336:	429a      	cmp	r2, r3
 8005338:	d104      	bne.n	8005344 <vTaskSwitchContext+0x8c>
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	605a      	str	r2, [r3, #4]
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	4a08      	ldr	r2, [pc, #32]	; (800536c <vTaskSwitchContext+0xb4>)
 800534c:	6013      	str	r3, [r2, #0]
}
 800534e:	bf00      	nop
 8005350:	371c      	adds	r7, #28
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	20000554 	.word	0x20000554
 8005360:	20000540 	.word	0x20000540
 8005364:	20000534 	.word	0x20000534
 8005368:	20000430 	.word	0x20000430
 800536c:	2000042c 	.word	0x2000042c

08005370 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10a      	bne.n	8005396 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	60fb      	str	r3, [r7, #12]
}
 8005392:	bf00      	nop
 8005394:	e7fe      	b.n	8005394 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005396:	4b07      	ldr	r3, [pc, #28]	; (80053b4 <vTaskPlaceOnEventList+0x44>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	3318      	adds	r3, #24
 800539c:	4619      	mov	r1, r3
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7fe fd45 	bl	8003e2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80053a4:	2101      	movs	r1, #1
 80053a6:	6838      	ldr	r0, [r7, #0]
 80053a8:	f000 fd68 	bl	8005e7c <prvAddCurrentTaskToDelayedList>
}
 80053ac:	bf00      	nop
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	2000042c 	.word	0x2000042c

080053b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10a      	bne.n	80053e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	60fb      	str	r3, [r7, #12]
}
 80053e0:	bf00      	nop
 80053e2:	e7fe      	b.n	80053e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	3318      	adds	r3, #24
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7fe fd59 	bl	8003ea0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053ee:	4b1d      	ldr	r3, [pc, #116]	; (8005464 <xTaskRemoveFromEventList+0xac>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d11c      	bne.n	8005430 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	3304      	adds	r3, #4
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fe fd50 	bl	8003ea0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005404:	2201      	movs	r2, #1
 8005406:	409a      	lsls	r2, r3
 8005408:	4b17      	ldr	r3, [pc, #92]	; (8005468 <xTaskRemoveFromEventList+0xb0>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4313      	orrs	r3, r2
 800540e:	4a16      	ldr	r2, [pc, #88]	; (8005468 <xTaskRemoveFromEventList+0xb0>)
 8005410:	6013      	str	r3, [r2, #0]
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005416:	4613      	mov	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	4a13      	ldr	r2, [pc, #76]	; (800546c <xTaskRemoveFromEventList+0xb4>)
 8005420:	441a      	add	r2, r3
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	3304      	adds	r3, #4
 8005426:	4619      	mov	r1, r3
 8005428:	4610      	mov	r0, r2
 800542a:	f7fe fcdc 	bl	8003de6 <vListInsertEnd>
 800542e:	e005      	b.n	800543c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	3318      	adds	r3, #24
 8005434:	4619      	mov	r1, r3
 8005436:	480e      	ldr	r0, [pc, #56]	; (8005470 <xTaskRemoveFromEventList+0xb8>)
 8005438:	f7fe fcd5 	bl	8003de6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005440:	4b0c      	ldr	r3, [pc, #48]	; (8005474 <xTaskRemoveFromEventList+0xbc>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005446:	429a      	cmp	r2, r3
 8005448:	d905      	bls.n	8005456 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800544a:	2301      	movs	r3, #1
 800544c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800544e:	4b0a      	ldr	r3, [pc, #40]	; (8005478 <xTaskRemoveFromEventList+0xc0>)
 8005450:	2201      	movs	r2, #1
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	e001      	b.n	800545a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005456:	2300      	movs	r3, #0
 8005458:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800545a:	697b      	ldr	r3, [r7, #20]
}
 800545c:	4618      	mov	r0, r3
 800545e:	3718      	adds	r7, #24
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	20000554 	.word	0x20000554
 8005468:	20000534 	.word	0x20000534
 800546c:	20000430 	.word	0x20000430
 8005470:	200004ec 	.word	0x200004ec
 8005474:	2000042c 	.word	0x2000042c
 8005478:	20000540 	.word	0x20000540

0800547c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005484:	4b06      	ldr	r3, [pc, #24]	; (80054a0 <vTaskInternalSetTimeOutState+0x24>)
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800548c:	4b05      	ldr	r3, [pc, #20]	; (80054a4 <vTaskInternalSetTimeOutState+0x28>)
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	605a      	str	r2, [r3, #4]
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	20000544 	.word	0x20000544
 80054a4:	20000530 	.word	0x20000530

080054a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b088      	sub	sp, #32
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10a      	bne.n	80054ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80054b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	613b      	str	r3, [r7, #16]
}
 80054ca:	bf00      	nop
 80054cc:	e7fe      	b.n	80054cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10a      	bne.n	80054ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80054d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d8:	f383 8811 	msr	BASEPRI, r3
 80054dc:	f3bf 8f6f 	isb	sy
 80054e0:	f3bf 8f4f 	dsb	sy
 80054e4:	60fb      	str	r3, [r7, #12]
}
 80054e6:	bf00      	nop
 80054e8:	e7fe      	b.n	80054e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80054ea:	f000 fe5b 	bl	80061a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80054ee:	4b1d      	ldr	r3, [pc, #116]	; (8005564 <xTaskCheckForTimeOut+0xbc>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005506:	d102      	bne.n	800550e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005508:	2300      	movs	r3, #0
 800550a:	61fb      	str	r3, [r7, #28]
 800550c:	e023      	b.n	8005556 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	4b15      	ldr	r3, [pc, #84]	; (8005568 <xTaskCheckForTimeOut+0xc0>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	429a      	cmp	r2, r3
 8005518:	d007      	beq.n	800552a <xTaskCheckForTimeOut+0x82>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	429a      	cmp	r2, r3
 8005522:	d302      	bcc.n	800552a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005524:	2301      	movs	r3, #1
 8005526:	61fb      	str	r3, [r7, #28]
 8005528:	e015      	b.n	8005556 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	429a      	cmp	r2, r3
 8005532:	d20b      	bcs.n	800554c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	1ad2      	subs	r2, r2, r3
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f7ff ff9b 	bl	800547c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005546:	2300      	movs	r3, #0
 8005548:	61fb      	str	r3, [r7, #28]
 800554a:	e004      	b.n	8005556 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	2200      	movs	r2, #0
 8005550:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005552:	2301      	movs	r3, #1
 8005554:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005556:	f000 fe55 	bl	8006204 <vPortExitCritical>

	return xReturn;
 800555a:	69fb      	ldr	r3, [r7, #28]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3720      	adds	r7, #32
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	20000530 	.word	0x20000530
 8005568:	20000544 	.word	0x20000544

0800556c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005570:	4b03      	ldr	r3, [pc, #12]	; (8005580 <vTaskMissedYield+0x14>)
 8005572:	2201      	movs	r2, #1
 8005574:	601a      	str	r2, [r3, #0]
}
 8005576:	bf00      	nop
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	20000540 	.word	0x20000540

08005584 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800558c:	f000 f852 	bl	8005634 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005590:	4b06      	ldr	r3, [pc, #24]	; (80055ac <prvIdleTask+0x28>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d9f9      	bls.n	800558c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005598:	4b05      	ldr	r3, [pc, #20]	; (80055b0 <prvIdleTask+0x2c>)
 800559a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80055a8:	e7f0      	b.n	800558c <prvIdleTask+0x8>
 80055aa:	bf00      	nop
 80055ac:	20000430 	.word	0x20000430
 80055b0:	e000ed04 	.word	0xe000ed04

080055b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055ba:	2300      	movs	r3, #0
 80055bc:	607b      	str	r3, [r7, #4]
 80055be:	e00c      	b.n	80055da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	4613      	mov	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4a12      	ldr	r2, [pc, #72]	; (8005614 <prvInitialiseTaskLists+0x60>)
 80055cc:	4413      	add	r3, r2
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fe fbdc 	bl	8003d8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	3301      	adds	r3, #1
 80055d8:	607b      	str	r3, [r7, #4]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b06      	cmp	r3, #6
 80055de:	d9ef      	bls.n	80055c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80055e0:	480d      	ldr	r0, [pc, #52]	; (8005618 <prvInitialiseTaskLists+0x64>)
 80055e2:	f7fe fbd3 	bl	8003d8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80055e6:	480d      	ldr	r0, [pc, #52]	; (800561c <prvInitialiseTaskLists+0x68>)
 80055e8:	f7fe fbd0 	bl	8003d8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80055ec:	480c      	ldr	r0, [pc, #48]	; (8005620 <prvInitialiseTaskLists+0x6c>)
 80055ee:	f7fe fbcd 	bl	8003d8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80055f2:	480c      	ldr	r0, [pc, #48]	; (8005624 <prvInitialiseTaskLists+0x70>)
 80055f4:	f7fe fbca 	bl	8003d8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80055f8:	480b      	ldr	r0, [pc, #44]	; (8005628 <prvInitialiseTaskLists+0x74>)
 80055fa:	f7fe fbc7 	bl	8003d8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80055fe:	4b0b      	ldr	r3, [pc, #44]	; (800562c <prvInitialiseTaskLists+0x78>)
 8005600:	4a05      	ldr	r2, [pc, #20]	; (8005618 <prvInitialiseTaskLists+0x64>)
 8005602:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005604:	4b0a      	ldr	r3, [pc, #40]	; (8005630 <prvInitialiseTaskLists+0x7c>)
 8005606:	4a05      	ldr	r2, [pc, #20]	; (800561c <prvInitialiseTaskLists+0x68>)
 8005608:	601a      	str	r2, [r3, #0]
}
 800560a:	bf00      	nop
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	20000430 	.word	0x20000430
 8005618:	200004bc 	.word	0x200004bc
 800561c:	200004d0 	.word	0x200004d0
 8005620:	200004ec 	.word	0x200004ec
 8005624:	20000500 	.word	0x20000500
 8005628:	20000518 	.word	0x20000518
 800562c:	200004e4 	.word	0x200004e4
 8005630:	200004e8 	.word	0x200004e8

08005634 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800563a:	e019      	b.n	8005670 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800563c:	f000 fdb2 	bl	80061a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005640:	4b10      	ldr	r3, [pc, #64]	; (8005684 <prvCheckTasksWaitingTermination+0x50>)
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3304      	adds	r3, #4
 800564c:	4618      	mov	r0, r3
 800564e:	f7fe fc27 	bl	8003ea0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005652:	4b0d      	ldr	r3, [pc, #52]	; (8005688 <prvCheckTasksWaitingTermination+0x54>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	3b01      	subs	r3, #1
 8005658:	4a0b      	ldr	r2, [pc, #44]	; (8005688 <prvCheckTasksWaitingTermination+0x54>)
 800565a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800565c:	4b0b      	ldr	r3, [pc, #44]	; (800568c <prvCheckTasksWaitingTermination+0x58>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	3b01      	subs	r3, #1
 8005662:	4a0a      	ldr	r2, [pc, #40]	; (800568c <prvCheckTasksWaitingTermination+0x58>)
 8005664:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005666:	f000 fdcd 	bl	8006204 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f810 	bl	8005690 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005670:	4b06      	ldr	r3, [pc, #24]	; (800568c <prvCheckTasksWaitingTermination+0x58>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1e1      	bne.n	800563c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005678:	bf00      	nop
 800567a:	bf00      	nop
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	20000500 	.word	0x20000500
 8005688:	2000052c 	.word	0x2000052c
 800568c:	20000514 	.word	0x20000514

08005690 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d108      	bne.n	80056b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a6:	4618      	mov	r0, r3
 80056a8:	f000 ff6a 	bl	8006580 <vPortFree>
				vPortFree( pxTCB );
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 ff67 	bl	8006580 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80056b2:	e018      	b.n	80056e6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d103      	bne.n	80056c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 ff5e 	bl	8006580 <vPortFree>
	}
 80056c4:	e00f      	b.n	80056e6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d00a      	beq.n	80056e6 <prvDeleteTCB+0x56>
	__asm volatile
 80056d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d4:	f383 8811 	msr	BASEPRI, r3
 80056d8:	f3bf 8f6f 	isb	sy
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	60fb      	str	r3, [r7, #12]
}
 80056e2:	bf00      	nop
 80056e4:	e7fe      	b.n	80056e4 <prvDeleteTCB+0x54>
	}
 80056e6:	bf00      	nop
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
	...

080056f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056f6:	4b0c      	ldr	r3, [pc, #48]	; (8005728 <prvResetNextTaskUnblockTime+0x38>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d104      	bne.n	800570a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005700:	4b0a      	ldr	r3, [pc, #40]	; (800572c <prvResetNextTaskUnblockTime+0x3c>)
 8005702:	f04f 32ff 	mov.w	r2, #4294967295
 8005706:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005708:	e008      	b.n	800571c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800570a:	4b07      	ldr	r3, [pc, #28]	; (8005728 <prvResetNextTaskUnblockTime+0x38>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	4a04      	ldr	r2, [pc, #16]	; (800572c <prvResetNextTaskUnblockTime+0x3c>)
 800571a:	6013      	str	r3, [r2, #0]
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	200004e4 	.word	0x200004e4
 800572c:	2000054c 	.word	0x2000054c

08005730 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005736:	4b0b      	ldr	r3, [pc, #44]	; (8005764 <xTaskGetSchedulerState+0x34>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d102      	bne.n	8005744 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800573e:	2301      	movs	r3, #1
 8005740:	607b      	str	r3, [r7, #4]
 8005742:	e008      	b.n	8005756 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005744:	4b08      	ldr	r3, [pc, #32]	; (8005768 <xTaskGetSchedulerState+0x38>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d102      	bne.n	8005752 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800574c:	2302      	movs	r3, #2
 800574e:	607b      	str	r3, [r7, #4]
 8005750:	e001      	b.n	8005756 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005752:	2300      	movs	r3, #0
 8005754:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005756:	687b      	ldr	r3, [r7, #4]
	}
 8005758:	4618      	mov	r0, r3
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	20000538 	.word	0x20000538
 8005768:	20000554 	.word	0x20000554

0800576c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005778:	2300      	movs	r3, #0
 800577a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d05e      	beq.n	8005840 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005786:	4b31      	ldr	r3, [pc, #196]	; (800584c <xTaskPriorityInherit+0xe0>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578c:	429a      	cmp	r2, r3
 800578e:	d24e      	bcs.n	800582e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	2b00      	cmp	r3, #0
 8005796:	db06      	blt.n	80057a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005798:	4b2c      	ldr	r3, [pc, #176]	; (800584c <xTaskPriorityInherit+0xe0>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579e:	f1c3 0207 	rsb	r2, r3, #7
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	6959      	ldr	r1, [r3, #20]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ae:	4613      	mov	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4a26      	ldr	r2, [pc, #152]	; (8005850 <xTaskPriorityInherit+0xe4>)
 80057b8:	4413      	add	r3, r2
 80057ba:	4299      	cmp	r1, r3
 80057bc:	d12f      	bne.n	800581e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	3304      	adds	r3, #4
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fe fb6c 	bl	8003ea0 <uxListRemove>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10a      	bne.n	80057e4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d2:	2201      	movs	r2, #1
 80057d4:	fa02 f303 	lsl.w	r3, r2, r3
 80057d8:	43da      	mvns	r2, r3
 80057da:	4b1e      	ldr	r3, [pc, #120]	; (8005854 <xTaskPriorityInherit+0xe8>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4013      	ands	r3, r2
 80057e0:	4a1c      	ldr	r2, [pc, #112]	; (8005854 <xTaskPriorityInherit+0xe8>)
 80057e2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80057e4:	4b19      	ldr	r3, [pc, #100]	; (800584c <xTaskPriorityInherit+0xe0>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f2:	2201      	movs	r2, #1
 80057f4:	409a      	lsls	r2, r3
 80057f6:	4b17      	ldr	r3, [pc, #92]	; (8005854 <xTaskPriorityInherit+0xe8>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	4a15      	ldr	r2, [pc, #84]	; (8005854 <xTaskPriorityInherit+0xe8>)
 80057fe:	6013      	str	r3, [r2, #0]
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005804:	4613      	mov	r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	4413      	add	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4a10      	ldr	r2, [pc, #64]	; (8005850 <xTaskPriorityInherit+0xe4>)
 800580e:	441a      	add	r2, r3
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	3304      	adds	r3, #4
 8005814:	4619      	mov	r1, r3
 8005816:	4610      	mov	r0, r2
 8005818:	f7fe fae5 	bl	8003de6 <vListInsertEnd>
 800581c:	e004      	b.n	8005828 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800581e:	4b0b      	ldr	r3, [pc, #44]	; (800584c <xTaskPriorityInherit+0xe0>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005828:	2301      	movs	r3, #1
 800582a:	60fb      	str	r3, [r7, #12]
 800582c:	e008      	b.n	8005840 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005832:	4b06      	ldr	r3, [pc, #24]	; (800584c <xTaskPriorityInherit+0xe0>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005838:	429a      	cmp	r2, r3
 800583a:	d201      	bcs.n	8005840 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800583c:	2301      	movs	r3, #1
 800583e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005840:	68fb      	ldr	r3, [r7, #12]
	}
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	2000042c 	.word	0x2000042c
 8005850:	20000430 	.word	0x20000430
 8005854:	20000534 	.word	0x20000534

08005858 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005864:	2300      	movs	r3, #0
 8005866:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d06e      	beq.n	800594c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800586e:	4b3a      	ldr	r3, [pc, #232]	; (8005958 <xTaskPriorityDisinherit+0x100>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	429a      	cmp	r2, r3
 8005876:	d00a      	beq.n	800588e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	60fb      	str	r3, [r7, #12]
}
 800588a:	bf00      	nop
 800588c:	e7fe      	b.n	800588c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10a      	bne.n	80058ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	60bb      	str	r3, [r7, #8]
}
 80058a8:	bf00      	nop
 80058aa:	e7fe      	b.n	80058aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058b0:	1e5a      	subs	r2, r3, #1
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058be:	429a      	cmp	r2, r3
 80058c0:	d044      	beq.n	800594c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d140      	bne.n	800594c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	3304      	adds	r3, #4
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fe fae6 	bl	8003ea0 <uxListRemove>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d115      	bne.n	8005906 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058de:	491f      	ldr	r1, [pc, #124]	; (800595c <xTaskPriorityDisinherit+0x104>)
 80058e0:	4613      	mov	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4413      	add	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	440b      	add	r3, r1
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10a      	bne.n	8005906 <xTaskPriorityDisinherit+0xae>
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f4:	2201      	movs	r2, #1
 80058f6:	fa02 f303 	lsl.w	r3, r2, r3
 80058fa:	43da      	mvns	r2, r3
 80058fc:	4b18      	ldr	r3, [pc, #96]	; (8005960 <xTaskPriorityDisinherit+0x108>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4013      	ands	r3, r2
 8005902:	4a17      	ldr	r2, [pc, #92]	; (8005960 <xTaskPriorityDisinherit+0x108>)
 8005904:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005912:	f1c3 0207 	rsb	r2, r3, #7
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591e:	2201      	movs	r2, #1
 8005920:	409a      	lsls	r2, r3
 8005922:	4b0f      	ldr	r3, [pc, #60]	; (8005960 <xTaskPriorityDisinherit+0x108>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4313      	orrs	r3, r2
 8005928:	4a0d      	ldr	r2, [pc, #52]	; (8005960 <xTaskPriorityDisinherit+0x108>)
 800592a:	6013      	str	r3, [r2, #0]
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005930:	4613      	mov	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4a08      	ldr	r2, [pc, #32]	; (800595c <xTaskPriorityDisinherit+0x104>)
 800593a:	441a      	add	r2, r3
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	3304      	adds	r3, #4
 8005940:	4619      	mov	r1, r3
 8005942:	4610      	mov	r0, r2
 8005944:	f7fe fa4f 	bl	8003de6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005948:	2301      	movs	r3, #1
 800594a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800594c:	697b      	ldr	r3, [r7, #20]
	}
 800594e:	4618      	mov	r0, r3
 8005950:	3718      	adds	r7, #24
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	2000042c 	.word	0x2000042c
 800595c:	20000430 	.word	0x20000430
 8005960:	20000534 	.word	0x20000534

08005964 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005964:	b580      	push	{r7, lr}
 8005966:	b088      	sub	sp, #32
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005972:	2301      	movs	r3, #1
 8005974:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d077      	beq.n	8005a6c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10a      	bne.n	800599a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005988:	f383 8811 	msr	BASEPRI, r3
 800598c:	f3bf 8f6f 	isb	sy
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	60fb      	str	r3, [r7, #12]
}
 8005996:	bf00      	nop
 8005998:	e7fe      	b.n	8005998 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d902      	bls.n	80059aa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	61fb      	str	r3, [r7, #28]
 80059a8:	e002      	b.n	80059b0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b4:	69fa      	ldr	r2, [r7, #28]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d058      	beq.n	8005a6c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d153      	bne.n	8005a6c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80059c4:	4b2b      	ldr	r3, [pc, #172]	; (8005a74 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d10a      	bne.n	80059e4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80059ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d2:	f383 8811 	msr	BASEPRI, r3
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	60bb      	str	r3, [r7, #8]
}
 80059e0:	bf00      	nop
 80059e2:	e7fe      	b.n	80059e2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	69fa      	ldr	r2, [r7, #28]
 80059ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	db04      	blt.n	8005a02 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	f1c3 0207 	rsb	r2, r3, #7
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	6959      	ldr	r1, [r3, #20]
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4a19      	ldr	r2, [pc, #100]	; (8005a78 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005a12:	4413      	add	r3, r2
 8005a14:	4299      	cmp	r1, r3
 8005a16:	d129      	bne.n	8005a6c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	3304      	adds	r3, #4
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7fe fa3f 	bl	8003ea0 <uxListRemove>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10a      	bne.n	8005a3e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a32:	43da      	mvns	r2, r3
 8005a34:	4b11      	ldr	r3, [pc, #68]	; (8005a7c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4013      	ands	r3, r2
 8005a3a:	4a10      	ldr	r2, [pc, #64]	; (8005a7c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005a3c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a42:	2201      	movs	r2, #1
 8005a44:	409a      	lsls	r2, r3
 8005a46:	4b0d      	ldr	r3, [pc, #52]	; (8005a7c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	4a0b      	ldr	r2, [pc, #44]	; (8005a7c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005a4e:	6013      	str	r3, [r2, #0]
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a54:	4613      	mov	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4a06      	ldr	r2, [pc, #24]	; (8005a78 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005a5e:	441a      	add	r2, r3
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	3304      	adds	r3, #4
 8005a64:	4619      	mov	r1, r3
 8005a66:	4610      	mov	r0, r2
 8005a68:	f7fe f9bd 	bl	8003de6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a6c:	bf00      	nop
 8005a6e:	3720      	adds	r7, #32
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	2000042c 	.word	0x2000042c
 8005a78:	20000430 	.word	0x20000430
 8005a7c:	20000534 	.word	0x20000534

08005a80 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005a80:	b480      	push	{r7}
 8005a82:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005a84:	4b07      	ldr	r3, [pc, #28]	; (8005aa4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d004      	beq.n	8005a96 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005a8c:	4b05      	ldr	r3, [pc, #20]	; (8005aa4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a92:	3201      	adds	r2, #1
 8005a94:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005a96:	4b03      	ldr	r3, [pc, #12]	; (8005aa4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005a98:	681b      	ldr	r3, [r3, #0]
	}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	2000042c 	.word	0x2000042c

08005aa8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
 8005ab4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8005ab6:	f000 fb75 	bl	80061a4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005aba:	4b26      	ldr	r3, [pc, #152]	; (8005b54 <xTaskNotifyWait+0xac>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d01a      	beq.n	8005afe <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005ac8:	4b22      	ldr	r3, [pc, #136]	; (8005b54 <xTaskNotifyWait+0xac>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	43d2      	mvns	r2, r2
 8005ad2:	400a      	ands	r2, r1
 8005ad4:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005ad6:	4b1f      	ldr	r3, [pc, #124]	; (8005b54 <xTaskNotifyWait+0xac>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00b      	beq.n	8005afe <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	6838      	ldr	r0, [r7, #0]
 8005aea:	f000 f9c7 	bl	8005e7c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005aee:	4b1a      	ldr	r3, [pc, #104]	; (8005b58 <xTaskNotifyWait+0xb0>)
 8005af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005af4:	601a      	str	r2, [r3, #0]
 8005af6:	f3bf 8f4f 	dsb	sy
 8005afa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005afe:	f000 fb81 	bl	8006204 <vPortExitCritical>

		taskENTER_CRITICAL();
 8005b02:	f000 fb4f 	bl	80061a4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d004      	beq.n	8005b16 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8005b0c:	4b11      	ldr	r3, [pc, #68]	; (8005b54 <xTaskNotifyWait+0xac>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005b16:	4b0f      	ldr	r3, [pc, #60]	; (8005b54 <xTaskNotifyWait+0xac>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d002      	beq.n	8005b2a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8005b24:	2300      	movs	r3, #0
 8005b26:	617b      	str	r3, [r7, #20]
 8005b28:	e008      	b.n	8005b3c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8005b2a:	4b0a      	ldr	r3, [pc, #40]	; (8005b54 <xTaskNotifyWait+0xac>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	43d2      	mvns	r2, r2
 8005b34:	400a      	ands	r2, r1
 8005b36:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005b3c:	4b05      	ldr	r3, [pc, #20]	; (8005b54 <xTaskNotifyWait+0xac>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8005b46:	f000 fb5d 	bl	8006204 <vPortExitCritical>

		return xReturn;
 8005b4a:	697b      	ldr	r3, [r7, #20]
	}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3718      	adds	r7, #24
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	2000042c 	.word	0x2000042c
 8005b58:	e000ed04 	.word	0xe000ed04

08005b5c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b08a      	sub	sp, #40	; 0x28
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	603b      	str	r3, [r7, #0]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10a      	bne.n	8005b8c <xTaskGenericNotify+0x30>
	__asm volatile
 8005b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7a:	f383 8811 	msr	BASEPRI, r3
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	61bb      	str	r3, [r7, #24]
}
 8005b88:	bf00      	nop
 8005b8a:	e7fe      	b.n	8005b8a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8005b90:	f000 fb08 	bl	80061a4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
 8005b9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ba8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	2202      	movs	r2, #2
 8005bae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8005bb2:	79fb      	ldrb	r3, [r7, #7]
 8005bb4:	2b04      	cmp	r3, #4
 8005bb6:	d828      	bhi.n	8005c0a <xTaskGenericNotify+0xae>
 8005bb8:	a201      	add	r2, pc, #4	; (adr r2, 8005bc0 <xTaskGenericNotify+0x64>)
 8005bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbe:	bf00      	nop
 8005bc0:	08005c2b 	.word	0x08005c2b
 8005bc4:	08005bd5 	.word	0x08005bd5
 8005bc8:	08005be3 	.word	0x08005be3
 8005bcc:	08005bef 	.word	0x08005bef
 8005bd0:	08005bf7 	.word	0x08005bf7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005be0:	e026      	b.n	8005c30 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005be6:	1c5a      	adds	r2, r3, #1
 8005be8:	6a3b      	ldr	r3, [r7, #32]
 8005bea:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005bec:	e020      	b.n	8005c30 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005bf4:	e01c      	b.n	8005c30 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005bf6:	7ffb      	ldrb	r3, [r7, #31]
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d003      	beq.n	8005c04 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005c02:	e015      	b.n	8005c30 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 8005c04:	2300      	movs	r3, #0
 8005c06:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8005c08:	e012      	b.n	8005c30 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c12:	d00c      	beq.n	8005c2e <xTaskGenericNotify+0xd2>
	__asm volatile
 8005c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c18:	f383 8811 	msr	BASEPRI, r3
 8005c1c:	f3bf 8f6f 	isb	sy
 8005c20:	f3bf 8f4f 	dsb	sy
 8005c24:	617b      	str	r3, [r7, #20]
}
 8005c26:	bf00      	nop
 8005c28:	e7fe      	b.n	8005c28 <xTaskGenericNotify+0xcc>
					break;
 8005c2a:	bf00      	nop
 8005c2c:	e000      	b.n	8005c30 <xTaskGenericNotify+0xd4>

					break;
 8005c2e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005c30:	7ffb      	ldrb	r3, [r7, #31]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d139      	bne.n	8005caa <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	3304      	adds	r3, #4
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7fe f930 	bl	8003ea0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c44:	2201      	movs	r2, #1
 8005c46:	409a      	lsls	r2, r3
 8005c48:	4b1b      	ldr	r3, [pc, #108]	; (8005cb8 <xTaskGenericNotify+0x15c>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	4a1a      	ldr	r2, [pc, #104]	; (8005cb8 <xTaskGenericNotify+0x15c>)
 8005c50:	6013      	str	r3, [r2, #0]
 8005c52:	6a3b      	ldr	r3, [r7, #32]
 8005c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c56:	4613      	mov	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4413      	add	r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4a17      	ldr	r2, [pc, #92]	; (8005cbc <xTaskGenericNotify+0x160>)
 8005c60:	441a      	add	r2, r3
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	3304      	adds	r3, #4
 8005c66:	4619      	mov	r1, r3
 8005c68:	4610      	mov	r0, r2
 8005c6a:	f7fe f8bc 	bl	8003de6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00a      	beq.n	8005c8c <xTaskGenericNotify+0x130>
	__asm volatile
 8005c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7a:	f383 8811 	msr	BASEPRI, r3
 8005c7e:	f3bf 8f6f 	isb	sy
 8005c82:	f3bf 8f4f 	dsb	sy
 8005c86:	613b      	str	r3, [r7, #16]
}
 8005c88:	bf00      	nop
 8005c8a:	e7fe      	b.n	8005c8a <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c8c:	6a3b      	ldr	r3, [r7, #32]
 8005c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c90:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <xTaskGenericNotify+0x164>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d907      	bls.n	8005caa <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8005c9a:	4b0a      	ldr	r3, [pc, #40]	; (8005cc4 <xTaskGenericNotify+0x168>)
 8005c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ca0:	601a      	str	r2, [r3, #0]
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005caa:	f000 faab 	bl	8006204 <vPortExitCritical>

		return xReturn;
 8005cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3728      	adds	r7, #40	; 0x28
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	20000534 	.word	0x20000534
 8005cbc:	20000430 	.word	0x20000430
 8005cc0:	2000042c 	.word	0x2000042c
 8005cc4:	e000ed04 	.word	0xe000ed04

08005cc8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b08e      	sub	sp, #56	; 0x38
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	603b      	str	r3, [r7, #0]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10a      	bne.n	8005cf8 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8005ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce6:	f383 8811 	msr	BASEPRI, r3
 8005cea:	f3bf 8f6f 	isb	sy
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005cf4:	bf00      	nop
 8005cf6:	e7fe      	b.n	8005cf6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005cf8:	f000 fb36 	bl	8006368 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8005d00:	f3ef 8211 	mrs	r2, BASEPRI
 8005d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d08:	f383 8811 	msr	BASEPRI, r3
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	623a      	str	r2, [r7, #32]
 8005d16:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8005d18:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d36:	2202      	movs	r2, #2
 8005d38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8005d3c:	79fb      	ldrb	r3, [r7, #7]
 8005d3e:	2b04      	cmp	r3, #4
 8005d40:	d828      	bhi.n	8005d94 <xTaskGenericNotifyFromISR+0xcc>
 8005d42:	a201      	add	r2, pc, #4	; (adr r2, 8005d48 <xTaskGenericNotifyFromISR+0x80>)
 8005d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d48:	08005db5 	.word	0x08005db5
 8005d4c:	08005d5d 	.word	0x08005d5d
 8005d50:	08005d6b 	.word	0x08005d6b
 8005d54:	08005d77 	.word	0x08005d77
 8005d58:	08005d7f 	.word	0x08005d7f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	431a      	orrs	r2, r3
 8005d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d66:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005d68:	e027      	b.n	8005dba <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d6e:	1c5a      	adds	r2, r3, #1
 8005d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d72:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005d74:	e021      	b.n	8005dba <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005d7c:	e01d      	b.n	8005dba <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005d7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d003      	beq.n	8005d8e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005d8c:	e015      	b.n	8005dba <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8005d92:	e012      	b.n	8005dba <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9c:	d00c      	beq.n	8005db8 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8005d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da2:	f383 8811 	msr	BASEPRI, r3
 8005da6:	f3bf 8f6f 	isb	sy
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	61bb      	str	r3, [r7, #24]
}
 8005db0:	bf00      	nop
 8005db2:	e7fe      	b.n	8005db2 <xTaskGenericNotifyFromISR+0xea>
					break;
 8005db4:	bf00      	nop
 8005db6:	e000      	b.n	8005dba <xTaskGenericNotifyFromISR+0xf2>
					break;
 8005db8:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005dba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d145      	bne.n	8005e4e <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00a      	beq.n	8005de0 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8005dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dce:	f383 8811 	msr	BASEPRI, r3
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	f3bf 8f4f 	dsb	sy
 8005dda:	617b      	str	r3, [r7, #20]
}
 8005ddc:	bf00      	nop
 8005dde:	e7fe      	b.n	8005dde <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005de0:	4b20      	ldr	r3, [pc, #128]	; (8005e64 <xTaskGenericNotifyFromISR+0x19c>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d11c      	bne.n	8005e22 <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dea:	3304      	adds	r3, #4
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7fe f857 	bl	8003ea0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df6:	2201      	movs	r2, #1
 8005df8:	409a      	lsls	r2, r3
 8005dfa:	4b1b      	ldr	r3, [pc, #108]	; (8005e68 <xTaskGenericNotifyFromISR+0x1a0>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	4a19      	ldr	r2, [pc, #100]	; (8005e68 <xTaskGenericNotifyFromISR+0x1a0>)
 8005e02:	6013      	str	r3, [r2, #0]
 8005e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e08:	4613      	mov	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4a16      	ldr	r2, [pc, #88]	; (8005e6c <xTaskGenericNotifyFromISR+0x1a4>)
 8005e12:	441a      	add	r2, r3
 8005e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e16:	3304      	adds	r3, #4
 8005e18:	4619      	mov	r1, r3
 8005e1a:	4610      	mov	r0, r2
 8005e1c:	f7fd ffe3 	bl	8003de6 <vListInsertEnd>
 8005e20:	e005      	b.n	8005e2e <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e24:	3318      	adds	r3, #24
 8005e26:	4619      	mov	r1, r3
 8005e28:	4811      	ldr	r0, [pc, #68]	; (8005e70 <xTaskGenericNotifyFromISR+0x1a8>)
 8005e2a:	f7fd ffdc 	bl	8003de6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e32:	4b10      	ldr	r3, [pc, #64]	; (8005e74 <xTaskGenericNotifyFromISR+0x1ac>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d908      	bls.n	8005e4e <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d002      	beq.n	8005e48 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005e42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e44:	2201      	movs	r2, #1
 8005e46:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8005e48:	4b0b      	ldr	r3, [pc, #44]	; (8005e78 <xTaskGenericNotifyFromISR+0x1b0>)
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	601a      	str	r2, [r3, #0]
 8005e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e50:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	f383 8811 	msr	BASEPRI, r3
}
 8005e58:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8005e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3738      	adds	r7, #56	; 0x38
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	20000554 	.word	0x20000554
 8005e68:	20000534 	.word	0x20000534
 8005e6c:	20000430 	.word	0x20000430
 8005e70:	200004ec 	.word	0x200004ec
 8005e74:	2000042c 	.word	0x2000042c
 8005e78:	20000540 	.word	0x20000540

08005e7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e86:	4b29      	ldr	r3, [pc, #164]	; (8005f2c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e8c:	4b28      	ldr	r3, [pc, #160]	; (8005f30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3304      	adds	r3, #4
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7fe f804 	bl	8003ea0 <uxListRemove>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10b      	bne.n	8005eb6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005e9e:	4b24      	ldr	r3, [pc, #144]	; (8005f30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eaa:	43da      	mvns	r2, r3
 8005eac:	4b21      	ldr	r3, [pc, #132]	; (8005f34 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	4a20      	ldr	r2, [pc, #128]	; (8005f34 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005eb4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ebc:	d10a      	bne.n	8005ed4 <prvAddCurrentTaskToDelayedList+0x58>
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d007      	beq.n	8005ed4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ec4:	4b1a      	ldr	r3, [pc, #104]	; (8005f30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	3304      	adds	r3, #4
 8005eca:	4619      	mov	r1, r3
 8005ecc:	481a      	ldr	r0, [pc, #104]	; (8005f38 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005ece:	f7fd ff8a 	bl	8003de6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ed2:	e026      	b.n	8005f22 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4413      	add	r3, r2
 8005eda:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005edc:	4b14      	ldr	r3, [pc, #80]	; (8005f30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d209      	bcs.n	8005f00 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eec:	4b13      	ldr	r3, [pc, #76]	; (8005f3c <prvAddCurrentTaskToDelayedList+0xc0>)
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	4b0f      	ldr	r3, [pc, #60]	; (8005f30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	4610      	mov	r0, r2
 8005efa:	f7fd ff98 	bl	8003e2e <vListInsert>
}
 8005efe:	e010      	b.n	8005f22 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f00:	4b0f      	ldr	r3, [pc, #60]	; (8005f40 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	4b0a      	ldr	r3, [pc, #40]	; (8005f30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	3304      	adds	r3, #4
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	4610      	mov	r0, r2
 8005f0e:	f7fd ff8e 	bl	8003e2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f12:	4b0c      	ldr	r3, [pc, #48]	; (8005f44 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d202      	bcs.n	8005f22 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005f1c:	4a09      	ldr	r2, [pc, #36]	; (8005f44 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	6013      	str	r3, [r2, #0]
}
 8005f22:	bf00      	nop
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	20000530 	.word	0x20000530
 8005f30:	2000042c 	.word	0x2000042c
 8005f34:	20000534 	.word	0x20000534
 8005f38:	20000518 	.word	0x20000518
 8005f3c:	200004e8 	.word	0x200004e8
 8005f40:	200004e4 	.word	0x200004e4
 8005f44:	2000054c 	.word	0x2000054c

08005f48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	3b04      	subs	r3, #4
 8005f58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	3b04      	subs	r3, #4
 8005f66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	f023 0201 	bic.w	r2, r3, #1
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	3b04      	subs	r3, #4
 8005f76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f78:	4a0c      	ldr	r2, [pc, #48]	; (8005fac <pxPortInitialiseStack+0x64>)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	3b14      	subs	r3, #20
 8005f82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	3b04      	subs	r3, #4
 8005f8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f06f 0202 	mvn.w	r2, #2
 8005f96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	3b20      	subs	r3, #32
 8005f9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	08005fb1 	.word	0x08005fb1

08005fb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005fba:	4b12      	ldr	r3, [pc, #72]	; (8006004 <prvTaskExitError+0x54>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc2:	d00a      	beq.n	8005fda <prvTaskExitError+0x2a>
	__asm volatile
 8005fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc8:	f383 8811 	msr	BASEPRI, r3
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	60fb      	str	r3, [r7, #12]
}
 8005fd6:	bf00      	nop
 8005fd8:	e7fe      	b.n	8005fd8 <prvTaskExitError+0x28>
	__asm volatile
 8005fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fde:	f383 8811 	msr	BASEPRI, r3
 8005fe2:	f3bf 8f6f 	isb	sy
 8005fe6:	f3bf 8f4f 	dsb	sy
 8005fea:	60bb      	str	r3, [r7, #8]
}
 8005fec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005fee:	bf00      	nop
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d0fc      	beq.n	8005ff0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ff6:	bf00      	nop
 8005ff8:	bf00      	nop
 8005ffa:	3714      	adds	r7, #20
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr
 8006004:	2000000c 	.word	0x2000000c
	...

08006010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006010:	4b07      	ldr	r3, [pc, #28]	; (8006030 <pxCurrentTCBConst2>)
 8006012:	6819      	ldr	r1, [r3, #0]
 8006014:	6808      	ldr	r0, [r1, #0]
 8006016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800601a:	f380 8809 	msr	PSP, r0
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	f04f 0000 	mov.w	r0, #0
 8006026:	f380 8811 	msr	BASEPRI, r0
 800602a:	4770      	bx	lr
 800602c:	f3af 8000 	nop.w

08006030 <pxCurrentTCBConst2>:
 8006030:	2000042c 	.word	0x2000042c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006034:	bf00      	nop
 8006036:	bf00      	nop

08006038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006038:	4808      	ldr	r0, [pc, #32]	; (800605c <prvPortStartFirstTask+0x24>)
 800603a:	6800      	ldr	r0, [r0, #0]
 800603c:	6800      	ldr	r0, [r0, #0]
 800603e:	f380 8808 	msr	MSP, r0
 8006042:	f04f 0000 	mov.w	r0, #0
 8006046:	f380 8814 	msr	CONTROL, r0
 800604a:	b662      	cpsie	i
 800604c:	b661      	cpsie	f
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	df00      	svc	0
 8006058:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800605a:	bf00      	nop
 800605c:	e000ed08 	.word	0xe000ed08

08006060 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006066:	4b46      	ldr	r3, [pc, #280]	; (8006180 <xPortStartScheduler+0x120>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a46      	ldr	r2, [pc, #280]	; (8006184 <xPortStartScheduler+0x124>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d10a      	bne.n	8006086 <xPortStartScheduler+0x26>
	__asm volatile
 8006070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006074:	f383 8811 	msr	BASEPRI, r3
 8006078:	f3bf 8f6f 	isb	sy
 800607c:	f3bf 8f4f 	dsb	sy
 8006080:	613b      	str	r3, [r7, #16]
}
 8006082:	bf00      	nop
 8006084:	e7fe      	b.n	8006084 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006086:	4b3e      	ldr	r3, [pc, #248]	; (8006180 <xPortStartScheduler+0x120>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a3f      	ldr	r2, [pc, #252]	; (8006188 <xPortStartScheduler+0x128>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d10a      	bne.n	80060a6 <xPortStartScheduler+0x46>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	60fb      	str	r3, [r7, #12]
}
 80060a2:	bf00      	nop
 80060a4:	e7fe      	b.n	80060a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80060a6:	4b39      	ldr	r3, [pc, #228]	; (800618c <xPortStartScheduler+0x12c>)
 80060a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	22ff      	movs	r2, #255	; 0xff
 80060b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80060c0:	78fb      	ldrb	r3, [r7, #3]
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80060c8:	b2da      	uxtb	r2, r3
 80060ca:	4b31      	ldr	r3, [pc, #196]	; (8006190 <xPortStartScheduler+0x130>)
 80060cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80060ce:	4b31      	ldr	r3, [pc, #196]	; (8006194 <xPortStartScheduler+0x134>)
 80060d0:	2207      	movs	r2, #7
 80060d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060d4:	e009      	b.n	80060ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80060d6:	4b2f      	ldr	r3, [pc, #188]	; (8006194 <xPortStartScheduler+0x134>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	3b01      	subs	r3, #1
 80060dc:	4a2d      	ldr	r2, [pc, #180]	; (8006194 <xPortStartScheduler+0x134>)
 80060de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80060e0:	78fb      	ldrb	r3, [r7, #3]
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	005b      	lsls	r3, r3, #1
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060ea:	78fb      	ldrb	r3, [r7, #3]
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f2:	2b80      	cmp	r3, #128	; 0x80
 80060f4:	d0ef      	beq.n	80060d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80060f6:	4b27      	ldr	r3, [pc, #156]	; (8006194 <xPortStartScheduler+0x134>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f1c3 0307 	rsb	r3, r3, #7
 80060fe:	2b04      	cmp	r3, #4
 8006100:	d00a      	beq.n	8006118 <xPortStartScheduler+0xb8>
	__asm volatile
 8006102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006106:	f383 8811 	msr	BASEPRI, r3
 800610a:	f3bf 8f6f 	isb	sy
 800610e:	f3bf 8f4f 	dsb	sy
 8006112:	60bb      	str	r3, [r7, #8]
}
 8006114:	bf00      	nop
 8006116:	e7fe      	b.n	8006116 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006118:	4b1e      	ldr	r3, [pc, #120]	; (8006194 <xPortStartScheduler+0x134>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	021b      	lsls	r3, r3, #8
 800611e:	4a1d      	ldr	r2, [pc, #116]	; (8006194 <xPortStartScheduler+0x134>)
 8006120:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006122:	4b1c      	ldr	r3, [pc, #112]	; (8006194 <xPortStartScheduler+0x134>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800612a:	4a1a      	ldr	r2, [pc, #104]	; (8006194 <xPortStartScheduler+0x134>)
 800612c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	b2da      	uxtb	r2, r3
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006136:	4b18      	ldr	r3, [pc, #96]	; (8006198 <xPortStartScheduler+0x138>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a17      	ldr	r2, [pc, #92]	; (8006198 <xPortStartScheduler+0x138>)
 800613c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006140:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006142:	4b15      	ldr	r3, [pc, #84]	; (8006198 <xPortStartScheduler+0x138>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a14      	ldr	r2, [pc, #80]	; (8006198 <xPortStartScheduler+0x138>)
 8006148:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800614c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800614e:	f000 f8dd 	bl	800630c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006152:	4b12      	ldr	r3, [pc, #72]	; (800619c <xPortStartScheduler+0x13c>)
 8006154:	2200      	movs	r2, #0
 8006156:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006158:	f000 f8fc 	bl	8006354 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800615c:	4b10      	ldr	r3, [pc, #64]	; (80061a0 <xPortStartScheduler+0x140>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a0f      	ldr	r2, [pc, #60]	; (80061a0 <xPortStartScheduler+0x140>)
 8006162:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006166:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006168:	f7ff ff66 	bl	8006038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800616c:	f7ff f8a4 	bl	80052b8 <vTaskSwitchContext>
	prvTaskExitError();
 8006170:	f7ff ff1e 	bl	8005fb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3718      	adds	r7, #24
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	e000ed00 	.word	0xe000ed00
 8006184:	410fc271 	.word	0x410fc271
 8006188:	410fc270 	.word	0x410fc270
 800618c:	e000e400 	.word	0xe000e400
 8006190:	20000558 	.word	0x20000558
 8006194:	2000055c 	.word	0x2000055c
 8006198:	e000ed20 	.word	0xe000ed20
 800619c:	2000000c 	.word	0x2000000c
 80061a0:	e000ef34 	.word	0xe000ef34

080061a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
	__asm volatile
 80061aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ae:	f383 8811 	msr	BASEPRI, r3
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	607b      	str	r3, [r7, #4]
}
 80061bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80061be:	4b0f      	ldr	r3, [pc, #60]	; (80061fc <vPortEnterCritical+0x58>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	3301      	adds	r3, #1
 80061c4:	4a0d      	ldr	r2, [pc, #52]	; (80061fc <vPortEnterCritical+0x58>)
 80061c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80061c8:	4b0c      	ldr	r3, [pc, #48]	; (80061fc <vPortEnterCritical+0x58>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d10f      	bne.n	80061f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80061d0:	4b0b      	ldr	r3, [pc, #44]	; (8006200 <vPortEnterCritical+0x5c>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00a      	beq.n	80061f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80061da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061de:	f383 8811 	msr	BASEPRI, r3
 80061e2:	f3bf 8f6f 	isb	sy
 80061e6:	f3bf 8f4f 	dsb	sy
 80061ea:	603b      	str	r3, [r7, #0]
}
 80061ec:	bf00      	nop
 80061ee:	e7fe      	b.n	80061ee <vPortEnterCritical+0x4a>
	}
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	2000000c 	.word	0x2000000c
 8006200:	e000ed04 	.word	0xe000ed04

08006204 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800620a:	4b12      	ldr	r3, [pc, #72]	; (8006254 <vPortExitCritical+0x50>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10a      	bne.n	8006228 <vPortExitCritical+0x24>
	__asm volatile
 8006212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006216:	f383 8811 	msr	BASEPRI, r3
 800621a:	f3bf 8f6f 	isb	sy
 800621e:	f3bf 8f4f 	dsb	sy
 8006222:	607b      	str	r3, [r7, #4]
}
 8006224:	bf00      	nop
 8006226:	e7fe      	b.n	8006226 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006228:	4b0a      	ldr	r3, [pc, #40]	; (8006254 <vPortExitCritical+0x50>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3b01      	subs	r3, #1
 800622e:	4a09      	ldr	r2, [pc, #36]	; (8006254 <vPortExitCritical+0x50>)
 8006230:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006232:	4b08      	ldr	r3, [pc, #32]	; (8006254 <vPortExitCritical+0x50>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d105      	bne.n	8006246 <vPortExitCritical+0x42>
 800623a:	2300      	movs	r3, #0
 800623c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	f383 8811 	msr	BASEPRI, r3
}
 8006244:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	2000000c 	.word	0x2000000c
	...

08006260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006260:	f3ef 8009 	mrs	r0, PSP
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	4b15      	ldr	r3, [pc, #84]	; (80062c0 <pxCurrentTCBConst>)
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	f01e 0f10 	tst.w	lr, #16
 8006270:	bf08      	it	eq
 8006272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800627a:	6010      	str	r0, [r2, #0]
 800627c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006280:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006284:	f380 8811 	msr	BASEPRI, r0
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	f3bf 8f6f 	isb	sy
 8006290:	f7ff f812 	bl	80052b8 <vTaskSwitchContext>
 8006294:	f04f 0000 	mov.w	r0, #0
 8006298:	f380 8811 	msr	BASEPRI, r0
 800629c:	bc09      	pop	{r0, r3}
 800629e:	6819      	ldr	r1, [r3, #0]
 80062a0:	6808      	ldr	r0, [r1, #0]
 80062a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a6:	f01e 0f10 	tst.w	lr, #16
 80062aa:	bf08      	it	eq
 80062ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80062b0:	f380 8809 	msr	PSP, r0
 80062b4:	f3bf 8f6f 	isb	sy
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	f3af 8000 	nop.w

080062c0 <pxCurrentTCBConst>:
 80062c0:	2000042c 	.word	0x2000042c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80062c4:	bf00      	nop
 80062c6:	bf00      	nop

080062c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
	__asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	607b      	str	r3, [r7, #4]
}
 80062e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80062e2:	f7fe ff31 	bl	8005148 <xTaskIncrementTick>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d003      	beq.n	80062f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80062ec:	4b06      	ldr	r3, [pc, #24]	; (8006308 <SysTick_Handler+0x40>)
 80062ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062f2:	601a      	str	r2, [r3, #0]
 80062f4:	2300      	movs	r3, #0
 80062f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	f383 8811 	msr	BASEPRI, r3
}
 80062fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006300:	bf00      	nop
 8006302:	3708      	adds	r7, #8
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	e000ed04 	.word	0xe000ed04

0800630c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800630c:	b480      	push	{r7}
 800630e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006310:	4b0b      	ldr	r3, [pc, #44]	; (8006340 <vPortSetupTimerInterrupt+0x34>)
 8006312:	2200      	movs	r2, #0
 8006314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006316:	4b0b      	ldr	r3, [pc, #44]	; (8006344 <vPortSetupTimerInterrupt+0x38>)
 8006318:	2200      	movs	r2, #0
 800631a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800631c:	4b0a      	ldr	r3, [pc, #40]	; (8006348 <vPortSetupTimerInterrupt+0x3c>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a0a      	ldr	r2, [pc, #40]	; (800634c <vPortSetupTimerInterrupt+0x40>)
 8006322:	fba2 2303 	umull	r2, r3, r2, r3
 8006326:	099b      	lsrs	r3, r3, #6
 8006328:	4a09      	ldr	r2, [pc, #36]	; (8006350 <vPortSetupTimerInterrupt+0x44>)
 800632a:	3b01      	subs	r3, #1
 800632c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800632e:	4b04      	ldr	r3, [pc, #16]	; (8006340 <vPortSetupTimerInterrupt+0x34>)
 8006330:	2207      	movs	r2, #7
 8006332:	601a      	str	r2, [r3, #0]
}
 8006334:	bf00      	nop
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	e000e010 	.word	0xe000e010
 8006344:	e000e018 	.word	0xe000e018
 8006348:	20000000 	.word	0x20000000
 800634c:	10624dd3 	.word	0x10624dd3
 8006350:	e000e014 	.word	0xe000e014

08006354 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006354:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006364 <vPortEnableVFP+0x10>
 8006358:	6801      	ldr	r1, [r0, #0]
 800635a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800635e:	6001      	str	r1, [r0, #0]
 8006360:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006362:	bf00      	nop
 8006364:	e000ed88 	.word	0xe000ed88

08006368 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800636e:	f3ef 8305 	mrs	r3, IPSR
 8006372:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2b0f      	cmp	r3, #15
 8006378:	d914      	bls.n	80063a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800637a:	4a17      	ldr	r2, [pc, #92]	; (80063d8 <vPortValidateInterruptPriority+0x70>)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	4413      	add	r3, r2
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006384:	4b15      	ldr	r3, [pc, #84]	; (80063dc <vPortValidateInterruptPriority+0x74>)
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	7afa      	ldrb	r2, [r7, #11]
 800638a:	429a      	cmp	r2, r3
 800638c:	d20a      	bcs.n	80063a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800638e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	607b      	str	r3, [r7, #4]
}
 80063a0:	bf00      	nop
 80063a2:	e7fe      	b.n	80063a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80063a4:	4b0e      	ldr	r3, [pc, #56]	; (80063e0 <vPortValidateInterruptPriority+0x78>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80063ac:	4b0d      	ldr	r3, [pc, #52]	; (80063e4 <vPortValidateInterruptPriority+0x7c>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d90a      	bls.n	80063ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80063b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b8:	f383 8811 	msr	BASEPRI, r3
 80063bc:	f3bf 8f6f 	isb	sy
 80063c0:	f3bf 8f4f 	dsb	sy
 80063c4:	603b      	str	r3, [r7, #0]
}
 80063c6:	bf00      	nop
 80063c8:	e7fe      	b.n	80063c8 <vPortValidateInterruptPriority+0x60>
	}
 80063ca:	bf00      	nop
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	e000e3f0 	.word	0xe000e3f0
 80063dc:	20000558 	.word	0x20000558
 80063e0:	e000ed0c 	.word	0xe000ed0c
 80063e4:	2000055c 	.word	0x2000055c

080063e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b08a      	sub	sp, #40	; 0x28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80063f0:	2300      	movs	r3, #0
 80063f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80063f4:	f7fe fdfe 	bl	8004ff4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80063f8:	4b5b      	ldr	r3, [pc, #364]	; (8006568 <pvPortMalloc+0x180>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006400:	f000 f920 	bl	8006644 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006404:	4b59      	ldr	r3, [pc, #356]	; (800656c <pvPortMalloc+0x184>)
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4013      	ands	r3, r2
 800640c:	2b00      	cmp	r3, #0
 800640e:	f040 8093 	bne.w	8006538 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d01d      	beq.n	8006454 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006418:	2208      	movs	r2, #8
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4413      	add	r3, r2
 800641e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f003 0307 	and.w	r3, r3, #7
 8006426:	2b00      	cmp	r3, #0
 8006428:	d014      	beq.n	8006454 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f023 0307 	bic.w	r3, r3, #7
 8006430:	3308      	adds	r3, #8
 8006432:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f003 0307 	and.w	r3, r3, #7
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00a      	beq.n	8006454 <pvPortMalloc+0x6c>
	__asm volatile
 800643e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006442:	f383 8811 	msr	BASEPRI, r3
 8006446:	f3bf 8f6f 	isb	sy
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	617b      	str	r3, [r7, #20]
}
 8006450:	bf00      	nop
 8006452:	e7fe      	b.n	8006452 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d06e      	beq.n	8006538 <pvPortMalloc+0x150>
 800645a:	4b45      	ldr	r3, [pc, #276]	; (8006570 <pvPortMalloc+0x188>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	429a      	cmp	r2, r3
 8006462:	d869      	bhi.n	8006538 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006464:	4b43      	ldr	r3, [pc, #268]	; (8006574 <pvPortMalloc+0x18c>)
 8006466:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006468:	4b42      	ldr	r3, [pc, #264]	; (8006574 <pvPortMalloc+0x18c>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800646e:	e004      	b.n	800647a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	429a      	cmp	r2, r3
 8006482:	d903      	bls.n	800648c <pvPortMalloc+0xa4>
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1f1      	bne.n	8006470 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800648c:	4b36      	ldr	r3, [pc, #216]	; (8006568 <pvPortMalloc+0x180>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006492:	429a      	cmp	r2, r3
 8006494:	d050      	beq.n	8006538 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2208      	movs	r2, #8
 800649c:	4413      	add	r3, r2
 800649e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	6a3b      	ldr	r3, [r7, #32]
 80064a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80064a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	1ad2      	subs	r2, r2, r3
 80064b0:	2308      	movs	r3, #8
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d91f      	bls.n	80064f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80064b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4413      	add	r3, r2
 80064be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	f003 0307 	and.w	r3, r3, #7
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00a      	beq.n	80064e0 <pvPortMalloc+0xf8>
	__asm volatile
 80064ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ce:	f383 8811 	msr	BASEPRI, r3
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	613b      	str	r3, [r7, #16]
}
 80064dc:	bf00      	nop
 80064de:	e7fe      	b.n	80064de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80064e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e2:	685a      	ldr	r2, [r3, #4]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	1ad2      	subs	r2, r2, r3
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80064ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80064f2:	69b8      	ldr	r0, [r7, #24]
 80064f4:	f000 f908 	bl	8006708 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80064f8:	4b1d      	ldr	r3, [pc, #116]	; (8006570 <pvPortMalloc+0x188>)
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	4a1b      	ldr	r2, [pc, #108]	; (8006570 <pvPortMalloc+0x188>)
 8006504:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006506:	4b1a      	ldr	r3, [pc, #104]	; (8006570 <pvPortMalloc+0x188>)
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	4b1b      	ldr	r3, [pc, #108]	; (8006578 <pvPortMalloc+0x190>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	429a      	cmp	r2, r3
 8006510:	d203      	bcs.n	800651a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006512:	4b17      	ldr	r3, [pc, #92]	; (8006570 <pvPortMalloc+0x188>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a18      	ldr	r2, [pc, #96]	; (8006578 <pvPortMalloc+0x190>)
 8006518:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	4b13      	ldr	r3, [pc, #76]	; (800656c <pvPortMalloc+0x184>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	431a      	orrs	r2, r3
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652a:	2200      	movs	r2, #0
 800652c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800652e:	4b13      	ldr	r3, [pc, #76]	; (800657c <pvPortMalloc+0x194>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	3301      	adds	r3, #1
 8006534:	4a11      	ldr	r2, [pc, #68]	; (800657c <pvPortMalloc+0x194>)
 8006536:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006538:	f7fe fd6a 	bl	8005010 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	f003 0307 	and.w	r3, r3, #7
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00a      	beq.n	800655c <pvPortMalloc+0x174>
	__asm volatile
 8006546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654a:	f383 8811 	msr	BASEPRI, r3
 800654e:	f3bf 8f6f 	isb	sy
 8006552:	f3bf 8f4f 	dsb	sy
 8006556:	60fb      	str	r3, [r7, #12]
}
 8006558:	bf00      	nop
 800655a:	e7fe      	b.n	800655a <pvPortMalloc+0x172>
	return pvReturn;
 800655c:	69fb      	ldr	r3, [r7, #28]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3728      	adds	r7, #40	; 0x28
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	20004168 	.word	0x20004168
 800656c:	2000417c 	.word	0x2000417c
 8006570:	2000416c 	.word	0x2000416c
 8006574:	20004160 	.word	0x20004160
 8006578:	20004170 	.word	0x20004170
 800657c:	20004174 	.word	0x20004174

08006580 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d04d      	beq.n	800662e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006592:	2308      	movs	r3, #8
 8006594:	425b      	negs	r3, r3
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	4413      	add	r3, r2
 800659a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	685a      	ldr	r2, [r3, #4]
 80065a4:	4b24      	ldr	r3, [pc, #144]	; (8006638 <vPortFree+0xb8>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4013      	ands	r3, r2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10a      	bne.n	80065c4 <vPortFree+0x44>
	__asm volatile
 80065ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b2:	f383 8811 	msr	BASEPRI, r3
 80065b6:	f3bf 8f6f 	isb	sy
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	60fb      	str	r3, [r7, #12]
}
 80065c0:	bf00      	nop
 80065c2:	e7fe      	b.n	80065c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00a      	beq.n	80065e2 <vPortFree+0x62>
	__asm volatile
 80065cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d0:	f383 8811 	msr	BASEPRI, r3
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	60bb      	str	r3, [r7, #8]
}
 80065de:	bf00      	nop
 80065e0:	e7fe      	b.n	80065e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	4b14      	ldr	r3, [pc, #80]	; (8006638 <vPortFree+0xb8>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4013      	ands	r3, r2
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d01e      	beq.n	800662e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d11a      	bne.n	800662e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	685a      	ldr	r2, [r3, #4]
 80065fc:	4b0e      	ldr	r3, [pc, #56]	; (8006638 <vPortFree+0xb8>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	43db      	mvns	r3, r3
 8006602:	401a      	ands	r2, r3
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006608:	f7fe fcf4 	bl	8004ff4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	4b0a      	ldr	r3, [pc, #40]	; (800663c <vPortFree+0xbc>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4413      	add	r3, r2
 8006616:	4a09      	ldr	r2, [pc, #36]	; (800663c <vPortFree+0xbc>)
 8006618:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800661a:	6938      	ldr	r0, [r7, #16]
 800661c:	f000 f874 	bl	8006708 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006620:	4b07      	ldr	r3, [pc, #28]	; (8006640 <vPortFree+0xc0>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	3301      	adds	r3, #1
 8006626:	4a06      	ldr	r2, [pc, #24]	; (8006640 <vPortFree+0xc0>)
 8006628:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800662a:	f7fe fcf1 	bl	8005010 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800662e:	bf00      	nop
 8006630:	3718      	adds	r7, #24
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	2000417c 	.word	0x2000417c
 800663c:	2000416c 	.word	0x2000416c
 8006640:	20004178 	.word	0x20004178

08006644 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800664a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800664e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006650:	4b27      	ldr	r3, [pc, #156]	; (80066f0 <prvHeapInit+0xac>)
 8006652:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f003 0307 	and.w	r3, r3, #7
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00c      	beq.n	8006678 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	3307      	adds	r3, #7
 8006662:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f023 0307 	bic.w	r3, r3, #7
 800666a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	4a1f      	ldr	r2, [pc, #124]	; (80066f0 <prvHeapInit+0xac>)
 8006674:	4413      	add	r3, r2
 8006676:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800667c:	4a1d      	ldr	r2, [pc, #116]	; (80066f4 <prvHeapInit+0xb0>)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006682:	4b1c      	ldr	r3, [pc, #112]	; (80066f4 <prvHeapInit+0xb0>)
 8006684:	2200      	movs	r2, #0
 8006686:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68ba      	ldr	r2, [r7, #8]
 800668c:	4413      	add	r3, r2
 800668e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006690:	2208      	movs	r2, #8
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	1a9b      	subs	r3, r3, r2
 8006696:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f023 0307 	bic.w	r3, r3, #7
 800669e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	4a15      	ldr	r2, [pc, #84]	; (80066f8 <prvHeapInit+0xb4>)
 80066a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80066a6:	4b14      	ldr	r3, [pc, #80]	; (80066f8 <prvHeapInit+0xb4>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2200      	movs	r2, #0
 80066ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80066ae:	4b12      	ldr	r3, [pc, #72]	; (80066f8 <prvHeapInit+0xb4>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2200      	movs	r2, #0
 80066b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	1ad2      	subs	r2, r2, r3
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80066c4:	4b0c      	ldr	r3, [pc, #48]	; (80066f8 <prvHeapInit+0xb4>)
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	4a0a      	ldr	r2, [pc, #40]	; (80066fc <prvHeapInit+0xb8>)
 80066d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	4a09      	ldr	r2, [pc, #36]	; (8006700 <prvHeapInit+0xbc>)
 80066da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80066dc:	4b09      	ldr	r3, [pc, #36]	; (8006704 <prvHeapInit+0xc0>)
 80066de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80066e2:	601a      	str	r2, [r3, #0]
}
 80066e4:	bf00      	nop
 80066e6:	3714      	adds	r7, #20
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	20000560 	.word	0x20000560
 80066f4:	20004160 	.word	0x20004160
 80066f8:	20004168 	.word	0x20004168
 80066fc:	20004170 	.word	0x20004170
 8006700:	2000416c 	.word	0x2000416c
 8006704:	2000417c 	.word	0x2000417c

08006708 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006710:	4b28      	ldr	r3, [pc, #160]	; (80067b4 <prvInsertBlockIntoFreeList+0xac>)
 8006712:	60fb      	str	r3, [r7, #12]
 8006714:	e002      	b.n	800671c <prvInsertBlockIntoFreeList+0x14>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	60fb      	str	r3, [r7, #12]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	429a      	cmp	r2, r3
 8006724:	d8f7      	bhi.n	8006716 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	4413      	add	r3, r2
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	429a      	cmp	r2, r3
 8006736:	d108      	bne.n	800674a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	441a      	add	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	441a      	add	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	429a      	cmp	r2, r3
 800675c:	d118      	bne.n	8006790 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	4b15      	ldr	r3, [pc, #84]	; (80067b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	429a      	cmp	r2, r3
 8006768:	d00d      	beq.n	8006786 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685a      	ldr	r2, [r3, #4]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	441a      	add	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	e008      	b.n	8006798 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006786:	4b0c      	ldr	r3, [pc, #48]	; (80067b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	601a      	str	r2, [r3, #0]
 800678e:	e003      	b.n	8006798 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	429a      	cmp	r2, r3
 800679e:	d002      	beq.n	80067a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067a6:	bf00      	nop
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	20004160 	.word	0x20004160
 80067b8:	20004168 	.word	0x20004168

080067bc <__errno>:
 80067bc:	4b01      	ldr	r3, [pc, #4]	; (80067c4 <__errno+0x8>)
 80067be:	6818      	ldr	r0, [r3, #0]
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	20000010 	.word	0x20000010

080067c8 <__libc_init_array>:
 80067c8:	b570      	push	{r4, r5, r6, lr}
 80067ca:	4d0d      	ldr	r5, [pc, #52]	; (8006800 <__libc_init_array+0x38>)
 80067cc:	4c0d      	ldr	r4, [pc, #52]	; (8006804 <__libc_init_array+0x3c>)
 80067ce:	1b64      	subs	r4, r4, r5
 80067d0:	10a4      	asrs	r4, r4, #2
 80067d2:	2600      	movs	r6, #0
 80067d4:	42a6      	cmp	r6, r4
 80067d6:	d109      	bne.n	80067ec <__libc_init_array+0x24>
 80067d8:	4d0b      	ldr	r5, [pc, #44]	; (8006808 <__libc_init_array+0x40>)
 80067da:	4c0c      	ldr	r4, [pc, #48]	; (800680c <__libc_init_array+0x44>)
 80067dc:	f000 fc8e 	bl	80070fc <_init>
 80067e0:	1b64      	subs	r4, r4, r5
 80067e2:	10a4      	asrs	r4, r4, #2
 80067e4:	2600      	movs	r6, #0
 80067e6:	42a6      	cmp	r6, r4
 80067e8:	d105      	bne.n	80067f6 <__libc_init_array+0x2e>
 80067ea:	bd70      	pop	{r4, r5, r6, pc}
 80067ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80067f0:	4798      	blx	r3
 80067f2:	3601      	adds	r6, #1
 80067f4:	e7ee      	b.n	80067d4 <__libc_init_array+0xc>
 80067f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80067fa:	4798      	blx	r3
 80067fc:	3601      	adds	r6, #1
 80067fe:	e7f2      	b.n	80067e6 <__libc_init_array+0x1e>
 8006800:	08007404 	.word	0x08007404
 8006804:	08007404 	.word	0x08007404
 8006808:	08007404 	.word	0x08007404
 800680c:	08007408 	.word	0x08007408

08006810 <memcpy>:
 8006810:	440a      	add	r2, r1
 8006812:	4291      	cmp	r1, r2
 8006814:	f100 33ff 	add.w	r3, r0, #4294967295
 8006818:	d100      	bne.n	800681c <memcpy+0xc>
 800681a:	4770      	bx	lr
 800681c:	b510      	push	{r4, lr}
 800681e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006822:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006826:	4291      	cmp	r1, r2
 8006828:	d1f9      	bne.n	800681e <memcpy+0xe>
 800682a:	bd10      	pop	{r4, pc}

0800682c <memset>:
 800682c:	4402      	add	r2, r0
 800682e:	4603      	mov	r3, r0
 8006830:	4293      	cmp	r3, r2
 8006832:	d100      	bne.n	8006836 <memset+0xa>
 8006834:	4770      	bx	lr
 8006836:	f803 1b01 	strb.w	r1, [r3], #1
 800683a:	e7f9      	b.n	8006830 <memset+0x4>

0800683c <siprintf>:
 800683c:	b40e      	push	{r1, r2, r3}
 800683e:	b500      	push	{lr}
 8006840:	b09c      	sub	sp, #112	; 0x70
 8006842:	ab1d      	add	r3, sp, #116	; 0x74
 8006844:	9002      	str	r0, [sp, #8]
 8006846:	9006      	str	r0, [sp, #24]
 8006848:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800684c:	4809      	ldr	r0, [pc, #36]	; (8006874 <siprintf+0x38>)
 800684e:	9107      	str	r1, [sp, #28]
 8006850:	9104      	str	r1, [sp, #16]
 8006852:	4909      	ldr	r1, [pc, #36]	; (8006878 <siprintf+0x3c>)
 8006854:	f853 2b04 	ldr.w	r2, [r3], #4
 8006858:	9105      	str	r1, [sp, #20]
 800685a:	6800      	ldr	r0, [r0, #0]
 800685c:	9301      	str	r3, [sp, #4]
 800685e:	a902      	add	r1, sp, #8
 8006860:	f000 f868 	bl	8006934 <_svfiprintf_r>
 8006864:	9b02      	ldr	r3, [sp, #8]
 8006866:	2200      	movs	r2, #0
 8006868:	701a      	strb	r2, [r3, #0]
 800686a:	b01c      	add	sp, #112	; 0x70
 800686c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006870:	b003      	add	sp, #12
 8006872:	4770      	bx	lr
 8006874:	20000010 	.word	0x20000010
 8006878:	ffff0208 	.word	0xffff0208

0800687c <__ssputs_r>:
 800687c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006880:	688e      	ldr	r6, [r1, #8]
 8006882:	429e      	cmp	r6, r3
 8006884:	4682      	mov	sl, r0
 8006886:	460c      	mov	r4, r1
 8006888:	4690      	mov	r8, r2
 800688a:	461f      	mov	r7, r3
 800688c:	d838      	bhi.n	8006900 <__ssputs_r+0x84>
 800688e:	898a      	ldrh	r2, [r1, #12]
 8006890:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006894:	d032      	beq.n	80068fc <__ssputs_r+0x80>
 8006896:	6825      	ldr	r5, [r4, #0]
 8006898:	6909      	ldr	r1, [r1, #16]
 800689a:	eba5 0901 	sub.w	r9, r5, r1
 800689e:	6965      	ldr	r5, [r4, #20]
 80068a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80068a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80068a8:	3301      	adds	r3, #1
 80068aa:	444b      	add	r3, r9
 80068ac:	106d      	asrs	r5, r5, #1
 80068ae:	429d      	cmp	r5, r3
 80068b0:	bf38      	it	cc
 80068b2:	461d      	movcc	r5, r3
 80068b4:	0553      	lsls	r3, r2, #21
 80068b6:	d531      	bpl.n	800691c <__ssputs_r+0xa0>
 80068b8:	4629      	mov	r1, r5
 80068ba:	f000 fb55 	bl	8006f68 <_malloc_r>
 80068be:	4606      	mov	r6, r0
 80068c0:	b950      	cbnz	r0, 80068d8 <__ssputs_r+0x5c>
 80068c2:	230c      	movs	r3, #12
 80068c4:	f8ca 3000 	str.w	r3, [sl]
 80068c8:	89a3      	ldrh	r3, [r4, #12]
 80068ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068ce:	81a3      	strh	r3, [r4, #12]
 80068d0:	f04f 30ff 	mov.w	r0, #4294967295
 80068d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068d8:	6921      	ldr	r1, [r4, #16]
 80068da:	464a      	mov	r2, r9
 80068dc:	f7ff ff98 	bl	8006810 <memcpy>
 80068e0:	89a3      	ldrh	r3, [r4, #12]
 80068e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80068e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ea:	81a3      	strh	r3, [r4, #12]
 80068ec:	6126      	str	r6, [r4, #16]
 80068ee:	6165      	str	r5, [r4, #20]
 80068f0:	444e      	add	r6, r9
 80068f2:	eba5 0509 	sub.w	r5, r5, r9
 80068f6:	6026      	str	r6, [r4, #0]
 80068f8:	60a5      	str	r5, [r4, #8]
 80068fa:	463e      	mov	r6, r7
 80068fc:	42be      	cmp	r6, r7
 80068fe:	d900      	bls.n	8006902 <__ssputs_r+0x86>
 8006900:	463e      	mov	r6, r7
 8006902:	6820      	ldr	r0, [r4, #0]
 8006904:	4632      	mov	r2, r6
 8006906:	4641      	mov	r1, r8
 8006908:	f000 faa8 	bl	8006e5c <memmove>
 800690c:	68a3      	ldr	r3, [r4, #8]
 800690e:	1b9b      	subs	r3, r3, r6
 8006910:	60a3      	str	r3, [r4, #8]
 8006912:	6823      	ldr	r3, [r4, #0]
 8006914:	4433      	add	r3, r6
 8006916:	6023      	str	r3, [r4, #0]
 8006918:	2000      	movs	r0, #0
 800691a:	e7db      	b.n	80068d4 <__ssputs_r+0x58>
 800691c:	462a      	mov	r2, r5
 800691e:	f000 fb97 	bl	8007050 <_realloc_r>
 8006922:	4606      	mov	r6, r0
 8006924:	2800      	cmp	r0, #0
 8006926:	d1e1      	bne.n	80068ec <__ssputs_r+0x70>
 8006928:	6921      	ldr	r1, [r4, #16]
 800692a:	4650      	mov	r0, sl
 800692c:	f000 fab0 	bl	8006e90 <_free_r>
 8006930:	e7c7      	b.n	80068c2 <__ssputs_r+0x46>
	...

08006934 <_svfiprintf_r>:
 8006934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006938:	4698      	mov	r8, r3
 800693a:	898b      	ldrh	r3, [r1, #12]
 800693c:	061b      	lsls	r3, r3, #24
 800693e:	b09d      	sub	sp, #116	; 0x74
 8006940:	4607      	mov	r7, r0
 8006942:	460d      	mov	r5, r1
 8006944:	4614      	mov	r4, r2
 8006946:	d50e      	bpl.n	8006966 <_svfiprintf_r+0x32>
 8006948:	690b      	ldr	r3, [r1, #16]
 800694a:	b963      	cbnz	r3, 8006966 <_svfiprintf_r+0x32>
 800694c:	2140      	movs	r1, #64	; 0x40
 800694e:	f000 fb0b 	bl	8006f68 <_malloc_r>
 8006952:	6028      	str	r0, [r5, #0]
 8006954:	6128      	str	r0, [r5, #16]
 8006956:	b920      	cbnz	r0, 8006962 <_svfiprintf_r+0x2e>
 8006958:	230c      	movs	r3, #12
 800695a:	603b      	str	r3, [r7, #0]
 800695c:	f04f 30ff 	mov.w	r0, #4294967295
 8006960:	e0d1      	b.n	8006b06 <_svfiprintf_r+0x1d2>
 8006962:	2340      	movs	r3, #64	; 0x40
 8006964:	616b      	str	r3, [r5, #20]
 8006966:	2300      	movs	r3, #0
 8006968:	9309      	str	r3, [sp, #36]	; 0x24
 800696a:	2320      	movs	r3, #32
 800696c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006970:	f8cd 800c 	str.w	r8, [sp, #12]
 8006974:	2330      	movs	r3, #48	; 0x30
 8006976:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006b20 <_svfiprintf_r+0x1ec>
 800697a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800697e:	f04f 0901 	mov.w	r9, #1
 8006982:	4623      	mov	r3, r4
 8006984:	469a      	mov	sl, r3
 8006986:	f813 2b01 	ldrb.w	r2, [r3], #1
 800698a:	b10a      	cbz	r2, 8006990 <_svfiprintf_r+0x5c>
 800698c:	2a25      	cmp	r2, #37	; 0x25
 800698e:	d1f9      	bne.n	8006984 <_svfiprintf_r+0x50>
 8006990:	ebba 0b04 	subs.w	fp, sl, r4
 8006994:	d00b      	beq.n	80069ae <_svfiprintf_r+0x7a>
 8006996:	465b      	mov	r3, fp
 8006998:	4622      	mov	r2, r4
 800699a:	4629      	mov	r1, r5
 800699c:	4638      	mov	r0, r7
 800699e:	f7ff ff6d 	bl	800687c <__ssputs_r>
 80069a2:	3001      	adds	r0, #1
 80069a4:	f000 80aa 	beq.w	8006afc <_svfiprintf_r+0x1c8>
 80069a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069aa:	445a      	add	r2, fp
 80069ac:	9209      	str	r2, [sp, #36]	; 0x24
 80069ae:	f89a 3000 	ldrb.w	r3, [sl]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f000 80a2 	beq.w	8006afc <_svfiprintf_r+0x1c8>
 80069b8:	2300      	movs	r3, #0
 80069ba:	f04f 32ff 	mov.w	r2, #4294967295
 80069be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069c2:	f10a 0a01 	add.w	sl, sl, #1
 80069c6:	9304      	str	r3, [sp, #16]
 80069c8:	9307      	str	r3, [sp, #28]
 80069ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069ce:	931a      	str	r3, [sp, #104]	; 0x68
 80069d0:	4654      	mov	r4, sl
 80069d2:	2205      	movs	r2, #5
 80069d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069d8:	4851      	ldr	r0, [pc, #324]	; (8006b20 <_svfiprintf_r+0x1ec>)
 80069da:	f7f9 fc19 	bl	8000210 <memchr>
 80069de:	9a04      	ldr	r2, [sp, #16]
 80069e0:	b9d8      	cbnz	r0, 8006a1a <_svfiprintf_r+0xe6>
 80069e2:	06d0      	lsls	r0, r2, #27
 80069e4:	bf44      	itt	mi
 80069e6:	2320      	movmi	r3, #32
 80069e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069ec:	0711      	lsls	r1, r2, #28
 80069ee:	bf44      	itt	mi
 80069f0:	232b      	movmi	r3, #43	; 0x2b
 80069f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069f6:	f89a 3000 	ldrb.w	r3, [sl]
 80069fa:	2b2a      	cmp	r3, #42	; 0x2a
 80069fc:	d015      	beq.n	8006a2a <_svfiprintf_r+0xf6>
 80069fe:	9a07      	ldr	r2, [sp, #28]
 8006a00:	4654      	mov	r4, sl
 8006a02:	2000      	movs	r0, #0
 8006a04:	f04f 0c0a 	mov.w	ip, #10
 8006a08:	4621      	mov	r1, r4
 8006a0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a0e:	3b30      	subs	r3, #48	; 0x30
 8006a10:	2b09      	cmp	r3, #9
 8006a12:	d94e      	bls.n	8006ab2 <_svfiprintf_r+0x17e>
 8006a14:	b1b0      	cbz	r0, 8006a44 <_svfiprintf_r+0x110>
 8006a16:	9207      	str	r2, [sp, #28]
 8006a18:	e014      	b.n	8006a44 <_svfiprintf_r+0x110>
 8006a1a:	eba0 0308 	sub.w	r3, r0, r8
 8006a1e:	fa09 f303 	lsl.w	r3, r9, r3
 8006a22:	4313      	orrs	r3, r2
 8006a24:	9304      	str	r3, [sp, #16]
 8006a26:	46a2      	mov	sl, r4
 8006a28:	e7d2      	b.n	80069d0 <_svfiprintf_r+0x9c>
 8006a2a:	9b03      	ldr	r3, [sp, #12]
 8006a2c:	1d19      	adds	r1, r3, #4
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	9103      	str	r1, [sp, #12]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	bfbb      	ittet	lt
 8006a36:	425b      	neglt	r3, r3
 8006a38:	f042 0202 	orrlt.w	r2, r2, #2
 8006a3c:	9307      	strge	r3, [sp, #28]
 8006a3e:	9307      	strlt	r3, [sp, #28]
 8006a40:	bfb8      	it	lt
 8006a42:	9204      	strlt	r2, [sp, #16]
 8006a44:	7823      	ldrb	r3, [r4, #0]
 8006a46:	2b2e      	cmp	r3, #46	; 0x2e
 8006a48:	d10c      	bne.n	8006a64 <_svfiprintf_r+0x130>
 8006a4a:	7863      	ldrb	r3, [r4, #1]
 8006a4c:	2b2a      	cmp	r3, #42	; 0x2a
 8006a4e:	d135      	bne.n	8006abc <_svfiprintf_r+0x188>
 8006a50:	9b03      	ldr	r3, [sp, #12]
 8006a52:	1d1a      	adds	r2, r3, #4
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	9203      	str	r2, [sp, #12]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	bfb8      	it	lt
 8006a5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a60:	3402      	adds	r4, #2
 8006a62:	9305      	str	r3, [sp, #20]
 8006a64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006b30 <_svfiprintf_r+0x1fc>
 8006a68:	7821      	ldrb	r1, [r4, #0]
 8006a6a:	2203      	movs	r2, #3
 8006a6c:	4650      	mov	r0, sl
 8006a6e:	f7f9 fbcf 	bl	8000210 <memchr>
 8006a72:	b140      	cbz	r0, 8006a86 <_svfiprintf_r+0x152>
 8006a74:	2340      	movs	r3, #64	; 0x40
 8006a76:	eba0 000a 	sub.w	r0, r0, sl
 8006a7a:	fa03 f000 	lsl.w	r0, r3, r0
 8006a7e:	9b04      	ldr	r3, [sp, #16]
 8006a80:	4303      	orrs	r3, r0
 8006a82:	3401      	adds	r4, #1
 8006a84:	9304      	str	r3, [sp, #16]
 8006a86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a8a:	4826      	ldr	r0, [pc, #152]	; (8006b24 <_svfiprintf_r+0x1f0>)
 8006a8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a90:	2206      	movs	r2, #6
 8006a92:	f7f9 fbbd 	bl	8000210 <memchr>
 8006a96:	2800      	cmp	r0, #0
 8006a98:	d038      	beq.n	8006b0c <_svfiprintf_r+0x1d8>
 8006a9a:	4b23      	ldr	r3, [pc, #140]	; (8006b28 <_svfiprintf_r+0x1f4>)
 8006a9c:	bb1b      	cbnz	r3, 8006ae6 <_svfiprintf_r+0x1b2>
 8006a9e:	9b03      	ldr	r3, [sp, #12]
 8006aa0:	3307      	adds	r3, #7
 8006aa2:	f023 0307 	bic.w	r3, r3, #7
 8006aa6:	3308      	adds	r3, #8
 8006aa8:	9303      	str	r3, [sp, #12]
 8006aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aac:	4433      	add	r3, r6
 8006aae:	9309      	str	r3, [sp, #36]	; 0x24
 8006ab0:	e767      	b.n	8006982 <_svfiprintf_r+0x4e>
 8006ab2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ab6:	460c      	mov	r4, r1
 8006ab8:	2001      	movs	r0, #1
 8006aba:	e7a5      	b.n	8006a08 <_svfiprintf_r+0xd4>
 8006abc:	2300      	movs	r3, #0
 8006abe:	3401      	adds	r4, #1
 8006ac0:	9305      	str	r3, [sp, #20]
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	f04f 0c0a 	mov.w	ip, #10
 8006ac8:	4620      	mov	r0, r4
 8006aca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ace:	3a30      	subs	r2, #48	; 0x30
 8006ad0:	2a09      	cmp	r2, #9
 8006ad2:	d903      	bls.n	8006adc <_svfiprintf_r+0x1a8>
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d0c5      	beq.n	8006a64 <_svfiprintf_r+0x130>
 8006ad8:	9105      	str	r1, [sp, #20]
 8006ada:	e7c3      	b.n	8006a64 <_svfiprintf_r+0x130>
 8006adc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ae0:	4604      	mov	r4, r0
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e7f0      	b.n	8006ac8 <_svfiprintf_r+0x194>
 8006ae6:	ab03      	add	r3, sp, #12
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	462a      	mov	r2, r5
 8006aec:	4b0f      	ldr	r3, [pc, #60]	; (8006b2c <_svfiprintf_r+0x1f8>)
 8006aee:	a904      	add	r1, sp, #16
 8006af0:	4638      	mov	r0, r7
 8006af2:	f3af 8000 	nop.w
 8006af6:	1c42      	adds	r2, r0, #1
 8006af8:	4606      	mov	r6, r0
 8006afa:	d1d6      	bne.n	8006aaa <_svfiprintf_r+0x176>
 8006afc:	89ab      	ldrh	r3, [r5, #12]
 8006afe:	065b      	lsls	r3, r3, #25
 8006b00:	f53f af2c 	bmi.w	800695c <_svfiprintf_r+0x28>
 8006b04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b06:	b01d      	add	sp, #116	; 0x74
 8006b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b0c:	ab03      	add	r3, sp, #12
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	462a      	mov	r2, r5
 8006b12:	4b06      	ldr	r3, [pc, #24]	; (8006b2c <_svfiprintf_r+0x1f8>)
 8006b14:	a904      	add	r1, sp, #16
 8006b16:	4638      	mov	r0, r7
 8006b18:	f000 f87a 	bl	8006c10 <_printf_i>
 8006b1c:	e7eb      	b.n	8006af6 <_svfiprintf_r+0x1c2>
 8006b1e:	bf00      	nop
 8006b20:	080073c8 	.word	0x080073c8
 8006b24:	080073d2 	.word	0x080073d2
 8006b28:	00000000 	.word	0x00000000
 8006b2c:	0800687d 	.word	0x0800687d
 8006b30:	080073ce 	.word	0x080073ce

08006b34 <_printf_common>:
 8006b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b38:	4616      	mov	r6, r2
 8006b3a:	4699      	mov	r9, r3
 8006b3c:	688a      	ldr	r2, [r1, #8]
 8006b3e:	690b      	ldr	r3, [r1, #16]
 8006b40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b44:	4293      	cmp	r3, r2
 8006b46:	bfb8      	it	lt
 8006b48:	4613      	movlt	r3, r2
 8006b4a:	6033      	str	r3, [r6, #0]
 8006b4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b50:	4607      	mov	r7, r0
 8006b52:	460c      	mov	r4, r1
 8006b54:	b10a      	cbz	r2, 8006b5a <_printf_common+0x26>
 8006b56:	3301      	adds	r3, #1
 8006b58:	6033      	str	r3, [r6, #0]
 8006b5a:	6823      	ldr	r3, [r4, #0]
 8006b5c:	0699      	lsls	r1, r3, #26
 8006b5e:	bf42      	ittt	mi
 8006b60:	6833      	ldrmi	r3, [r6, #0]
 8006b62:	3302      	addmi	r3, #2
 8006b64:	6033      	strmi	r3, [r6, #0]
 8006b66:	6825      	ldr	r5, [r4, #0]
 8006b68:	f015 0506 	ands.w	r5, r5, #6
 8006b6c:	d106      	bne.n	8006b7c <_printf_common+0x48>
 8006b6e:	f104 0a19 	add.w	sl, r4, #25
 8006b72:	68e3      	ldr	r3, [r4, #12]
 8006b74:	6832      	ldr	r2, [r6, #0]
 8006b76:	1a9b      	subs	r3, r3, r2
 8006b78:	42ab      	cmp	r3, r5
 8006b7a:	dc26      	bgt.n	8006bca <_printf_common+0x96>
 8006b7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b80:	1e13      	subs	r3, r2, #0
 8006b82:	6822      	ldr	r2, [r4, #0]
 8006b84:	bf18      	it	ne
 8006b86:	2301      	movne	r3, #1
 8006b88:	0692      	lsls	r2, r2, #26
 8006b8a:	d42b      	bmi.n	8006be4 <_printf_common+0xb0>
 8006b8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b90:	4649      	mov	r1, r9
 8006b92:	4638      	mov	r0, r7
 8006b94:	47c0      	blx	r8
 8006b96:	3001      	adds	r0, #1
 8006b98:	d01e      	beq.n	8006bd8 <_printf_common+0xa4>
 8006b9a:	6823      	ldr	r3, [r4, #0]
 8006b9c:	68e5      	ldr	r5, [r4, #12]
 8006b9e:	6832      	ldr	r2, [r6, #0]
 8006ba0:	f003 0306 	and.w	r3, r3, #6
 8006ba4:	2b04      	cmp	r3, #4
 8006ba6:	bf08      	it	eq
 8006ba8:	1aad      	subeq	r5, r5, r2
 8006baa:	68a3      	ldr	r3, [r4, #8]
 8006bac:	6922      	ldr	r2, [r4, #16]
 8006bae:	bf0c      	ite	eq
 8006bb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bb4:	2500      	movne	r5, #0
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	bfc4      	itt	gt
 8006bba:	1a9b      	subgt	r3, r3, r2
 8006bbc:	18ed      	addgt	r5, r5, r3
 8006bbe:	2600      	movs	r6, #0
 8006bc0:	341a      	adds	r4, #26
 8006bc2:	42b5      	cmp	r5, r6
 8006bc4:	d11a      	bne.n	8006bfc <_printf_common+0xc8>
 8006bc6:	2000      	movs	r0, #0
 8006bc8:	e008      	b.n	8006bdc <_printf_common+0xa8>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	4652      	mov	r2, sl
 8006bce:	4649      	mov	r1, r9
 8006bd0:	4638      	mov	r0, r7
 8006bd2:	47c0      	blx	r8
 8006bd4:	3001      	adds	r0, #1
 8006bd6:	d103      	bne.n	8006be0 <_printf_common+0xac>
 8006bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006be0:	3501      	adds	r5, #1
 8006be2:	e7c6      	b.n	8006b72 <_printf_common+0x3e>
 8006be4:	18e1      	adds	r1, r4, r3
 8006be6:	1c5a      	adds	r2, r3, #1
 8006be8:	2030      	movs	r0, #48	; 0x30
 8006bea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bee:	4422      	add	r2, r4
 8006bf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bf8:	3302      	adds	r3, #2
 8006bfa:	e7c7      	b.n	8006b8c <_printf_common+0x58>
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	4622      	mov	r2, r4
 8006c00:	4649      	mov	r1, r9
 8006c02:	4638      	mov	r0, r7
 8006c04:	47c0      	blx	r8
 8006c06:	3001      	adds	r0, #1
 8006c08:	d0e6      	beq.n	8006bd8 <_printf_common+0xa4>
 8006c0a:	3601      	adds	r6, #1
 8006c0c:	e7d9      	b.n	8006bc2 <_printf_common+0x8e>
	...

08006c10 <_printf_i>:
 8006c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c14:	7e0f      	ldrb	r7, [r1, #24]
 8006c16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c18:	2f78      	cmp	r7, #120	; 0x78
 8006c1a:	4691      	mov	r9, r2
 8006c1c:	4680      	mov	r8, r0
 8006c1e:	460c      	mov	r4, r1
 8006c20:	469a      	mov	sl, r3
 8006c22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c26:	d807      	bhi.n	8006c38 <_printf_i+0x28>
 8006c28:	2f62      	cmp	r7, #98	; 0x62
 8006c2a:	d80a      	bhi.n	8006c42 <_printf_i+0x32>
 8006c2c:	2f00      	cmp	r7, #0
 8006c2e:	f000 80d8 	beq.w	8006de2 <_printf_i+0x1d2>
 8006c32:	2f58      	cmp	r7, #88	; 0x58
 8006c34:	f000 80a3 	beq.w	8006d7e <_printf_i+0x16e>
 8006c38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c40:	e03a      	b.n	8006cb8 <_printf_i+0xa8>
 8006c42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c46:	2b15      	cmp	r3, #21
 8006c48:	d8f6      	bhi.n	8006c38 <_printf_i+0x28>
 8006c4a:	a101      	add	r1, pc, #4	; (adr r1, 8006c50 <_printf_i+0x40>)
 8006c4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c50:	08006ca9 	.word	0x08006ca9
 8006c54:	08006cbd 	.word	0x08006cbd
 8006c58:	08006c39 	.word	0x08006c39
 8006c5c:	08006c39 	.word	0x08006c39
 8006c60:	08006c39 	.word	0x08006c39
 8006c64:	08006c39 	.word	0x08006c39
 8006c68:	08006cbd 	.word	0x08006cbd
 8006c6c:	08006c39 	.word	0x08006c39
 8006c70:	08006c39 	.word	0x08006c39
 8006c74:	08006c39 	.word	0x08006c39
 8006c78:	08006c39 	.word	0x08006c39
 8006c7c:	08006dc9 	.word	0x08006dc9
 8006c80:	08006ced 	.word	0x08006ced
 8006c84:	08006dab 	.word	0x08006dab
 8006c88:	08006c39 	.word	0x08006c39
 8006c8c:	08006c39 	.word	0x08006c39
 8006c90:	08006deb 	.word	0x08006deb
 8006c94:	08006c39 	.word	0x08006c39
 8006c98:	08006ced 	.word	0x08006ced
 8006c9c:	08006c39 	.word	0x08006c39
 8006ca0:	08006c39 	.word	0x08006c39
 8006ca4:	08006db3 	.word	0x08006db3
 8006ca8:	682b      	ldr	r3, [r5, #0]
 8006caa:	1d1a      	adds	r2, r3, #4
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	602a      	str	r2, [r5, #0]
 8006cb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e0a3      	b.n	8006e04 <_printf_i+0x1f4>
 8006cbc:	6820      	ldr	r0, [r4, #0]
 8006cbe:	6829      	ldr	r1, [r5, #0]
 8006cc0:	0606      	lsls	r6, r0, #24
 8006cc2:	f101 0304 	add.w	r3, r1, #4
 8006cc6:	d50a      	bpl.n	8006cde <_printf_i+0xce>
 8006cc8:	680e      	ldr	r6, [r1, #0]
 8006cca:	602b      	str	r3, [r5, #0]
 8006ccc:	2e00      	cmp	r6, #0
 8006cce:	da03      	bge.n	8006cd8 <_printf_i+0xc8>
 8006cd0:	232d      	movs	r3, #45	; 0x2d
 8006cd2:	4276      	negs	r6, r6
 8006cd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cd8:	485e      	ldr	r0, [pc, #376]	; (8006e54 <_printf_i+0x244>)
 8006cda:	230a      	movs	r3, #10
 8006cdc:	e019      	b.n	8006d12 <_printf_i+0x102>
 8006cde:	680e      	ldr	r6, [r1, #0]
 8006ce0:	602b      	str	r3, [r5, #0]
 8006ce2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ce6:	bf18      	it	ne
 8006ce8:	b236      	sxthne	r6, r6
 8006cea:	e7ef      	b.n	8006ccc <_printf_i+0xbc>
 8006cec:	682b      	ldr	r3, [r5, #0]
 8006cee:	6820      	ldr	r0, [r4, #0]
 8006cf0:	1d19      	adds	r1, r3, #4
 8006cf2:	6029      	str	r1, [r5, #0]
 8006cf4:	0601      	lsls	r1, r0, #24
 8006cf6:	d501      	bpl.n	8006cfc <_printf_i+0xec>
 8006cf8:	681e      	ldr	r6, [r3, #0]
 8006cfa:	e002      	b.n	8006d02 <_printf_i+0xf2>
 8006cfc:	0646      	lsls	r6, r0, #25
 8006cfe:	d5fb      	bpl.n	8006cf8 <_printf_i+0xe8>
 8006d00:	881e      	ldrh	r6, [r3, #0]
 8006d02:	4854      	ldr	r0, [pc, #336]	; (8006e54 <_printf_i+0x244>)
 8006d04:	2f6f      	cmp	r7, #111	; 0x6f
 8006d06:	bf0c      	ite	eq
 8006d08:	2308      	moveq	r3, #8
 8006d0a:	230a      	movne	r3, #10
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d12:	6865      	ldr	r5, [r4, #4]
 8006d14:	60a5      	str	r5, [r4, #8]
 8006d16:	2d00      	cmp	r5, #0
 8006d18:	bfa2      	ittt	ge
 8006d1a:	6821      	ldrge	r1, [r4, #0]
 8006d1c:	f021 0104 	bicge.w	r1, r1, #4
 8006d20:	6021      	strge	r1, [r4, #0]
 8006d22:	b90e      	cbnz	r6, 8006d28 <_printf_i+0x118>
 8006d24:	2d00      	cmp	r5, #0
 8006d26:	d04d      	beq.n	8006dc4 <_printf_i+0x1b4>
 8006d28:	4615      	mov	r5, r2
 8006d2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d2e:	fb03 6711 	mls	r7, r3, r1, r6
 8006d32:	5dc7      	ldrb	r7, [r0, r7]
 8006d34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d38:	4637      	mov	r7, r6
 8006d3a:	42bb      	cmp	r3, r7
 8006d3c:	460e      	mov	r6, r1
 8006d3e:	d9f4      	bls.n	8006d2a <_printf_i+0x11a>
 8006d40:	2b08      	cmp	r3, #8
 8006d42:	d10b      	bne.n	8006d5c <_printf_i+0x14c>
 8006d44:	6823      	ldr	r3, [r4, #0]
 8006d46:	07de      	lsls	r6, r3, #31
 8006d48:	d508      	bpl.n	8006d5c <_printf_i+0x14c>
 8006d4a:	6923      	ldr	r3, [r4, #16]
 8006d4c:	6861      	ldr	r1, [r4, #4]
 8006d4e:	4299      	cmp	r1, r3
 8006d50:	bfde      	ittt	le
 8006d52:	2330      	movle	r3, #48	; 0x30
 8006d54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d5c:	1b52      	subs	r2, r2, r5
 8006d5e:	6122      	str	r2, [r4, #16]
 8006d60:	f8cd a000 	str.w	sl, [sp]
 8006d64:	464b      	mov	r3, r9
 8006d66:	aa03      	add	r2, sp, #12
 8006d68:	4621      	mov	r1, r4
 8006d6a:	4640      	mov	r0, r8
 8006d6c:	f7ff fee2 	bl	8006b34 <_printf_common>
 8006d70:	3001      	adds	r0, #1
 8006d72:	d14c      	bne.n	8006e0e <_printf_i+0x1fe>
 8006d74:	f04f 30ff 	mov.w	r0, #4294967295
 8006d78:	b004      	add	sp, #16
 8006d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d7e:	4835      	ldr	r0, [pc, #212]	; (8006e54 <_printf_i+0x244>)
 8006d80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d84:	6829      	ldr	r1, [r5, #0]
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d8c:	6029      	str	r1, [r5, #0]
 8006d8e:	061d      	lsls	r5, r3, #24
 8006d90:	d514      	bpl.n	8006dbc <_printf_i+0x1ac>
 8006d92:	07df      	lsls	r7, r3, #31
 8006d94:	bf44      	itt	mi
 8006d96:	f043 0320 	orrmi.w	r3, r3, #32
 8006d9a:	6023      	strmi	r3, [r4, #0]
 8006d9c:	b91e      	cbnz	r6, 8006da6 <_printf_i+0x196>
 8006d9e:	6823      	ldr	r3, [r4, #0]
 8006da0:	f023 0320 	bic.w	r3, r3, #32
 8006da4:	6023      	str	r3, [r4, #0]
 8006da6:	2310      	movs	r3, #16
 8006da8:	e7b0      	b.n	8006d0c <_printf_i+0xfc>
 8006daa:	6823      	ldr	r3, [r4, #0]
 8006dac:	f043 0320 	orr.w	r3, r3, #32
 8006db0:	6023      	str	r3, [r4, #0]
 8006db2:	2378      	movs	r3, #120	; 0x78
 8006db4:	4828      	ldr	r0, [pc, #160]	; (8006e58 <_printf_i+0x248>)
 8006db6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006dba:	e7e3      	b.n	8006d84 <_printf_i+0x174>
 8006dbc:	0659      	lsls	r1, r3, #25
 8006dbe:	bf48      	it	mi
 8006dc0:	b2b6      	uxthmi	r6, r6
 8006dc2:	e7e6      	b.n	8006d92 <_printf_i+0x182>
 8006dc4:	4615      	mov	r5, r2
 8006dc6:	e7bb      	b.n	8006d40 <_printf_i+0x130>
 8006dc8:	682b      	ldr	r3, [r5, #0]
 8006dca:	6826      	ldr	r6, [r4, #0]
 8006dcc:	6961      	ldr	r1, [r4, #20]
 8006dce:	1d18      	adds	r0, r3, #4
 8006dd0:	6028      	str	r0, [r5, #0]
 8006dd2:	0635      	lsls	r5, r6, #24
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	d501      	bpl.n	8006ddc <_printf_i+0x1cc>
 8006dd8:	6019      	str	r1, [r3, #0]
 8006dda:	e002      	b.n	8006de2 <_printf_i+0x1d2>
 8006ddc:	0670      	lsls	r0, r6, #25
 8006dde:	d5fb      	bpl.n	8006dd8 <_printf_i+0x1c8>
 8006de0:	8019      	strh	r1, [r3, #0]
 8006de2:	2300      	movs	r3, #0
 8006de4:	6123      	str	r3, [r4, #16]
 8006de6:	4615      	mov	r5, r2
 8006de8:	e7ba      	b.n	8006d60 <_printf_i+0x150>
 8006dea:	682b      	ldr	r3, [r5, #0]
 8006dec:	1d1a      	adds	r2, r3, #4
 8006dee:	602a      	str	r2, [r5, #0]
 8006df0:	681d      	ldr	r5, [r3, #0]
 8006df2:	6862      	ldr	r2, [r4, #4]
 8006df4:	2100      	movs	r1, #0
 8006df6:	4628      	mov	r0, r5
 8006df8:	f7f9 fa0a 	bl	8000210 <memchr>
 8006dfc:	b108      	cbz	r0, 8006e02 <_printf_i+0x1f2>
 8006dfe:	1b40      	subs	r0, r0, r5
 8006e00:	6060      	str	r0, [r4, #4]
 8006e02:	6863      	ldr	r3, [r4, #4]
 8006e04:	6123      	str	r3, [r4, #16]
 8006e06:	2300      	movs	r3, #0
 8006e08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e0c:	e7a8      	b.n	8006d60 <_printf_i+0x150>
 8006e0e:	6923      	ldr	r3, [r4, #16]
 8006e10:	462a      	mov	r2, r5
 8006e12:	4649      	mov	r1, r9
 8006e14:	4640      	mov	r0, r8
 8006e16:	47d0      	blx	sl
 8006e18:	3001      	adds	r0, #1
 8006e1a:	d0ab      	beq.n	8006d74 <_printf_i+0x164>
 8006e1c:	6823      	ldr	r3, [r4, #0]
 8006e1e:	079b      	lsls	r3, r3, #30
 8006e20:	d413      	bmi.n	8006e4a <_printf_i+0x23a>
 8006e22:	68e0      	ldr	r0, [r4, #12]
 8006e24:	9b03      	ldr	r3, [sp, #12]
 8006e26:	4298      	cmp	r0, r3
 8006e28:	bfb8      	it	lt
 8006e2a:	4618      	movlt	r0, r3
 8006e2c:	e7a4      	b.n	8006d78 <_printf_i+0x168>
 8006e2e:	2301      	movs	r3, #1
 8006e30:	4632      	mov	r2, r6
 8006e32:	4649      	mov	r1, r9
 8006e34:	4640      	mov	r0, r8
 8006e36:	47d0      	blx	sl
 8006e38:	3001      	adds	r0, #1
 8006e3a:	d09b      	beq.n	8006d74 <_printf_i+0x164>
 8006e3c:	3501      	adds	r5, #1
 8006e3e:	68e3      	ldr	r3, [r4, #12]
 8006e40:	9903      	ldr	r1, [sp, #12]
 8006e42:	1a5b      	subs	r3, r3, r1
 8006e44:	42ab      	cmp	r3, r5
 8006e46:	dcf2      	bgt.n	8006e2e <_printf_i+0x21e>
 8006e48:	e7eb      	b.n	8006e22 <_printf_i+0x212>
 8006e4a:	2500      	movs	r5, #0
 8006e4c:	f104 0619 	add.w	r6, r4, #25
 8006e50:	e7f5      	b.n	8006e3e <_printf_i+0x22e>
 8006e52:	bf00      	nop
 8006e54:	080073d9 	.word	0x080073d9
 8006e58:	080073ea 	.word	0x080073ea

08006e5c <memmove>:
 8006e5c:	4288      	cmp	r0, r1
 8006e5e:	b510      	push	{r4, lr}
 8006e60:	eb01 0402 	add.w	r4, r1, r2
 8006e64:	d902      	bls.n	8006e6c <memmove+0x10>
 8006e66:	4284      	cmp	r4, r0
 8006e68:	4623      	mov	r3, r4
 8006e6a:	d807      	bhi.n	8006e7c <memmove+0x20>
 8006e6c:	1e43      	subs	r3, r0, #1
 8006e6e:	42a1      	cmp	r1, r4
 8006e70:	d008      	beq.n	8006e84 <memmove+0x28>
 8006e72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e7a:	e7f8      	b.n	8006e6e <memmove+0x12>
 8006e7c:	4402      	add	r2, r0
 8006e7e:	4601      	mov	r1, r0
 8006e80:	428a      	cmp	r2, r1
 8006e82:	d100      	bne.n	8006e86 <memmove+0x2a>
 8006e84:	bd10      	pop	{r4, pc}
 8006e86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e8e:	e7f7      	b.n	8006e80 <memmove+0x24>

08006e90 <_free_r>:
 8006e90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e92:	2900      	cmp	r1, #0
 8006e94:	d044      	beq.n	8006f20 <_free_r+0x90>
 8006e96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e9a:	9001      	str	r0, [sp, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f1a1 0404 	sub.w	r4, r1, #4
 8006ea2:	bfb8      	it	lt
 8006ea4:	18e4      	addlt	r4, r4, r3
 8006ea6:	f000 f913 	bl	80070d0 <__malloc_lock>
 8006eaa:	4a1e      	ldr	r2, [pc, #120]	; (8006f24 <_free_r+0x94>)
 8006eac:	9801      	ldr	r0, [sp, #4]
 8006eae:	6813      	ldr	r3, [r2, #0]
 8006eb0:	b933      	cbnz	r3, 8006ec0 <_free_r+0x30>
 8006eb2:	6063      	str	r3, [r4, #4]
 8006eb4:	6014      	str	r4, [r2, #0]
 8006eb6:	b003      	add	sp, #12
 8006eb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ebc:	f000 b90e 	b.w	80070dc <__malloc_unlock>
 8006ec0:	42a3      	cmp	r3, r4
 8006ec2:	d908      	bls.n	8006ed6 <_free_r+0x46>
 8006ec4:	6825      	ldr	r5, [r4, #0]
 8006ec6:	1961      	adds	r1, r4, r5
 8006ec8:	428b      	cmp	r3, r1
 8006eca:	bf01      	itttt	eq
 8006ecc:	6819      	ldreq	r1, [r3, #0]
 8006ece:	685b      	ldreq	r3, [r3, #4]
 8006ed0:	1949      	addeq	r1, r1, r5
 8006ed2:	6021      	streq	r1, [r4, #0]
 8006ed4:	e7ed      	b.n	8006eb2 <_free_r+0x22>
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	b10b      	cbz	r3, 8006ee0 <_free_r+0x50>
 8006edc:	42a3      	cmp	r3, r4
 8006ede:	d9fa      	bls.n	8006ed6 <_free_r+0x46>
 8006ee0:	6811      	ldr	r1, [r2, #0]
 8006ee2:	1855      	adds	r5, r2, r1
 8006ee4:	42a5      	cmp	r5, r4
 8006ee6:	d10b      	bne.n	8006f00 <_free_r+0x70>
 8006ee8:	6824      	ldr	r4, [r4, #0]
 8006eea:	4421      	add	r1, r4
 8006eec:	1854      	adds	r4, r2, r1
 8006eee:	42a3      	cmp	r3, r4
 8006ef0:	6011      	str	r1, [r2, #0]
 8006ef2:	d1e0      	bne.n	8006eb6 <_free_r+0x26>
 8006ef4:	681c      	ldr	r4, [r3, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	6053      	str	r3, [r2, #4]
 8006efa:	4421      	add	r1, r4
 8006efc:	6011      	str	r1, [r2, #0]
 8006efe:	e7da      	b.n	8006eb6 <_free_r+0x26>
 8006f00:	d902      	bls.n	8006f08 <_free_r+0x78>
 8006f02:	230c      	movs	r3, #12
 8006f04:	6003      	str	r3, [r0, #0]
 8006f06:	e7d6      	b.n	8006eb6 <_free_r+0x26>
 8006f08:	6825      	ldr	r5, [r4, #0]
 8006f0a:	1961      	adds	r1, r4, r5
 8006f0c:	428b      	cmp	r3, r1
 8006f0e:	bf04      	itt	eq
 8006f10:	6819      	ldreq	r1, [r3, #0]
 8006f12:	685b      	ldreq	r3, [r3, #4]
 8006f14:	6063      	str	r3, [r4, #4]
 8006f16:	bf04      	itt	eq
 8006f18:	1949      	addeq	r1, r1, r5
 8006f1a:	6021      	streq	r1, [r4, #0]
 8006f1c:	6054      	str	r4, [r2, #4]
 8006f1e:	e7ca      	b.n	8006eb6 <_free_r+0x26>
 8006f20:	b003      	add	sp, #12
 8006f22:	bd30      	pop	{r4, r5, pc}
 8006f24:	20004180 	.word	0x20004180

08006f28 <sbrk_aligned>:
 8006f28:	b570      	push	{r4, r5, r6, lr}
 8006f2a:	4e0e      	ldr	r6, [pc, #56]	; (8006f64 <sbrk_aligned+0x3c>)
 8006f2c:	460c      	mov	r4, r1
 8006f2e:	6831      	ldr	r1, [r6, #0]
 8006f30:	4605      	mov	r5, r0
 8006f32:	b911      	cbnz	r1, 8006f3a <sbrk_aligned+0x12>
 8006f34:	f000 f8bc 	bl	80070b0 <_sbrk_r>
 8006f38:	6030      	str	r0, [r6, #0]
 8006f3a:	4621      	mov	r1, r4
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	f000 f8b7 	bl	80070b0 <_sbrk_r>
 8006f42:	1c43      	adds	r3, r0, #1
 8006f44:	d00a      	beq.n	8006f5c <sbrk_aligned+0x34>
 8006f46:	1cc4      	adds	r4, r0, #3
 8006f48:	f024 0403 	bic.w	r4, r4, #3
 8006f4c:	42a0      	cmp	r0, r4
 8006f4e:	d007      	beq.n	8006f60 <sbrk_aligned+0x38>
 8006f50:	1a21      	subs	r1, r4, r0
 8006f52:	4628      	mov	r0, r5
 8006f54:	f000 f8ac 	bl	80070b0 <_sbrk_r>
 8006f58:	3001      	adds	r0, #1
 8006f5a:	d101      	bne.n	8006f60 <sbrk_aligned+0x38>
 8006f5c:	f04f 34ff 	mov.w	r4, #4294967295
 8006f60:	4620      	mov	r0, r4
 8006f62:	bd70      	pop	{r4, r5, r6, pc}
 8006f64:	20004184 	.word	0x20004184

08006f68 <_malloc_r>:
 8006f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f6c:	1ccd      	adds	r5, r1, #3
 8006f6e:	f025 0503 	bic.w	r5, r5, #3
 8006f72:	3508      	adds	r5, #8
 8006f74:	2d0c      	cmp	r5, #12
 8006f76:	bf38      	it	cc
 8006f78:	250c      	movcc	r5, #12
 8006f7a:	2d00      	cmp	r5, #0
 8006f7c:	4607      	mov	r7, r0
 8006f7e:	db01      	blt.n	8006f84 <_malloc_r+0x1c>
 8006f80:	42a9      	cmp	r1, r5
 8006f82:	d905      	bls.n	8006f90 <_malloc_r+0x28>
 8006f84:	230c      	movs	r3, #12
 8006f86:	603b      	str	r3, [r7, #0]
 8006f88:	2600      	movs	r6, #0
 8006f8a:	4630      	mov	r0, r6
 8006f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f90:	4e2e      	ldr	r6, [pc, #184]	; (800704c <_malloc_r+0xe4>)
 8006f92:	f000 f89d 	bl	80070d0 <__malloc_lock>
 8006f96:	6833      	ldr	r3, [r6, #0]
 8006f98:	461c      	mov	r4, r3
 8006f9a:	bb34      	cbnz	r4, 8006fea <_malloc_r+0x82>
 8006f9c:	4629      	mov	r1, r5
 8006f9e:	4638      	mov	r0, r7
 8006fa0:	f7ff ffc2 	bl	8006f28 <sbrk_aligned>
 8006fa4:	1c43      	adds	r3, r0, #1
 8006fa6:	4604      	mov	r4, r0
 8006fa8:	d14d      	bne.n	8007046 <_malloc_r+0xde>
 8006faa:	6834      	ldr	r4, [r6, #0]
 8006fac:	4626      	mov	r6, r4
 8006fae:	2e00      	cmp	r6, #0
 8006fb0:	d140      	bne.n	8007034 <_malloc_r+0xcc>
 8006fb2:	6823      	ldr	r3, [r4, #0]
 8006fb4:	4631      	mov	r1, r6
 8006fb6:	4638      	mov	r0, r7
 8006fb8:	eb04 0803 	add.w	r8, r4, r3
 8006fbc:	f000 f878 	bl	80070b0 <_sbrk_r>
 8006fc0:	4580      	cmp	r8, r0
 8006fc2:	d13a      	bne.n	800703a <_malloc_r+0xd2>
 8006fc4:	6821      	ldr	r1, [r4, #0]
 8006fc6:	3503      	adds	r5, #3
 8006fc8:	1a6d      	subs	r5, r5, r1
 8006fca:	f025 0503 	bic.w	r5, r5, #3
 8006fce:	3508      	adds	r5, #8
 8006fd0:	2d0c      	cmp	r5, #12
 8006fd2:	bf38      	it	cc
 8006fd4:	250c      	movcc	r5, #12
 8006fd6:	4629      	mov	r1, r5
 8006fd8:	4638      	mov	r0, r7
 8006fda:	f7ff ffa5 	bl	8006f28 <sbrk_aligned>
 8006fde:	3001      	adds	r0, #1
 8006fe0:	d02b      	beq.n	800703a <_malloc_r+0xd2>
 8006fe2:	6823      	ldr	r3, [r4, #0]
 8006fe4:	442b      	add	r3, r5
 8006fe6:	6023      	str	r3, [r4, #0]
 8006fe8:	e00e      	b.n	8007008 <_malloc_r+0xa0>
 8006fea:	6822      	ldr	r2, [r4, #0]
 8006fec:	1b52      	subs	r2, r2, r5
 8006fee:	d41e      	bmi.n	800702e <_malloc_r+0xc6>
 8006ff0:	2a0b      	cmp	r2, #11
 8006ff2:	d916      	bls.n	8007022 <_malloc_r+0xba>
 8006ff4:	1961      	adds	r1, r4, r5
 8006ff6:	42a3      	cmp	r3, r4
 8006ff8:	6025      	str	r5, [r4, #0]
 8006ffa:	bf18      	it	ne
 8006ffc:	6059      	strne	r1, [r3, #4]
 8006ffe:	6863      	ldr	r3, [r4, #4]
 8007000:	bf08      	it	eq
 8007002:	6031      	streq	r1, [r6, #0]
 8007004:	5162      	str	r2, [r4, r5]
 8007006:	604b      	str	r3, [r1, #4]
 8007008:	4638      	mov	r0, r7
 800700a:	f104 060b 	add.w	r6, r4, #11
 800700e:	f000 f865 	bl	80070dc <__malloc_unlock>
 8007012:	f026 0607 	bic.w	r6, r6, #7
 8007016:	1d23      	adds	r3, r4, #4
 8007018:	1af2      	subs	r2, r6, r3
 800701a:	d0b6      	beq.n	8006f8a <_malloc_r+0x22>
 800701c:	1b9b      	subs	r3, r3, r6
 800701e:	50a3      	str	r3, [r4, r2]
 8007020:	e7b3      	b.n	8006f8a <_malloc_r+0x22>
 8007022:	6862      	ldr	r2, [r4, #4]
 8007024:	42a3      	cmp	r3, r4
 8007026:	bf0c      	ite	eq
 8007028:	6032      	streq	r2, [r6, #0]
 800702a:	605a      	strne	r2, [r3, #4]
 800702c:	e7ec      	b.n	8007008 <_malloc_r+0xa0>
 800702e:	4623      	mov	r3, r4
 8007030:	6864      	ldr	r4, [r4, #4]
 8007032:	e7b2      	b.n	8006f9a <_malloc_r+0x32>
 8007034:	4634      	mov	r4, r6
 8007036:	6876      	ldr	r6, [r6, #4]
 8007038:	e7b9      	b.n	8006fae <_malloc_r+0x46>
 800703a:	230c      	movs	r3, #12
 800703c:	603b      	str	r3, [r7, #0]
 800703e:	4638      	mov	r0, r7
 8007040:	f000 f84c 	bl	80070dc <__malloc_unlock>
 8007044:	e7a1      	b.n	8006f8a <_malloc_r+0x22>
 8007046:	6025      	str	r5, [r4, #0]
 8007048:	e7de      	b.n	8007008 <_malloc_r+0xa0>
 800704a:	bf00      	nop
 800704c:	20004180 	.word	0x20004180

08007050 <_realloc_r>:
 8007050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007054:	4680      	mov	r8, r0
 8007056:	4614      	mov	r4, r2
 8007058:	460e      	mov	r6, r1
 800705a:	b921      	cbnz	r1, 8007066 <_realloc_r+0x16>
 800705c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007060:	4611      	mov	r1, r2
 8007062:	f7ff bf81 	b.w	8006f68 <_malloc_r>
 8007066:	b92a      	cbnz	r2, 8007074 <_realloc_r+0x24>
 8007068:	f7ff ff12 	bl	8006e90 <_free_r>
 800706c:	4625      	mov	r5, r4
 800706e:	4628      	mov	r0, r5
 8007070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007074:	f000 f838 	bl	80070e8 <_malloc_usable_size_r>
 8007078:	4284      	cmp	r4, r0
 800707a:	4607      	mov	r7, r0
 800707c:	d802      	bhi.n	8007084 <_realloc_r+0x34>
 800707e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007082:	d812      	bhi.n	80070aa <_realloc_r+0x5a>
 8007084:	4621      	mov	r1, r4
 8007086:	4640      	mov	r0, r8
 8007088:	f7ff ff6e 	bl	8006f68 <_malloc_r>
 800708c:	4605      	mov	r5, r0
 800708e:	2800      	cmp	r0, #0
 8007090:	d0ed      	beq.n	800706e <_realloc_r+0x1e>
 8007092:	42bc      	cmp	r4, r7
 8007094:	4622      	mov	r2, r4
 8007096:	4631      	mov	r1, r6
 8007098:	bf28      	it	cs
 800709a:	463a      	movcs	r2, r7
 800709c:	f7ff fbb8 	bl	8006810 <memcpy>
 80070a0:	4631      	mov	r1, r6
 80070a2:	4640      	mov	r0, r8
 80070a4:	f7ff fef4 	bl	8006e90 <_free_r>
 80070a8:	e7e1      	b.n	800706e <_realloc_r+0x1e>
 80070aa:	4635      	mov	r5, r6
 80070ac:	e7df      	b.n	800706e <_realloc_r+0x1e>
	...

080070b0 <_sbrk_r>:
 80070b0:	b538      	push	{r3, r4, r5, lr}
 80070b2:	4d06      	ldr	r5, [pc, #24]	; (80070cc <_sbrk_r+0x1c>)
 80070b4:	2300      	movs	r3, #0
 80070b6:	4604      	mov	r4, r0
 80070b8:	4608      	mov	r0, r1
 80070ba:	602b      	str	r3, [r5, #0]
 80070bc:	f7fa f8d2 	bl	8001264 <_sbrk>
 80070c0:	1c43      	adds	r3, r0, #1
 80070c2:	d102      	bne.n	80070ca <_sbrk_r+0x1a>
 80070c4:	682b      	ldr	r3, [r5, #0]
 80070c6:	b103      	cbz	r3, 80070ca <_sbrk_r+0x1a>
 80070c8:	6023      	str	r3, [r4, #0]
 80070ca:	bd38      	pop	{r3, r4, r5, pc}
 80070cc:	20004188 	.word	0x20004188

080070d0 <__malloc_lock>:
 80070d0:	4801      	ldr	r0, [pc, #4]	; (80070d8 <__malloc_lock+0x8>)
 80070d2:	f000 b811 	b.w	80070f8 <__retarget_lock_acquire_recursive>
 80070d6:	bf00      	nop
 80070d8:	2000418c 	.word	0x2000418c

080070dc <__malloc_unlock>:
 80070dc:	4801      	ldr	r0, [pc, #4]	; (80070e4 <__malloc_unlock+0x8>)
 80070de:	f000 b80c 	b.w	80070fa <__retarget_lock_release_recursive>
 80070e2:	bf00      	nop
 80070e4:	2000418c 	.word	0x2000418c

080070e8 <_malloc_usable_size_r>:
 80070e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070ec:	1f18      	subs	r0, r3, #4
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	bfbc      	itt	lt
 80070f2:	580b      	ldrlt	r3, [r1, r0]
 80070f4:	18c0      	addlt	r0, r0, r3
 80070f6:	4770      	bx	lr

080070f8 <__retarget_lock_acquire_recursive>:
 80070f8:	4770      	bx	lr

080070fa <__retarget_lock_release_recursive>:
 80070fa:	4770      	bx	lr

080070fc <_init>:
 80070fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070fe:	bf00      	nop
 8007100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007102:	bc08      	pop	{r3}
 8007104:	469e      	mov	lr, r3
 8007106:	4770      	bx	lr

08007108 <_fini>:
 8007108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710a:	bf00      	nop
 800710c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800710e:	bc08      	pop	{r3}
 8007110:	469e      	mov	lr, r3
 8007112:	4770      	bx	lr
